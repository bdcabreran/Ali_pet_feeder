
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014c0  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f8  080083f8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  080083f8  080083f8  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083f8  080083f8  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08008400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  200000f0  080084f0  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  080084f0  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ebf  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d02  00000000  00000000  00035fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00039ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b92d  00000000  00000000  0003b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c6bd  00000000  00000000  00056dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096c36  00000000  00000000  00073492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010a0c8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000015b8  00000000  00000000  0010a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cac  00000000  00000000  0010b6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f20 	.word	0x08006f20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08006f20 	.word	0x08006f20

0800014c <btn_debounce_init>:
#include "event_manager_fsm.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a1e      	ldr	r2, [pc, #120]	; (80001d0 <btn_debounce_init+0x84>)
 8000158:	611a      	str	r2, [r3, #16]
    btn->down.gpio.pin  = DOWN_Pin;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2220      	movs	r2, #32
 800015e:	829a      	strh	r2, [r3, #20]
    btn->up.gpio.port = UP_GPIO_Port;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	4a1b      	ldr	r2, [pc, #108]	; (80001d0 <btn_debounce_init+0x84>)
 8000164:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2210      	movs	r2, #16
 800016a:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <btn_debounce_init+0x88>)
 8000170:	621a      	str	r2, [r3, #32]
    btn->left.gpio.pin = LEFT_Pin;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2220      	movs	r2, #32
 8000176:	849a      	strh	r2, [r3, #36]	; 0x24
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <btn_debounce_init+0x88>)
 800017c:	631a      	str	r2, [r3, #48]	; 0x30
    btn->right.gpio.pin = RIGHT_Pin;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2280      	movs	r2, #128	; 0x80
 8000182:	869a      	strh	r2, [r3, #52]	; 0x34
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <btn_debounce_init+0x8c>)
 8000188:	641a      	str	r2, [r3, #64]	; 0x40
    btn->enter.gpio.pin = ENTER_Pin;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2201      	movs	r2, #1
 800018e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000192:	2305      	movs	r3, #5
 8000194:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 800019a:	2300      	movs	r3, #0
 800019c:	613b      	str	r3, [r7, #16]
 800019e:	e00d      	b.n	80001bc <btn_debounce_init+0x70>
    {
        time_event_stop(&btn_ptr->debounce);
 80001a0:	697b      	ldr	r3, [r7, #20]
 80001a2:	3308      	adds	r3, #8
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 fd77 	bl	8000c98 <time_event_stop>
        btn_ptr->pressed = false;
 80001aa:	697b      	ldr	r3, [r7, #20]
 80001ac:	2200      	movs	r2, #0
 80001ae:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 80001b0:	697b      	ldr	r3, [r7, #20]
 80001b2:	3310      	adds	r3, #16
 80001b4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	3301      	adds	r3, #1
 80001ba:	613b      	str	r3, [r7, #16]
 80001bc:	7bfb      	ldrb	r3, [r7, #15]
 80001be:	693a      	ldr	r2, [r7, #16]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d3ed      	bcc.n	80001a0 <btn_debounce_init+0x54>
    }
}
 80001c4:	bf00      	nop
 80001c6:	bf00      	nop
 80001c8:	3718      	adds	r7, #24
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40011000 	.word	0x40011000
 80001d4:	40010800 	.word	0x40010800
 80001d8:	40010c00 	.word	0x40010c00

080001dc <btn_key_enter_combination>:

static btn_ev_ext_t btn_key_enter_combination(navigation_btn_t *btn)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
    if (btn->down.pressed)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	7f1b      	ldrb	r3, [r3, #28]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d022      	beq.n	8000232 <btn_key_enter_combination+0x56>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80001f6:	4619      	mov	r1, r3
 80001f8:	4610      	mov	r0, r2
 80001fa:	f004 fc1b 	bl	8004a34 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d111      	bne.n	8000228 <btn_key_enter_combination+0x4c>
        {
            if(time_event_is_active(&btn->enter.debounce))
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3348      	adds	r3, #72	; 0x48
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fd57 	bl	8000cbc <time_event_is_active>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d004      	beq.n	800021e <btn_key_enter_combination+0x42>
                time_event_stop(&btn->enter.debounce);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3348      	adds	r3, #72	; 0x48
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fd3d 	bl	8000c98 <time_event_stop>

            printf("btn down + enter pressed\r\n");
 800021e:	4843      	ldr	r0, [pc, #268]	; (800032c <btn_key_enter_combination+0x150>)
 8000220:	f006 f89e 	bl	8006360 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000224:	2307      	movs	r3, #7
 8000226:	e07c      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn down pressed\r\n");
 8000228:	4841      	ldr	r0, [pc, #260]	; (8000330 <btn_key_enter_combination+0x154>)
 800022a:	f006 f899 	bl	8006360 <puts>
            return EVT_EXT_BTN_DOWN_PRESSED;
 800022e:	2302      	movs	r3, #2
 8000230:	e077      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    if (btn->up.pressed)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	7b1b      	ldrb	r3, [r3, #12]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d022      	beq.n	8000280 <btn_key_enter_combination+0xa4>
    {
        if (HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000244:	4619      	mov	r1, r3
 8000246:	4610      	mov	r0, r2
 8000248:	f004 fbf4 	bl	8004a34 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d111      	bne.n	8000276 <btn_key_enter_combination+0x9a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3348      	adds	r3, #72	; 0x48
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fd30 	bl	8000cbc <time_event_is_active>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d004      	beq.n	800026c <btn_key_enter_combination+0x90>
                time_event_stop(&btn->enter.debounce);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3348      	adds	r3, #72	; 0x48
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fd16 	bl	8000c98 <time_event_stop>

            printf("btn up + enter pressed\r\n");
 800026c:	4831      	ldr	r0, [pc, #196]	; (8000334 <btn_key_enter_combination+0x158>)
 800026e:	f006 f877 	bl	8006360 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000272:	2306      	movs	r3, #6
 8000274:	e055      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn up pressed\r\n");
 8000276:	4830      	ldr	r0, [pc, #192]	; (8000338 <btn_key_enter_combination+0x15c>)
 8000278:	f006 f872 	bl	8006360 <puts>
            return EVT_EXT_BTN_UP_PRESSED;
 800027c:	2301      	movs	r3, #1
 800027e:	e050      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    if (btn->left.pressed)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000286:	2b00      	cmp	r3, #0
 8000288:	d022      	beq.n	80002d0 <btn_key_enter_combination+0xf4>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000294:	4619      	mov	r1, r3
 8000296:	4610      	mov	r0, r2
 8000298:	f004 fbcc 	bl	8004a34 <HAL_GPIO_ReadPin>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <btn_key_enter_combination+0xea>
        {
            if (time_event_is_active(&btn->enter.debounce))
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3348      	adds	r3, #72	; 0x48
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fd08 	bl	8000cbc <time_event_is_active>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d004      	beq.n	80002bc <btn_key_enter_combination+0xe0>
                time_event_stop(&btn->enter.debounce);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3348      	adds	r3, #72	; 0x48
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fcee 	bl	8000c98 <time_event_stop>
            
            printf("btn left + enter pressed\r\n");
 80002bc:	481f      	ldr	r0, [pc, #124]	; (800033c <btn_key_enter_combination+0x160>)
 80002be:	f006 f84f 	bl	8006360 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 80002c2:	2308      	movs	r3, #8
 80002c4:	e02d      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else 
        {
            printf("btn left pressed\r\n");
 80002c6:	481e      	ldr	r0, [pc, #120]	; (8000340 <btn_key_enter_combination+0x164>)
 80002c8:	f006 f84a 	bl	8006360 <puts>
            return EVT_EXT_BTN_LEFT_PRESSED;
 80002cc:	2303      	movs	r3, #3
 80002ce:	e028      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    if (btn->right.pressed)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d022      	beq.n	8000320 <btn_key_enter_combination+0x144>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80002e4:	4619      	mov	r1, r3
 80002e6:	4610      	mov	r0, r2
 80002e8:	f004 fba4 	bl	8004a34 <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d111      	bne.n	8000316 <btn_key_enter_combination+0x13a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3348      	adds	r3, #72	; 0x48
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fce0 	bl	8000cbc <time_event_is_active>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d004      	beq.n	800030c <btn_key_enter_combination+0x130>
                time_event_stop(&btn->enter.debounce);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3348      	adds	r3, #72	; 0x48
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fcc6 	bl	8000c98 <time_event_stop>
            
            printf("btn right + enter pressed\r\n");
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <btn_key_enter_combination+0x168>)
 800030e:	f006 f827 	bl	8006360 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000312:	2309      	movs	r3, #9
 8000314:	e005      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn right pressed\r\n");
 8000316:	480c      	ldr	r0, [pc, #48]	; (8000348 <btn_key_enter_combination+0x16c>)
 8000318:	f006 f822 	bl	8006360 <puts>
            return EVT_EXT_BTN_RIGHT_PRESSED;
 800031c:	2304      	movs	r3, #4
 800031e:	e000      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    return EVT_EXT_BTN_INVALID;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	08006f38 	.word	0x08006f38
 8000330:	08006f54 	.word	0x08006f54
 8000334:	08006f68 	.word	0x08006f68
 8000338:	08006f80 	.word	0x08006f80
 800033c:	08006f90 	.word	0x08006f90
 8000340:	08006fac 	.word	0x08006fac
 8000344:	08006fc0 	.word	0x08006fc0
 8000348:	08006fdc 	.word	0x08006fdc

0800034c <btn_enter_key_combination>:


static btn_ev_ext_t btn_enter_key_combination(navigation_btn_t *btn)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
    if (btn->enter.pressed)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800035a:	2b00      	cmp	r3, #0
 800035c:	d078      	beq.n	8000450 <btn_enter_key_combination+0x104>
    {
        if (HAL_GPIO_ReadPin(btn->down.gpio.port, btn->down.gpio.pin) == GPIO_PIN_RESET)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	691a      	ldr	r2, [r3, #16]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	8a9b      	ldrh	r3, [r3, #20]
 8000366:	4619      	mov	r1, r3
 8000368:	4610      	mov	r0, r2
 800036a:	f004 fb63 	bl	8004a34 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d111      	bne.n	8000398 <btn_enter_key_combination+0x4c>
        {
            if (time_event_is_active(&btn->down.debounce))
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3318      	adds	r3, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fc9f 	bl	8000cbc <time_event_is_active>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d004      	beq.n	800038e <btn_enter_key_combination+0x42>
                time_event_stop(&btn->down.debounce);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3318      	adds	r3, #24
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fc85 	bl	8000c98 <time_event_stop>
            printf("btn enter + down pressed\r\n");
 800038e:	4833      	ldr	r0, [pc, #204]	; (800045c <btn_enter_key_combination+0x110>)
 8000390:	f005 ffe6 	bl	8006360 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000394:	2307      	movs	r3, #7
 8000396:	e05c      	b.n	8000452 <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->up.gpio.port, btn->up.gpio.pin) == GPIO_PIN_RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	889b      	ldrh	r3, [r3, #4]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4610      	mov	r0, r2
 80003a4:	f004 fb46 	bl	8004a34 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d111      	bne.n	80003d2 <btn_enter_key_combination+0x86>
        {
            if (time_event_is_active(&btn->up.debounce))
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3308      	adds	r3, #8
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fc82 	bl	8000cbc <time_event_is_active>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d004      	beq.n	80003c8 <btn_enter_key_combination+0x7c>
                time_event_stop(&btn->up.debounce);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3308      	adds	r3, #8
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fc68 	bl	8000c98 <time_event_stop>
            printf("btn enter + up pressed\r\n");
 80003c8:	4825      	ldr	r0, [pc, #148]	; (8000460 <btn_enter_key_combination+0x114>)
 80003ca:	f005 ffc9 	bl	8006360 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 80003ce:	2306      	movs	r3, #6
 80003d0:	e03f      	b.n	8000452 <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->left.gpio.port, btn->left.gpio.pin) == GPIO_PIN_RESET)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6a1a      	ldr	r2, [r3, #32]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003da:	4619      	mov	r1, r3
 80003dc:	4610      	mov	r0, r2
 80003de:	f004 fb29 	bl	8004a34 <HAL_GPIO_ReadPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d111      	bne.n	800040c <btn_enter_key_combination+0xc0>
        {
            if (time_event_is_active(&btn->left.debounce))
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3328      	adds	r3, #40	; 0x28
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fc65 	bl	8000cbc <time_event_is_active>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <btn_enter_key_combination+0xb6>
                time_event_stop(&btn->left.debounce);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3328      	adds	r3, #40	; 0x28
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fc4b 	bl	8000c98 <time_event_stop>
            printf("btn enter + left pressed\r\n");
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <btn_enter_key_combination+0x118>)
 8000404:	f005 ffac 	bl	8006360 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000408:	2308      	movs	r3, #8
 800040a:	e022      	b.n	8000452 <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->right.gpio.port, btn->right.gpio.pin) == GPIO_PIN_RESET)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000414:	4619      	mov	r1, r3
 8000416:	4610      	mov	r0, r2
 8000418:	f004 fb0c 	bl	8004a34 <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d111      	bne.n	8000446 <btn_enter_key_combination+0xfa>
        {
            if (time_event_is_active(&btn->right.debounce))
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3338      	adds	r3, #56	; 0x38
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fc48 	bl	8000cbc <time_event_is_active>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d004      	beq.n	800043c <btn_enter_key_combination+0xf0>
                time_event_stop(&btn->right.debounce);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3338      	adds	r3, #56	; 0x38
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fc2e 	bl	8000c98 <time_event_stop>
            printf("btn enter + right pressed\r\n");
 800043c:	480a      	ldr	r0, [pc, #40]	; (8000468 <btn_enter_key_combination+0x11c>)
 800043e:	f005 ff8f 	bl	8006360 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000442:	2309      	movs	r3, #9
 8000444:	e005      	b.n	8000452 <btn_enter_key_combination+0x106>
        }
        else
        {
            printf("btn enter pressed\r\n");
 8000446:	4809      	ldr	r0, [pc, #36]	; (800046c <btn_enter_key_combination+0x120>)
 8000448:	f005 ff8a 	bl	8006360 <puts>
            return EVT_EXT_BTN_ENTER_PRESSED;
 800044c:	2305      	movs	r3, #5
 800044e:	e000      	b.n	8000452 <btn_enter_key_combination+0x106>
        }
    }
    return EVT_EXT_BTN_INVALID;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	08006ff0 	.word	0x08006ff0
 8000460:	0800700c 	.word	0x0800700c
 8000464:	08007024 	.word	0x08007024
 8000468:	08007040 	.word	0x08007040
 800046c:	0800705c 	.word	0x0800705c

08000470 <btn_debounce_run>:


void btn_debounce_run(navigation_btn_t *btn)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b09c      	sub	sp, #112	; 0x70
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000478:	2305      	movs	r3, #5
 800047a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    push_button_t *btn_ptr = &btn->up;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	66fb      	str	r3, [r7, #108]	; 0x6c

    for (size_t i = 0; i < btn_cnt; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	66bb      	str	r3, [r7, #104]	; 0x68
 8000486:	e025      	b.n	80004d4 <btn_debounce_run+0x64>
    {
        time_event_update(&btn_ptr->debounce);
 8000488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800048a:	3308      	adds	r3, #8
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fc20 	bl	8000cd2 <time_event_update>
        if(time_event_is_raised(&btn_ptr->debounce))
 8000492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000494:	3308      	adds	r3, #8
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fc3c 	bl	8000d14 <time_event_is_raised>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d012      	beq.n	80004c8 <btn_debounce_run+0x58>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 80004a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004a8:	889b      	ldrh	r3, [r3, #4]
 80004aa:	4619      	mov	r1, r3
 80004ac:	4610      	mov	r0, r2
 80004ae:	f004 fac1 	bl	8004a34 <HAL_GPIO_ReadPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d102      	bne.n	80004be <btn_debounce_run+0x4e>
                btn_ptr->pressed = true;
 80004b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004ba:	2201      	movs	r2, #1
 80004bc:	731a      	strb	r2, [r3, #12]
            
            time_event_stop(&btn_ptr->debounce);
 80004be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004c0:	3308      	adds	r3, #8
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fbe8 	bl	8000c98 <time_event_stop>
        }
        btn_ptr++;
 80004c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004ca:	3310      	adds	r3, #16
 80004cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 80004ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80004d0:	3301      	adds	r3, #1
 80004d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80004d4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80004d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80004da:	429a      	cmp	r2, r3
 80004dc:	d3d4      	bcc.n	8000488 <btn_debounce_run+0x18>
    }

    /*Notify events*/
    event_t event;
    event.header.name = EVT_EXT_BTN_INVALID;
 80004de:	2300      	movs	r3, #0
 80004e0:	733b      	strb	r3, [r7, #12]
    event.header.fsm_src = BTN_FSM;
 80004e2:	2301      	movs	r3, #1
 80004e4:	737b      	strb	r3, [r7, #13]
    event.header.fsm_dst = UI_FSM;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73bb      	strb	r3, [r7, #14]
    event.header.payload_len = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	73fb      	strb	r3, [r7, #15]

    event.header.name = btn_key_enter_combination(btn);
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f7ff fe74 	bl	80001dc <btn_key_enter_combination>
 80004f4:	4603      	mov	r3, r0
 80004f6:	733b      	strb	r3, [r7, #12]
    if(event.header.name != EVT_EXT_BTN_INVALID)
 80004f8:	7b3b      	ldrb	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d008      	beq.n	8000510 <btn_debounce_run+0xa0>
        event_manager_write(event_manager_fsm_get(), &event);
 80004fe:	f000 fc4b 	bl	8000d98 <event_manager_fsm_get>
 8000502:	4602      	mov	r2, r0
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4619      	mov	r1, r3
 800050a:	4610      	mov	r0, r2
 800050c:	f000 fd11 	bl	8000f32 <event_manager_write>

    event.header.name = btn_enter_key_combination(btn);
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f7ff ff1b 	bl	800034c <btn_enter_key_combination>
 8000516:	4603      	mov	r3, r0
 8000518:	733b      	strb	r3, [r7, #12]
    if(event.header.name != EVT_EXT_BTN_INVALID)
 800051a:	7b3b      	ldrb	r3, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d008      	beq.n	8000532 <btn_debounce_run+0xc2>
        event_manager_write(event_manager_fsm_get(), &event);
 8000520:	f000 fc3a 	bl	8000d98 <event_manager_fsm_get>
 8000524:	4602      	mov	r2, r0
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	4619      	mov	r1, r3
 800052c:	4610      	mov	r0, r2
 800052e:	f000 fd00 	bl	8000f32 <event_manager_write>

    btn_ptr = &btn->up;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000536:	2300      	movs	r3, #0
 8000538:	667b      	str	r3, [r7, #100]	; 0x64
 800053a:	e008      	b.n	800054e <btn_debounce_run+0xde>
    {
        btn_ptr->pressed = false;
 800053c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800053e:	2200      	movs	r2, #0
 8000540:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000544:	3310      	adds	r3, #16
 8000546:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800054a:	3301      	adds	r3, #1
 800054c:	667b      	str	r3, [r7, #100]	; 0x64
 800054e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000552:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000554:	429a      	cmp	r2, r3
 8000556:	d3f1      	bcc.n	800053c <btn_debounce_run+0xcc>
    }
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3770      	adds	r7, #112	; 0x70
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm_src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm_dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->evt);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->header.payload_len);

    if(evt->header.payload_len)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	78db      	ldrb	r3, [r3, #3]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d007      	beq.n	8000582 <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->payload.buff, evt->header.payload_len);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	1d19      	adds	r1, r3, #4
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	78db      	ldrb	r3, [r3, #3]
 800057a:	461a      	mov	r2, r3
 800057c:	2058      	movs	r0, #88	; 0x58
 800057e:	f000 f917 	bl	80007b0 <print_buffer>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	4613      	mov	r3, r2
 8000596:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4619      	mov	r1, r3
 800059c:	68b8      	ldr	r0, [r7, #8]
 800059e:	f000 f9d9 	bl	8000954 <ring_buffer_init>
 80005a2:	4602      	mov	r2, r0
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2200      	movs	r2, #0
 80005ac:	711a      	strb	r2, [r3, #4]
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <event_queue_write>:

uint8_t event_queue_write(event_queue_t *queue, event_t *evt)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t write_st = RING_BUFF_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]
    evt_queue_dbg("writing event \r\n");
    event_print_info(evt);
 80005da:	6838      	ldr	r0, [r7, #0]
 80005dc:	f7ff ffc1 	bl	8000562 <event_print_info>

    write_st = ring_buffer_write(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6839      	ldr	r1, [r7, #0]
 80005e6:	2204      	movs	r2, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fac9 	bl	8000b80 <ring_buffer_write>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
    if (evt->header.payload_len)
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	78db      	ldrb	r3, [r3, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00a      	beq.n	8000610 <event_queue_write+0x44>
        write_st = ring_buffer_write(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1d19      	adds	r1, r3, #4
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	461a      	mov	r2, r3
 8000608:	f000 faba 	bl	8000b80 <ring_buffer_write>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]

    if (write_st == RING_BUFF_OK)
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <event_queue_write+0x58>
        queue->pending_cnt++;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	711a      	strb	r2, [r3, #4]
 8000622:	e00c      	b.n	800063e <event_queue_write+0x72>
    else
        printf_dbg_error("could not write on evt queue\r\n");
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <event_queue_write+0x7c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fe13 	bl	8006254 <iprintf>
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <event_queue_write+0x80>)
 8000630:	f005 fe96 	bl	8006360 <puts>
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <event_queue_write+0x7c>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fe0b 	bl	8006254 <iprintf>

    return write_st;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000010 	.word	0x20000010
 800064c:	08007070 	.word	0x08007070

08000650 <event_queue_read>:

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffa9 	bl	80005b6 <event_queue_get_pending>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d031      	beq.n	80006ce <event_queue_read+0x7e>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6839      	ldr	r1, [r7, #0]
 8000670:	2204      	movs	r2, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fac4 	bl	8000c00 <ring_buffer_read>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
        if (evt->header.payload_len)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00a      	beq.n	800069a <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	1d19      	adds	r1, r3, #4
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	461a      	mov	r2, r3
 8000692:	f000 fab5 	bl	8000c00 <ring_buffer_read>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d109      	bne.n	80006b4 <event_queue_read+0x64>
        {
            queue->pending_cnt--;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f7ff ff58 	bl	8000562 <event_print_info>
 80006b2:	e00c      	b.n	80006ce <event_queue_read+0x7e>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <event_queue_read+0x88>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 fdcb 	bl	8006254 <iprintf>
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <event_queue_read+0x8c>)
 80006c0:	f005 fe4e 	bl	8006360 <puts>
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <event_queue_read+0x88>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fdc3 	bl	8006254 <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000010 	.word	0x20000010
 80006dc:	08007090 	.word	0x08007090

080006e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d013      	beq.n	8000720 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000700:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000708:	e000      	b.n	800070c <ITM_SendChar+0x2c>
    {
      __NOP();
 800070a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800070c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000716:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000720:	687b      	ldr	r3, [r7, #4]
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <itm_enable>:

#include "itm_dbg.h"
#include "stdio.h"

void itm_enable(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <itm_enable+0x2c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a08      	ldr	r2, [pc, #32]	; (8000758 <itm_enable+0x2c>)
 8000736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800073a:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 800073c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000740:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000744:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	e000edfc 	.word	0xe000edfc

0800075c <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e009      	b.n	8000780 <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ffb3 	bl	80006e0 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf1      	blt.n	800076c <itm_write+0x10>
	}
	return len;
 8000788:	683b      	ldr	r3, [r7, #0]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f7ff ffdb 	bl	800075c <itm_write>
 80007a6:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 80007c0:	481a      	ldr	r0, [pc, #104]	; (800082c <print_buffer+0x7c>)
 80007c2:	f005 fdcd 	bl	8006360 <puts>
	for (size_t i = 0; i < len; i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e023      	b.n	8000814 <print_buffer+0x64>
	{
		switch (format)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b43      	cmp	r3, #67	; 0x43
 80007d0:	d002      	beq.n	80007d8 <print_buffer+0x28>
 80007d2:	2b58      	cmp	r3, #88	; 0x58
 80007d4:	d009      	beq.n	80007ea <print_buffer+0x3a>
 80007d6:	e011      	b.n	80007fc <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4813      	ldr	r0, [pc, #76]	; (8000830 <print_buffer+0x80>)
 80007e4:	f005 fd36 	bl	8006254 <iprintf>
 80007e8:	e011      	b.n	800080e <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <print_buffer+0x84>)
 80007f6:	f005 fd2d 	bl	8006254 <iprintf>
 80007fa:	e008      	b.n	800080e <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <print_buffer+0x84>)
 8000808:	f005 fd24 	bl	8006254 <iprintf>
 800080c:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d3d7      	bcc.n	80007cc <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <print_buffer+0x88>)
 800081e:	f005 fd9f 	bl	8006360 <puts>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	08007110 	.word	0x08007110
 8000830:	0800711c 	.word	0x0800711c
 8000834:	08007124 	.word	0x08007124
 8000838:	0800712c 	.word	0x0800712c

0800083c <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d105      	bne.n	8000856 <head_ptr_advance+0x1a>
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <head_ptr_advance+0x74>)
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <head_ptr_advance+0x78>)
 800084e:	2126      	movs	r1, #38	; 0x26
 8000850:	4819      	ldr	r0, [pc, #100]	; (80008b8 <head_ptr_advance+0x7c>)
 8000852:	f005 f8cb 	bl	80059ec <__assert_func>

    if (rb->full)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7c1b      	ldrb	r3, [r3, #16]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	3301      	adds	r3, #1
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	68d2      	ldr	r2, [r2, #12]
 8000868:	fbb3 f1f2 	udiv	r1, r3, r2
 800086c:	fb01 f202 	mul.w	r2, r1, r2
 8000870:	1a9a      	subs	r2, r3, r2
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	3301      	adds	r3, #1
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	68d2      	ldr	r2, [r2, #12]
 8000880:	fbb3 f1f2 	udiv	r1, r3, r2
 8000884:	fb01 f202 	mul.w	r2, r1, r2
 8000888:	1a9a      	subs	r2, r3, r2
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	429a      	cmp	r2, r3
 8000898:	bf0c      	ite	eq
 800089a:	2301      	moveq	r3, #1
 800089c:	2300      	movne	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	741a      	strb	r2, [r3, #16]
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	08007130 	.word	0x08007130
 80008b4:	080081d4 	.word	0x080081d4
 80008b8:	08007134 	.word	0x08007134

080008bc <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    assert(rb);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d105      	bne.n	80008d6 <tail_ptr_retreat+0x1a>
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <tail_ptr_retreat+0x40>)
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <tail_ptr_retreat+0x44>)
 80008ce:	2139      	movs	r1, #57	; 0x39
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <tail_ptr_retreat+0x48>)
 80008d2:	f005 f88b 	bl	80059ec <__assert_func>

    rb->full = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	3301      	adds	r3, #1
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68d2      	ldr	r2, [r2, #12]
 80008e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80008ea:	fb01 f202 	mul.w	r2, r1, r2
 80008ee:	1a9a      	subs	r2, r3, r2
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	609a      	str	r2, [r3, #8]
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	08007130 	.word	0x08007130
 8000900:	080081e8 	.word	0x080081e8
 8000904:	08007134 	.word	0x08007134

08000908 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d105      	bne.n	8000922 <is_ring_buffer_empty+0x1a>
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <is_ring_buffer_empty+0x40>)
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <is_ring_buffer_empty+0x44>)
 800091a:	214e      	movs	r1, #78	; 0x4e
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <is_ring_buffer_empty+0x48>)
 800091e:	f005 f865 	bl	80059ec <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7c1b      	ldrb	r3, [r3, #16]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d107      	bne.n	800093a <is_ring_buffer_empty+0x32>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	429a      	cmp	r2, r3
 8000934:	d101      	bne.n	800093a <is_ring_buffer_empty+0x32>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <is_ring_buffer_empty+0x34>
 800093a:	2300      	movs	r3, #0
 800093c:	b2db      	uxtb	r3, r3
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08007130 	.word	0x08007130
 800094c:	080081fc 	.word	0x080081fc
 8000950:	08007134 	.word	0x08007134

08000954 <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <ring_buffer_init+0x16>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d105      	bne.n	8000976 <ring_buffer_init+0x22>
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <ring_buffer_init+0x74>)
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <ring_buffer_init+0x78>)
 800096e:	2169      	movs	r1, #105	; 0x69
 8000970:	4817      	ldr	r0, [pc, #92]	; (80009d0 <ring_buffer_init+0x7c>)
 8000972:	f005 f83b 	bl	80059ec <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 8000976:	2014      	movs	r0, #20
 8000978:	f005 f892 	bl	8005aa0 <malloc>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
    assert(rb);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d105      	bne.n	8000992 <ring_buffer_init+0x3e>
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <ring_buffer_init+0x80>)
 8000988:	4a10      	ldr	r2, [pc, #64]	; (80009cc <ring_buffer_init+0x78>)
 800098a:	216c      	movs	r1, #108	; 0x6c
 800098c:	4810      	ldr	r0, [pc, #64]	; (80009d0 <ring_buffer_init+0x7c>)
 800098e:	f005 f82d 	bl	80059ec <__assert_func>

    rb->buffer = buffer;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f000 f81c 	bl	80009dc <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff ffaf 	bl	8000908 <is_ring_buffer_empty>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d105      	bne.n	80009bc <ring_buffer_init+0x68>
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <ring_buffer_init+0x84>)
 80009b2:	4a06      	ldr	r2, [pc, #24]	; (80009cc <ring_buffer_init+0x78>)
 80009b4:	2172      	movs	r1, #114	; 0x72
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <ring_buffer_init+0x7c>)
 80009b8:	f005 f818 	bl	80059ec <__assert_func>

    return rb;
 80009bc:	68fb      	ldr	r3, [r7, #12]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	08007160 	.word	0x08007160
 80009cc:	08008214 	.word	0x08008214
 80009d0:	08007134 	.word	0x08007134
 80009d4:	08007130 	.word	0x08007130
 80009d8:	08007170 	.word	0x08007170

080009dc <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    assert(rb);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <ring_buffer_reset+0x1a>
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <ring_buffer_reset+0x34>)
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <ring_buffer_reset+0x38>)
 80009ee:	2189      	movs	r1, #137	; 0x89
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <ring_buffer_reset+0x3c>)
 80009f2:	f004 fffb 	bl	80059ec <__assert_func>
    rb->head = 0;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	741a      	strb	r2, [r3, #16]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	08007130 	.word	0x08007130
 8000a14:	08008228 	.word	0x08008228
 8000a18:	08007134 	.word	0x08007134

08000a1c <ring_buffer_get_data_len>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return number of bytes in buffer.
 */
size_t ring_buffer_get_data_len(ring_buffer_handle_t rb)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <ring_buffer_get_data_len+0x1a>
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <ring_buffer_get_data_len+0x60>)
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <ring_buffer_get_data_len+0x64>)
 8000a2e:	2197      	movs	r1, #151	; 0x97
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <ring_buffer_get_data_len+0x68>)
 8000a32:	f004 ffdb 	bl	80059ec <__assert_func>

    size_t size = rb->length;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	60fb      	str	r3, [r7, #12]

    if (!rb->full)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7c1b      	ldrb	r3, [r3, #16]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d115      	bne.n	8000a70 <ring_buffer_get_data_len+0x54>
    {
        if (rb->head >= rb->tail)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d306      	bcc.n	8000a5e <ring_buffer_get_data_len+0x42>
        {
            size = (rb->head - rb->tail);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e008      	b.n	8000a70 <ring_buffer_get_data_len+0x54>
        }
        else
        {
            size = (rb->length + rb->head - rb->tail);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68da      	ldr	r2, [r3, #12]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	441a      	add	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	60fb      	str	r3, [r7, #12]
        }
    }

    return size;
 8000a70:	68fb      	ldr	r3, [r7, #12]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08007130 	.word	0x08007130
 8000a80:	0800823c 	.word	0x0800823c
 8000a84:	08007134 	.word	0x08007134

08000a88 <ring_buffer_get_free_space>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return the number of bytes available in ring buffer 
 */
size_t ring_buffer_get_free_space(ring_buffer_handle_t rb)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d105      	bne.n	8000aa2 <ring_buffer_get_free_space+0x1a>
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <ring_buffer_get_free_space+0x30>)
 8000a98:	4a08      	ldr	r2, [pc, #32]	; (8000abc <ring_buffer_get_free_space+0x34>)
 8000a9a:	21be      	movs	r1, #190	; 0xbe
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <ring_buffer_get_free_space+0x38>)
 8000a9e:	f004 ffa5 	bl	80059ec <__assert_func>
    return (rb->length - ring_buffer_get_data_len(rb));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68dc      	ldr	r4, [r3, #12]
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffb8 	bl	8000a1c <ring_buffer_get_data_len>
 8000aac:	4603      	mov	r3, r0
 8000aae:	1ae3      	subs	r3, r4, r3
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	08007130 	.word	0x08007130
 8000abc:	08008258 	.word	0x08008258
 8000ac0:	08007134 	.word	0x08007134

08000ac4 <ring_buffer_put>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint8_t data)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
    assert(rb && rb->buffer);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <ring_buffer_put+0x1a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <ring_buffer_put+0x26>
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <ring_buffer_put+0x44>)
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <ring_buffer_put+0x48>)
 8000ae2:	21ca      	movs	r1, #202	; 0xca
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <ring_buffer_put+0x4c>)
 8000ae6:	f004 ff81 	bl	80059ec <__assert_func>

    rb->buffer[rb->head] = data;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	78fa      	ldrb	r2, [r7, #3]
 8000af6:	701a      	strb	r2, [r3, #0]

    head_ptr_advance(rb);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fe9f 	bl	800083c <head_ptr_advance>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	0800718c 	.word	0x0800718c
 8000b0c:	08008274 	.word	0x08008274
 8000b10:	08007134 	.word	0x08007134

08000b14 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d006      	beq.n	8000b32 <ring_buffer_get+0x1e>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <ring_buffer_get+0x1e>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d105      	bne.n	8000b3e <ring_buffer_get+0x2a>
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <ring_buffer_get+0x60>)
 8000b34:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <ring_buffer_get+0x64>)
 8000b36:	21da      	movs	r1, #218	; 0xda
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <ring_buffer_get+0x68>)
 8000b3a:	f004 ff57 	bl	80059ec <__assert_func>

    int r = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fee0 	bl	8000908 <is_ring_buffer_empty>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10c      	bne.n	8000b68 <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	4413      	add	r3, r2
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff feac 	bl	80008bc <tail_ptr_retreat>

        r = 1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	b2db      	uxtb	r3, r3
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	080071a0 	.word	0x080071a0
 8000b78:	08008284 	.word	0x08008284
 8000b7c:	08007134 	.word	0x08007134

08000b80 <ring_buffer_write>:
 * @param data   pointer to a buffer that contains the data to be written in buffer
 * @param data_len number of bytes of data to be written in buffer
 * @return ring_buffer_st_t  return status of buffer.
 */
ring_buffer_st_t ring_buffer_write(ring_buffer_handle_t rb, uint8_t *data, uint8_t data_len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
    assert(rb && rb->buffer);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <ring_buffer_write+0x1c>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d105      	bne.n	8000ba8 <ring_buffer_write+0x28>
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <ring_buffer_write+0x74>)
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <ring_buffer_write+0x78>)
 8000ba0:	21f3      	movs	r1, #243	; 0xf3
 8000ba2:	4816      	ldr	r0, [pc, #88]	; (8000bfc <ring_buffer_write+0x7c>)
 8000ba4:	f004 ff22 	bl	80059ec <__assert_func>

    if (rb->full)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	7c1b      	ldrb	r3, [r3, #16]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <ring_buffer_write+0x34>
    {
        return RING_BUFF_FULL;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e01a      	b.n	8000bea <ring_buffer_write+0x6a>
    }

    if (ring_buffer_get_free_space(rb) < data_len)
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff ff67 	bl	8000a88 <ring_buffer_get_free_space>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d201      	bcs.n	8000bc6 <ring_buffer_write+0x46>
    {
        return RING_BUFF_NOT_ENOUGH_SPACE;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	e011      	b.n	8000bea <ring_buffer_write+0x6a>
    }
    else
    {
        size_t data_counter = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]

        while (data_counter < data_len)
 8000bca:	e009      	b.n	8000be0 <ring_buffer_write+0x60>
        {
            ring_buffer_put(rb, data[data_counter++]);
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	617a      	str	r2, [r7, #20]
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff ff72 	bl	8000ac4 <ring_buffer_put>
        while (data_counter < data_len)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d3f1      	bcc.n	8000bcc <ring_buffer_write+0x4c>
        }

        return RING_BUFF_OK;
 8000be8:	2300      	movs	r3, #0
    }
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	0800718c 	.word	0x0800718c
 8000bf8:	08008294 	.word	0x08008294
 8000bfc:	08007134 	.word	0x08007134

08000c00 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <ring_buffer_read+0x20>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <ring_buffer_read+0x20>
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d106      	bne.n	8000c2e <ring_buffer_read+0x2e>
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <ring_buffer_read+0x64>)
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <ring_buffer_read+0x68>)
 8000c24:	f240 1115 	movw	r1, #277	; 0x115
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <ring_buffer_read+0x6c>)
 8000c2a:	f004 fedf 	bl	80059ec <__assert_func>

    size_t data_counter = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 8000c32:	e00d      	b.n	8000c50 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	617a      	str	r2, [r7, #20]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff ff67 	bl	8000b14 <ring_buffer_get>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e004      	b.n	8000c5a <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3ed      	bcc.n	8000c34 <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	080071bc 	.word	0x080071bc
 8000c68:	080082a8 	.word	0x080082a8
 8000c6c:	08007134 	.word	0x08007134

08000c70 <time_event_start>:
#include <assert.h>

bool volatile pending_time_update = false;

void time_event_start(time_event_t *time_event, const uint16_t time_ms)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
    time_event->tick_cnt = time_ms;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	801a      	strh	r2, [r3, #0]
    time_event->active = true;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	70da      	strb	r2, [r3, #3]
}   
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    time_event->active = false;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	70da      	strb	r2, [r3, #3]
    time_event->tick_cnt = 0;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	801a      	strh	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <time_event_is_active>:

bool time_event_is_active(time_event_t *time_event)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
    return time_event->active;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	789b      	ldrb	r3, [r3, #2]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <time_event_update>:

bool time_event_update(time_event_t *time_event)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
    if (time_event->active == true)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d012      	beq.n	8000d08 <time_event_update+0x36>
    {
        if (time_event->tick_cnt > 0)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <time_event_update+0x24>
            time_event->tick_cnt--;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	801a      	strh	r2, [r3, #0]

        if(!time_event->tick_cnt)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <time_event_update+0x32>
            time_event->raised = true;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	70da      	strb	r2, [r3, #3]
        
        return true;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <time_event_update+0x38>
    }
    return false;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <time_event_is_raised>:

bool time_event_is_raised(time_event_t *time_event)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	78db      	ldrb	r3, [r3, #3]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
	...

08000d2c <time_event_set_pending_update>:

void time_event_set_pending_update(bool status)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <time_event_set_pending_update+0x1c>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	7013      	strb	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000015c 	.word	0x2000015c

08000d4c <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    return pending_time_update;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <time_event_get_pending_update+0x14>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000015c 	.word	0x2000015c

08000d64 <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ffdf 	bl	8000d2c <time_event_set_pending_update>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8000d78:	f7ff ffe8 	bl	8000d4c <time_event_get_pending_update>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <time_events_poll_update+0x1a>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <time_events_poll_update+0x20>)
 8000d84:	f7ff fb74 	bl	8000470 <btn_debounce_run>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ffcf 	bl	8000d2c <time_event_set_pending_update>
    }
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000010c 	.word	0x2000010c

08000d98 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <event_manager_fsm_get+0x10>)
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000228 	.word	0x20000228

08000dac <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	705a      	strb	r2, [r3, #1]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d002      	beq.n	8000de4 <event_manager_fsm_run+0x16>
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d004      	beq.n	8000dec <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 8000de2:	e007      	b.n	8000df4 <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f84d 	bl	8000e84 <wait_event_on_react>
 8000dea:	e003      	b.n	8000df4 <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f891 	bl	8000f14 <notify_event_on_react>
 8000df2:	bf00      	nop
    }
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3358      	adds	r3, #88	; 0x58
 8000e08:	22c8      	movs	r2, #200	; 0xc8
 8000e0a:	4905      	ldr	r1, [pc, #20]	; (8000e20 <event_manager_fsm_init+0x24>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fbbc 	bl	800058a <event_queue_init>
    enter_seq_wait_event(handle);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f806 	bl	8000e24 <enter_seq_wait_event>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000160 	.word	0x20000160

08000e24 <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffbc 	bl	8000dac <fsm_set_next_state>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4610      	mov	r0, r2
 8000e52:	f7ff fbfd 	bl	8000650 <event_queue_read>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3358      	adds	r3, #88	; 0x58
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fba3 	bl	80005b6 <event_queue_get_pending>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	705a      	strb	r2, [r3, #1]
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	785b      	ldrb	r3, [r3, #1]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ffcf 	bl	8000e3c <exit_action_wait_event>
        enter_seq_notify_event(handle);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f810 	bl	8000ec4 <enter_seq_notify_event>
 8000ea4:	e001      	b.n	8000eaa <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffd1 	bl	8000e5e <during_action_wait_event>
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 8000ecc:	2102      	movs	r1, #2
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff6c 	bl	8000dac <fsm_set_next_state>
    entry_action_notify_event(handle);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 f804 	bl	8000ee2 <entry_action_notify_event>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
    event_manager_dbg("\t notify evt = [0x%X], from [0x%X] to [0x%X]\r\n",
                 handle->iface.event.header.event,
                 handle->iface.event.header.fsm_src,
                 handle->iface.event.header.fsm_dst);

    switch (handle->iface.event.header.fsm_dst)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	799b      	ldrb	r3, [r3, #6]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d108      	bne.n	8000f04 <entry_action_notify_event+0x22>
    {
        case UI_FSM:
        {
            ui_fsm_set_ext_event(ui_fsm_get(), &handle->iface.event);
 8000ef2:	f000 fc2f 	bl	8001754 <ui_fsm_get>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3304      	adds	r3, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4610      	mov	r0, r2
 8000f00:	f000 fc76 	bl	80017f0 <ui_fsm_set_ext_event>
        }
    
    default:
        break;
 8000f04:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	705a      	strb	r2, [r3, #1]
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d102      	bne.n	8000f2a <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff7d 	bl	8000e24 <enter_seq_wait_event>
    }
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <event_manager_write>:

//------------------ Event Manager Function Definition ---------------------------------------//

uint8_t event_manager_write(event_manager_handle_t handle, event_t *event)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
    return event_queue_write(&handle->iface.queue, event);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3358      	adds	r3, #88	; 0x58
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fb42 	bl	80005cc <event_queue_write>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <ui_win_show>:
        {"Snack 3"  , 2, 33*6}
    };


void ui_win_show(ui_window_t *win, uint16_t color, bool show)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	807b      	strh	r3, [r7, #2]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	707b      	strb	r3, [r7, #1]
    if (show == true)
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d011      	beq.n	8000f8c <ui_win_show+0x3a>
    {
        BSP_LCD_SetTextColor(color);
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fef2 	bl	8002d54 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	8818      	ldrh	r0, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8859      	ldrh	r1, [r3, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	889a      	ldrh	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	88db      	ldrh	r3, [r3, #6]
 8000f80:	f002 f86e 	bl	8003060 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 fee5 	bl	8002d54 <BSP_LCD_SetTextColor>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 8000f8a:	e010      	b.n	8000fae <ui_win_show+0x5c>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8000f8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f90:	f001 fee0 	bl	8002d54 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	8818      	ldrh	r0, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	8859      	ldrh	r1, [r3, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	889a      	ldrh	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	88db      	ldrh	r3, [r3, #6]
 8000fa4:	f002 f85c 	bl	8003060 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f001 fed3 	bl	8002d54 <BSP_LCD_SetTextColor>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <ui_feeder_config_clean>:

/////////////////////////////////// Feeder Scheduler Related Functions /////////////////////////////////////////////
static void ui_feeder_config_clean(feeder_config_t *feeder_conf)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetFont(&FEEDER_HEADER_FONT);
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <ui_feeder_config_clean+0x80>)
 8000fc2:	f001 fed7 	bl	8002d74 <BSP_LCD_SetFont>
    for (int i = 0; i < 4; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e013      	b.n	8000ff4 <ui_feeder_config_clean+0x3c>
    {
        BSP_LCD_DisplayStringAt(feeder_header[i].x, feeder_header[i].y, feeder_header[i].name, LEFT_MODE);
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <ui_feeder_config_clean+0x84>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	8898      	ldrh	r0, [r3, #4]
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <ui_feeder_config_clean+0x84>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4413      	add	r3, r2
 8000fde:	88d9      	ldrh	r1, [r3, #6]
 8000fe0:	4a16      	ldr	r2, [pc, #88]	; (800103c <ui_feeder_config_clean+0x84>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000fe8:	2303      	movs	r3, #3
 8000fea:	f001 ff19 	bl	8002e20 <BSP_LCD_DisplayStringAt>
    for (int i = 0; i < 4; i++)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	dde8      	ble.n	8000fcc <ui_feeder_config_clean+0x14>
    }

    for (int i = 0; i < FEEDER_MEALn; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	e013      	b.n	8001028 <ui_feeder_config_clean+0x70>
    {
        BSP_LCD_DisplayStringAt(feeder_meals[i].x, feeder_meals[i].y, feeder_meals[i].name, LEFT_MODE);
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <ui_feeder_config_clean+0x88>)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	8898      	ldrh	r0, [r3, #4]
 800100a:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <ui_feeder_config_clean+0x88>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	88d9      	ldrh	r1, [r3, #6]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <ui_feeder_config_clean+0x88>)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800101c:	2303      	movs	r3, #3
 800101e:	f001 feff 	bl	8002e20 <BSP_LCD_DisplayStringAt>
    for (int i = 0; i < FEEDER_MEALn; i++)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3301      	adds	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b05      	cmp	r3, #5
 800102c:	dde8      	ble.n	8001000 <ui_feeder_config_clean+0x48>
    }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	080082bc 	.word	0x080082bc
 8001040:	080082dc 	.word	0x080082dc

08001044 <ui_feeder_config_init>:

void ui_feeder_config_init(feeder_config_t *feeder_conf)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    feeder_conf->win.main.x = 1;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	801a      	strh	r2, [r3, #0]
    feeder_conf->win.main.y = 1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	805a      	strh	r2, [r3, #2]
    feeder_conf->win.main.w = 442;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800105e:	809a      	strh	r2, [r3, #4]
    feeder_conf->win.main.h = 216;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	22d8      	movs	r2, #216	; 0xd8
 8001064:	80da      	strh	r2, [r3, #6]

    for (int i = 0; i < FEEDER_MEALn; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e075      	b.n	8001158 <ui_feeder_config_init+0x114>
    {
        feeder_conf->config[i].open_time.hour.x    = feeder_conf->win.main.x + (10 + 102);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	3370      	adds	r3, #112	; 0x70
 8001072:	b298      	uxth	r0, r3
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4613      	mov	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	3310      	adds	r3, #16
 8001084:	4602      	mov	r2, r0
 8001086:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].open_time.min.x     = feeder_conf->win.main.x + (10 + 102 + 30);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	338e      	adds	r3, #142	; 0x8e
 800108e:	b298      	uxth	r0, r3
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	3318      	adds	r3, #24
 80010a0:	4602      	mov	r2, r0
 80010a2:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].open_time.am_fm.x   = feeder_conf->win.main.x + (10 + 102 + 50);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	33a2      	adds	r3, #162	; 0xa2
 80010aa:	b298      	uxth	r0, r3
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	3320      	adds	r3, #32
 80010bc:	4602      	mov	r2, r0
 80010be:	801a      	strh	r2, [r3, #0]

        feeder_conf->config[i].close_time.hour.x   = feeder_conf->win.main.x + (10 + 209);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	33db      	adds	r3, #219	; 0xdb
 80010c6:	b298      	uxth	r0, r3
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	3324      	adds	r3, #36	; 0x24
 80010d8:	4602      	mov	r2, r0
 80010da:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].close_time.min.x    = feeder_conf->win.main.x + (10 + 209 + 30);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	33f9      	adds	r3, #249	; 0xf9
 80010e2:	b298      	uxth	r0, r3
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	332c      	adds	r3, #44	; 0x2c
 80010f4:	4602      	mov	r2, r0
 80010f6:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].close_time.am_fm.x  = feeder_conf->win.main.x + (10 + 209 + 50);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8001100:	b298      	uxth	r0, r3
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	3334      	adds	r3, #52	; 0x34
 8001112:	4602      	mov	r2, r0
 8001114:	801a      	strh	r2, [r3, #0]

        feeder_conf->config[i].date.day.x        = feeder_conf->win.main.x +   (10 + 316);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 800111e:	b298      	uxth	r0, r3
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	3340      	adds	r3, #64	; 0x40
 8001130:	4602      	mov	r2, r0
 8001132:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].date.month.x      = feeder_conf->win.main.x +   (10 + 316 + 20);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 800113c:	b298      	uxth	r0, r3
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	4602      	mov	r2, r0
 8001150:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < FEEDER_MEALn; i++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b05      	cmp	r3, #5
 800115c:	dd86      	ble.n	800106c <ui_feeder_config_init+0x28>
    }

    for (int i = 0; i < FEEDER_MEALn; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	e0ab      	b.n	80012bc <ui_feeder_config_init+0x278>
    {
        feeder_conf->config[i].open_time.hour.y  = feeder_conf->win.main.y + (i+1)*(33);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	885a      	ldrh	r2, [r3, #2]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	4619      	mov	r1, r3
 8001170:	0149      	lsls	r1, r1, #5
 8001172:	440b      	add	r3, r1
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b298      	uxth	r0, r3
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3312      	adds	r3, #18
 800118a:	4602      	mov	r2, r0
 800118c:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].open_time.min.y   = feeder_conf->win.main.y + (i+1)*(33);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	885a      	ldrh	r2, [r3, #2]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3301      	adds	r3, #1
 8001196:	b29b      	uxth	r3, r3
 8001198:	4619      	mov	r1, r3
 800119a:	0149      	lsls	r1, r1, #5
 800119c:	440b      	add	r3, r1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b298      	uxth	r0, r3
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	331a      	adds	r3, #26
 80011b4:	4602      	mov	r2, r0
 80011b6:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].open_time.am_fm.y   = feeder_conf->win.main.y + (i+1)*(33);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	885a      	ldrh	r2, [r3, #2]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	0149      	lsls	r1, r1, #5
 80011c6:	440b      	add	r3, r1
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b298      	uxth	r0, r3
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	3322      	adds	r3, #34	; 0x22
 80011de:	4602      	mov	r2, r0
 80011e0:	801a      	strh	r2, [r3, #0]

        feeder_conf->config[i].close_time.hour.y = feeder_conf->win.main.y + (i+1)*(33);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	885a      	ldrh	r2, [r3, #2]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	0149      	lsls	r1, r1, #5
 80011f0:	440b      	add	r3, r1
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b298      	uxth	r0, r3
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3326      	adds	r3, #38	; 0x26
 8001208:	4602      	mov	r2, r0
 800120a:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].close_time.min.y  = feeder_conf->win.main.y + (i+1)*(33);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	885a      	ldrh	r2, [r3, #2]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3301      	adds	r3, #1
 8001214:	b29b      	uxth	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	0149      	lsls	r1, r1, #5
 800121a:	440b      	add	r3, r1
 800121c:	b29b      	uxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	b298      	uxth	r0, r3
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	332e      	adds	r3, #46	; 0x2e
 8001232:	4602      	mov	r2, r0
 8001234:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].close_time.am_fm.y  = feeder_conf->win.main.y + (i+1)*(33);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	885a      	ldrh	r2, [r3, #2]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	3301      	adds	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	0149      	lsls	r1, r1, #5
 8001244:	440b      	add	r3, r1
 8001246:	b29b      	uxth	r3, r3
 8001248:	4413      	add	r3, r2
 800124a:	b298      	uxth	r0, r3
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	3336      	adds	r3, #54	; 0x36
 800125c:	4602      	mov	r2, r0
 800125e:	801a      	strh	r2, [r3, #0]

        feeder_conf->config[i].date.day.y        = feeder_conf->win.main.y + (i+1)*(33);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	885a      	ldrh	r2, [r3, #2]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	3301      	adds	r3, #1
 8001268:	b29b      	uxth	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	0149      	lsls	r1, r1, #5
 800126e:	440b      	add	r3, r1
 8001270:	b29b      	uxth	r3, r3
 8001272:	4413      	add	r3, r2
 8001274:	b298      	uxth	r0, r3
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	3342      	adds	r3, #66	; 0x42
 8001286:	4602      	mov	r2, r0
 8001288:	801a      	strh	r2, [r3, #0]
        feeder_conf->config[i].date.month.y      = feeder_conf->win.main.y + (i+1)*(33);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	885a      	ldrh	r2, [r3, #2]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	3301      	adds	r3, #1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	0149      	lsls	r1, r1, #5
 8001298:	440b      	add	r3, r1
 800129a:	b29b      	uxth	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	b298      	uxth	r0, r3
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3302      	adds	r3, #2
 80012b2:	4602      	mov	r2, r0
 80012b4:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < FEEDER_MEALn; i++)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	3301      	adds	r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2b05      	cmp	r3, #5
 80012c0:	f77f af50 	ble.w	8001164 <ui_feeder_config_init+0x120>
    }


    for (int i = 0; i < FEEDER_MEALn; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	e0b8      	b.n	800143c <ui_feeder_config_init+0x3f8>
    {
        BSP_LCD_SetFont(&Font16);
 80012ca:	4866      	ldr	r0, [pc, #408]	; (8001464 <ui_feeder_config_init+0x420>)
 80012cc:	f001 fd52 	bl	8002d74 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].open_time.hour.x,
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	3310      	adds	r3, #16
 80012e0:	8818      	ldrh	r0, [r3, #0]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	3312      	adds	r3, #18
 80012f2:	8819      	ldrh	r1, [r3, #0]
 80012f4:	2303      	movs	r3, #3
 80012f6:	4a5c      	ldr	r2, [pc, #368]	; (8001468 <ui_feeder_config_init+0x424>)
 80012f8:	f001 fd92 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                                feeder_conf->config[i].open_time.hour.y, "--:", LEFT_MODE);
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].open_time.min.x,
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3318      	adds	r3, #24
 800130c:	8818      	ldrh	r0, [r3, #0]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	331a      	adds	r3, #26
 800131e:	8819      	ldrh	r1, [r3, #0]
 8001320:	2303      	movs	r3, #3
 8001322:	4a52      	ldr	r2, [pc, #328]	; (800146c <ui_feeder_config_init+0x428>)
 8001324:	f001 fd7c 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                                feeder_conf->config[i].open_time.min.y, "--", LEFT_MODE);
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].open_time.am_fm.x,
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3320      	adds	r3, #32
 8001338:	8818      	ldrh	r0, [r3, #0]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	3322      	adds	r3, #34	; 0x22
 800134a:	8819      	ldrh	r1, [r3, #0]
                                feeder_conf->config[i].open_time.am_fm.y, set_am_fm[TIME_FM], LEFT_MODE);
 800134c:	4b48      	ldr	r3, [pc, #288]	; (8001470 <ui_feeder_config_init+0x42c>)
 800134e:	685a      	ldr	r2, [r3, #4]
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].open_time.am_fm.x,
 8001350:	2303      	movs	r3, #3
 8001352:	f001 fd65 	bl	8002e20 <BSP_LCD_DisplayStringAt>

        BSP_LCD_DisplayStringAt(feeder_conf->config[i].close_time.hour.x,
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	1a9b      	subs	r3, r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3324      	adds	r3, #36	; 0x24
 8001366:	8818      	ldrh	r0, [r3, #0]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	3326      	adds	r3, #38	; 0x26
 8001378:	8819      	ldrh	r1, [r3, #0]
 800137a:	2303      	movs	r3, #3
 800137c:	4a3a      	ldr	r2, [pc, #232]	; (8001468 <ui_feeder_config_init+0x424>)
 800137e:	f001 fd4f 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                                feeder_conf->config[i].close_time.hour.y, "--:", LEFT_MODE);
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].close_time.min.x,
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	332c      	adds	r3, #44	; 0x2c
 8001392:	8818      	ldrh	r0, [r3, #0]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	332e      	adds	r3, #46	; 0x2e
 80013a4:	8819      	ldrh	r1, [r3, #0]
 80013a6:	2303      	movs	r3, #3
 80013a8:	4a30      	ldr	r2, [pc, #192]	; (800146c <ui_feeder_config_init+0x428>)
 80013aa:	f001 fd39 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                                feeder_conf->config[i].close_time.min.y, "--", LEFT_MODE);
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].close_time.am_fm.x,
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	3334      	adds	r3, #52	; 0x34
 80013be:	8818      	ldrh	r0, [r3, #0]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3336      	adds	r3, #54	; 0x36
 80013d0:	8819      	ldrh	r1, [r3, #0]
                                feeder_conf->config[i].close_time.am_fm.y, set_am_fm[TIME_AM], LEFT_MODE);
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <ui_feeder_config_init+0x42c>)
 80013d4:	681a      	ldr	r2, [r3, #0]
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].close_time.am_fm.x,
 80013d6:	2303      	movs	r3, #3
 80013d8:	f001 fd22 	bl	8002e20 <BSP_LCD_DisplayStringAt>

        BSP_LCD_DisplayStringAt(feeder_conf->config[i].date.day.x,
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	3340      	adds	r3, #64	; 0x40
 80013ec:	8818      	ldrh	r0, [r3, #0]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	3342      	adds	r3, #66	; 0x42
 80013fe:	8819      	ldrh	r1, [r3, #0]
 8001400:	2303      	movs	r3, #3
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <ui_feeder_config_init+0x430>)
 8001404:	f001 fd0c 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                                feeder_conf->config[i].date.day.y, "--/", LEFT_MODE);
        BSP_LCD_DisplayStringAt(feeder_conf->config[i].date.month.x,
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	8818      	ldrh	r0, [r3, #0]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3302      	adds	r3, #2
 800142c:	8819      	ldrh	r1, [r3, #0]
 800142e:	2303      	movs	r3, #3
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <ui_feeder_config_init+0x428>)
 8001432:	f001 fcf5 	bl	8002e20 <BSP_LCD_DisplayStringAt>
    for (int i = 0; i < FEEDER_MEALn; i++)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b05      	cmp	r3, #5
 8001440:	f77f af43 	ble.w	80012ca <ui_feeder_config_init+0x286>
                                feeder_conf->config[i].date.month.y, "--", LEFT_MODE);

    }

    /*Drawer 1 Settings */
    ui_win_show(&feeder_conf->win.main, LCD_DEFAULT_TEXTCOLOR, true);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd81 	bl	8000f52 <ui_win_show>
    ui_feeder_config_clean(feeder_conf);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fdb1 	bl	8000fb8 <ui_feeder_config_clean>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001456:	4808      	ldr	r0, [pc, #32]	; (8001478 <ui_feeder_config_init+0x434>)
 8001458:	f001 fc8c 	bl	8002d74 <BSP_LCD_SetFont>
}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	0800724c 	.word	0x0800724c
 800146c:	08007250 	.word	0x08007250
 8001470:	20000030 	.word	0x20000030
 8001474:	08007254 	.word	0x08007254
 8001478:	20000008 	.word	0x20000008

0800147c <ui_feeder_config_set_open_time_hour>:

void ui_feeder_config_set_open_time_hour(feeder_config_t *feeder_conf, uint8_t meal, uint8_t open_hour)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
 8001488:	4613      	mov	r3, r2
 800148a:	70bb      	strb	r3, [r7, #2]
    BSP_LCD_SetFont(&Font16);
 800148c:	4817      	ldr	r0, [pc, #92]	; (80014ec <ui_feeder_config_set_open_time_hour+0x70>)
 800148e:	f001 fc71 	bl	8002d74 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(FEEDER_CONFIG_SELECTION_COLOR);
 8001492:	201f      	movs	r0, #31
 8001494:	f001 fc5e 	bl	8002d54 <BSP_LCD_SetTextColor>

    uint8_t tmp_buff[5];
    sprintf(tmp_buff,"%.2d",open_hour);
 8001498:	78ba      	ldrb	r2, [r7, #2]
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4914      	ldr	r1, [pc, #80]	; (80014f0 <ui_feeder_config_set_open_time_hour+0x74>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 ff75 	bl	8006390 <siprintf>

    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.hour.x,
 80014a6:	78fa      	ldrb	r2, [r7, #3]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	3310      	adds	r3, #16
 80014b6:	8818      	ldrh	r0, [r3, #0]
 80014b8:	78fa      	ldrb	r2, [r7, #3]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	3312      	adds	r3, #18
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	2303      	movs	r3, #3
 80014d0:	f001 fca6 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                            feeder_conf->config[meal].open_time.hour.y, tmp_buff, LEFT_MODE);

    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f001 fc3d 	bl	8002d54 <BSP_LCD_SetTextColor>
    BSP_LCD_SetTextColor(&LCD_DEFAULT_FONT);
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <ui_feeder_config_set_open_time_hour+0x78>)
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fc38 	bl	8002d54 <BSP_LCD_SetTextColor>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	08007258 	.word	0x08007258
 80014f4:	20000008 	.word	0x20000008

080014f8 <ui_feeder_config_confirm_open_time_hour>:

void ui_feeder_config_confirm_open_time_hour(feeder_config_t *feeder_conf, uint8_t meal, uint8_t open_hour)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
 8001504:	4613      	mov	r3, r2
 8001506:	70bb      	strb	r3, [r7, #2]
    BSP_LCD_SetFont(&Font16);
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <ui_feeder_config_confirm_open_time_hour+0x70>)
 800150a:	f001 fc33 	bl	8002d74 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 800150e:	2000      	movs	r0, #0
 8001510:	f001 fc20 	bl	8002d54 <BSP_LCD_SetTextColor>

    uint8_t tmp_buff[5];
    sprintf(tmp_buff,"%.2d",open_hour);
 8001514:	78ba      	ldrb	r2, [r7, #2]
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4914      	ldr	r1, [pc, #80]	; (800156c <ui_feeder_config_confirm_open_time_hour+0x74>)
 800151c:	4618      	mov	r0, r3
 800151e:	f004 ff37 	bl	8006390 <siprintf>

    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.hour.x,
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	3310      	adds	r3, #16
 8001532:	8818      	ldrh	r0, [r3, #0]
 8001534:	78fa      	ldrb	r2, [r7, #3]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3312      	adds	r3, #18
 8001544:	8819      	ldrh	r1, [r3, #0]
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	2303      	movs	r3, #3
 800154c:	f001 fc68 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                            feeder_conf->config[meal].open_time.hour.y, tmp_buff, LEFT_MODE);

    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001550:	2000      	movs	r0, #0
 8001552:	f001 fbff 	bl	8002d54 <BSP_LCD_SetTextColor>
    BSP_LCD_SetTextColor(&LCD_DEFAULT_FONT);
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <ui_feeder_config_confirm_open_time_hour+0x78>)
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fbfa 	bl	8002d54 <BSP_LCD_SetTextColor>
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000000 	.word	0x20000000
 800156c:	08007258 	.word	0x08007258
 8001570:	20000008 	.word	0x20000008

08001574 <ui_feeder_config_set_open_time_min>:

void ui_feeder_config_set_open_time_min(feeder_config_t *feeder_conf, uint8_t meal, uint8_t open_min)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
 8001580:	4613      	mov	r3, r2
 8001582:	70bb      	strb	r3, [r7, #2]
    BSP_LCD_SetFont(&Font16);
 8001584:	4817      	ldr	r0, [pc, #92]	; (80015e4 <ui_feeder_config_set_open_time_min+0x70>)
 8001586:	f001 fbf5 	bl	8002d74 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(FEEDER_CONFIG_SELECTION_COLOR);
 800158a:	201f      	movs	r0, #31
 800158c:	f001 fbe2 	bl	8002d54 <BSP_LCD_SetTextColor>

    uint8_t tmp_buff[5];
    sprintf(tmp_buff,"%.2d",open_min);
 8001590:	78ba      	ldrb	r2, [r7, #2]
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4914      	ldr	r1, [pc, #80]	; (80015e8 <ui_feeder_config_set_open_time_min+0x74>)
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fef9 	bl	8006390 <siprintf>

    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.min.x,
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3318      	adds	r3, #24
 80015ae:	8818      	ldrh	r0, [r3, #0]
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	331a      	adds	r3, #26
 80015c0:	8819      	ldrh	r1, [r3, #0]
 80015c2:	f107 0208 	add.w	r2, r7, #8
 80015c6:	2303      	movs	r3, #3
 80015c8:	f001 fc2a 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                            feeder_conf->config[meal].open_time.min.y, tmp_buff, LEFT_MODE);

    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f001 fbc1 	bl	8002d54 <BSP_LCD_SetTextColor>
    BSP_LCD_SetTextColor(&LCD_DEFAULT_FONT);
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <ui_feeder_config_set_open_time_min+0x78>)
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fbbc 	bl	8002d54 <BSP_LCD_SetTextColor>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	08007258 	.word	0x08007258
 80015ec:	20000008 	.word	0x20000008

080015f0 <ui_feeder_config_confirm_open_time_min>:

void ui_feeder_config_confirm_open_time_min(feeder_config_t *feeder_conf, uint8_t meal, uint8_t open_min)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
 80015fc:	4613      	mov	r3, r2
 80015fe:	70bb      	strb	r3, [r7, #2]
    BSP_LCD_SetFont(&Font16);
 8001600:	4817      	ldr	r0, [pc, #92]	; (8001660 <ui_feeder_config_confirm_open_time_min+0x70>)
 8001602:	f001 fbb7 	bl	8002d74 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001606:	2000      	movs	r0, #0
 8001608:	f001 fba4 	bl	8002d54 <BSP_LCD_SetTextColor>

    uint8_t tmp_buff[5];
    sprintf(tmp_buff,"%.2d",open_min);
 800160c:	78ba      	ldrb	r2, [r7, #2]
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4914      	ldr	r1, [pc, #80]	; (8001664 <ui_feeder_config_confirm_open_time_min+0x74>)
 8001614:	4618      	mov	r0, r3
 8001616:	f004 febb 	bl	8006390 <siprintf>

    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.min.x,
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	3318      	adds	r3, #24
 800162a:	8818      	ldrh	r0, [r3, #0]
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	331a      	adds	r3, #26
 800163c:	8819      	ldrh	r1, [r3, #0]
 800163e:	f107 0208 	add.w	r2, r7, #8
 8001642:	2303      	movs	r3, #3
 8001644:	f001 fbec 	bl	8002e20 <BSP_LCD_DisplayStringAt>
                            feeder_conf->config[meal].open_time.min.y, tmp_buff, LEFT_MODE);

    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001648:	2000      	movs	r0, #0
 800164a:	f001 fb83 	bl	8002d54 <BSP_LCD_SetTextColor>
    BSP_LCD_SetTextColor(&LCD_DEFAULT_FONT);
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <ui_feeder_config_confirm_open_time_min+0x78>)
 8001650:	b29b      	uxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f001 fb7e 	bl	8002d54 <BSP_LCD_SetTextColor>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000000 	.word	0x20000000
 8001664:	08007258 	.word	0x08007258
 8001668:	20000008 	.word	0x20000008

0800166c <ui_feeder_config_set_am_fm>:


void ui_feeder_config_set_am_fm(feeder_config_t *feeder_conf, uint8_t meal, uint8_t am_fm)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
 8001678:	4613      	mov	r3, r2
 800167a:	70bb      	strb	r3, [r7, #2]
    BSP_LCD_SetFont(&Font16);
 800167c:	4815      	ldr	r0, [pc, #84]	; (80016d4 <ui_feeder_config_set_am_fm+0x68>)
 800167e:	f001 fb79 	bl	8002d74 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(FEEDER_CONFIG_SELECTION_COLOR);
 8001682:	201f      	movs	r0, #31
 8001684:	f001 fb66 	bl	8002d54 <BSP_LCD_SetTextColor>

    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.am_fm.x,
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	3320      	adds	r3, #32
 8001698:	8818      	ldrh	r0, [r3, #0]
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3322      	adds	r3, #34	; 0x22
 80016aa:	8819      	ldrh	r1, [r3, #0]
 80016ac:	78bb      	ldrb	r3, [r7, #2]
                            feeder_conf->config[meal].open_time.am_fm.y, set_am_fm[am_fm], LEFT_MODE);
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <ui_feeder_config_set_am_fm+0x6c>)
 80016b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.am_fm.x,
 80016b4:	2303      	movs	r3, #3
 80016b6:	f001 fbb3 	bl	8002e20 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f001 fb4a 	bl	8002d54 <BSP_LCD_SetTextColor>
    BSP_LCD_SetTextColor(&LCD_DEFAULT_FONT);
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <ui_feeder_config_set_am_fm+0x70>)
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 fb45 	bl	8002d54 <BSP_LCD_SetTextColor>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000030 	.word	0x20000030
 80016dc:	20000008 	.word	0x20000008

080016e0 <ui_feeder_config_confirm_am_fm>:

void ui_feeder_config_confirm_am_fm(feeder_config_t *feeder_conf, uint8_t meal, uint8_t am_fm)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
 80016ec:	4613      	mov	r3, r2
 80016ee:	70bb      	strb	r3, [r7, #2]
    BSP_LCD_SetFont(&Font16);
 80016f0:	4815      	ldr	r0, [pc, #84]	; (8001748 <ui_feeder_config_confirm_am_fm+0x68>)
 80016f2:	f001 fb3f 	bl	8002d74 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f001 fb2c 	bl	8002d54 <BSP_LCD_SetTextColor>

    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.am_fm.x,
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	3320      	adds	r3, #32
 800170c:	8818      	ldrh	r0, [r3, #0]
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3322      	adds	r3, #34	; 0x22
 800171e:	8819      	ldrh	r1, [r3, #0]
 8001720:	78bb      	ldrb	r3, [r7, #2]
                            feeder_conf->config[meal].open_time.am_fm.y, set_am_fm[am_fm], LEFT_MODE);
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <ui_feeder_config_confirm_am_fm+0x6c>)
 8001724:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    BSP_LCD_DisplayStringAt(feeder_conf->config[meal].open_time.am_fm.x,
 8001728:	2303      	movs	r3, #3
 800172a:	f001 fb79 	bl	8002e20 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 800172e:	2000      	movs	r0, #0
 8001730:	f001 fb10 	bl	8002d54 <BSP_LCD_SetTextColor>
    BSP_LCD_SetTextColor(&LCD_DEFAULT_FONT);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <ui_feeder_config_confirm_am_fm+0x70>)
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fb0b 	bl	8002d54 <BSP_LCD_SetTextColor>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000
 800174c:	20000030 	.word	0x20000030
 8001750:	20000008 	.word	0x20000008

08001754 <ui_fsm_get>:


////////////////////////////// Public function declaration //////////////////////////////////////

ui_handle_t ui_fsm_get(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
    return &ui_fsm;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <ui_fsm_get+0x10>)
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200003e8 	.word	0x200003e8

08001768 <ui_fsm_init>:

void ui_fsm_init(ui_handle_t handle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    // ui_battery_init(&ui_battery);
    // ui_drawers_init(&ui_drawers);
    ui_feeder_config_init(&ui_feeder_conf);
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <ui_fsm_init+0x1c>)
 8001772:	f7ff fc67 	bl	8001044 <ui_feeder_config_init>

	main_menu_enter_seq(handle);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f84c 	bl	8001814 <main_menu_enter_seq>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000288 	.word	0x20000288

08001788 <ui_fsm_run>:

void ui_fsm_run(ui_handle_t handle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	2b04      	cmp	r3, #4
 8001798:	d810      	bhi.n	80017bc <ui_fsm_run+0x34>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <ui_fsm_run+0x18>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b5 	.word	0x080017b5
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017bd 	.word	0x080017bd
 80017ac:	080017bd 	.word	0x080017bd
 80017b0:	080017bd 	.word	0x080017bd
    {
        case ST_UI_MAIN_MENU:  main_menu_on_react(handle); break;
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f8a5 	bl	8001904 <main_menu_on_react>
 80017ba:	e000      	b.n	80017be <ui_fsm_run+0x36>
        case ST_UI_DATE_TIME_CONFIG: break;
        case ST_UI_PET_CALL_CONFIG: break;
        case ST_UI_FEEDER_CONFIG: break;
        case ST_UI_OPEN_DRAWER: break;
    default:
        break;
 80017bc:	bf00      	nop
    }

}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop

080017c8 <fsm_set_next_state>:

static void fsm_set_next_state(ui_handle_t handle, ui_state_t next_st)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
    handle->state = next_st;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	701a      	strb	r2, [r3, #0]
    handle->event.btn = EVT_EXT_BTN_INVALID;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	709a      	strb	r2, [r3, #2]
    handle->event.internal = EVT_INT_UI_INVALID;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	70da      	strb	r2, [r3, #3]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <ui_fsm_set_ext_event>:
		time_event++;
	}
}

void ui_fsm_set_ext_event(ui_handle_t handle, event_t *event)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    if(event->header.fsm_src == BTN_FSM)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d103      	bne.n	800180a <ui_fsm_set_ext_event+0x1a>
    {
        ui_fsm_dbg("btn event detected\r\n");
        handle->event.btn = event->header.name;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	709a      	strb	r2, [r3, #2]
    }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <main_menu_enter_seq>:


/////////////////////////////////// Main Menu State  ///////////////////////////////////////////

static void main_menu_enter_seq(ui_handle_t handle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ main menu ]");
    fsm_set_next_state(handle, ST_UI_MAIN_MENU);
 800181c:	2101      	movs	r1, #1
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffd2 	bl	80017c8 <fsm_set_next_state>
    entry_action_main_menu(handle);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f805 	bl	8001834 <entry_action_main_menu>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <entry_action_main_menu>:

static void entry_action_main_menu(ui_handle_t handle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    /*1. draw battery */
    // ui_battery_show(&ui_battery, true);
    /*1. put icons in the main screen with the updated values */
    /*2. put cursor in the first navigation item */
    /*3. start timer to update gui */
    ui_feeder_config_init(&ui_feeder_conf);
 800183c:	4830      	ldr	r0, [pc, #192]	; (8001900 <entry_action_main_menu+0xcc>)
 800183e:	f7ff fc01 	bl	8001044 <ui_feeder_config_init>

    for (size_t i = 0; i < FEEDER_MEALn; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e04c      	b.n	80018e2 <entry_action_main_menu+0xae>
    {
        ui_feeder_config_set_open_time_hour(&ui_feeder_conf, i, i);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	4619      	mov	r1, r3
 8001852:	482b      	ldr	r0, [pc, #172]	; (8001900 <entry_action_main_menu+0xcc>)
 8001854:	f7ff fe12 	bl	800147c <ui_feeder_config_set_open_time_hour>
        HAL_Delay(500);
 8001858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185c:	f002 fbc8 	bl	8003ff0 <HAL_Delay>
        ui_feeder_config_confirm_open_time_hour(&ui_feeder_conf, i, i);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	4619      	mov	r1, r3
 800186a:	4825      	ldr	r0, [pc, #148]	; (8001900 <entry_action_main_menu+0xcc>)
 800186c:	f7ff fe44 	bl	80014f8 <ui_feeder_config_confirm_open_time_hour>
        HAL_Delay(500);
 8001870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001874:	f002 fbbc 	bl	8003ff0 <HAL_Delay>
        ui_feeder_config_set_open_time_min(&ui_feeder_conf, i, i + 30);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	b2d9      	uxtb	r1, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	331e      	adds	r3, #30
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	481e      	ldr	r0, [pc, #120]	; (8001900 <entry_action_main_menu+0xcc>)
 8001888:	f7ff fe74 	bl	8001574 <ui_feeder_config_set_open_time_min>
        HAL_Delay(500);
 800188c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001890:	f002 fbae 	bl	8003ff0 <HAL_Delay>
        ui_feeder_config_confirm_open_time_min(&ui_feeder_conf, i, i + 30);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	b2d9      	uxtb	r1, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	331e      	adds	r3, #30
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4817      	ldr	r0, [pc, #92]	; (8001900 <entry_action_main_menu+0xcc>)
 80018a4:	f7ff fea4 	bl	80015f0 <ui_feeder_config_confirm_open_time_min>
        HAL_Delay(500);
 80018a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ac:	f002 fba0 	bl	8003ff0 <HAL_Delay>
        ui_feeder_config_set_am_fm(&ui_feeder_conf, i, TIME_AM);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <entry_action_main_menu+0xcc>)
 80018ba:	f7ff fed7 	bl	800166c <ui_feeder_config_set_am_fm>
        HAL_Delay(500);
 80018be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c2:	f002 fb95 	bl	8003ff0 <HAL_Delay>
        ui_feeder_config_confirm_am_fm(&ui_feeder_conf, i, TIME_AM);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <entry_action_main_menu+0xcc>)
 80018d0:	f7ff ff06 	bl	80016e0 <ui_feeder_config_confirm_am_fm>
        HAL_Delay(500);
 80018d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d8:	f002 fb8a 	bl	8003ff0 <HAL_Delay>
    for (size_t i = 0; i < FEEDER_MEALn; i++)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3301      	adds	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d9af      	bls.n	8001848 <entry_action_main_menu+0x14>
    }

    time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3304      	adds	r3, #4
 80018ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f9bd 	bl	8000c70 <time_event_start>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000288 	.word	0x20000288

08001904 <main_menu_on_react>:

static void main_menu_on_react(ui_handle_t handle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    /*navigation key update item selection*/
    switch (handle->event.btn)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	3b01      	subs	r3, #1
 8001912:	2b08      	cmp	r3, #8
 8001914:	d814      	bhi.n	8001940 <main_menu_on_react+0x3c>
 8001916:	a201      	add	r2, pc, #4	; (adr r2, 800191c <main_menu_on_react+0x18>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001941 	.word	0x08001941
 8001920:	08001941 	.word	0x08001941
 8001924:	08001941 	.word	0x08001941
 8001928:	08001941 	.word	0x08001941
 800192c:	08001941 	.word	0x08001941
 8001930:	08001941 	.word	0x08001941
 8001934:	08001941 	.word	0x08001941
 8001938:	08001941 	.word	0x08001941
 800193c:	08001941 	.word	0x08001941
        case EVT_EXT_BTN_UP_AND_ENTER_PRESSED:    break;
        case EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED:  break;
        case EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED:  break;
        case EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED: break;  
    default:
        break;
 8001940:	bf00      	nop
    }

    if(time_event_is_raised(&handle->event.time.update_gui)== true)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f9e4 	bl	8000d14 <time_event_is_raised>
    {
        /*Update GUI*/
    }
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b80      	cmp	r3, #128	; 0x80
 8001962:	d02b      	beq.n	80019bc <HAL_GPIO_EXTI_Callback+0x68>
 8001964:	2b80      	cmp	r3, #128	; 0x80
 8001966:	dc2e      	bgt.n	80019c6 <HAL_GPIO_EXTI_Callback+0x72>
 8001968:	2b20      	cmp	r3, #32
 800196a:	d010      	beq.n	800198e <HAL_GPIO_EXTI_Callback+0x3a>
 800196c:	2b20      	cmp	r3, #32
 800196e:	dc2a      	bgt.n	80019c6 <HAL_GPIO_EXTI_Callback+0x72>
 8001970:	2b01      	cmp	r3, #1
 8001972:	d002      	beq.n	800197a <HAL_GPIO_EXTI_Callback+0x26>
 8001974:	2b10      	cmp	r3, #16
 8001976:	d005      	beq.n	8001984 <HAL_GPIO_EXTI_Callback+0x30>
        case GPIO_PIN_7: {
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
         }break;
    
    default:
        break;
 8001978:	e025      	b.n	80019c6 <HAL_GPIO_EXTI_Callback+0x72>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 800197a:	2132      	movs	r1, #50	; 0x32
 800197c:	4815      	ldr	r0, [pc, #84]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x80>)
 800197e:	f7ff f977 	bl	8000c70 <time_event_start>
        }break;
 8001982:	e023      	b.n	80019cc <HAL_GPIO_EXTI_Callback+0x78>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8001984:	2132      	movs	r1, #50	; 0x32
 8001986:	4814      	ldr	r0, [pc, #80]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001988:	f7ff f972 	bl	8000c70 <time_event_start>
        }break;
 800198c:	e01e      	b.n	80019cc <HAL_GPIO_EXTI_Callback+0x78>
            if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_RESET)
 800198e:	2120      	movs	r1, #32
 8001990:	4812      	ldr	r0, [pc, #72]	; (80019dc <HAL_GPIO_EXTI_Callback+0x88>)
 8001992:	f003 f84f 	bl	8004a34 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <HAL_GPIO_EXTI_Callback+0x50>
                time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 800199c:	2132      	movs	r1, #50	; 0x32
 800199e:	4810      	ldr	r0, [pc, #64]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x8c>)
 80019a0:	f7ff f966 	bl	8000c70 <time_event_start>
            if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) == GPIO_PIN_RESET)
 80019a4:	2120      	movs	r1, #32
 80019a6:	480f      	ldr	r0, [pc, #60]	; (80019e4 <HAL_GPIO_EXTI_Callback+0x90>)
 80019a8:	f003 f844 	bl	8004a34 <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10b      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0x76>
                  time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 80019b2:	2132      	movs	r1, #50	; 0x32
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <HAL_GPIO_EXTI_Callback+0x94>)
 80019b6:	f7ff f95b 	bl	8000c70 <time_event_start>
         }break;
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_EXTI_Callback+0x76>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 80019bc:	2132      	movs	r1, #50	; 0x32
 80019be:	480b      	ldr	r0, [pc, #44]	; (80019ec <HAL_GPIO_EXTI_Callback+0x98>)
 80019c0:	f7ff f956 	bl	8000c70 <time_event_start>
         }break;
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_EXTI_Callback+0x78>
        break;
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_EXTI_Callback+0x78>
         }break;
 80019ca:	bf00      	nop
    }

}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000154 	.word	0x20000154
 80019d8:	20000114 	.word	0x20000114
 80019dc:	40010800 	.word	0x40010800
 80019e0:	20000134 	.word	0x20000134
 80019e4:	40011000 	.word	0x40011000
 80019e8:	20000124 	.word	0x20000124
 80019ec:	20000144 	.word	0x20000144

080019f0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 80019f4:	2001      	movs	r0, #1
 80019f6:	f003 f84d 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}

080019fe <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 8001a02:	2010      	movs	r0, #16
 8001a04:	f003 f846 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5), Down (C5)
 8001a10:	2020      	movs	r0, #32
 8001a12:	f003 f83f 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 8001a16:	2080      	movs	r0, #128	; 0x80
 8001a18:	f003 f83c 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2a:	2228      	movs	r2, #40	; 0x28
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 f83e 	bl	8005ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a60:	2300      	movs	r3, #0
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001a64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 f96c 	bl	8004d4c <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001a7a:	f000 fa4f 	bl	8001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7e:	230f      	movs	r3, #15
 8001a80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fbd9 	bl	8005250 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001aa4:	f000 fa3a 	bl	8001f1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fd50 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001abe:	f000 fa2d 	bl	8001f1c <Error_Handler>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3750      	adds	r7, #80	; 0x50
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <MX_ADC1_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001af6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001afa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001b0a:	f002 fa95 	bl	8004038 <HAL_ADC_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b14:	f000 fa02 	bl	8001f1c <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b18:	230a      	movs	r3, #10
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_ADC1_Init+0x74>)
 8001b2a:	f002 fb5d 	bl	80041e8 <HAL_ADC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b34:	f000 f9f2 	bl	8001f1c <Error_Handler>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200003f8 	.word	0x200003f8
 8001b44:	40012400 	.word	0x40012400

08001b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <MX_I2C1_Init+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_I2C1_Init+0x58>)
 8001b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b86:	f002 ff9d 	bl	8004ac4 <HAL_I2C_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b90:	f000 f9c4 	bl	8001f1c <Error_Handler>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000428 	.word	0x20000428
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	000186a0 	.word	0x000186a0

08001ba4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <MX_SPI2_Init+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bd8:	2210      	movs	r2, #16
 8001bda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_SPI2_Init+0x64>)
 8001bf6:	f003 fd65 	bl	80056c4 <HAL_SPI_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c00:	f000 f98c 	bl	8001f1c <Error_Handler>
  }
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000047c 	.word	0x2000047c
 8001c0c:	40003800 	.word	0x40003800

08001c10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c16:	463b      	mov	r3, r7
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <MX_TIM1_Init+0x74>)
 8001c22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c4a:	2108      	movs	r1, #8
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c4e:	f003 fdbd 	bl	80057cc <HAL_TIM_OnePulse_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8001c58:	f000 f960 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_TIM1_Init+0x70>)
 8001c6a:	f003 fe61 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001c74:	f000 f952 	bl	8001f1c <Error_Handler>
  }


}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000055c 	.word	0x2000055c
 8001c84:	40012c00 	.word	0x40012c00

08001c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_DMA_Init+0x48>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <MX_DMA_Init+0x48>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6153      	str	r3, [r2, #20]
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <MX_DMA_Init+0x48>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	200e      	movs	r0, #14
 8001cac:	f002 fcad 	bl	800460a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001cb0:	200e      	movs	r0, #14
 8001cb2:	f002 fcc6 	bl	8004642 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f002 fca5 	bl	800460a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cc0:	200f      	movs	r0, #15
 8001cc2:	f002 fcbe 	bl	8004642 <HAL_NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001cee:	f043 0310 	orr.w	r3, r3, #16
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d00:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d06:	f043 0320 	orr.w	r3, r3, #32
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a5b      	ldr	r2, [pc, #364]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <MX_GPIO_Init+0x1b8>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4850      	ldr	r0, [pc, #320]	; (8001e90 <MX_GPIO_Init+0x1bc>)
 8001d4e:	f002 fe88 	bl	8004a62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8001d52:	2200      	movs	r2, #0
 8001d54:	f640 715f 	movw	r1, #3935	; 0xf5f
 8001d58:	484e      	ldr	r0, [pc, #312]	; (8001e94 <MX_GPIO_Init+0x1c0>)
 8001d5a:	f002 fe82 	bl	8004a62 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001d64:	484c      	ldr	r0, [pc, #304]	; (8001e98 <MX_GPIO_Init+0x1c4>)
 8001d66:	f002 fe7c 	bl	8004a62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4843      	ldr	r0, [pc, #268]	; (8001e90 <MX_GPIO_Init+0x1bc>)
 8001d82:	f002 fcd3 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 8001d86:	f241 338c 	movw	r3, #5004	; 0x138c
 8001d8a:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4619      	mov	r1, r3
 8001d9a:	483d      	ldr	r0, [pc, #244]	; (8001e90 <MX_GPIO_Init+0x1bc>)
 8001d9c:	f002 fcc6 	bl	800472c <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8001da0:	f640 735f 	movw	r3, #3935	; 0xf5f
 8001da4:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4619      	mov	r1, r3
 8001db8:	4836      	ldr	r0, [pc, #216]	; (8001e94 <MX_GPIO_Init+0x1c0>)
 8001dba:	f002 fcb7 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4830      	ldr	r0, [pc, #192]	; (8001e94 <MX_GPIO_Init+0x1c0>)
 8001dd4:	f002 fcaa 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001dd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	4829      	ldr	r0, [pc, #164]	; (8001e98 <MX_GPIO_Init+0x1c4>)
 8001df2:	f002 fc9b 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 8001df6:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8001dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <MX_GPIO_Init+0x1c8>)
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4821      	ldr	r0, [pc, #132]	; (8001e90 <MX_GPIO_Init+0x1bc>)
 8001e0c:	f002 fc8e 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 8001e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_GPIO_Init+0x1c8>)
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	481b      	ldr	r0, [pc, #108]	; (8001e94 <MX_GPIO_Init+0x1c0>)
 8001e26:	f002 fc81 	bl	800472c <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8001e2a:	2330      	movs	r3, #48	; 0x30
 8001e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_GPIO_Init+0x1cc>)
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4814      	ldr	r0, [pc, #80]	; (8001e90 <MX_GPIO_Init+0x1bc>)
 8001e3e:	f002 fc75 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001e42:	23a0      	movs	r3, #160	; 0xa0
 8001e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_GPIO_Init+0x1cc>)
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480f      	ldr	r0, [pc, #60]	; (8001e94 <MX_GPIO_Init+0x1c0>)
 8001e56:	f002 fc69 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_GPIO_Init+0x1cc>)
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480a      	ldr	r0, [pc, #40]	; (8001e98 <MX_GPIO_Init+0x1c4>)
 8001e6e:	f002 fc5d 	bl	800472c <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 8001e72:	2006      	movs	r0, #6
 8001e74:	f002 fbe5 	bl	8004642 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, down -> C5, right -> A7
 8001e78:	2017      	movs	r0, #23
 8001e7a:	f002 fbe2 	bl	8004642 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f002 fbdf 	bl	8004642 <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	10110000 	.word	0x10110000
 8001ea0:	10210000 	.word	0x10210000

08001ea4 <init_peripherals>:

void init_peripherals(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea8:	f002 f840 	bl	8003f2c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001eac:	f7ff fdb8 	bl	8001a20 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb0:	f7ff ff10 	bl	8001cd4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001eb4:	f7ff fe0a 	bl	8001acc <MX_ADC1_Init>
  MX_SPI2_Init();
 8001eb8:	f7ff fe74 	bl	8001ba4 <MX_SPI2_Init>
  MX_DMA_Init();
 8001ebc:	f7ff fee4 	bl	8001c88 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ec0:	f7ff fea6 	bl	8001c10 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001ec4:	f7ff fe40 	bl	8001b48 <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 8001ec8:	f7fe fc30 	bl	800072c <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 8001ecc:	f000 ff06 	bl	8002cdc <BSP_LCD_Init>
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  init_peripherals();
 8001eda:	f7ff ffe3 	bl	8001ea4 <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <main+0x40>)
 8001ee0:	f7fe f934 	bl	800014c <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 8001ee4:	f7fe ff58 	bl	8000d98 <event_manager_fsm_get>
 8001ee8:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe ff86 	bl	8000dfc <event_manager_fsm_init>

  /*Init UI */
  ui_handle_t ui_fsm = ui_fsm_get();
 8001ef0:	f7ff fc30 	bl	8001754 <ui_fsm_get>
 8001ef4:	6038      	str	r0, [r7, #0]
  ui_fsm_init(ui_fsm);
 8001ef6:	6838      	ldr	r0, [r7, #0]
 8001ef8:	f7ff fc36 	bl	8001768 <ui_fsm_init>

  printf("Ali Pet Feeder Project\r\n");
 8001efc:	4806      	ldr	r0, [pc, #24]	; (8001f18 <main+0x44>)
 8001efe:	f004 fa2f 	bl	8006360 <puts>

  /* Infinite loop */
  while (1)
  {
    ui_fsm_run(ui_fsm);
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f7ff fc40 	bl	8001788 <ui_fsm_run>
    event_manager_fsm_run(evm_fsm);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7fe ff60 	bl	8000dce <event_manager_fsm_run>
    time_events_poll_update();
 8001f0e:	f7fe ff31 	bl	8000d74 <time_events_poll_update>
    ui_fsm_run(ui_fsm);
 8001f12:	e7f6      	b.n	8001f02 <main+0x2e>
 8001f14:	2000010c 	.word	0x2000010c
 8001f18:	08007268 	.word	0x08007268

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_MspInit+0x5c>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_MspInit+0x5c>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6193      	str	r3, [r2, #24]
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_MspInit+0x5c>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_MspInit+0x5c>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_MspInit+0x5c>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_MspInit+0x5c>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_MspInit+0x60>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_MspInit+0x60>)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6053      	str	r3, [r2, #4]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010000 	.word	0x40010000

08001f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_ADC_MspInit+0x6c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d121      	bne.n	8001ff0 <HAL_ADC_MspInit+0x64>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_ADC_MspInit+0x70>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_ADC_MspInit+0x70>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_ADC_MspInit+0x70>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_ADC_MspInit+0x70>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_ADC_MspInit+0x70>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_ADC_MspInit+0x70>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_ADC_MspInit+0x74>)
 8001fec:	f002 fb9e 	bl	800472c <HAL_GPIO_Init>
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40012400 	.word	0x40012400
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40011000 	.word	0x40011000

08002004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <HAL_I2C_MspInit+0x70>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d123      	bne.n	800206c <HAL_I2C_MspInit+0x68>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_I2C_MspInit+0x74>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_I2C_MspInit+0x74>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_I2C_MspInit+0x74>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 800203c:	23c0      	movs	r3, #192	; 0xc0
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002040:	2312      	movs	r3, #18
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	480b      	ldr	r0, [pc, #44]	; (800207c <HAL_I2C_MspInit+0x78>)
 8002050:	f002 fb6c 	bl	800472c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_I2C_MspInit+0x74>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_I2C_MspInit+0x74>)
 800205a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205e:	61d3      	str	r3, [r2, #28]
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_I2C_MspInit+0x74>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

  }

}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40005400 	.word	0x40005400
 8002078:	40021000 	.word	0x40021000
 800207c:	40010c00 	.word	0x40010c00

08002080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a42      	ldr	r2, [pc, #264]	; (80021a4 <HAL_SPI_MspInit+0x124>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d17d      	bne.n	800219c <HAL_SPI_MspInit+0x11c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a0:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_SPI_MspInit+0x128>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4a40      	ldr	r2, [pc, #256]	; (80021a8 <HAL_SPI_MspInit+0x128>)
 80020a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020aa:	61d3      	str	r3, [r2, #28]
 80020ac:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <HAL_SPI_MspInit+0x128>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_SPI_MspInit+0x128>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a3a      	ldr	r2, [pc, #232]	; (80021a8 <HAL_SPI_MspInit+0x128>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_SPI_MspInit+0x128>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80020d0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80020d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	4619      	mov	r1, r3
 80020e4:	4831      	ldr	r0, [pc, #196]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020e6:	f002 fb21 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80020ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	4619      	mov	r1, r3
 80020fe:	482b      	ldr	r0, [pc, #172]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 8002100:	f002 fb14 	bl	800472c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002106:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <HAL_SPI_MspInit+0x134>)
 8002108:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002122:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002134:	481e      	ldr	r0, [pc, #120]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002136:	f002 fa9f 	bl	8004678 <HAL_DMA_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002140:	f7ff feec 	bl	8001f1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002148:	64da      	str	r2, [r3, #76]	; 0x4c
 800214a:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_SPI_MspInit+0x13c>)
 8002154:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002158:	2210      	movs	r2, #16
 800215a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 800217c:	2200      	movs	r2, #0
 800217e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002182:	f002 fa79 	bl	8004678 <HAL_DMA_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 800218c:	f7ff fec6 	bl	8001f1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002194:	649a      	str	r2, [r3, #72]	; 0x48
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6253      	str	r3, [r2, #36]	; 0x24


  }

}
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40003800 	.word	0x40003800
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010c00 	.word	0x40010c00
 80021b0:	200004d4 	.word	0x200004d4
 80021b4:	40020044 	.word	0x40020044
 80021b8:	20000518 	.word	0x20000518
 80021bc:	40020058 	.word	0x40020058

080021c0 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_TIM_OnePulse_MspInit+0x34>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10b      	bne.n	80021ea <HAL_TIM_OnePulse_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_TIM_OnePulse_MspInit+0x38>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_TIM_OnePulse_MspInit+0x38>)
 80021d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_TIM_OnePulse_MspInit+0x38>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
  }

}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	40021000 	.word	0x40021000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002242:	f7fe fd8f 	bl	8000d64 <HAL_SYSTICK_Callback>
  HAL_IncTick();
 8002246:	f001 feb7 	bl	8003fb8 <HAL_IncTick>
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}

0800224e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
	return 1;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002266:	f003 fbdf 	bl	8005a28 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
	return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
	while (1) {}		/* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
	}

return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
	return -1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f0:	605a      	str	r2, [r3, #4]
	return 0;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <_isatty>:

int _isatty(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
	return 1;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
	return 0;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
	...

0800232c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <_sbrk+0x5c>)
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <_sbrk+0x60>)
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <_sbrk+0x64>)
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <_sbrk+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	429a      	cmp	r2, r3
 800235a:	d207      	bcs.n	800236c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800235c:	f003 fb64 	bl	8005a28 <__errno>
 8002360:	4603      	mov	r3, r0
 8002362:	220c      	movs	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	e009      	b.n	8002380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <_sbrk+0x64>)
 800237c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20005000 	.word	0x20005000
 800238c:	00000400 	.word	0x00000400
 8002390:	200005a4 	.word	0x200005a4
 8002394:	20000a50 	.word	0x20000a50

08002398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a4:	480c      	ldr	r0, [pc, #48]	; (80023d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a6:	490d      	ldr	r1, [pc, #52]	; (80023dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ac:	e002      	b.n	80023b4 <LoopCopyDataInit>

080023ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b2:	3304      	adds	r3, #4

080023b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b8:	d3f9      	bcc.n	80023ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023bc:	4c0a      	ldr	r4, [pc, #40]	; (80023e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c0:	e001      	b.n	80023c6 <LoopFillZerobss>

080023c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c4:	3204      	adds	r2, #4

080023c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c8:	d3fb      	bcc.n	80023c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ca:	f7ff ffe5 	bl	8002398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ce:	f003 fb43 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023d2:	f7ff fd7f 	bl	8001ed4 <main>
  bx lr
 80023d6:	4770      	bx	lr
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023dc:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80023e0:	08008400 	.word	0x08008400
  ldr r2, =_sbss
 80023e4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80023e8:	20000a4c 	.word	0x20000a4c

080023ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC1_2_IRQHandler>

080023ee <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f001 fbe6 	bl	8003bc4 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80023f8:	2011      	movs	r0, #17
 80023fa:	f001 fc8d 	bl	8003d18 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 8002406:	2010      	movs	r0, #16
 8002408:	f001 fc86 	bl	8003d18 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 800240c:	2000      	movs	r0, #0
 800240e:	f001 fbd9 	bl	8003bc4 <LCD_IO_Bl_OnOff>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}

08002416 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 800241a:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 800242a:	23f0      	movs	r3, #240	; 0xf0
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 800243e:	1d39      	adds	r1, r7, #4
 8002440:	2301      	movs	r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	20d3      	movs	r0, #211	; 0xd3
 8002446:	f001 fd25 	bl	8003e94 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a05      	ldr	r2, [pc, #20]	; (8002464 <ili9341_ReadID+0x30>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d102      	bne.n	8002458 <ili9341_ReadID+0x24>
    return 0x9341;
 8002452:	f249 3341 	movw	r3, #37697	; 0x9341
 8002456:	e000      	b.n	800245a <ili9341_ReadID+0x26>
  else
    return 0;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	00419300 	.word	0x00419300

08002468 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800246e:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <ili9341_Init+0x150>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <ili9341_Init+0x150>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <ili9341_Init+0x150>)
 8002486:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <ili9341_Init+0x150>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <ili9341_Init+0x30>
      LCD_IO_Init();
 8002494:	f001 fbac 	bl	8003bf0 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <ili9341_Init+0x150>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <ili9341_Init+0x150>)
 80024a4:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80024a6:	200a      	movs	r0, #10
 80024a8:	f001 fb80 	bl	8003bac <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80024ac:	2001      	movs	r0, #1
 80024ae:	f001 fc33 	bl	8003d18 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80024b2:	200a      	movs	r0, #10
 80024b4:	f001 fb7a 	bl	8003bac <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80024b8:	2203      	movs	r2, #3
 80024ba:	4940      	ldr	r1, [pc, #256]	; (80025bc <ili9341_Init+0x154>)
 80024bc:	20ef      	movs	r0, #239	; 0xef
 80024be:	f001 fca5 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80024c2:	2203      	movs	r2, #3
 80024c4:	493e      	ldr	r1, [pc, #248]	; (80025c0 <ili9341_Init+0x158>)
 80024c6:	20cf      	movs	r0, #207	; 0xcf
 80024c8:	f001 fca0 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80024cc:	2204      	movs	r2, #4
 80024ce:	493d      	ldr	r1, [pc, #244]	; (80025c4 <ili9341_Init+0x15c>)
 80024d0:	20ed      	movs	r0, #237	; 0xed
 80024d2:	f001 fc9b 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80024d6:	2203      	movs	r2, #3
 80024d8:	493b      	ldr	r1, [pc, #236]	; (80025c8 <ili9341_Init+0x160>)
 80024da:	20e8      	movs	r0, #232	; 0xe8
 80024dc:	f001 fc96 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80024e0:	2205      	movs	r2, #5
 80024e2:	493a      	ldr	r1, [pc, #232]	; (80025cc <ili9341_Init+0x164>)
 80024e4:	20cb      	movs	r0, #203	; 0xcb
 80024e6:	f001 fc91 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80024ea:	2201      	movs	r2, #1
 80024ec:	4938      	ldr	r1, [pc, #224]	; (80025d0 <ili9341_Init+0x168>)
 80024ee:	20f7      	movs	r0, #247	; 0xf7
 80024f0:	f001 fc8c 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 80024f4:	2202      	movs	r2, #2
 80024f6:	4937      	ldr	r1, [pc, #220]	; (80025d4 <ili9341_Init+0x16c>)
 80024f8:	20ea      	movs	r0, #234	; 0xea
 80024fa:	f001 fc87 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 80024fe:	2201      	movs	r2, #1
 8002500:	4935      	ldr	r1, [pc, #212]	; (80025d8 <ili9341_Init+0x170>)
 8002502:	20c0      	movs	r0, #192	; 0xc0
 8002504:	f001 fc82 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8002508:	2201      	movs	r2, #1
 800250a:	4934      	ldr	r1, [pc, #208]	; (80025dc <ili9341_Init+0x174>)
 800250c:	20c1      	movs	r0, #193	; 0xc1
 800250e:	f001 fc7d 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8002512:	2202      	movs	r2, #2
 8002514:	4932      	ldr	r1, [pc, #200]	; (80025e0 <ili9341_Init+0x178>)
 8002516:	20c5      	movs	r0, #197	; 0xc5
 8002518:	f001 fc78 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 800251c:	2201      	movs	r2, #1
 800251e:	4931      	ldr	r1, [pc, #196]	; (80025e4 <ili9341_Init+0x17c>)
 8002520:	20c7      	movs	r0, #199	; 0xc7
 8002522:	f001 fc73 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8002526:	2201      	movs	r2, #1
 8002528:	492f      	ldr	r1, [pc, #188]	; (80025e8 <ili9341_Init+0x180>)
 800252a:	2037      	movs	r0, #55	; 0x37
 800252c:	f001 fc6e 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8002530:	2201      	movs	r2, #1
 8002532:	492e      	ldr	r1, [pc, #184]	; (80025ec <ili9341_Init+0x184>)
 8002534:	203a      	movs	r0, #58	; 0x3a
 8002536:	f001 fc69 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 800253a:	2202      	movs	r2, #2
 800253c:	492c      	ldr	r1, [pc, #176]	; (80025f0 <ili9341_Init+0x188>)
 800253e:	20b1      	movs	r0, #177	; 0xb1
 8002540:	f001 fc64 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8002544:	2203      	movs	r2, #3
 8002546:	492b      	ldr	r1, [pc, #172]	; (80025f4 <ili9341_Init+0x18c>)
 8002548:	20b6      	movs	r0, #182	; 0xb6
 800254a:	f001 fc5f 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800254e:	2201      	movs	r2, #1
 8002550:	4925      	ldr	r1, [pc, #148]	; (80025e8 <ili9341_Init+0x180>)
 8002552:	20f2      	movs	r0, #242	; 0xf2
 8002554:	f001 fc5a 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8002558:	2201      	movs	r2, #1
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <ili9341_Init+0x190>)
 800255c:	2026      	movs	r0, #38	; 0x26
 800255e:	f001 fc55 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8002562:	220f      	movs	r2, #15
 8002564:	4925      	ldr	r1, [pc, #148]	; (80025fc <ili9341_Init+0x194>)
 8002566:	20e0      	movs	r0, #224	; 0xe0
 8002568:	f001 fc50 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 800256c:	220f      	movs	r2, #15
 800256e:	4924      	ldr	r1, [pc, #144]	; (8002600 <ili9341_Init+0x198>)
 8002570:	20e1      	movs	r0, #225	; 0xe1
 8002572:	f001 fc4b 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002576:	2036      	movs	r0, #54	; 0x36
 8002578:	f001 fbce 	bl	8003d18 <LCD_IO_WriteCmd8>
 800257c:	20e8      	movs	r0, #232	; 0xe8
 800257e:	f001 fbe7 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8002582:	2011      	movs	r0, #17
 8002584:	f001 fbc8 	bl	8003d18 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002588:	200a      	movs	r0, #10
 800258a:	f001 fb0f 	bl	8003bac <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 800258e:	2300      	movs	r3, #0
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	23f0      	movs	r3, #240	; 0xf0
 8002594:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002598:	2100      	movs	r1, #0
 800259a:	2000      	movs	r0, #0
 800259c:	f000 fa2c 	bl	80029f8 <ili9341_FillRect>
  LCD_Delay(10);
 80025a0:	200a      	movs	r0, #10
 80025a2:	f001 fb03 	bl	8003bac <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80025a6:	2029      	movs	r0, #41	; 0x29
 80025a8:	f001 fbb6 	bl	8003d18 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80025ac:	200a      	movs	r0, #10
 80025ae:	f001 fafd 	bl	8003bac <LCD_Delay>
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200005a8 	.word	0x200005a8
 80025bc:	08007280 	.word	0x08007280
 80025c0:	08007284 	.word	0x08007284
 80025c4:	08007288 	.word	0x08007288
 80025c8:	08007290 	.word	0x08007290
 80025cc:	08007294 	.word	0x08007294
 80025d0:	0800729c 	.word	0x0800729c
 80025d4:	080072a0 	.word	0x080072a0
 80025d8:	080072a4 	.word	0x080072a4
 80025dc:	080072a8 	.word	0x080072a8
 80025e0:	080072ac 	.word	0x080072ac
 80025e4:	080072b0 	.word	0x080072b0
 80025e8:	080072b4 	.word	0x080072b4
 80025ec:	080072b8 	.word	0x080072b8
 80025f0:	080072bc 	.word	0x080072bc
 80025f4:	080072c0 	.word	0x080072c0
 80025f8:	080072c4 	.word	0x080072c4
 80025fc:	080072c8 	.word	0x080072c8
 8002600:	080072d8 	.word	0x080072d8

08002604 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	460a      	mov	r2, r1
 800260e:	80fb      	strh	r3, [r7, #6]
 8002610:	4613      	mov	r3, r2
 8002612:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002614:	202a      	movs	r0, #42	; 0x2a
 8002616:	f001 fb7f 	bl	8003d18 <LCD_IO_WriteCmd8>
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	b29b      	uxth	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fb94 	bl	8003d50 <LCD_IO_WriteData8>
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fb8f 	bl	8003d50 <LCD_IO_WriteData8>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	b29b      	uxth	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fb88 	bl	8003d50 <LCD_IO_WriteData8>
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fb83 	bl	8003d50 <LCD_IO_WriteData8>
 800264a:	202b      	movs	r0, #43	; 0x2b
 800264c:	f001 fb64 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002650:	88bb      	ldrh	r3, [r7, #4]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	b29b      	uxth	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fb79 	bl	8003d50 <LCD_IO_WriteData8>
 800265e:	88bb      	ldrh	r3, [r7, #4]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f001 fb74 	bl	8003d50 <LCD_IO_WriteData8>
 8002668:	88bb      	ldrh	r3, [r7, #4]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	b29b      	uxth	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fb6d 	bl	8003d50 <LCD_IO_WriteData8>
 8002676:	88bb      	ldrh	r3, [r7, #4]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f001 fb68 	bl	8003d50 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
 8002692:	460b      	mov	r3, r1
 8002694:	80bb      	strh	r3, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 800269a:	202a      	movs	r0, #42	; 0x2a
 800269c:	f001 fb3c 	bl	8003d18 <LCD_IO_WriteCmd8>
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 fb51 	bl	8003d50 <LCD_IO_WriteData8>
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 fb4c 	bl	8003d50 <LCD_IO_WriteData8>
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b29b      	uxth	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 fb45 	bl	8003d50 <LCD_IO_WriteData8>
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f001 fb40 	bl	8003d50 <LCD_IO_WriteData8>
 80026d0:	202b      	movs	r0, #43	; 0x2b
 80026d2:	f001 fb21 	bl	8003d18 <LCD_IO_WriteCmd8>
 80026d6:	88bb      	ldrh	r3, [r7, #4]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	b29b      	uxth	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 fb36 	bl	8003d50 <LCD_IO_WriteData8>
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 fb31 	bl	8003d50 <LCD_IO_WriteData8>
 80026ee:	88bb      	ldrh	r3, [r7, #4]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fb2a 	bl	8003d50 <LCD_IO_WriteData8>
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fb25 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8002706:	202c      	movs	r0, #44	; 0x2c
 8002708:	f001 fb06 	bl	8003d18 <LCD_IO_WriteCmd8>
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fb3a 	bl	8003d88 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	460a      	mov	r2, r1
 8002726:	80fb      	strh	r3, [r7, #6]
 8002728:	4613      	mov	r3, r2
 800272a:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 800272c:	2201      	movs	r2, #1
 800272e:	4925      	ldr	r1, [pc, #148]	; (80027c4 <ili9341_ReadPixel+0xa8>)
 8002730:	203a      	movs	r0, #58	; 0x3a
 8002732:	f001 fb6b 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002736:	202a      	movs	r0, #42	; 0x2a
 8002738:	f001 faee 	bl	8003d18 <LCD_IO_WriteCmd8>
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	f001 fb03 	bl	8003d50 <LCD_IO_WriteData8>
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fafe 	bl	8003d50 <LCD_IO_WriteData8>
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b29b      	uxth	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	f001 faf7 	bl	8003d50 <LCD_IO_WriteData8>
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f001 faf2 	bl	8003d50 <LCD_IO_WriteData8>
 800276c:	202b      	movs	r0, #43	; 0x2b
 800276e:	f001 fad3 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002772:	88bb      	ldrh	r3, [r7, #4]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	b29b      	uxth	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f001 fae8 	bl	8003d50 <LCD_IO_WriteData8>
 8002780:	88bb      	ldrh	r3, [r7, #4]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fae3 	bl	8003d50 <LCD_IO_WriteData8>
 800278a:	88bb      	ldrh	r3, [r7, #4]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	b29b      	uxth	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fadc 	bl	8003d50 <LCD_IO_WriteData8>
 8002798:	88bb      	ldrh	r3, [r7, #4]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f001 fad7 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 80027a2:	f107 010e 	add.w	r1, r7, #14
 80027a6:	2301      	movs	r3, #1
 80027a8:	2201      	movs	r2, #1
 80027aa:	202e      	movs	r0, #46	; 0x2e
 80027ac:	f001 fb98 	bl	8003ee0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 80027b0:	2201      	movs	r2, #1
 80027b2:	4905      	ldr	r1, [pc, #20]	; (80027c8 <ili9341_ReadPixel+0xac>)
 80027b4:	203a      	movs	r0, #58	; 0x3a
 80027b6:	f001 fb29 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 80027ba:	89fb      	ldrh	r3, [r7, #14]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	080072e8 	.word	0x080072e8
 80027c8:	080072b8 	.word	0x080072b8

080027cc <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4604      	mov	r4, r0
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4623      	mov	r3, r4
 80027dc:	80fb      	strh	r3, [r7, #6]
 80027de:	4603      	mov	r3, r0
 80027e0:	80bb      	strh	r3, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	807b      	strh	r3, [r7, #2]
 80027e6:	4613      	mov	r3, r2
 80027e8:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80027ea:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <ili9341_SetDisplayWindow+0xc8>)
 80027ec:	88bb      	ldrh	r3, [r7, #4]
 80027ee:	8013      	strh	r3, [r2, #0]
 80027f0:	88ba      	ldrh	r2, [r7, #4]
 80027f2:	883b      	ldrh	r3, [r7, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <ili9341_SetDisplayWindow+0xcc>)
 80027fe:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8002800:	202a      	movs	r0, #42	; 0x2a
 8002802:	f001 fa89 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b29b      	uxth	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f001 fa9e 	bl	8003d50 <LCD_IO_WriteData8>
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fa99 	bl	8003d50 <LCD_IO_WriteData8>
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	4413      	add	r3, r2
 8002824:	3b01      	subs	r3, #1
 8002826:	121b      	asrs	r3, r3, #8
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fa90 	bl	8003d50 <LCD_IO_WriteData8>
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4413      	add	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fa85 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8002846:	202b      	movs	r0, #43	; 0x2b
 8002848:	f001 fa66 	bl	8003d18 <LCD_IO_WriteCmd8>
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b29b      	uxth	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	f001 fa7b 	bl	8003d50 <LCD_IO_WriteData8>
 800285a:	88bb      	ldrh	r3, [r7, #4]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f001 fa76 	bl	8003d50 <LCD_IO_WriteData8>
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	883b      	ldrh	r3, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	3b01      	subs	r3, #1
 800286c:	121b      	asrs	r3, r3, #8
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	f001 fa6d 	bl	8003d50 <LCD_IO_WriteData8>
 8002876:	88bb      	ldrh	r3, [r7, #4]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	883b      	ldrh	r3, [r7, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4413      	add	r3, r2
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fa62 	bl	8003d50 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	200005aa 	.word	0x200005aa
 8002898:	200005ac 	.word	0x200005ac

0800289c <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4604      	mov	r4, r0
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	80fb      	strh	r3, [r7, #6]
 80028ae:	4603      	mov	r3, r0
 80028b0:	80bb      	strh	r3, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	807b      	strh	r3, [r7, #2]
 80028b6:	4613      	mov	r3, r2
 80028b8:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 80028ba:	202a      	movs	r0, #42	; 0x2a
 80028bc:	f001 fa2c 	bl	8003d18 <LCD_IO_WriteCmd8>
 80028c0:	88bb      	ldrh	r3, [r7, #4]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 fa41 	bl	8003d50 <LCD_IO_WriteData8>
 80028ce:	88bb      	ldrh	r3, [r7, #4]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 fa3c 	bl	8003d50 <LCD_IO_WriteData8>
 80028d8:	88ba      	ldrh	r2, [r7, #4]
 80028da:	883b      	ldrh	r3, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	3b01      	subs	r3, #1
 80028e0:	121b      	asrs	r3, r3, #8
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 fa33 	bl	8003d50 <LCD_IO_WriteData8>
 80028ea:	88bb      	ldrh	r3, [r7, #4]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	883b      	ldrh	r3, [r7, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 fa28 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8002900:	202b      	movs	r0, #43	; 0x2b
 8002902:	f001 fa09 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b29b      	uxth	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fa1e 	bl	8003d50 <LCD_IO_WriteData8>
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4618      	mov	r0, r3
 800291a:	f001 fa19 	bl	8003d50 <LCD_IO_WriteData8>
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	b29b      	uxth	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fa12 	bl	8003d50 <LCD_IO_WriteData8>
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	f001 fa0d 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8002936:	883a      	ldrh	r2, [r7, #0]
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	4619      	mov	r1, r3
 800293c:	202c      	movs	r0, #44	; 0x2c
 800293e:	f001 fa3f 	bl	8003dc0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}

0800294a <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800294a:	b590      	push	{r4, r7, lr}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	4604      	mov	r4, r0
 8002952:	4608      	mov	r0, r1
 8002954:	4611      	mov	r1, r2
 8002956:	461a      	mov	r2, r3
 8002958:	4623      	mov	r3, r4
 800295a:	80fb      	strh	r3, [r7, #6]
 800295c:	4603      	mov	r3, r0
 800295e:	80bb      	strh	r3, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8002968:	202a      	movs	r0, #42	; 0x2a
 800296a:	f001 f9d5 	bl	8003d18 <LCD_IO_WriteCmd8>
 800296e:	88bb      	ldrh	r3, [r7, #4]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	b29b      	uxth	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f001 f9ea 	bl	8003d50 <LCD_IO_WriteData8>
 800297c:	88bb      	ldrh	r3, [r7, #4]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f9e5 	bl	8003d50 <LCD_IO_WriteData8>
 8002986:	88bb      	ldrh	r3, [r7, #4]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	b29b      	uxth	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4618      	mov	r0, r3
 8002990:	f001 f9de 	bl	8003d50 <LCD_IO_WriteData8>
 8002994:	88bb      	ldrh	r3, [r7, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	f001 f9d9 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 800299e:	202b      	movs	r0, #43	; 0x2b
 80029a0:	f001 f9ba 	bl	8003d18 <LCD_IO_WriteCmd8>
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 f9cf 	bl	8003d50 <LCD_IO_WriteData8>
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f9ca 	bl	8003d50 <LCD_IO_WriteData8>
 80029bc:	887a      	ldrh	r2, [r7, #2]
 80029be:	883b      	ldrh	r3, [r7, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	3b01      	subs	r3, #1
 80029c4:	121b      	asrs	r3, r3, #8
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 f9c1 	bl	8003d50 <LCD_IO_WriteData8>
 80029ce:	887b      	ldrh	r3, [r7, #2]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	883b      	ldrh	r3, [r7, #0]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 f9b6 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 80029e4:	883a      	ldrh	r2, [r7, #0]
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4619      	mov	r1, r3
 80029ea:	202c      	movs	r0, #44	; 0x2c
 80029ec:	f001 f9e8 	bl	8003dc0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4623      	mov	r3, r4
 8002a08:	80fb      	strh	r3, [r7, #6]
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80bb      	strh	r3, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	807b      	strh	r3, [r7, #2]
 8002a12:	4613      	mov	r3, r2
 8002a14:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8002a16:	202a      	movs	r0, #42	; 0x2a
 8002a18:	f001 f97e 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f993 	bl	8003d50 <LCD_IO_WriteData8>
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 f98e 	bl	8003d50 <LCD_IO_WriteData8>
 8002a34:	88fa      	ldrh	r2, [r7, #6]
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	121b      	asrs	r3, r3, #8
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 f985 	bl	8003d50 <LCD_IO_WriteData8>
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 f97a 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8002a5c:	202b      	movs	r0, #43	; 0x2b
 8002a5e:	f001 f95b 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002a62:	88bb      	ldrh	r3, [r7, #4]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 f970 	bl	8003d50 <LCD_IO_WriteData8>
 8002a70:	88bb      	ldrh	r3, [r7, #4]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f96b 	bl	8003d50 <LCD_IO_WriteData8>
 8002a7a:	88ba      	ldrh	r2, [r7, #4]
 8002a7c:	883b      	ldrh	r3, [r7, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b01      	subs	r3, #1
 8002a82:	121b      	asrs	r3, r3, #8
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 f962 	bl	8003d50 <LCD_IO_WriteData8>
 8002a8c:	88bb      	ldrh	r3, [r7, #4]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	883b      	ldrh	r3, [r7, #0]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 f957 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	883a      	ldrh	r2, [r7, #0]
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	8b3b      	ldrh	r3, [r7, #24]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	202c      	movs	r0, #44	; 0x2c
 8002ab2:	f001 f985 	bl	8003dc0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd90      	pop	{r4, r7, pc}
	...

08002ac0 <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	603a      	str	r2, [r7, #0]
 8002aca:	80fb      	strh	r3, [r7, #6]
 8002acc:	460b      	mov	r3, r1
 8002ace:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002ad6:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002ade:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4413      	add	r3, r2
 8002af0:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 8002af2:	2036      	movs	r0, #54	; 0x36
 8002af4:	f001 f910 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002af8:	20a8      	movs	r0, #168	; 0xa8
 8002afa:	f001 f929 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 8002afe:	202b      	movs	r0, #43	; 0x2b
 8002b00:	f001 f90a 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <ili9341_DrawBitmap+0xb0>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002b0c:	121b      	asrs	r3, r3, #8
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 f91d 	bl	8003d50 <LCD_IO_WriteData8>
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <ili9341_DrawBitmap+0xb0>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	f06f 0310 	mvn.w	r3, #16
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f913 	bl	8003d50 <LCD_IO_WriteData8>
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <ili9341_DrawBitmap+0xb4>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002b32:	121b      	asrs	r3, r3, #8
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f90a 	bl	8003d50 <LCD_IO_WriteData8>
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <ili9341_DrawBitmap+0xb4>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	f06f 0310 	mvn.w	r3, #16
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 f900 	bl	8003d50 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	202c      	movs	r0, #44	; 0x2c
 8002b56:	f001 f979 	bl	8003e4c <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002b5a:	2036      	movs	r0, #54	; 0x36
 8002b5c:	f001 f8dc 	bl	8003d18 <LCD_IO_WriteCmd8>
 8002b60:	20e8      	movs	r0, #232	; 0xe8
 8002b62:	f001 f8f5 	bl	8003d50 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200005ac 	.word	0x200005ac
 8002b74:	200005aa 	.word	0x200005aa

08002b78 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4604      	mov	r4, r0
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	80fb      	strh	r3, [r7, #6]
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80bb      	strh	r3, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]
 8002b92:	4613      	mov	r3, r2
 8002b94:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002b96:	883b      	ldrh	r3, [r7, #0]
 8002b98:	887a      	ldrh	r2, [r7, #2]
 8002b9a:	88b9      	ldrh	r1, [r7, #4]
 8002b9c:	88f8      	ldrh	r0, [r7, #6]
 8002b9e:	f7ff fe15 	bl	80027cc <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	883a      	ldrh	r2, [r7, #0]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	69b9      	ldr	r1, [r7, #24]
 8002bae:	202c      	movs	r0, #44	; 0x2c
 8002bb0:	f001 f94c 	bl	8003e4c <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	80fb      	strh	r3, [r7, #6]
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80bb      	strh	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	807b      	strh	r3, [r7, #2]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002bda:	883b      	ldrh	r3, [r7, #0]
 8002bdc:	887a      	ldrh	r2, [r7, #2]
 8002bde:	88b9      	ldrh	r1, [r7, #4]
 8002be0:	88f8      	ldrh	r0, [r7, #6]
 8002be2:	f7ff fdf3 	bl	80027cc <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8002be6:	2201      	movs	r2, #1
 8002be8:	490b      	ldr	r1, [pc, #44]	; (8002c18 <ili9341_ReadRGBImage+0x5c>)
 8002bea:	203a      	movs	r0, #58	; 0x3a
 8002bec:	f001 f90e 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	883a      	ldrh	r2, [r7, #0]
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	69b9      	ldr	r1, [r7, #24]
 8002bfe:	202e      	movs	r0, #46	; 0x2e
 8002c00:	f001 f96e 	bl	8003ee0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8002c04:	2201      	movs	r2, #1
 8002c06:	4905      	ldr	r1, [pc, #20]	; (8002c1c <ili9341_ReadRGBImage+0x60>)
 8002c08:	203a      	movs	r0, #58	; 0x3a
 8002c0a:	f001 f8ff 	bl	8003e0c <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	080072e8 	.word	0x080072e8
 8002c1c:	080072b8 	.word	0x080072b8

08002c20 <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	80bb      	strh	r3, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c34:	88db      	ldrh	r3, [r3, #6]
 8002c36:	88ba      	ldrh	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d104      	bne.n	8002c46 <ili9341_Scroll+0x26>
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c3e:	885b      	ldrh	r3, [r3, #2]
 8002c40:	887a      	ldrh	r2, [r7, #2]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d013      	beq.n	8002c6e <ili9341_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8002c46:	4a23      	ldr	r2, [pc, #140]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c48:	88bb      	ldrh	r3, [r7, #4]
 8002c4a:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8002c4c:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8002c52:	88ba      	ldrh	r2, [r7, #4]
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	4413      	add	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c62:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 8002c64:	2203      	movs	r2, #3
 8002c66:	491c      	ldr	r1, [pc, #112]	; (8002cd8 <ili9341_Scroll+0xb8>)
 8002c68:	2033      	movs	r0, #51	; 0x33
 8002c6a:	f001 f8ef 	bl	8003e4c <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8002c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c74:	8892      	ldrh	r2, [r2, #4]
 8002c76:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c7a:	fb01 f202 	mul.w	r2, r1, r2
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8002c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da0a      	bge.n	8002ca0 <ili9341_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c8c:	889a      	ldrh	r2, [r3, #4]
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	4413      	add	r3, r2
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002c96:	885b      	ldrh	r3, [r3, #2]
 8002c98:	4413      	add	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	80fb      	strh	r3, [r7, #6]
 8002c9e:	e005      	b.n	8002cac <ili9341_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002ca2:	885a      	ldrh	r2, [r3, #2]
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8002cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb0:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002cb2:	8812      	ldrh	r2, [r2, #0]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <ili9341_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002cbc:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <ili9341_Scroll+0xb4>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	2037      	movs	r0, #55	; 0x37
 8002cc8:	f001 f87a 	bl	8003dc0 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	200005b0 	.word	0x200005b0
 8002cd8:	200005b2 	.word	0x200005b2

08002cdc <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <BSP_LCD_Init+0x3c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <BSP_LCD_Init+0x40>)
 8002cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf4:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <BSP_LCD_Init+0x40>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <BSP_LCD_Init+0x40>)
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <BSP_LCD_Init+0x44>)
 8002d00:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8002d02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d06:	f000 f843 	bl	8002d90 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000080 	.word	0x20000080
 8002d1c:	200005b8 	.word	0x200005b8
 8002d20:	20000008 	.word	0x20000008

08002d24 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <BSP_LCD_GetXSize+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	4798      	blx	r3
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000080 	.word	0x20000080

08002d3c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <BSP_LCD_GetYSize+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	4798      	blx	r3
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000080 	.word	0x20000080

08002d54 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <BSP_LCD_SetTextColor+0x1c>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	200005b8 	.word	0x200005b8

08002d74 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8002d7c:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <BSP_LCD_SetFont+0x18>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6093      	str	r3, [r2, #8]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	200005b8 	.word	0x200005b8

08002d90 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8002d90:	b5b0      	push	{r4, r5, r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <BSP_LCD_Clear+0x38>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002da0:	f7ff ffc0 	bl	8002d24 <BSP_LCD_GetXSize>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461d      	mov	r5, r3
 8002da8:	f7ff ffc8 	bl	8002d3c <BSP_LCD_GetYSize>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	462a      	mov	r2, r5
 8002db8:	2100      	movs	r1, #0
 8002dba:	2000      	movs	r0, #0
 8002dbc:	47a0      	blx	r4
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000080 	.word	0x20000080

08002dcc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	80bb      	strh	r3, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <BSP_LCD_DisplayChar+0x50>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002de8:	490c      	ldr	r1, [pc, #48]	; (8002e1c <BSP_LCD_DisplayChar+0x50>)
 8002dea:	6889      	ldr	r1, [r1, #8]
 8002dec:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002dee:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <BSP_LCD_DisplayChar+0x50>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	889b      	ldrh	r3, [r3, #4]
 8002df8:	3307      	adds	r3, #7
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	da00      	bge.n	8002e00 <BSP_LCD_DisplayChar+0x34>
 8002dfe:	3307      	adds	r3, #7
 8002e00:	10db      	asrs	r3, r3, #3
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002e06:	441a      	add	r2, r3
 8002e08:	88b9      	ldrh	r1, [r7, #4]
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f9b7 	bl	8003180 <DrawChar>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200005b8 	.word	0x200005b8

08002e20 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60ba      	str	r2, [r7, #8]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	81fb      	strh	r3, [r7, #14]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	81bb      	strh	r3, [r7, #12]
 8002e32:	4613      	mov	r3, r2
 8002e34:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e36:	2301      	movs	r3, #1
 8002e38:	83fb      	strh	r3, [r7, #30]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002e4a:	e002      	b.n	8002e52 <BSP_LCD_DisplayStringAt+0x32>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	617a      	str	r2, [r7, #20]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f6      	bne.n	8002e4c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002e5e:	f7ff ff61 	bl	8002d24 <BSP_LCD_GetXSize>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <BSP_LCD_DisplayStringAt+0x11c>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	889b      	ldrh	r3, [r3, #4]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d014      	beq.n	8002ea4 <BSP_LCD_DisplayStringAt+0x84>
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	dc23      	bgt.n	8002ec6 <BSP_LCD_DisplayStringAt+0xa6>
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d002      	beq.n	8002e88 <BSP_LCD_DisplayStringAt+0x68>
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d011      	beq.n	8002eaa <BSP_LCD_DisplayStringAt+0x8a>
 8002e86:	e01e      	b.n	8002ec6 <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	4a2b      	ldr	r2, [pc, #172]	; (8002f3c <BSP_LCD_DisplayStringAt+0x11c>)
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	8892      	ldrh	r2, [r2, #4]
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	89fb      	ldrh	r3, [r7, #14]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	83fb      	strh	r3, [r7, #30]
      break;
 8002ea2:	e013      	b.n	8002ecc <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002ea4:	89fb      	ldrh	r3, [r7, #14]
 8002ea6:	83fb      	strh	r3, [r7, #30]
      break;
 8002ea8:	e010      	b.n	8002ecc <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <BSP_LCD_DisplayStringAt+0x11c>)
 8002eb4:	6892      	ldr	r2, [r2, #8]
 8002eb6:	8892      	ldrh	r2, [r2, #4]
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	89fb      	ldrh	r3, [r7, #14]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ec4:	e002      	b.n	8002ecc <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 8002ec6:	89fb      	ldrh	r3, [r7, #14]
 8002ec8:	83fb      	strh	r3, [r7, #30]
      break;
 8002eca:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002ecc:	e012      	b.n	8002ef4 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	89b9      	ldrh	r1, [r7, #12]
 8002ed4:	8bfb      	ldrh	r3, [r7, #30]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff78 	bl	8002dcc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002edc:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <BSP_LCD_DisplayStringAt+0x11c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	889a      	ldrh	r2, [r3, #4]
 8002ee2:	8bfb      	ldrh	r3, [r7, #30]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3301      	adds	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
    i++;
 8002eee:	8bbb      	ldrh	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2dc      	uxtb	r4, r3
 8002f02:	f7ff ff0f 	bl	8002d24 <BSP_LCD_GetXSize>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4619      	mov	r1, r3
 8002f0a:	8bbb      	ldrh	r3, [r7, #28]
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <BSP_LCD_DisplayStringAt+0x11c>)
 8002f0e:	6892      	ldr	r2, [r2, #8]
 8002f10:	8892      	ldrh	r2, [r2, #4]
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	1acb      	subs	r3, r1, r3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <BSP_LCD_DisplayStringAt+0x11c>)
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	8892      	ldrh	r2, [r2, #4]
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bfac      	ite	ge
 8002f24:	2301      	movge	r3, #1
 8002f26:	2300      	movlt	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4023      	ands	r3, r4
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1cd      	bne.n	8002ece <BSP_LCD_DisplayStringAt+0xae>
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	3724      	adds	r7, #36	; 0x24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	200005b8 	.word	0x200005b8

08002f40 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	80bb      	strh	r3, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <BSP_LCD_DrawPixel+0x34>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <BSP_LCD_DrawPixel+0x34>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	88b9      	ldrh	r1, [r7, #4]
 8002f66:	88f8      	ldrh	r0, [r7, #6]
 8002f68:	4798      	blx	r3
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000080 	.word	0x20000080

08002f78 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
 8002f82:	460b      	mov	r3, r1
 8002f84:	80bb      	strh	r3, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <BSP_LCD_DrawHLine+0x6c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <BSP_LCD_DrawHLine+0x6c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1c      	ldr	r4, [r3, #32]
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <BSP_LCD_DrawHLine+0x70>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b298      	uxth	r0, r3
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	88ba      	ldrh	r2, [r7, #4]
 8002fa8:	88f9      	ldrh	r1, [r7, #6]
 8002faa:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002fac:	e015      	b.n	8002fda <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e00e      	b.n	8002fd2 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <BSP_LCD_DrawHLine+0x70>)
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	88b9      	ldrh	r1, [r7, #4]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ffba 	bl	8002f40 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3ec      	bcc.n	8002fb4 <BSP_LCD_DrawHLine+0x3c>
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000080 	.word	0x20000080
 8002fe8:	200005b8 	.word	0x200005b8

08002fec <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	80bb      	strh	r3, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <BSP_LCD_DrawVLine+0x6c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <BSP_LCD_DrawVLine+0x6c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <BSP_LCD_DrawVLine+0x70>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b298      	uxth	r0, r3
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	88ba      	ldrh	r2, [r7, #4]
 800301c:	88f9      	ldrh	r1, [r7, #6]
 800301e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8003020:	e015      	b.n	800304e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e00e      	b.n	8003046 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	b29a      	uxth	r2, r3
 800302c:	88bb      	ldrh	r3, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	b299      	uxth	r1, r3
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <BSP_LCD_DrawVLine+0x70>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29a      	uxth	r2, r3
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff80 	bl	8002f40 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3ec      	bcc.n	8003028 <BSP_LCD_DrawVLine+0x3c>
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	bf00      	nop
 8003058:	20000080 	.word	0x20000080
 800305c:	200005b8 	.word	0x200005b8

08003060 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4604      	mov	r4, r0
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4623      	mov	r3, r4
 8003070:	80fb      	strh	r3, [r7, #6]
 8003072:	4603      	mov	r3, r0
 8003074:	80bb      	strh	r3, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	807b      	strh	r3, [r7, #2]
 800307a:	4613      	mov	r3, r2
 800307c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	88b9      	ldrh	r1, [r7, #4]
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff77 	bl	8002f78 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 800308a:	88ba      	ldrh	r2, [r7, #4]
 800308c:	883b      	ldrh	r3, [r7, #0]
 800308e:	4413      	add	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b299      	uxth	r1, r3
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff6c 	bl	8002f78 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80030a0:	883a      	ldrh	r2, [r7, #0]
 80030a2:	88b9      	ldrh	r1, [r7, #4]
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ffa0 	bl	8002fec <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	4413      	add	r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	883a      	ldrh	r2, [r7, #0]
 80030ba:	88b9      	ldrh	r1, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff95 	bl	8002fec <BSP_LCD_DrawVLine>
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}
	...

080030cc <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	603a      	str	r2, [r7, #0]
 80030d6:	80fb      	strh	r3, [r7, #6]
 80030d8:	460b      	mov	r3, r1
 80030da:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	3312      	adds	r3, #18
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	3313      	adds	r3, #19
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	441a      	add	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3314      	adds	r3, #20
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	441a      	add	r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	3315      	adds	r3, #21
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	4413      	add	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	3316      	adds	r3, #22
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	3317      	adds	r3, #23
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	441a      	add	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	3318      	adds	r3, #24
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	441a      	add	r2, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3319      	adds	r3, #25
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	061b      	lsls	r3, r3, #24
 8003130:	4413      	add	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	b29b      	uxth	r3, r3
 800313c:	88b9      	ldrh	r1, [r7, #4]
 800313e:	88f8      	ldrh	r0, [r7, #6]
 8003140:	f000 f910 	bl	8003364 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <BSP_LCD_DrawBitmap+0xb0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <BSP_LCD_DrawBitmap+0xb0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	88b9      	ldrh	r1, [r7, #4]
 8003156:	88f8      	ldrh	r0, [r7, #6]
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800315c:	f7ff fde2 	bl	8002d24 <BSP_LCD_GetXSize>
 8003160:	4603      	mov	r3, r0
 8003162:	461c      	mov	r4, r3
 8003164:	f7ff fdea 	bl	8002d3c <BSP_LCD_GetYSize>
 8003168:	4603      	mov	r3, r0
 800316a:	4622      	mov	r2, r4
 800316c:	2100      	movs	r1, #0
 800316e:	2000      	movs	r0, #0
 8003170:	f000 f8f8 	bl	8003364 <SetDisplayWindow>
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	20000080 	.word	0x20000080

08003180 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	603a      	str	r2, [r7, #0]
 800318a:	80fb      	strh	r3, [r7, #6]
 800318c:	460b      	mov	r3, r1
 800318e:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	2300      	movs	r3, #0
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	82fb      	strh	r3, [r7, #22]
 80031a0:	2300      	movs	r3, #0
 80031a2:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 80031b0:	4b63      	ldr	r3, [pc, #396]	; (8003340 <DrawChar+0x1c0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	88db      	ldrh	r3, [r3, #6]
 80031b6:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80031b8:	4b61      	ldr	r3, [pc, #388]	; (8003340 <DrawChar+0x1c0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	889b      	ldrh	r3, [r3, #4]
 80031be:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80031c0:	8afb      	ldrh	r3, [r7, #22]
 80031c2:	8aba      	ldrh	r2, [r7, #20]
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	331b      	adds	r3, #27
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	4a5d      	ldr	r2, [pc, #372]	; (8003344 <DrawChar+0x1c4>)
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	8aba      	ldrh	r2, [r7, #20]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	331b      	adds	r3, #27
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	141a      	asrs	r2, r3, #16
 80031e4:	4b58      	ldr	r3, [pc, #352]	; (8003348 <DrawChar+0x1c8>)
 80031e6:	b292      	uxth	r2, r2
 80031e8:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 80031ea:	4b58      	ldr	r3, [pc, #352]	; (800334c <DrawChar+0x1cc>)
 80031ec:	2236      	movs	r2, #54	; 0x36
 80031ee:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 80031f0:	4a57      	ldr	r2, [pc, #348]	; (8003350 <DrawChar+0x1d0>)
 80031f2:	8abb      	ldrh	r3, [r7, #20]
 80031f4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 80031f6:	8abb      	ldrh	r3, [r7, #20]
 80031f8:	141a      	asrs	r2, r3, #16
 80031fa:	4b56      	ldr	r3, [pc, #344]	; (8003354 <DrawChar+0x1d4>)
 80031fc:	b292      	uxth	r2, r2
 80031fe:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8003200:	4a55      	ldr	r2, [pc, #340]	; (8003358 <DrawChar+0x1d8>)
 8003202:	8afb      	ldrh	r3, [r7, #22]
 8003204:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8003206:	8afb      	ldrh	r3, [r7, #22]
 8003208:	141a      	asrs	r2, r3, #16
 800320a:	4b54      	ldr	r3, [pc, #336]	; (800335c <DrawChar+0x1dc>)
 800320c:	b292      	uxth	r2, r2
 800320e:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8003210:	8abb      	ldrh	r3, [r7, #20]
 8003212:	3307      	adds	r3, #7
 8003214:	2b00      	cmp	r3, #0
 8003216:	da00      	bge.n	800321a <DrawChar+0x9a>
 8003218:	3307      	adds	r3, #7
 800321a:	10db      	asrs	r3, r3, #3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8abb      	ldrh	r3, [r7, #20]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e078      	b.n	8003322 <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8003230:	8abb      	ldrh	r3, [r7, #20]
 8003232:	3307      	adds	r3, #7
 8003234:	2b00      	cmp	r3, #0
 8003236:	da00      	bge.n	800323a <DrawChar+0xba>
 8003238:	3307      	adds	r3, #7
 800323a:	10db      	asrs	r3, r3, #3
 800323c:	461a      	mov	r2, r3
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 800324a:	8abb      	ldrh	r3, [r7, #20]
 800324c:	3b11      	subs	r3, #17
 800324e:	2b07      	cmp	r3, #7
 8003250:	d80c      	bhi.n	800326c <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	041a      	lsls	r2, r3, #16
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	4313      	orrs	r3, r2
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	3202      	adds	r2, #2
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	4313      	orrs	r3, r2
 800326a:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	3b09      	subs	r3, #9
 8003270:	2b07      	cmp	r3, #7
 8003272:	d807      	bhi.n	8003284 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	3201      	adds	r2, #1
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8003284:	8abb      	ldrh	r3, [r7, #20]
 8003286:	3b01      	subs	r3, #1
 8003288:	2b07      	cmp	r3, #7
 800328a:	d802      	bhi.n	8003292 <DrawChar+0x112>
    {
      line =  pchar[0];
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
 8003296:	e03d      	b.n	8003314 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8003298:	8afa      	ldrh	r2, [r7, #22]
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	8aba      	ldrh	r2, [r7, #20]
 80032a2:	fb03 f202 	mul.w	r2, r3, r2
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	4413      	add	r3, r2
 80032aa:	331b      	adds	r3, #27
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 80032b0:	8aba      	ldrh	r2, [r7, #20]
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	1ad2      	subs	r2, r2, r3
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	4413      	add	r3, r2
 80032ba:	3b01      	subs	r3, #1
 80032bc:	2201      	movs	r2, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <DrawChar+0x1c0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b2d9      	uxtb	r1, r3
 80032d2:	4a23      	ldr	r2, [pc, #140]	; (8003360 <DrawChar+0x1e0>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	460a      	mov	r2, r1
 80032da:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <DrawChar+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0a1a      	lsrs	r2, r3, #8
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	3301      	adds	r3, #1
 80032e6:	b2d1      	uxtb	r1, r2
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <DrawChar+0x1e0>)
 80032ea:	54d1      	strb	r1, [r2, r3]
 80032ec:	e00f      	b.n	800330e <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <DrawChar+0x1c0>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	b2d9      	uxtb	r1, r3
 80032f4:	4a1a      	ldr	r2, [pc, #104]	; (8003360 <DrawChar+0x1e0>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	460a      	mov	r2, r1
 80032fc:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <DrawChar+0x1c0>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	0a1a      	lsrs	r2, r3, #8
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	3301      	adds	r3, #1
 8003308:	b2d1      	uxtb	r1, r2
 800330a:	4a15      	ldr	r2, [pc, #84]	; (8003360 <DrawChar+0x1e0>)
 800330c:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	3301      	adds	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
 8003314:	8abb      	ldrh	r3, [r7, #20]
 8003316:	6a3a      	ldr	r2, [r7, #32]
 8003318:	429a      	cmp	r2, r3
 800331a:	d3bd      	bcc.n	8003298 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	3301      	adds	r3, #1
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	8afb      	ldrh	r3, [r7, #22]
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	429a      	cmp	r2, r3
 8003328:	d382      	bcc.n	8003230 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 800332a:	88b9      	ldrh	r1, [r7, #4]
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <DrawChar+0x1e0>)
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fecb 	bl	80030cc <BSP_LCD_DrawBitmap>
}
 8003336:	bf00      	nop
 8003338:	3728      	adds	r7, #40	; 0x28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200005b8 	.word	0x200005b8
 8003344:	200005c6 	.word	0x200005c6
 8003348:	200005c8 	.word	0x200005c8
 800334c:	200005ce 	.word	0x200005ce
 8003350:	200005d6 	.word	0x200005d6
 8003354:	200005d8 	.word	0x200005d8
 8003358:	200005da 	.word	0x200005da
 800335c:	200005dc 	.word	0x200005dc
 8003360:	200005c4 	.word	0x200005c4

08003364 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4604      	mov	r4, r0
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4623      	mov	r3, r4
 8003374:	80fb      	strh	r3, [r7, #6]
 8003376:	4603      	mov	r3, r0
 8003378:	80bb      	strh	r3, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	807b      	strh	r3, [r7, #2]
 800337e:	4613      	mov	r3, r2
 8003380:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <SetDisplayWindow+0x40>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <SetDisplayWindow+0x40>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69dc      	ldr	r4, [r3, #28]
 8003392:	883b      	ldrh	r3, [r7, #0]
 8003394:	887a      	ldrh	r2, [r7, #2]
 8003396:	88b9      	ldrh	r1, [r7, #4]
 8003398:	88f8      	ldrh	r0, [r7, #6]
 800339a:	47a0      	blx	r4
  }  
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	20000080 	.word	0x20000080

080033a8 <__NVIC_EnableIRQ>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4906      	ldr	r1, [pc, #24]	; (80033dc <__NVIC_EnableIRQ+0x34>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <LcdDirRead+0x70>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003444:	4a17      	ldr	r2, [pc, #92]	; (80034a4 <LcdDirRead+0x70>)
 8003446:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800344a:	6013      	str	r3, [r2, #0]
  while(d--)
 800344c:	e008      	b.n	8003460 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <LcdDirRead+0x74>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8003454:	2000      	movs	r0, #0
 8003456:	f000 fb99 	bl	8003b8c <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <LcdDirRead+0x74>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]
  while(d--)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f1      	bne.n	800344e <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <LcdDirRead+0x70>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <LcdDirRead+0x70>)
 8003474:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8003478:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800347a:	e002      	b.n	8003482 <LcdDirRead+0x4e>
    d = SPIX->DR;
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <LcdDirRead+0x78>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <LcdDirRead+0x7c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f8      	bne.n	800347c <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <LcdDirRead+0x78>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8003492:	4a06      	ldr	r2, [pc, #24]	; (80034ac <LcdDirRead+0x78>)
 8003494:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 8003498:	6013      	str	r3, [r2, #0]
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40010c04 	.word	0x40010c04
 80034a8:	422181b4 	.word	0x422181b4
 80034ac:	40003800 	.word	0x40003800
 80034b0:	42070100 	.word	0x42070100

080034b4 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <LcdDirWrite+0x5c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a14      	ldr	r2, [pc, #80]	; (8003510 <LcdDirWrite+0x5c>)
 80034c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c4:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80034c6:	e002      	b.n	80034ce <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <LcdDirWrite+0x5c>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <LcdDirWrite+0x60>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f8      	bne.n	80034c8 <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <LcdDirWrite+0x5c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 80034de:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <LcdDirWrite+0x5c>)
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80034e6:	2001      	movs	r0, #1
 80034e8:	f000 fb50 	bl	8003b8c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80034ec:	e002      	b.n	80034f4 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <LcdDirWrite+0x5c>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <LcdDirWrite+0x60>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f8      	bne.n	80034ee <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <LcdDirWrite+0x5c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a03      	ldr	r2, [pc, #12]	; (8003510 <LcdDirWrite+0x5c>)
 8003502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40003800 	.word	0x40003800
 8003514:	42070100 	.word	0x42070100

08003518 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <LcdWrite8+0x2c>)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003528:	2002      	movs	r0, #2
 800352a:	f000 fb2f 	bl	8003b8c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800352e:	bf00      	nop
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <LcdWrite8+0x30>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1fb      	bne.n	8003530 <LcdWrite8+0x18>
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40003800 	.word	0x40003800
 8003548:	4207011c 	.word	0x4207011c

0800354c <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <LcdCmdWrite8+0x34>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <LcdCmdWrite8+0x38>)
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003562:	2002      	movs	r0, #2
 8003564:	f000 fb12 	bl	8003b8c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003568:	bf00      	nop
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <LcdCmdWrite8+0x3c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1fb      	bne.n	800356a <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8003572:	4b03      	ldr	r3, [pc, #12]	; (8003580 <LcdCmdWrite8+0x34>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	422181ac 	.word	0x422181ac
 8003584:	40003800 	.word	0x40003800
 8003588:	4207011c 	.word	0x4207011c

0800358c <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <LcdWrite16+0x2c>)
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 800359c:	2001      	movs	r0, #1
 800359e:	f000 faf5 	bl	8003b8c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80035a2:	bf00      	nop
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <LcdWrite16+0x30>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1fb      	bne.n	80035a4 <LcdWrite16+0x18>
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40003800 	.word	0x40003800
 80035bc:	4207011c 	.word	0x4207011c

080035c0 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 80035c4:	bf00      	nop
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <WaitForDmaEnd+0x18>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1fb      	bne.n	80035c6 <WaitForDmaEnd+0x6>
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	2000092c 	.word	0x2000092c

080035dc <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 80035e0:	4b17      	ldr	r3, [pc, #92]	; (8003640 <DMA1_Channel5_IRQHandler+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <DMA1_Channel5_IRQHandler+0x64>)
 80035ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035f2:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <DMA1_Channel5_IRQHandler+0x68>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 80035fa:	bf00      	nop
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <DMA1_Channel5_IRQHandler+0x68>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <DMA1_Channel5_IRQHandler+0x6c>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800360e:	bf00      	nop
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <DMA1_Channel5_IRQHandler+0x70>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1fb      	bne.n	8003610 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8003618:	2003      	movs	r0, #3
 800361a:	f000 fab7 	bl	8003b8c <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <DMA1_Channel5_IRQHandler+0x74>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <DMA1_Channel5_IRQHandler+0x78>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <DMA1_Channel5_IRQHandler+0x74>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8003632:	e003      	b.n	800363c <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <DMA1_Channel5_IRQHandler+0x64>)
 8003636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800363a:	605a      	str	r2, [r3, #4]
}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40020000 	.word	0x40020000
 8003644:	40020058 	.word	0x40020058
 8003648:	42070084 	.word	0x42070084
 800364c:	4207011c 	.word	0x4207011c
 8003650:	2000092c 	.word	0x2000092c
 8003654:	422181b0 	.word	0x422181b0

08003658 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <LCD_IO_WriteMultiData+0x74>)
 8003666:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800366a:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 800366c:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <LCD_IO_WriteMultiData+0x78>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <LCD_IO_WriteMultiData+0x78>)
 8003672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003676:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 800367e:	bf00      	nop
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f9      	bne.n	8003680 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 8003694:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <LCD_IO_WriteMultiData+0x80>)
 8003696:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8003698:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 800369e:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 80036a4:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <LCD_IO_WriteMultiData+0x84>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <LCD_IO_WriteMultiData+0x78>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <LCD_IO_WriteMultiData+0x78>)
 80036b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b4:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <LCD_IO_WriteMultiData+0x7c>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6013      	str	r3, [r2, #0]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	40020000 	.word	0x40020000
 80036d0:	40003800 	.word	0x40003800
 80036d4:	40020058 	.word	0x40020058
 80036d8:	4000380c 	.word	0x4000380c
 80036dc:	42070084 	.word	0x42070084

080036e0 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <LCD_IO_WriteMultiData8+0x98>)
 80036f8:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 80036fa:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <LCD_IO_WriteMultiData8+0x98>)
 80036fc:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 80036fe:	f241 0312 	movw	r3, #4114	; 0x1012
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e030      	b.n	8003768 <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8003706:	f241 0392 	movw	r3, #4242	; 0x1092
 800370a:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 800370c:	e02c      	b.n	8003768 <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003714:	4293      	cmp	r3, r2
 8003716:	d80f      	bhi.n	8003738 <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <LCD_IO_WriteMultiData8+0x9c>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff ff98 	bl	8003658 <LCD_IO_WriteMultiData>
      Size = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01a      	beq.n	8003768 <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8003732:	f7ff ff45 	bl	80035c0 <WaitForDmaEnd>
 8003736:	e017      	b.n	8003768 <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <LCD_IO_WriteMultiData8+0x9c>)
 800373a:	2202      	movs	r2, #2
 800373c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff ff87 	bl	8003658 <LCD_IO_WriteMultiData>
      if(dinc)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003756:	33fe      	adds	r3, #254	; 0xfe
 8003758:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003760:	3bfe      	subs	r3, #254	; 0xfe
 8003762:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003764:	f7ff ff2c 	bl	80035c0 <WaitForDmaEnd>
  while(Size)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1cf      	bne.n	800370e <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000930 	.word	0x20000930
 800377c:	2000092c 	.word	0x2000092c

08003780 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <LCD_IO_WriteMultiData16+0xdc>)
 8003798:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 800379a:	4b30      	ldr	r3, [pc, #192]	; (800385c <LCD_IO_WriteMultiData16+0xdc>)
 800379c:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 800379e:	f241 5312 	movw	r3, #5394	; 0x1512
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e051      	b.n	800384a <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 80037a6:	f241 5392 	movw	r3, #5522	; 0x1592
 80037aa:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 80037ac:	e04d      	b.n	800384a <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d80f      	bhi.n	80037d8 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80037b8:	4b29      	ldr	r3, [pc, #164]	; (8003860 <LCD_IO_WriteMultiData16+0xe0>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff ff48 	bl	8003658 <LCD_IO_WriteMultiData>
      Size = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d03b      	beq.n	800384a <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 80037d2:	f7ff fef5 	bl	80035c0 <WaitForDmaEnd>
 80037d6:	e038      	b.n	800384a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a22      	ldr	r2, [pc, #136]	; (8003864 <LCD_IO_WriteMultiData16+0xe4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d81b      	bhi.n	8003818 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <LCD_IO_WriteMultiData16+0xe0>)
 80037e2:	2202      	movs	r2, #2
 80037e4:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80037ec:	3bfe      	subs	r3, #254	; 0xfe
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4619      	mov	r1, r3
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ff30 	bl	8003658 <LCD_IO_WriteMultiData>
      if(dinc)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d006      	beq.n	800380c <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <LCD_IO_WriteMultiData16+0xe8>)
 8003802:	4413      	add	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 800380c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003810:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003812:	f7ff fed5 	bl	80035c0 <WaitForDmaEnd>
 8003816:	e018      	b.n	800384a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <LCD_IO_WriteMultiData16+0xe0>)
 800381a:	2202      	movs	r2, #2
 800381c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff ff17 	bl	8003658 <LCD_IO_WriteMultiData>
      if(dinc)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003836:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800383a:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003842:	3bfe      	subs	r3, #254	; 0xfe
 8003844:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003846:	f7ff febb 	bl	80035c0 <WaitForDmaEnd>
  while(Size)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ae      	bne.n	80037ae <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000932 	.word	0x20000932
 8003860:	2000092c 	.word	0x2000092c
 8003864:	0001fffb 	.word	0x0001fffb
 8003868:	7fff0002 	.word	0x7fff0002

0800386c <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <DMA1_Channel4_IRQHandler+0x98>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d03a      	beq.n	80038f4 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <DMA1_Channel4_IRQHandler+0x98>)
 8003880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003884:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <DMA1_Channel4_IRQHandler+0x9c>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800388c:	e002      	b.n	8003894 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 800388e:	4b1f      	ldr	r3, [pc, #124]	; (800390c <DMA1_Channel4_IRQHandler+0xa0>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003894:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <DMA1_Channel4_IRQHandler+0xa4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f8      	bne.n	800388e <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <DMA1_Channel4_IRQHandler+0xa8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80038a8:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <DMA1_Channel4_IRQHandler+0xa8>)
 80038aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ae:	f043 0318 	orr.w	r3, r3, #24
 80038b2:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80038b4:	2001      	movs	r0, #1
 80038b6:	f000 f969 	bl	8003b8c <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80038ba:	e003      	b.n	80038c4 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <DMA1_Channel4_IRQHandler+0xa8>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <DMA1_Channel4_IRQHandler+0xa4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f7      	bne.n	80038bc <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <DMA1_Channel4_IRQHandler+0xa8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a10      	ldr	r2, [pc, #64]	; (8003914 <DMA1_Channel4_IRQHandler+0xa8>)
 80038d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d6:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <DMA1_Channel4_IRQHandler+0xac>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80038de:	bf00      	nop
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <DMA1_Channel4_IRQHandler+0xac>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f9      	bne.n	80038e0 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <DMA1_Channel4_IRQHandler+0xb0>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 80038f2:	e003      	b.n	80038fc <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <DMA1_Channel4_IRQHandler+0x98>)
 80038f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038fa:	605a      	str	r2, [r3, #4]
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40020000 	.word	0x40020000
 8003908:	42070080 	.word	0x42070080
 800390c:	4000380c 	.word	0x4000380c
 8003910:	42070100 	.word	0x42070100
 8003914:	40003800 	.word	0x40003800
 8003918:	40020044 	.word	0x40020044
 800391c:	2000092c 	.word	0x2000092c

08003920 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <LCD_IO_ReadMultiData+0x5c>)
 800392e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003932:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800393a:	bf00      	nop
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f9      	bne.n	800393c <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 8003950:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <LCD_IO_ReadMultiData+0x64>)
 8003952:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a06      	ldr	r2, [pc, #24]	; (8003980 <LCD_IO_ReadMultiData+0x60>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <LCD_IO_ReadMultiData+0x68>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	40020000 	.word	0x40020000
 8003980:	40020044 	.word	0x40020044
 8003984:	4000380c 	.word	0x4000380c
 8003988:	42070080 	.word	0x42070080

0800398c <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8003996:	f241 0382 	movw	r3, #4226	; 0x1082
 800399a:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 800399c:	e024      	b.n	80039e8 <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d913      	bls.n	80039d0 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <LCD_IO_ReadMultiData8+0x74>)
 80039aa:	2202      	movs	r2, #2
 80039ac:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffb3 	bl	8003920 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80039c0:	3bfe      	subs	r3, #254	; 0xfe
 80039c2:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80039ca:	33fe      	adds	r3, #254	; 0xfe
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	e009      	b.n	80039e4 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <LCD_IO_ReadMultiData8+0x74>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ffa0 	bl	8003920 <LCD_IO_ReadMultiData>
      Size = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 80039e4:	f7ff fdec 	bl	80035c0 <WaitForDmaEnd>
  while(Size)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1d7      	bne.n	800399e <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <LCD_IO_ReadMultiData8+0x78>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 80039f4:	f7ff fd5e 	bl	80034b4 <LcdDirWrite>
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	2000092c 	.word	0x2000092c
 8003a04:	422181b0 	.word	0x422181b0

08003a08 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8003a1a:	4b54      	ldr	r3, [pc, #336]	; (8003b6c <LCD_IO_ReadMultiData16to24+0x164>)
 8003a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a20:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8003a28:	bf00      	nop
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f9      	bne.n	8003a2a <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8003a36:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a38:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <LCD_IO_ReadMultiData16to24+0x16c>)
 8003a3a:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8003a3c:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a3e:	4a4e      	ldr	r2, [pc, #312]	; (8003b78 <LCD_IO_ReadMultiData16to24+0x170>)
 8003a40:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8003a42:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a48:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8003a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a4e:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8003a50:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a52:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 8003a56:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8003a58:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a44      	ldr	r2, [pc, #272]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 8003a64:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <LCD_IO_ReadMultiData16to24+0x174>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
  while(Size)
 8003a6a:	e044      	b.n	8003af6 <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8003a6c:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d03f      	beq.n	8003af6 <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8003a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a86:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	1c53      	adds	r3, r2, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1c59      	adds	r1, r3, #1
 8003a98:	6139      	str	r1, [r7, #16]
 8003a9a:	4936      	ldr	r1, [pc, #216]	; (8003b74 <LCD_IO_ReadMultiData16to24+0x16c>)
 8003a9c:	5c8a      	ldrb	r2, [r1, r2]
 8003a9e:	3318      	adds	r3, #24
 8003aa0:	443b      	add	r3, r7
 8003aa2:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2bff      	cmp	r3, #255	; 0xff
 8003aaa:	d901      	bls.n	8003ab0 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d11f      	bne.n	8003af6 <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
        Size--;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8003ac0:	7a3b      	ldrb	r3, [r7, #8]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	b21a      	sxth	r2, r3
 8003ad0:	7a7b      	ldrb	r3, [r7, #9]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	b21b      	sxth	r3, r3
 8003ad6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003ada:	b21b      	sxth	r3, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	7abb      	ldrb	r3, [r7, #10]
 8003ae2:	08db      	lsrs	r3, r3, #3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	b21b      	sxth	r3, r3
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	b219      	sxth	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	b28a      	uxth	r2, r1
 8003af4:	801a      	strh	r2, [r3, #0]
  while(Size)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1b7      	bne.n	8003a6c <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 8003afc:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <LCD_IO_ReadMultiData16to24+0x174>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003b02:	e003      	b.n	8003b0c <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 8003b04:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <LCD_IO_ReadMultiData16to24+0x178>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <LCD_IO_ReadMultiData16to24+0x17c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f7      	bne.n	8003b04 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <LCD_IO_ReadMultiData16to24+0x178>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003b20:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <LCD_IO_ReadMultiData16to24+0x178>)
 8003b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b26:	f043 0308 	orr.w	r3, r3, #8
 8003b2a:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f000 f82d 	bl	8003b8c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003b32:	e003      	b.n	8003b3c <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <LCD_IO_ReadMultiData16to24+0x178>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <LCD_IO_ReadMultiData16to24+0x17c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f7      	bne.n	8003b34 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8003b4a:	bf00      	nop
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <LCD_IO_ReadMultiData16to24+0x168>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f9      	bne.n	8003b4c <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <LCD_IO_ReadMultiData16to24+0x180>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8003b5e:	f7ff fca9 	bl	80034b4 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020044 	.word	0x40020044
 8003b74:	20000938 	.word	0x20000938
 8003b78:	4000380c 	.word	0x4000380c
 8003b7c:	42070080 	.word	0x42070080
 8003b80:	40003800 	.word	0x40003800
 8003b84:	42070100 	.word	0x42070100
 8003b88:	422181b0 	.word	0x422181b0

08003b8c <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  while(c--);
 8003b94:	bf00      	nop
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1fa      	bne.n	8003b96 <LCD_IO_Delay+0xa>
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa1b 	bl	8003ff0 <HAL_Delay>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <LCD_IO_Bl_OnOff+0x28>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8003bda:	e002      	b.n	8003be2 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <LCD_IO_Bl_OnOff+0x28>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	42220198 	.word	0x42220198

08003bf0 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <LCD_IO_Init+0x104>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4a3e      	ldr	r2, [pc, #248]	; (8003cf4 <LCD_IO_Init+0x104>)
 8003bfa:	f043 0318 	orr.w	r3, r3, #24
 8003bfe:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 8003c00:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <LCD_IO_Init+0x104>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4a3b      	ldr	r2, [pc, #236]	; (8003cf4 <LCD_IO_Init+0x104>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8003c0c:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003c14:	4a38      	ldr	r2, [pc, #224]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c1a:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8003c1c:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <LCD_IO_Init+0x10c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003c24:	4a35      	ldr	r2, [pc, #212]	; (8003cfc <LCD_IO_Init+0x10c>)
 8003c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f7ff ffc9 	bl	8003bc4 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c40:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <LCD_IO_Init+0x110>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8003c48:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <LCD_IO_Init+0x114>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <LCD_IO_Init+0x118>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8003c54:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c5c:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c5e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003c62:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8003c64:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003c6c:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c6e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003c72:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <LCD_IO_Init+0x11c>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8003c7a:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <LCD_IO_Init+0x120>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c8a:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8003c8e:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <LCD_IO_Init+0x108>)
 8003c9a:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8003c9e:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <LCD_IO_Init+0x124>)
 8003ca2:	f240 324f 	movw	r2, #847	; 0x34f
 8003ca6:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <LCD_IO_Init+0x124>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <LCD_IO_Init+0x124>)
 8003cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb2:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8003cb4:	200a      	movs	r0, #10
 8003cb6:	f7ff ff79 	bl	8003bac <LCD_Delay>
  LCD_RST_ON;
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <LCD_IO_Init+0x110>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8003cc0:	200a      	movs	r0, #10
 8003cc2:	f7ff ff73 	bl	8003bac <LCD_Delay>
  LCD_RST_OFF;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <LCD_IO_Init+0x110>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8003ccc:	200a      	movs	r0, #10
 8003cce:	f7ff ff6d 	bl	8003bac <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	200f      	movs	r0, #15
 8003cd6:	f7ff fb83 	bl	80033e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8003cda:	200f      	movs	r0, #15
 8003cdc:	f7ff fb64 	bl	80033a8 <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8003ce0:	210f      	movs	r1, #15
 8003ce2:	200e      	movs	r0, #14
 8003ce4:	f7ff fb7c 	bl	80033e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8003ce8:	200e      	movs	r0, #14
 8003cea:	f7ff fb5d 	bl	80033a8 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010c04 	.word	0x40010c04
 8003cfc:	40011000 	.word	0x40011000
 8003d00:	422181a8 	.word	0x422181a8
 8003d04:	422181ac 	.word	0x422181ac
 8003d08:	422181b0 	.word	0x422181b0
 8003d0c:	422181b4 	.word	0x422181b4
 8003d10:	424203b8 	.word	0x424203b8
 8003d14:	40003800 	.word	0x40003800

08003d18 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8003d22:	f7ff fc4d 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode8();
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <LCD_IO_WriteCmd8+0x30>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <LCD_IO_WriteCmd8+0x34>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fc09 	bl	800354c <LcdCmdWrite8>
  LCD_CS_OFF;
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <LCD_IO_WriteCmd8+0x34>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	4207002c 	.word	0x4207002c
 8003d4c:	422181b0 	.word	0x422181b0

08003d50 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8003d5a:	f7ff fc31 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode8();
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <LCD_IO_WriteData8+0x30>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <LCD_IO_WriteData8+0x34>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fbd3 	bl	8003518 <LcdWrite8>
  LCD_CS_OFF;
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <LCD_IO_WriteData8+0x34>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	4207002c 	.word	0x4207002c
 8003d84:	422181b0 	.word	0x422181b0

08003d88 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
 8003d92:	f7ff fc15 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode16();
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <LCD_IO_WriteData16+0x30>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <LCD_IO_WriteData16+0x34>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fbf1 	bl	800358c <LcdWrite16>
  LCD_CS_OFF;
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <LCD_IO_WriteData16+0x34>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	4207002c 	.word	0x4207002c
 8003dbc:	422181b0 	.word	0x422181b0

08003dc0 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	603a      	str	r2, [r7, #0]
 8003dca:	71fb      	strb	r3, [r7, #7]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8003dd0:	f7ff fbf6 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode8();
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fbb2 	bl	800354c <LcdCmdWrite8>
  LcdSpiMode16();
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	2200      	movs	r2, #0
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fcc3 	bl	8003780 <LCD_IO_WriteMultiData16>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	4207002c 	.word	0x4207002c
 8003e08:	422181b0 	.word	0x422181b0

08003e0c <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8003e1a:	f7ff fbd1 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode8();
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fb8d 	bl	800354c <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8003e32:	2201      	movs	r2, #1
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	68b8      	ldr	r0, [r7, #8]
 8003e38:	f7ff fc52 	bl	80036e0 <LCD_IO_WriteMultiData8>
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	4207002c 	.word	0x4207002c
 8003e48:	422181b0 	.word	0x422181b0

08003e4c <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8003e5a:	f7ff fbb1 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode8();
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fb6d 	bl	800354c <LcdCmdWrite8>
  LcdSpiMode16();
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8003e78:	2201      	movs	r2, #1
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f7ff fc7f 	bl	8003780 <LCD_IO_WriteMultiData16>
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	4207002c 	.word	0x4207002c
 8003e90:	422181b0 	.word	0x422181b0

08003e94 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8003ea4:	f7ff fb8c 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode8();
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fb48 	bl	800354c <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8003ec2:	6838      	ldr	r0, [r7, #0]
 8003ec4:	f7ff fab6 	bl	8003434 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	68b8      	ldr	r0, [r7, #8]
 8003ecc:	f7ff fd5e 	bl	800398c <LCD_IO_ReadMultiData8>
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	4207002c 	.word	0x4207002c
 8003edc:	422181b0 	.word	0x422181b0

08003ee0 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8003ef0:	f7ff fb66 	bl	80035c0 <WaitForDmaEnd>
  LcdSpiMode8();
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fb22 	bl	800354c <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8003f0e:	6838      	ldr	r0, [r7, #0]
 8003f10:	f7ff fa90 	bl	8003434 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f7ff fd76 	bl	8003a08 <LCD_IO_ReadMultiData16to24>
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	4207002c 	.word	0x4207002c
 8003f28:	422181b0 	.word	0x422181b0

08003f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_Init+0x28>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_Init+0x28>)
 8003f36:	f043 0310 	orr.w	r3, r3, #16
 8003f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f3c:	2003      	movs	r0, #3
 8003f3e:	f000 fb59 	bl	80045f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f42:	200f      	movs	r0, #15
 8003f44:	f000 f808 	bl	8003f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f48:	f7fd ffee 	bl	8001f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40022000 	.word	0x40022000

08003f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f60:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_InitTick+0x54>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_InitTick+0x58>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fb71 	bl	800465e <HAL_SYSTICK_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e00e      	b.n	8003fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d80a      	bhi.n	8003fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	f000 fb39 	bl	800460a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f98:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <HAL_InitTick+0x5c>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000038 	.word	0x20000038
 8003fb0:	20000088 	.word	0x20000088
 8003fb4:	20000084 	.word	0x20000084

08003fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_IncTick+0x1c>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_IncTick+0x20>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a03      	ldr	r2, [pc, #12]	; (8003fd8 <HAL_IncTick+0x20>)
 8003fca:	6013      	str	r3, [r2, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	20000088 	.word	0x20000088
 8003fd8:	20000a38 	.word	0x20000a38

08003fdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe0:	4b02      	ldr	r3, [pc, #8]	; (8003fec <HAL_GetTick+0x10>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	20000a38 	.word	0x20000a38

08003ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ff8:	f7ff fff0 	bl	8003fdc <HAL_GetTick>
 8003ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d005      	beq.n	8004016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_Delay+0x44>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004016:	bf00      	nop
 8004018:	f7ff ffe0 	bl	8003fdc <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d8f7      	bhi.n	8004018 <HAL_Delay+0x28>
  {
  }
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000088 	.word	0x20000088

08004038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0be      	b.n	80041d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd ff88 	bl	8001f8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f9ab 	bl	80043d8 <ADC_ConversionStop_Disable>
 8004082:	4603      	mov	r3, r0
 8004084:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f040 8099 	bne.w	80041c6 <HAL_ADC_Init+0x18e>
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 8095 	bne.w	80041c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040a4:	f023 0302 	bic.w	r3, r3, #2
 80040a8:	f043 0202 	orr.w	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7b1b      	ldrb	r3, [r3, #12]
 80040be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80040c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d0:	d003      	beq.n	80040da <HAL_ADC_Init+0xa2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_ADC_Init+0xa8>
 80040da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040de:	e000      	b.n	80040e2 <HAL_ADC_Init+0xaa>
 80040e0:	2300      	movs	r3, #0
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7d1b      	ldrb	r3, [r3, #20]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d119      	bne.n	8004124 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7b1b      	ldrb	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	035a      	lsls	r2, r3, #13
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e00b      	b.n	8004124 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_ADC_Init+0x1a8>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	430b      	orrs	r3, r1
 800414a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004154:	d003      	beq.n	800415e <HAL_ADC_Init+0x126>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d104      	bne.n	8004168 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	3b01      	subs	r3, #1
 8004164:	051b      	lsls	r3, r3, #20
 8004166:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	430a      	orrs	r2, r1
 800417a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <HAL_ADC_Init+0x1ac>)
 8004184:	4013      	ands	r3, r2
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	d10b      	bne.n	80041a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041a2:	e018      	b.n	80041d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	f023 0312 	bic.w	r3, r3, #18
 80041ac:	f043 0210 	orr.w	r2, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f043 0201 	orr.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041c4:	e007      	b.n	80041d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	ffe1f7fd 	.word	0xffe1f7fd
 80041e4:	ff1f0efe 	.word	0xff1f0efe

080041e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x20>
 8004204:	2302      	movs	r3, #2
 8004206:	e0dc      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x1da>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d81c      	bhi.n	8004252 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	3b05      	subs	r3, #5
 800422a:	221f      	movs	r2, #31
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	4019      	ands	r1, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	3b05      	subs	r3, #5
 8004244:	fa00 f203 	lsl.w	r2, r0, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	635a      	str	r2, [r3, #52]	; 0x34
 8004250:	e03c      	b.n	80042cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d81c      	bhi.n	8004294 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	3b23      	subs	r3, #35	; 0x23
 800426c:	221f      	movs	r2, #31
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	4019      	ands	r1, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	3b23      	subs	r3, #35	; 0x23
 8004286:	fa00 f203 	lsl.w	r2, r0, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
 8004292:	e01b      	b.n	80042cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	3b41      	subs	r3, #65	; 0x41
 80042a6:	221f      	movs	r2, #31
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	4019      	ands	r1, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	3b41      	subs	r3, #65	; 0x41
 80042c0:	fa00 f203 	lsl.w	r2, r0, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b09      	cmp	r3, #9
 80042d2:	d91c      	bls.n	800430e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	3b1e      	subs	r3, #30
 80042e6:	2207      	movs	r2, #7
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	4019      	ands	r1, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6898      	ldr	r0, [r3, #8]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	3b1e      	subs	r3, #30
 8004300:	fa00 f203 	lsl.w	r2, r0, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e019      	b.n	8004342 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6919      	ldr	r1, [r3, #16]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	2207      	movs	r2, #7
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	4019      	ands	r1, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6898      	ldr	r0, [r3, #8]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	fa00 f203 	lsl.w	r2, r0, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b10      	cmp	r3, #16
 8004348:	d003      	beq.n	8004352 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800434e:	2b11      	cmp	r3, #17
 8004350:	d132      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <HAL_ADC_ConfigChannel+0x1e4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d125      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d126      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004378:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b10      	cmp	r3, #16
 8004380:	d11a      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	0c9a      	lsrs	r2, r3, #18
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004398:	e002      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	3b01      	subs	r3, #1
 800439e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f9      	bne.n	800439a <HAL_ADC_ConfigChannel+0x1b2>
 80043a6:	e007      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	40012400 	.word	0x40012400
 80043d0:	20000038 	.word	0x20000038
 80043d4:	431bde83 	.word	0x431bde83

080043d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d12e      	bne.n	8004450 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004402:	f7ff fdeb 	bl	8003fdc <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004408:	e01b      	b.n	8004442 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800440a:	f7ff fde7 	bl	8003fdc <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d914      	bls.n	8004442 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d10d      	bne.n	8004442 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	f043 0210 	orr.w	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	f043 0201 	orr.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e007      	b.n	8004452 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d0dc      	beq.n	800440a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <__NVIC_SetPriorityGrouping>:
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004478:	4013      	ands	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448e:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	60d3      	str	r3, [r2, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_GetPriorityGrouping>:
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__NVIC_GetPriorityGrouping+0x18>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 0307 	and.w	r3, r3, #7
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_EnableIRQ>:
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db0b      	blt.n	80044ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	4906      	ldr	r1, [pc, #24]	; (80044f4 <__NVIC_EnableIRQ+0x34>)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2001      	movs	r0, #1
 80044e2:	fa00 f202 	lsl.w	r2, r0, r2
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	e000e100 	.word	0xe000e100

080044f8 <__NVIC_SetPriority>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	2b00      	cmp	r3, #0
 800450a:	db0a      	blt.n	8004522 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	490c      	ldr	r1, [pc, #48]	; (8004544 <__NVIC_SetPriority+0x4c>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	440b      	add	r3, r1
 800451c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004520:	e00a      	b.n	8004538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4908      	ldr	r1, [pc, #32]	; (8004548 <__NVIC_SetPriority+0x50>)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	3b04      	subs	r3, #4
 8004530:	0112      	lsls	r2, r2, #4
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	440b      	add	r3, r1
 8004536:	761a      	strb	r2, [r3, #24]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000e100 	.word	0xe000e100
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <NVIC_EncodePriority>:
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f1c3 0307 	rsb	r3, r3, #7
 8004566:	2b04      	cmp	r3, #4
 8004568:	bf28      	it	cs
 800456a:	2304      	movcs	r3, #4
 800456c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3304      	adds	r3, #4
 8004572:	2b06      	cmp	r3, #6
 8004574:	d902      	bls.n	800457c <NVIC_EncodePriority+0x30>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3b03      	subs	r3, #3
 800457a:	e000      	b.n	800457e <NVIC_EncodePriority+0x32>
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004580:	f04f 32ff 	mov.w	r2, #4294967295
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43da      	mvns	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	401a      	ands	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004594:	f04f 31ff 	mov.w	r1, #4294967295
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43d9      	mvns	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	4313      	orrs	r3, r2
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3724      	adds	r7, #36	; 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <SysTick_Config>:
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c0:	d301      	bcc.n	80045c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80045c2:	2301      	movs	r3, #1
 80045c4:	e00f      	b.n	80045e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <SysTick_Config+0x40>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ce:	210f      	movs	r1, #15
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f7ff ff90 	bl	80044f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <SysTick_Config+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <SysTick_Config+0x40>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010

080045f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff2d 	bl	800445c <__NVIC_SetPriorityGrouping>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800461c:	f7ff ff42 	bl	80044a4 <__NVIC_GetPriorityGrouping>
 8004620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7ff ff90 	bl	800454c <NVIC_EncodePriority>
 800462c:	4602      	mov	r2, r0
 800462e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff5f 	bl	80044f8 <__NVIC_SetPriority>
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff35 	bl	80044c0 <__NVIC_EnableIRQ>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ffa2 	bl	80045b0 <SysTick_Config>
 800466c:	4603      	mov	r3, r0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e043      	b.n	8004716 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_DMA_Init+0xa8>)
 8004696:	4413      	add	r3, r2
 8004698:	4a22      	ldr	r2, [pc, #136]	; (8004724 <HAL_DMA_Init+0xac>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	091b      	lsrs	r3, r3, #4
 80046a0:	009a      	lsls	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <HAL_DMA_Init+0xb0>)
 80046aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80046c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80046c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	bffdfff8 	.word	0xbffdfff8
 8004724:	cccccccd 	.word	0xcccccccd
 8004728:	40020000 	.word	0x40020000

0800472c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800472c:	b480      	push	{r7}
 800472e:	b08b      	sub	sp, #44	; 0x2c
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800473e:	e169      	b.n	8004a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004740:	2201      	movs	r2, #1
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	f040 8158 	bne.w	8004a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4a9a      	ldr	r2, [pc, #616]	; (80049cc <HAL_GPIO_Init+0x2a0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d05e      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004768:	4a98      	ldr	r2, [pc, #608]	; (80049cc <HAL_GPIO_Init+0x2a0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d875      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 800476e:	4a98      	ldr	r2, [pc, #608]	; (80049d0 <HAL_GPIO_Init+0x2a4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d058      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004774:	4a96      	ldr	r2, [pc, #600]	; (80049d0 <HAL_GPIO_Init+0x2a4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d86f      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 800477a:	4a96      	ldr	r2, [pc, #600]	; (80049d4 <HAL_GPIO_Init+0x2a8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d052      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004780:	4a94      	ldr	r2, [pc, #592]	; (80049d4 <HAL_GPIO_Init+0x2a8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d869      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 8004786:	4a94      	ldr	r2, [pc, #592]	; (80049d8 <HAL_GPIO_Init+0x2ac>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d04c      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 800478c:	4a92      	ldr	r2, [pc, #584]	; (80049d8 <HAL_GPIO_Init+0x2ac>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d863      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 8004792:	4a92      	ldr	r2, [pc, #584]	; (80049dc <HAL_GPIO_Init+0x2b0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d046      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004798:	4a90      	ldr	r2, [pc, #576]	; (80049dc <HAL_GPIO_Init+0x2b0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d85d      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 800479e:	2b12      	cmp	r3, #18
 80047a0:	d82a      	bhi.n	80047f8 <HAL_GPIO_Init+0xcc>
 80047a2:	2b12      	cmp	r3, #18
 80047a4:	d859      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_GPIO_Init+0x80>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	08004827 	.word	0x08004827
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004813 	.word	0x08004813
 80047b8:	08004855 	.word	0x08004855
 80047bc:	0800485b 	.word	0x0800485b
 80047c0:	0800485b 	.word	0x0800485b
 80047c4:	0800485b 	.word	0x0800485b
 80047c8:	0800485b 	.word	0x0800485b
 80047cc:	0800485b 	.word	0x0800485b
 80047d0:	0800485b 	.word	0x0800485b
 80047d4:	0800485b 	.word	0x0800485b
 80047d8:	0800485b 	.word	0x0800485b
 80047dc:	0800485b 	.word	0x0800485b
 80047e0:	0800485b 	.word	0x0800485b
 80047e4:	0800485b 	.word	0x0800485b
 80047e8:	0800485b 	.word	0x0800485b
 80047ec:	0800485b 	.word	0x0800485b
 80047f0:	08004809 	.word	0x08004809
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	4a79      	ldr	r2, [pc, #484]	; (80049e0 <HAL_GPIO_Init+0x2b4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047fe:	e02c      	b.n	800485a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	623b      	str	r3, [r7, #32]
          break;
 8004806:	e029      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	3304      	adds	r3, #4
 800480e:	623b      	str	r3, [r7, #32]
          break;
 8004810:	e024      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	3308      	adds	r3, #8
 8004818:	623b      	str	r3, [r7, #32]
          break;
 800481a:	e01f      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	330c      	adds	r3, #12
 8004822:	623b      	str	r3, [r7, #32]
          break;
 8004824:	e01a      	b.n	800485c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800482e:	2304      	movs	r3, #4
 8004830:	623b      	str	r3, [r7, #32]
          break;
 8004832:	e013      	b.n	800485c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800483c:	2308      	movs	r3, #8
 800483e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	611a      	str	r2, [r3, #16]
          break;
 8004846:	e009      	b.n	800485c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004848:	2308      	movs	r3, #8
 800484a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	615a      	str	r2, [r3, #20]
          break;
 8004852:	e003      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
          break;
 8004858:	e000      	b.n	800485c <HAL_GPIO_Init+0x130>
          break;
 800485a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2bff      	cmp	r3, #255	; 0xff
 8004860:	d801      	bhi.n	8004866 <HAL_GPIO_Init+0x13a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	e001      	b.n	800486a <HAL_GPIO_Init+0x13e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2bff      	cmp	r3, #255	; 0xff
 8004870:	d802      	bhi.n	8004878 <HAL_GPIO_Init+0x14c>
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	e002      	b.n	800487e <HAL_GPIO_Init+0x152>
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	3b08      	subs	r3, #8
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	210f      	movs	r1, #15
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	401a      	ands	r2, r3
 8004890:	6a39      	ldr	r1, [r7, #32]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	431a      	orrs	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80b1 	beq.w	8004a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048ac:	4b4d      	ldr	r3, [pc, #308]	; (80049e4 <HAL_GPIO_Init+0x2b8>)
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	4a4c      	ldr	r2, [pc, #304]	; (80049e4 <HAL_GPIO_Init+0x2b8>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6193      	str	r3, [r2, #24]
 80048b8:	4b4a      	ldr	r3, [pc, #296]	; (80049e4 <HAL_GPIO_Init+0x2b8>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048c4:	4a48      	ldr	r2, [pc, #288]	; (80049e8 <HAL_GPIO_Init+0x2bc>)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	3302      	adds	r3, #2
 80048cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a40      	ldr	r2, [pc, #256]	; (80049ec <HAL_GPIO_Init+0x2c0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <HAL_GPIO_Init+0x1ec>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <HAL_GPIO_Init+0x2c4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00d      	beq.n	8004914 <HAL_GPIO_Init+0x1e8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a3e      	ldr	r2, [pc, #248]	; (80049f4 <HAL_GPIO_Init+0x2c8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <HAL_GPIO_Init+0x1e4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <HAL_GPIO_Init+0x2cc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_GPIO_Init+0x1e0>
 8004908:	2303      	movs	r3, #3
 800490a:	e006      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 800490c:	2304      	movs	r3, #4
 800490e:	e004      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 8004910:	2302      	movs	r3, #2
 8004912:	e002      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 8004918:	2300      	movs	r3, #0
 800491a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491c:	f002 0203 	and.w	r2, r2, #3
 8004920:	0092      	lsls	r2, r2, #2
 8004922:	4093      	lsls	r3, r2
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800492a:	492f      	ldr	r1, [pc, #188]	; (80049e8 <HAL_GPIO_Init+0x2bc>)
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	3302      	adds	r3, #2
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	492c      	ldr	r1, [pc, #176]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	e006      	b.n	8004960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	43db      	mvns	r3, r3
 800495a:	4928      	ldr	r1, [pc, #160]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 800495c:	4013      	ands	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d006      	beq.n	800497a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800496c:	4b23      	ldr	r3, [pc, #140]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	4922      	ldr	r1, [pc, #136]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
 8004978:	e006      	b.n	8004988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	43db      	mvns	r3, r3
 8004982:	491e      	ldr	r1, [pc, #120]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 8004984:	4013      	ands	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	4918      	ldr	r1, [pc, #96]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	4313      	orrs	r3, r2
 800499e:	608b      	str	r3, [r1, #8]
 80049a0:	e006      	b.n	80049b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	4914      	ldr	r1, [pc, #80]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d021      	beq.n	8004a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	490e      	ldr	r1, [pc, #56]	; (80049fc <HAL_GPIO_Init+0x2d0>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60cb      	str	r3, [r1, #12]
 80049c8:	e021      	b.n	8004a0e <HAL_GPIO_Init+0x2e2>
 80049ca:	bf00      	nop
 80049cc:	10320000 	.word	0x10320000
 80049d0:	10310000 	.word	0x10310000
 80049d4:	10220000 	.word	0x10220000
 80049d8:	10210000 	.word	0x10210000
 80049dc:	10120000 	.word	0x10120000
 80049e0:	10110000 	.word	0x10110000
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010800 	.word	0x40010800
 80049f0:	40010c00 	.word	0x40010c00
 80049f4:	40011000 	.word	0x40011000
 80049f8:	40011400 	.word	0x40011400
 80049fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_GPIO_Init+0x304>)
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	43db      	mvns	r3, r3
 8004a08:	4909      	ldr	r1, [pc, #36]	; (8004a30 <HAL_GPIO_Init+0x304>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	3301      	adds	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f47f ae8e 	bne.w	8004740 <HAL_GPIO_Init+0x14>
  }
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	372c      	adds	r7, #44	; 0x2c
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	40010400 	.word	0x40010400

08004a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	887b      	ldrh	r3, [r7, #2]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
 8004a50:	e001      	b.n	8004a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	807b      	strh	r3, [r7, #2]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a72:	787b      	ldrb	r3, [r7, #1]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a78:	887a      	ldrh	r2, [r7, #2]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a7e:	e003      	b.n	8004a88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a80:	887b      	ldrh	r3, [r7, #2]
 8004a82:	041a      	lsls	r2, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	611a      	str	r2, [r3, #16]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc ff4e 	bl	8001954 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e12b      	b.n	8004d2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd fa8a 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b28:	f000 fce4 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8004b2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4a81      	ldr	r2, [pc, #516]	; (8004d38 <HAL_I2C_Init+0x274>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d807      	bhi.n	8004b48 <HAL_I2C_Init+0x84>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a80      	ldr	r2, [pc, #512]	; (8004d3c <HAL_I2C_Init+0x278>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bf94      	ite	ls
 8004b40:	2301      	movls	r3, #1
 8004b42:	2300      	movhi	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e006      	b.n	8004b56 <HAL_I2C_Init+0x92>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a7d      	ldr	r2, [pc, #500]	; (8004d40 <HAL_I2C_Init+0x27c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bf94      	ite	ls
 8004b50:	2301      	movls	r3, #1
 8004b52:	2300      	movhi	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e0e7      	b.n	8004d2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a78      	ldr	r2, [pc, #480]	; (8004d44 <HAL_I2C_Init+0x280>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	0c9b      	lsrs	r3, r3, #18
 8004b68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a6a      	ldr	r2, [pc, #424]	; (8004d38 <HAL_I2C_Init+0x274>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d802      	bhi.n	8004b98 <HAL_I2C_Init+0xd4>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	3301      	adds	r3, #1
 8004b96:	e009      	b.n	8004bac <HAL_I2C_Init+0xe8>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	4a69      	ldr	r2, [pc, #420]	; (8004d48 <HAL_I2C_Init+0x284>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	3301      	adds	r3, #1
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	495c      	ldr	r1, [pc, #368]	; (8004d38 <HAL_I2C_Init+0x274>)
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	d819      	bhi.n	8004c00 <HAL_I2C_Init+0x13c>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1e59      	subs	r1, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004be0:	400b      	ands	r3, r1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_I2C_Init+0x138>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1e59      	subs	r1, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfa:	e051      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	e04f      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d111      	bne.n	8004c2c <HAL_I2C_Init+0x168>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1e58      	subs	r0, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	440b      	add	r3, r1
 8004c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e012      	b.n	8004c52 <HAL_I2C_Init+0x18e>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1e58      	subs	r0, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	0099      	lsls	r1, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_I2C_Init+0x196>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e022      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10e      	bne.n	8004c80 <HAL_I2C_Init+0x1bc>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1e58      	subs	r0, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	440b      	add	r3, r1
 8004c70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7e:	e00f      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e58      	subs	r0, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	0099      	lsls	r1, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c96:	3301      	adds	r3, #1
 8004c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	6809      	ldr	r1, [r1, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6911      	ldr	r1, [r2, #16]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68d2      	ldr	r2, [r2, #12]
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	000186a0 	.word	0x000186a0
 8004d3c:	001e847f 	.word	0x001e847f
 8004d40:	003d08ff 	.word	0x003d08ff
 8004d44:	431bde83 	.word	0x431bde83
 8004d48:	10624dd3 	.word	0x10624dd3

08004d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e272      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8087 	beq.w	8004e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d6c:	4b92      	ldr	r3, [pc, #584]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d00c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d78:	4b8f      	ldr	r3, [pc, #572]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d112      	bne.n	8004daa <HAL_RCC_OscConfig+0x5e>
 8004d84:	4b8c      	ldr	r3, [pc, #560]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d10b      	bne.n	8004daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d92:	4b89      	ldr	r3, [pc, #548]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d06c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x12c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d168      	bne.n	8004e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e24c      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x76>
 8004db4:	4b80      	ldr	r3, [pc, #512]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a7f      	ldr	r2, [pc, #508]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e02e      	b.n	8004e20 <HAL_RCC_OscConfig+0xd4>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x98>
 8004dca:	4b7b      	ldr	r3, [pc, #492]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7a      	ldr	r2, [pc, #488]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b78      	ldr	r3, [pc, #480]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a77      	ldr	r2, [pc, #476]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e01d      	b.n	8004e20 <HAL_RCC_OscConfig+0xd4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0xbc>
 8004dee:	4b72      	ldr	r3, [pc, #456]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a71      	ldr	r2, [pc, #452]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b6f      	ldr	r3, [pc, #444]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6e      	ldr	r2, [pc, #440]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e00b      	b.n	8004e20 <HAL_RCC_OscConfig+0xd4>
 8004e08:	4b6b      	ldr	r3, [pc, #428]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6a      	ldr	r2, [pc, #424]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a67      	ldr	r2, [pc, #412]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7ff f8d8 	bl	8003fdc <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7ff f8d4 	bl	8003fdc <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e200      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b5d      	ldr	r3, [pc, #372]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0xe4>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7ff f8c4 	bl	8003fdc <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e58:	f7ff f8c0 	bl	8003fdc <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1ec      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	4b53      	ldr	r3, [pc, #332]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x10c>
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d063      	beq.n	8004f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e86:	4b4c      	ldr	r3, [pc, #304]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e92:	4b49      	ldr	r3, [pc, #292]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x18c>
 8004e9e:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d116      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eaa:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x176>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e1c0      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4939      	ldr	r1, [pc, #228]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed6:	e03a      	b.n	8004f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee0:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee6:	f7ff f879 	bl	8003fdc <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eee:	f7ff f875 	bl	8003fdc <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e1a1      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4927      	ldr	r1, [pc, #156]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	e015      	b.n	8004f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f22:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7ff f858 	bl	8003fdc <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f30:	f7ff f854 	bl	8003fdc <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e180      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d03a      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d019      	beq.n	8004f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f68:	f7ff f838 	bl	8003fdc <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f70:	f7ff f834 	bl	8003fdc <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e160      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f000 fac4 	bl	800551c <RCC_Delay>
 8004f94:	e01c      	b.n	8004fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9c:	f7ff f81e 	bl	8003fdc <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa2:	e00f      	b.n	8004fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa4:	f7ff f81a 	bl	8003fdc <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d908      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e146      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	42420000 	.word	0x42420000
 8004fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	4b92      	ldr	r3, [pc, #584]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e9      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80a6 	beq.w	800512a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe2:	4b8b      	ldr	r3, [pc, #556]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4b88      	ldr	r3, [pc, #544]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	4a87      	ldr	r2, [pc, #540]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	61d3      	str	r3, [r2, #28]
 8004ffa:	4b85      	ldr	r3, [pc, #532]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b82      	ldr	r3, [pc, #520]	; (8005214 <HAL_RCC_OscConfig+0x4c8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d118      	bne.n	8005048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005016:	4b7f      	ldr	r3, [pc, #508]	; (8005214 <HAL_RCC_OscConfig+0x4c8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7e      	ldr	r2, [pc, #504]	; (8005214 <HAL_RCC_OscConfig+0x4c8>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005022:	f7fe ffdb 	bl	8003fdc <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502a:	f7fe ffd7 	bl	8003fdc <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	; 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e103      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b75      	ldr	r3, [pc, #468]	; (8005214 <HAL_RCC_OscConfig+0x4c8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d106      	bne.n	800505e <HAL_RCC_OscConfig+0x312>
 8005050:	4b6f      	ldr	r3, [pc, #444]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e02d      	b.n	80050ba <HAL_RCC_OscConfig+0x36e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0x334>
 8005066:	4b6a      	ldr	r3, [pc, #424]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	4a69      	ldr	r2, [pc, #420]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6213      	str	r3, [r2, #32]
 8005072:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4a66      	ldr	r2, [pc, #408]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	6213      	str	r3, [r2, #32]
 800507e:	e01c      	b.n	80050ba <HAL_RCC_OscConfig+0x36e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b05      	cmp	r3, #5
 8005086:	d10c      	bne.n	80050a2 <HAL_RCC_OscConfig+0x356>
 8005088:	4b61      	ldr	r3, [pc, #388]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	4a60      	ldr	r2, [pc, #384]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	f043 0304 	orr.w	r3, r3, #4
 8005092:	6213      	str	r3, [r2, #32]
 8005094:	4b5e      	ldr	r3, [pc, #376]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4a5d      	ldr	r2, [pc, #372]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	6213      	str	r3, [r2, #32]
 80050a0:	e00b      	b.n	80050ba <HAL_RCC_OscConfig+0x36e>
 80050a2:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4a5a      	ldr	r2, [pc, #360]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	4b58      	ldr	r3, [pc, #352]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	4a57      	ldr	r2, [pc, #348]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d015      	beq.n	80050ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c2:	f7fe ff8b 	bl	8003fdc <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fe ff87 	bl	8003fdc <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0b1      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ee      	beq.n	80050ca <HAL_RCC_OscConfig+0x37e>
 80050ec:	e014      	b.n	8005118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ee:	f7fe ff75 	bl	8003fdc <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f4:	e00a      	b.n	800510c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fe ff71 	bl	8003fdc <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	; 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e09b      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510c:	4b40      	ldr	r3, [pc, #256]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ee      	bne.n	80050f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d105      	bne.n	800512a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511e:	4b3c      	ldr	r3, [pc, #240]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	4a3b      	ldr	r2, [pc, #236]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8087 	beq.w	8005242 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005134:	4b36      	ldr	r3, [pc, #216]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b08      	cmp	r3, #8
 800513e:	d061      	beq.n	8005204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d146      	bne.n	80051d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005148:	4b33      	ldr	r3, [pc, #204]	; (8005218 <HAL_RCC_OscConfig+0x4cc>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fe ff45 	bl	8003fdc <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fe ff41 	bl	8003fdc <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e06d      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005168:	4b29      	ldr	r3, [pc, #164]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d108      	bne.n	8005190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	4921      	ldr	r1, [pc, #132]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005190:	4b1f      	ldr	r3, [pc, #124]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a19      	ldr	r1, [r3, #32]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	430b      	orrs	r3, r1
 80051a2:	491b      	ldr	r1, [pc, #108]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_RCC_OscConfig+0x4cc>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fe ff15 	bl	8003fdc <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fe ff11 	bl	8003fdc <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e03d      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x46a>
 80051d4:	e035      	b.n	8005242 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCC_OscConfig+0x4cc>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fe fefe 	bl	8003fdc <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fe fefa 	bl	8003fdc <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e026      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_RCC_OscConfig+0x4c4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x498>
 8005202:	e01e      	b.n	8005242 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e019      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
 8005210:	40021000 	.word	0x40021000
 8005214:	40007000 	.word	0x40007000
 8005218:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_OscConfig+0x500>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	429a      	cmp	r2, r3
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d001      	beq.n	8005242 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40021000 	.word	0x40021000

08005250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0d0      	b.n	8005406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005264:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d910      	bls.n	8005294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b67      	ldr	r3, [pc, #412]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 0207 	bic.w	r2, r3, #7
 800527a:	4965      	ldr	r1, [pc, #404]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b63      	ldr	r3, [pc, #396]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0b8      	b.n	8005406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ac:	4b59      	ldr	r3, [pc, #356]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a58      	ldr	r2, [pc, #352]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c4:	4b53      	ldr	r3, [pc, #332]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a52      	ldr	r2, [pc, #328]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b50      	ldr	r3, [pc, #320]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	494d      	ldr	r1, [pc, #308]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d040      	beq.n	8005370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	4b47      	ldr	r3, [pc, #284]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d115      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e07f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d107      	bne.n	800531e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530e:	4b41      	ldr	r3, [pc, #260]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e073      	b.n	8005406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531e:	4b3d      	ldr	r3, [pc, #244]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e06b      	b.n	8005406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532e:	4b39      	ldr	r3, [pc, #228]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f023 0203 	bic.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4936      	ldr	r1, [pc, #216]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005340:	f7fe fe4c 	bl	8003fdc <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005346:	e00a      	b.n	800535e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005348:	f7fe fe48 	bl	8003fdc <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	; 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e053      	b.n	8005406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f003 020c 	and.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	429a      	cmp	r2, r3
 800536e:	d1eb      	bne.n	8005348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d210      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b24      	ldr	r3, [pc, #144]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 0207 	bic.w	r2, r3, #7
 8005386:	4922      	ldr	r1, [pc, #136]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e032      	b.n	8005406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4916      	ldr	r1, [pc, #88]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	490e      	ldr	r1, [pc, #56]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053de:	f000 f821 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80053e2:	4602      	mov	r2, r0
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	490a      	ldr	r1, [pc, #40]	; (8005418 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	5ccb      	ldrb	r3, [r1, r3]
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <HAL_RCC_ClockConfig+0x1cc>)
 80053f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_RCC_ClockConfig+0x1d0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fdaa 	bl	8003f58 <HAL_InitTick>

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40022000 	.word	0x40022000
 8005414:	40021000 	.word	0x40021000
 8005418:	0800830c 	.word	0x0800830c
 800541c:	20000038 	.word	0x20000038
 8005420:	20000084 	.word	0x20000084

08005424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005424:	b490      	push	{r4, r7}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800542a:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800542c:	1d3c      	adds	r4, r7, #4
 800542e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005434:	f240 2301 	movw	r3, #513	; 0x201
 8005438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	2300      	movs	r3, #0
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800544e:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b04      	cmp	r3, #4
 800545c:	d002      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x40>
 800545e:	2b08      	cmp	r3, #8
 8005460:	d003      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x46>
 8005462:	e02b      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005464:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005466:	623b      	str	r3, [r7, #32]
      break;
 8005468:	e02b      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	0c9b      	lsrs	r3, r3, #18
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	3328      	adds	r3, #40	; 0x28
 8005474:	443b      	add	r3, r7
 8005476:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800547a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	0c5b      	lsrs	r3, r3, #17
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	3328      	adds	r3, #40	; 0x28
 8005492:	443b      	add	r3, r7
 8005494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800549e:	fb03 f202 	mul.w	r2, r3, r2
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
 80054aa:	e004      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4a0b      	ldr	r2, [pc, #44]	; (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	623b      	str	r3, [r7, #32]
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054be:	623b      	str	r3, [r7, #32]
      break;
 80054c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3728      	adds	r7, #40	; 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc90      	pop	{r4, r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	080072ec 	.word	0x080072ec
 80054d4:	40021000 	.word	0x40021000
 80054d8:	007a1200 	.word	0x007a1200
 80054dc:	003d0900 	.word	0x003d0900

080054e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b02      	ldr	r3, [pc, #8]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	20000038 	.word	0x20000038

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f8:	f7ff fff2 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	0800831c 	.word	0x0800831c

0800551c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <RCC_Delay+0x34>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <RCC_Delay+0x38>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	0a5b      	lsrs	r3, r3, #9
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005538:	bf00      	nop
  }
  while (Delay --);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	60fa      	str	r2, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f9      	bne.n	8005538 <RCC_Delay+0x1c>
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	20000038 	.word	0x20000038
 8005554:	10624dd3 	.word	0x10624dd3

08005558 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d07d      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005578:	4b4f      	ldr	r3, [pc, #316]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005584:	4b4c      	ldr	r3, [pc, #304]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4a4b      	ldr	r2, [pc, #300]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558e:	61d3      	str	r3, [r2, #28]
 8005590:	4b49      	ldr	r3, [pc, #292]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800559c:	2301      	movs	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	4b46      	ldr	r3, [pc, #280]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d118      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ac:	4b43      	ldr	r3, [pc, #268]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a42      	ldr	r2, [pc, #264]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b8:	f7fe fd10 	bl	8003fdc <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	e008      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c0:	f7fe fd0c 	bl	8003fdc <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e06d      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d2:	4b3a      	ldr	r3, [pc, #232]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055de:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02e      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d027      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055fc:	4b2e      	ldr	r3, [pc, #184]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005604:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005606:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800560c:	4b2c      	ldr	r3, [pc, #176]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005612:	4a29      	ldr	r2, [pc, #164]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d014      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005622:	f7fe fcdb 	bl	8003fdc <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fe fcd7 	bl	8003fdc <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e036      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4917      	ldr	r1, [pc, #92]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	4313      	orrs	r3, r2
 800565c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800567c:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	490b      	ldr	r1, [pc, #44]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	4313      	orrs	r3, r2
 800568c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	4904      	ldr	r1, [pc, #16]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
 80056c0:	42420440 	.word	0x42420440

080056c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e076      	b.n	80057c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d108      	bne.n	80056f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e6:	d009      	beq.n	80056fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	61da      	str	r2, [r3, #28]
 80056ee:	e005      	b.n	80056fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc fcb2 	bl	8002080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	ea42 0103 	orr.w	r1, r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	0c1a      	lsrs	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f002 0204 	and.w	r2, r2, #4
 80057a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e041      	b.n	8005864 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fc fce3 	bl	80021c0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f000 f82d 	bl	800586c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0208 	bic.w	r2, r2, #8
 8005820:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6819      	ldr	r1, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a29      	ldr	r2, [pc, #164]	; (8005924 <TIM_Base_SetConfig+0xb8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_Base_SetConfig+0x30>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d007      	beq.n	800589c <TIM_Base_SetConfig+0x30>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a26      	ldr	r2, [pc, #152]	; (8005928 <TIM_Base_SetConfig+0xbc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_Base_SetConfig+0x30>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a25      	ldr	r2, [pc, #148]	; (800592c <TIM_Base_SetConfig+0xc0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d108      	bne.n	80058ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <TIM_Base_SetConfig+0xb8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_Base_SetConfig+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058bc:	d007      	beq.n	80058ce <TIM_Base_SetConfig+0x62>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <TIM_Base_SetConfig+0xbc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_Base_SetConfig+0x62>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a18      	ldr	r2, [pc, #96]	; (800592c <TIM_Base_SetConfig+0xc0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d108      	bne.n	80058e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <TIM_Base_SetConfig+0xb8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d103      	bne.n	8005914 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	615a      	str	r2, [r3, #20]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800

08005930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e046      	b.n	80059d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d009      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10c      	bne.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800

080059ec <__assert_func>:
 80059ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059ee:	4614      	mov	r4, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <__assert_func+0x2c>)
 80059f4:	4605      	mov	r5, r0
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68d8      	ldr	r0, [r3, #12]
 80059fa:	b14c      	cbz	r4, 8005a10 <__assert_func+0x24>
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <__assert_func+0x30>)
 80059fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a02:	9100      	str	r1, [sp, #0]
 8005a04:	462b      	mov	r3, r5
 8005a06:	4906      	ldr	r1, [pc, #24]	; (8005a20 <__assert_func+0x34>)
 8005a08:	f000 f814 	bl	8005a34 <fiprintf>
 8005a0c:	f000 fda0 	bl	8006550 <abort>
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <__assert_func+0x38>)
 8005a12:	461c      	mov	r4, r3
 8005a14:	e7f3      	b.n	80059fe <__assert_func+0x12>
 8005a16:	bf00      	nop
 8005a18:	2000008c 	.word	0x2000008c
 8005a1c:	08008324 	.word	0x08008324
 8005a20:	08008331 	.word	0x08008331
 8005a24:	0800835f 	.word	0x0800835f

08005a28 <__errno>:
 8005a28:	4b01      	ldr	r3, [pc, #4]	; (8005a30 <__errno+0x8>)
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	2000008c 	.word	0x2000008c

08005a34 <fiprintf>:
 8005a34:	b40e      	push	{r1, r2, r3}
 8005a36:	b503      	push	{r0, r1, lr}
 8005a38:	4601      	mov	r1, r0
 8005a3a:	ab03      	add	r3, sp, #12
 8005a3c:	4805      	ldr	r0, [pc, #20]	; (8005a54 <fiprintf+0x20>)
 8005a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	f000 f93f 	bl	8005cc8 <_vfiprintf_r>
 8005a4a:	b002      	add	sp, #8
 8005a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a50:	b003      	add	sp, #12
 8005a52:	4770      	bx	lr
 8005a54:	2000008c 	.word	0x2000008c

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	4d0c      	ldr	r5, [pc, #48]	; (8005a90 <__libc_init_array+0x38>)
 8005a5e:	4c0d      	ldr	r4, [pc, #52]	; (8005a94 <__libc_init_array+0x3c>)
 8005a60:	1b64      	subs	r4, r4, r5
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	42a6      	cmp	r6, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	f001 fa5a 	bl	8006f20 <_init>
 8005a6c:	2600      	movs	r6, #0
 8005a6e:	4d0a      	ldr	r5, [pc, #40]	; (8005a98 <__libc_init_array+0x40>)
 8005a70:	4c0a      	ldr	r4, [pc, #40]	; (8005a9c <__libc_init_array+0x44>)
 8005a72:	1b64      	subs	r4, r4, r5
 8005a74:	10a4      	asrs	r4, r4, #2
 8005a76:	42a6      	cmp	r6, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a80:	4798      	blx	r3
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8a:	4798      	blx	r3
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	080083f8 	.word	0x080083f8
 8005a94:	080083f8 	.word	0x080083f8
 8005a98:	080083f8 	.word	0x080083f8
 8005a9c:	080083fc 	.word	0x080083fc

08005aa0 <malloc>:
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <malloc+0xc>)
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	f000 b873 	b.w	8005b90 <_malloc_r>
 8005aaa:	bf00      	nop
 8005aac:	2000008c 	.word	0x2000008c

08005ab0 <memset>:
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4402      	add	r2, r0
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d100      	bne.n	8005aba <memset+0xa>
 8005ab8:	4770      	bx	lr
 8005aba:	f803 1b01 	strb.w	r1, [r3], #1
 8005abe:	e7f9      	b.n	8005ab4 <memset+0x4>

08005ac0 <_free_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	d040      	beq.n	8005b4a <_free_r+0x8a>
 8005ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005acc:	1f0c      	subs	r4, r1, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfb8      	it	lt
 8005ad2:	18e4      	addlt	r4, r4, r3
 8005ad4:	f000 ff96 	bl	8006a04 <__malloc_lock>
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <_free_r+0x8c>)
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	b933      	cbnz	r3, 8005aec <_free_r+0x2c>
 8005ade:	6063      	str	r3, [r4, #4]
 8005ae0:	6014      	str	r4, [r2, #0]
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae8:	f000 bf92 	b.w	8006a10 <__malloc_unlock>
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d908      	bls.n	8005b02 <_free_r+0x42>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	1821      	adds	r1, r4, r0
 8005af4:	428b      	cmp	r3, r1
 8005af6:	bf01      	itttt	eq
 8005af8:	6819      	ldreq	r1, [r3, #0]
 8005afa:	685b      	ldreq	r3, [r3, #4]
 8005afc:	1809      	addeq	r1, r1, r0
 8005afe:	6021      	streq	r1, [r4, #0]
 8005b00:	e7ed      	b.n	8005ade <_free_r+0x1e>
 8005b02:	461a      	mov	r2, r3
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	b10b      	cbz	r3, 8005b0c <_free_r+0x4c>
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d9fa      	bls.n	8005b02 <_free_r+0x42>
 8005b0c:	6811      	ldr	r1, [r2, #0]
 8005b0e:	1850      	adds	r0, r2, r1
 8005b10:	42a0      	cmp	r0, r4
 8005b12:	d10b      	bne.n	8005b2c <_free_r+0x6c>
 8005b14:	6820      	ldr	r0, [r4, #0]
 8005b16:	4401      	add	r1, r0
 8005b18:	1850      	adds	r0, r2, r1
 8005b1a:	4283      	cmp	r3, r0
 8005b1c:	6011      	str	r1, [r2, #0]
 8005b1e:	d1e0      	bne.n	8005ae2 <_free_r+0x22>
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4401      	add	r1, r0
 8005b26:	6011      	str	r1, [r2, #0]
 8005b28:	6053      	str	r3, [r2, #4]
 8005b2a:	e7da      	b.n	8005ae2 <_free_r+0x22>
 8005b2c:	d902      	bls.n	8005b34 <_free_r+0x74>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	e7d6      	b.n	8005ae2 <_free_r+0x22>
 8005b34:	6820      	ldr	r0, [r4, #0]
 8005b36:	1821      	adds	r1, r4, r0
 8005b38:	428b      	cmp	r3, r1
 8005b3a:	bf01      	itttt	eq
 8005b3c:	6819      	ldreq	r1, [r3, #0]
 8005b3e:	685b      	ldreq	r3, [r3, #4]
 8005b40:	1809      	addeq	r1, r1, r0
 8005b42:	6021      	streq	r1, [r4, #0]
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	6054      	str	r4, [r2, #4]
 8005b48:	e7cb      	b.n	8005ae2 <_free_r+0x22>
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20000a3c 	.word	0x20000a3c

08005b50 <sbrk_aligned>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0e      	ldr	r6, [pc, #56]	; (8005b8c <sbrk_aligned+0x3c>)
 8005b54:	460c      	mov	r4, r1
 8005b56:	6831      	ldr	r1, [r6, #0]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	b911      	cbnz	r1, 8005b62 <sbrk_aligned+0x12>
 8005b5c:	f000 fc08 	bl	8006370 <_sbrk_r>
 8005b60:	6030      	str	r0, [r6, #0]
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 fc03 	bl	8006370 <_sbrk_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d00a      	beq.n	8005b84 <sbrk_aligned+0x34>
 8005b6e:	1cc4      	adds	r4, r0, #3
 8005b70:	f024 0403 	bic.w	r4, r4, #3
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	d007      	beq.n	8005b88 <sbrk_aligned+0x38>
 8005b78:	1a21      	subs	r1, r4, r0
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 fbf8 	bl	8006370 <_sbrk_r>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d101      	bne.n	8005b88 <sbrk_aligned+0x38>
 8005b84:	f04f 34ff 	mov.w	r4, #4294967295
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	20000a40 	.word	0x20000a40

08005b90 <_malloc_r>:
 8005b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	1ccd      	adds	r5, r1, #3
 8005b96:	f025 0503 	bic.w	r5, r5, #3
 8005b9a:	3508      	adds	r5, #8
 8005b9c:	2d0c      	cmp	r5, #12
 8005b9e:	bf38      	it	cc
 8005ba0:	250c      	movcc	r5, #12
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	db01      	blt.n	8005bac <_malloc_r+0x1c>
 8005ba8:	42a9      	cmp	r1, r5
 8005baa:	d905      	bls.n	8005bb8 <_malloc_r+0x28>
 8005bac:	230c      	movs	r3, #12
 8005bae:	2600      	movs	r6, #0
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	4e2e      	ldr	r6, [pc, #184]	; (8005c74 <_malloc_r+0xe4>)
 8005bba:	f000 ff23 	bl	8006a04 <__malloc_lock>
 8005bbe:	6833      	ldr	r3, [r6, #0]
 8005bc0:	461c      	mov	r4, r3
 8005bc2:	bb34      	cbnz	r4, 8005c12 <_malloc_r+0x82>
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7ff ffc2 	bl	8005b50 <sbrk_aligned>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	4604      	mov	r4, r0
 8005bd0:	d14d      	bne.n	8005c6e <_malloc_r+0xde>
 8005bd2:	6834      	ldr	r4, [r6, #0]
 8005bd4:	4626      	mov	r6, r4
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	d140      	bne.n	8005c5c <_malloc_r+0xcc>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4638      	mov	r0, r7
 8005be0:	eb04 0803 	add.w	r8, r4, r3
 8005be4:	f000 fbc4 	bl	8006370 <_sbrk_r>
 8005be8:	4580      	cmp	r8, r0
 8005bea:	d13a      	bne.n	8005c62 <_malloc_r+0xd2>
 8005bec:	6821      	ldr	r1, [r4, #0]
 8005bee:	3503      	adds	r5, #3
 8005bf0:	1a6d      	subs	r5, r5, r1
 8005bf2:	f025 0503 	bic.w	r5, r5, #3
 8005bf6:	3508      	adds	r5, #8
 8005bf8:	2d0c      	cmp	r5, #12
 8005bfa:	bf38      	it	cc
 8005bfc:	250c      	movcc	r5, #12
 8005bfe:	4638      	mov	r0, r7
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7ff ffa5 	bl	8005b50 <sbrk_aligned>
 8005c06:	3001      	adds	r0, #1
 8005c08:	d02b      	beq.n	8005c62 <_malloc_r+0xd2>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	442b      	add	r3, r5
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	e00e      	b.n	8005c30 <_malloc_r+0xa0>
 8005c12:	6822      	ldr	r2, [r4, #0]
 8005c14:	1b52      	subs	r2, r2, r5
 8005c16:	d41e      	bmi.n	8005c56 <_malloc_r+0xc6>
 8005c18:	2a0b      	cmp	r2, #11
 8005c1a:	d916      	bls.n	8005c4a <_malloc_r+0xba>
 8005c1c:	1961      	adds	r1, r4, r5
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	6025      	str	r5, [r4, #0]
 8005c22:	bf18      	it	ne
 8005c24:	6059      	strne	r1, [r3, #4]
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	bf08      	it	eq
 8005c2a:	6031      	streq	r1, [r6, #0]
 8005c2c:	5162      	str	r2, [r4, r5]
 8005c2e:	604b      	str	r3, [r1, #4]
 8005c30:	4638      	mov	r0, r7
 8005c32:	f104 060b 	add.w	r6, r4, #11
 8005c36:	f000 feeb 	bl	8006a10 <__malloc_unlock>
 8005c3a:	f026 0607 	bic.w	r6, r6, #7
 8005c3e:	1d23      	adds	r3, r4, #4
 8005c40:	1af2      	subs	r2, r6, r3
 8005c42:	d0b6      	beq.n	8005bb2 <_malloc_r+0x22>
 8005c44:	1b9b      	subs	r3, r3, r6
 8005c46:	50a3      	str	r3, [r4, r2]
 8005c48:	e7b3      	b.n	8005bb2 <_malloc_r+0x22>
 8005c4a:	6862      	ldr	r2, [r4, #4]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	bf0c      	ite	eq
 8005c50:	6032      	streq	r2, [r6, #0]
 8005c52:	605a      	strne	r2, [r3, #4]
 8005c54:	e7ec      	b.n	8005c30 <_malloc_r+0xa0>
 8005c56:	4623      	mov	r3, r4
 8005c58:	6864      	ldr	r4, [r4, #4]
 8005c5a:	e7b2      	b.n	8005bc2 <_malloc_r+0x32>
 8005c5c:	4634      	mov	r4, r6
 8005c5e:	6876      	ldr	r6, [r6, #4]
 8005c60:	e7b9      	b.n	8005bd6 <_malloc_r+0x46>
 8005c62:	230c      	movs	r3, #12
 8005c64:	4638      	mov	r0, r7
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	f000 fed2 	bl	8006a10 <__malloc_unlock>
 8005c6c:	e7a1      	b.n	8005bb2 <_malloc_r+0x22>
 8005c6e:	6025      	str	r5, [r4, #0]
 8005c70:	e7de      	b.n	8005c30 <_malloc_r+0xa0>
 8005c72:	bf00      	nop
 8005c74:	20000a3c 	.word	0x20000a3c

08005c78 <__sfputc_r>:
 8005c78:	6893      	ldr	r3, [r2, #8]
 8005c7a:	b410      	push	{r4}
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	6093      	str	r3, [r2, #8]
 8005c82:	da07      	bge.n	8005c94 <__sfputc_r+0x1c>
 8005c84:	6994      	ldr	r4, [r2, #24]
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	db01      	blt.n	8005c8e <__sfputc_r+0x16>
 8005c8a:	290a      	cmp	r1, #10
 8005c8c:	d102      	bne.n	8005c94 <__sfputc_r+0x1c>
 8005c8e:	bc10      	pop	{r4}
 8005c90:	f000 bb9e 	b.w	80063d0 <__swbuf_r>
 8005c94:	6813      	ldr	r3, [r2, #0]
 8005c96:	1c58      	adds	r0, r3, #1
 8005c98:	6010      	str	r0, [r2, #0]
 8005c9a:	7019      	strb	r1, [r3, #0]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	bc10      	pop	{r4}
 8005ca0:	4770      	bx	lr

08005ca2 <__sfputs_r>:
 8005ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	4614      	mov	r4, r2
 8005caa:	18d5      	adds	r5, r2, r3
 8005cac:	42ac      	cmp	r4, r5
 8005cae:	d101      	bne.n	8005cb4 <__sfputs_r+0x12>
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e007      	b.n	8005cc4 <__sfputs_r+0x22>
 8005cb4:	463a      	mov	r2, r7
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbc:	f7ff ffdc 	bl	8005c78 <__sfputc_r>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d1f3      	bne.n	8005cac <__sfputs_r+0xa>
 8005cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cc8 <_vfiprintf_r>:
 8005cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	460d      	mov	r5, r1
 8005cce:	4614      	mov	r4, r2
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	b09d      	sub	sp, #116	; 0x74
 8005cd6:	b118      	cbz	r0, 8005ce0 <_vfiprintf_r+0x18>
 8005cd8:	6983      	ldr	r3, [r0, #24]
 8005cda:	b90b      	cbnz	r3, 8005ce0 <_vfiprintf_r+0x18>
 8005cdc:	f000 fd56 	bl	800678c <__sinit>
 8005ce0:	4b89      	ldr	r3, [pc, #548]	; (8005f08 <_vfiprintf_r+0x240>)
 8005ce2:	429d      	cmp	r5, r3
 8005ce4:	d11b      	bne.n	8005d1e <_vfiprintf_r+0x56>
 8005ce6:	6875      	ldr	r5, [r6, #4]
 8005ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cea:	07d9      	lsls	r1, r3, #31
 8005cec:	d405      	bmi.n	8005cfa <_vfiprintf_r+0x32>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	059a      	lsls	r2, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_vfiprintf_r+0x32>
 8005cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cf6:	f000 fde7 	bl	80068c8 <__retarget_lock_acquire_recursive>
 8005cfa:	89ab      	ldrh	r3, [r5, #12]
 8005cfc:	071b      	lsls	r3, r3, #28
 8005cfe:	d501      	bpl.n	8005d04 <_vfiprintf_r+0x3c>
 8005d00:	692b      	ldr	r3, [r5, #16]
 8005d02:	b9eb      	cbnz	r3, 8005d40 <_vfiprintf_r+0x78>
 8005d04:	4629      	mov	r1, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	f000 fbb4 	bl	8006474 <__swsetup_r>
 8005d0c:	b1c0      	cbz	r0, 8005d40 <_vfiprintf_r+0x78>
 8005d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d10:	07dc      	lsls	r4, r3, #31
 8005d12:	d50e      	bpl.n	8005d32 <_vfiprintf_r+0x6a>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	b01d      	add	sp, #116	; 0x74
 8005d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1e:	4b7b      	ldr	r3, [pc, #492]	; (8005f0c <_vfiprintf_r+0x244>)
 8005d20:	429d      	cmp	r5, r3
 8005d22:	d101      	bne.n	8005d28 <_vfiprintf_r+0x60>
 8005d24:	68b5      	ldr	r5, [r6, #8]
 8005d26:	e7df      	b.n	8005ce8 <_vfiprintf_r+0x20>
 8005d28:	4b79      	ldr	r3, [pc, #484]	; (8005f10 <_vfiprintf_r+0x248>)
 8005d2a:	429d      	cmp	r5, r3
 8005d2c:	bf08      	it	eq
 8005d2e:	68f5      	ldreq	r5, [r6, #12]
 8005d30:	e7da      	b.n	8005ce8 <_vfiprintf_r+0x20>
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	0598      	lsls	r0, r3, #22
 8005d36:	d4ed      	bmi.n	8005d14 <_vfiprintf_r+0x4c>
 8005d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d3a:	f000 fdc6 	bl	80068ca <__retarget_lock_release_recursive>
 8005d3e:	e7e9      	b.n	8005d14 <_vfiprintf_r+0x4c>
 8005d40:	2300      	movs	r3, #0
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24
 8005d44:	2320      	movs	r3, #32
 8005d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d4a:	2330      	movs	r3, #48	; 0x30
 8005d4c:	f04f 0901 	mov.w	r9, #1
 8005d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005f14 <_vfiprintf_r+0x24c>
 8005d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d5c:	4623      	mov	r3, r4
 8005d5e:	469a      	mov	sl, r3
 8005d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d64:	b10a      	cbz	r2, 8005d6a <_vfiprintf_r+0xa2>
 8005d66:	2a25      	cmp	r2, #37	; 0x25
 8005d68:	d1f9      	bne.n	8005d5e <_vfiprintf_r+0x96>
 8005d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005d6e:	d00b      	beq.n	8005d88 <_vfiprintf_r+0xc0>
 8005d70:	465b      	mov	r3, fp
 8005d72:	4622      	mov	r2, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	4630      	mov	r0, r6
 8005d78:	f7ff ff93 	bl	8005ca2 <__sfputs_r>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f000 80aa 	beq.w	8005ed6 <_vfiprintf_r+0x20e>
 8005d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d84:	445a      	add	r2, fp
 8005d86:	9209      	str	r2, [sp, #36]	; 0x24
 8005d88:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80a2 	beq.w	8005ed6 <_vfiprintf_r+0x20e>
 8005d92:	2300      	movs	r3, #0
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d9c:	f10a 0a01 	add.w	sl, sl, #1
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	9307      	str	r3, [sp, #28]
 8005da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005da8:	931a      	str	r3, [sp, #104]	; 0x68
 8005daa:	4654      	mov	r4, sl
 8005dac:	2205      	movs	r2, #5
 8005dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db2:	4858      	ldr	r0, [pc, #352]	; (8005f14 <_vfiprintf_r+0x24c>)
 8005db4:	f000 fdf0 	bl	8006998 <memchr>
 8005db8:	9a04      	ldr	r2, [sp, #16]
 8005dba:	b9d8      	cbnz	r0, 8005df4 <_vfiprintf_r+0x12c>
 8005dbc:	06d1      	lsls	r1, r2, #27
 8005dbe:	bf44      	itt	mi
 8005dc0:	2320      	movmi	r3, #32
 8005dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc6:	0713      	lsls	r3, r2, #28
 8005dc8:	bf44      	itt	mi
 8005dca:	232b      	movmi	r3, #43	; 0x2b
 8005dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd6:	d015      	beq.n	8005e04 <_vfiprintf_r+0x13c>
 8005dd8:	4654      	mov	r4, sl
 8005dda:	2000      	movs	r0, #0
 8005ddc:	f04f 0c0a 	mov.w	ip, #10
 8005de0:	9a07      	ldr	r2, [sp, #28]
 8005de2:	4621      	mov	r1, r4
 8005de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005de8:	3b30      	subs	r3, #48	; 0x30
 8005dea:	2b09      	cmp	r3, #9
 8005dec:	d94e      	bls.n	8005e8c <_vfiprintf_r+0x1c4>
 8005dee:	b1b0      	cbz	r0, 8005e1e <_vfiprintf_r+0x156>
 8005df0:	9207      	str	r2, [sp, #28]
 8005df2:	e014      	b.n	8005e1e <_vfiprintf_r+0x156>
 8005df4:	eba0 0308 	sub.w	r3, r0, r8
 8005df8:	fa09 f303 	lsl.w	r3, r9, r3
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	46a2      	mov	sl, r4
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	e7d2      	b.n	8005daa <_vfiprintf_r+0xe2>
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	1d19      	adds	r1, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	9103      	str	r1, [sp, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bfbb      	ittet	lt
 8005e10:	425b      	neglt	r3, r3
 8005e12:	f042 0202 	orrlt.w	r2, r2, #2
 8005e16:	9307      	strge	r3, [sp, #28]
 8005e18:	9307      	strlt	r3, [sp, #28]
 8005e1a:	bfb8      	it	lt
 8005e1c:	9204      	strlt	r2, [sp, #16]
 8005e1e:	7823      	ldrb	r3, [r4, #0]
 8005e20:	2b2e      	cmp	r3, #46	; 0x2e
 8005e22:	d10c      	bne.n	8005e3e <_vfiprintf_r+0x176>
 8005e24:	7863      	ldrb	r3, [r4, #1]
 8005e26:	2b2a      	cmp	r3, #42	; 0x2a
 8005e28:	d135      	bne.n	8005e96 <_vfiprintf_r+0x1ce>
 8005e2a:	9b03      	ldr	r3, [sp, #12]
 8005e2c:	3402      	adds	r4, #2
 8005e2e:	1d1a      	adds	r2, r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	9203      	str	r2, [sp, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bfb8      	it	lt
 8005e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e3c:	9305      	str	r3, [sp, #20]
 8005e3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005f18 <_vfiprintf_r+0x250>
 8005e42:	2203      	movs	r2, #3
 8005e44:	4650      	mov	r0, sl
 8005e46:	7821      	ldrb	r1, [r4, #0]
 8005e48:	f000 fda6 	bl	8006998 <memchr>
 8005e4c:	b140      	cbz	r0, 8005e60 <_vfiprintf_r+0x198>
 8005e4e:	2340      	movs	r3, #64	; 0x40
 8005e50:	eba0 000a 	sub.w	r0, r0, sl
 8005e54:	fa03 f000 	lsl.w	r0, r3, r0
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	3401      	adds	r4, #1
 8005e5c:	4303      	orrs	r3, r0
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e64:	2206      	movs	r2, #6
 8005e66:	482d      	ldr	r0, [pc, #180]	; (8005f1c <_vfiprintf_r+0x254>)
 8005e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e6c:	f000 fd94 	bl	8006998 <memchr>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d03f      	beq.n	8005ef4 <_vfiprintf_r+0x22c>
 8005e74:	4b2a      	ldr	r3, [pc, #168]	; (8005f20 <_vfiprintf_r+0x258>)
 8005e76:	bb1b      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x1f8>
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	3307      	adds	r3, #7
 8005e7c:	f023 0307 	bic.w	r3, r3, #7
 8005e80:	3308      	adds	r3, #8
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	443b      	add	r3, r7
 8005e88:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8a:	e767      	b.n	8005d5c <_vfiprintf_r+0x94>
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	2001      	movs	r0, #1
 8005e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e94:	e7a5      	b.n	8005de2 <_vfiprintf_r+0x11a>
 8005e96:	2300      	movs	r3, #0
 8005e98:	f04f 0c0a 	mov.w	ip, #10
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	3401      	adds	r4, #1
 8005ea0:	9305      	str	r3, [sp, #20]
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea8:	3a30      	subs	r2, #48	; 0x30
 8005eaa:	2a09      	cmp	r2, #9
 8005eac:	d903      	bls.n	8005eb6 <_vfiprintf_r+0x1ee>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0c5      	beq.n	8005e3e <_vfiprintf_r+0x176>
 8005eb2:	9105      	str	r1, [sp, #20]
 8005eb4:	e7c3      	b.n	8005e3e <_vfiprintf_r+0x176>
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	2301      	movs	r3, #1
 8005eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ebe:	e7f0      	b.n	8005ea2 <_vfiprintf_r+0x1da>
 8005ec0:	ab03      	add	r3, sp, #12
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	4b16      	ldr	r3, [pc, #88]	; (8005f24 <_vfiprintf_r+0x25c>)
 8005eca:	a904      	add	r1, sp, #16
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	1c78      	adds	r0, r7, #1
 8005ed4:	d1d6      	bne.n	8005e84 <_vfiprintf_r+0x1bc>
 8005ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ed8:	07d9      	lsls	r1, r3, #31
 8005eda:	d405      	bmi.n	8005ee8 <_vfiprintf_r+0x220>
 8005edc:	89ab      	ldrh	r3, [r5, #12]
 8005ede:	059a      	lsls	r2, r3, #22
 8005ee0:	d402      	bmi.n	8005ee8 <_vfiprintf_r+0x220>
 8005ee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ee4:	f000 fcf1 	bl	80068ca <__retarget_lock_release_recursive>
 8005ee8:	89ab      	ldrh	r3, [r5, #12]
 8005eea:	065b      	lsls	r3, r3, #25
 8005eec:	f53f af12 	bmi.w	8005d14 <_vfiprintf_r+0x4c>
 8005ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ef2:	e711      	b.n	8005d18 <_vfiprintf_r+0x50>
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4630      	mov	r0, r6
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <_vfiprintf_r+0x25c>)
 8005efe:	a904      	add	r1, sp, #16
 8005f00:	f000 f882 	bl	8006008 <_printf_i>
 8005f04:	e7e4      	b.n	8005ed0 <_vfiprintf_r+0x208>
 8005f06:	bf00      	nop
 8005f08:	080083b8 	.word	0x080083b8
 8005f0c:	080083d8 	.word	0x080083d8
 8005f10:	08008398 	.word	0x08008398
 8005f14:	08008364 	.word	0x08008364
 8005f18:	0800836a 	.word	0x0800836a
 8005f1c:	0800836e 	.word	0x0800836e
 8005f20:	00000000 	.word	0x00000000
 8005f24:	08005ca3 	.word	0x08005ca3

08005f28 <_printf_common>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	4699      	mov	r9, r3
 8005f30:	688a      	ldr	r2, [r1, #8]
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	4607      	mov	r7, r0
 8005f36:	4293      	cmp	r3, r2
 8005f38:	bfb8      	it	lt
 8005f3a:	4613      	movlt	r3, r2
 8005f3c:	6033      	str	r3, [r6, #0]
 8005f3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f42:	460c      	mov	r4, r1
 8005f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f48:	b10a      	cbz	r2, 8005f4e <_printf_common+0x26>
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	6033      	str	r3, [r6, #0]
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	0699      	lsls	r1, r3, #26
 8005f52:	bf42      	ittt	mi
 8005f54:	6833      	ldrmi	r3, [r6, #0]
 8005f56:	3302      	addmi	r3, #2
 8005f58:	6033      	strmi	r3, [r6, #0]
 8005f5a:	6825      	ldr	r5, [r4, #0]
 8005f5c:	f015 0506 	ands.w	r5, r5, #6
 8005f60:	d106      	bne.n	8005f70 <_printf_common+0x48>
 8005f62:	f104 0a19 	add.w	sl, r4, #25
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	6832      	ldr	r2, [r6, #0]
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dc28      	bgt.n	8005fc2 <_printf_common+0x9a>
 8005f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f74:	1e13      	subs	r3, r2, #0
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	bf18      	it	ne
 8005f7a:	2301      	movne	r3, #1
 8005f7c:	0692      	lsls	r2, r2, #26
 8005f7e:	d42d      	bmi.n	8005fdc <_printf_common+0xb4>
 8005f80:	4649      	mov	r1, r9
 8005f82:	4638      	mov	r0, r7
 8005f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d020      	beq.n	8005fd0 <_printf_common+0xa8>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	68e5      	ldr	r5, [r4, #12]
 8005f92:	f003 0306 	and.w	r3, r3, #6
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	bf18      	it	ne
 8005f9a:	2500      	movne	r5, #0
 8005f9c:	6832      	ldr	r2, [r6, #0]
 8005f9e:	f04f 0600 	mov.w	r6, #0
 8005fa2:	68a3      	ldr	r3, [r4, #8]
 8005fa4:	bf08      	it	eq
 8005fa6:	1aad      	subeq	r5, r5, r2
 8005fa8:	6922      	ldr	r2, [r4, #16]
 8005faa:	bf08      	it	eq
 8005fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	bfc4      	itt	gt
 8005fb4:	1a9b      	subgt	r3, r3, r2
 8005fb6:	18ed      	addgt	r5, r5, r3
 8005fb8:	341a      	adds	r4, #26
 8005fba:	42b5      	cmp	r5, r6
 8005fbc:	d11a      	bne.n	8005ff4 <_printf_common+0xcc>
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	e008      	b.n	8005fd4 <_printf_common+0xac>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4652      	mov	r2, sl
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	4638      	mov	r0, r7
 8005fca:	47c0      	blx	r8
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d103      	bne.n	8005fd8 <_printf_common+0xb0>
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd8:	3501      	adds	r5, #1
 8005fda:	e7c4      	b.n	8005f66 <_printf_common+0x3e>
 8005fdc:	2030      	movs	r0, #48	; 0x30
 8005fde:	18e1      	adds	r1, r4, r3
 8005fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fea:	4422      	add	r2, r4
 8005fec:	3302      	adds	r3, #2
 8005fee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ff2:	e7c5      	b.n	8005f80 <_printf_common+0x58>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	47c0      	blx	r8
 8005ffe:	3001      	adds	r0, #1
 8006000:	d0e6      	beq.n	8005fd0 <_printf_common+0xa8>
 8006002:	3601      	adds	r6, #1
 8006004:	e7d9      	b.n	8005fba <_printf_common+0x92>
	...

08006008 <_printf_i>:
 8006008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800600c:	7e0f      	ldrb	r7, [r1, #24]
 800600e:	4691      	mov	r9, r2
 8006010:	2f78      	cmp	r7, #120	; 0x78
 8006012:	4680      	mov	r8, r0
 8006014:	460c      	mov	r4, r1
 8006016:	469a      	mov	sl, r3
 8006018:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800601a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800601e:	d807      	bhi.n	8006030 <_printf_i+0x28>
 8006020:	2f62      	cmp	r7, #98	; 0x62
 8006022:	d80a      	bhi.n	800603a <_printf_i+0x32>
 8006024:	2f00      	cmp	r7, #0
 8006026:	f000 80d9 	beq.w	80061dc <_printf_i+0x1d4>
 800602a:	2f58      	cmp	r7, #88	; 0x58
 800602c:	f000 80a4 	beq.w	8006178 <_printf_i+0x170>
 8006030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006038:	e03a      	b.n	80060b0 <_printf_i+0xa8>
 800603a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800603e:	2b15      	cmp	r3, #21
 8006040:	d8f6      	bhi.n	8006030 <_printf_i+0x28>
 8006042:	a101      	add	r1, pc, #4	; (adr r1, 8006048 <_printf_i+0x40>)
 8006044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006048:	080060a1 	.word	0x080060a1
 800604c:	080060b5 	.word	0x080060b5
 8006050:	08006031 	.word	0x08006031
 8006054:	08006031 	.word	0x08006031
 8006058:	08006031 	.word	0x08006031
 800605c:	08006031 	.word	0x08006031
 8006060:	080060b5 	.word	0x080060b5
 8006064:	08006031 	.word	0x08006031
 8006068:	08006031 	.word	0x08006031
 800606c:	08006031 	.word	0x08006031
 8006070:	08006031 	.word	0x08006031
 8006074:	080061c3 	.word	0x080061c3
 8006078:	080060e5 	.word	0x080060e5
 800607c:	080061a5 	.word	0x080061a5
 8006080:	08006031 	.word	0x08006031
 8006084:	08006031 	.word	0x08006031
 8006088:	080061e5 	.word	0x080061e5
 800608c:	08006031 	.word	0x08006031
 8006090:	080060e5 	.word	0x080060e5
 8006094:	08006031 	.word	0x08006031
 8006098:	08006031 	.word	0x08006031
 800609c:	080061ad 	.word	0x080061ad
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	1d1a      	adds	r2, r3, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	602a      	str	r2, [r5, #0]
 80060a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0a4      	b.n	80061fe <_printf_i+0x1f6>
 80060b4:	6820      	ldr	r0, [r4, #0]
 80060b6:	6829      	ldr	r1, [r5, #0]
 80060b8:	0606      	lsls	r6, r0, #24
 80060ba:	f101 0304 	add.w	r3, r1, #4
 80060be:	d50a      	bpl.n	80060d6 <_printf_i+0xce>
 80060c0:	680e      	ldr	r6, [r1, #0]
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	2e00      	cmp	r6, #0
 80060c6:	da03      	bge.n	80060d0 <_printf_i+0xc8>
 80060c8:	232d      	movs	r3, #45	; 0x2d
 80060ca:	4276      	negs	r6, r6
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d0:	230a      	movs	r3, #10
 80060d2:	485e      	ldr	r0, [pc, #376]	; (800624c <_printf_i+0x244>)
 80060d4:	e019      	b.n	800610a <_printf_i+0x102>
 80060d6:	680e      	ldr	r6, [r1, #0]
 80060d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	bf18      	it	ne
 80060e0:	b236      	sxthne	r6, r6
 80060e2:	e7ef      	b.n	80060c4 <_printf_i+0xbc>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	6820      	ldr	r0, [r4, #0]
 80060e8:	1d19      	adds	r1, r3, #4
 80060ea:	6029      	str	r1, [r5, #0]
 80060ec:	0601      	lsls	r1, r0, #24
 80060ee:	d501      	bpl.n	80060f4 <_printf_i+0xec>
 80060f0:	681e      	ldr	r6, [r3, #0]
 80060f2:	e002      	b.n	80060fa <_printf_i+0xf2>
 80060f4:	0646      	lsls	r6, r0, #25
 80060f6:	d5fb      	bpl.n	80060f0 <_printf_i+0xe8>
 80060f8:	881e      	ldrh	r6, [r3, #0]
 80060fa:	2f6f      	cmp	r7, #111	; 0x6f
 80060fc:	bf0c      	ite	eq
 80060fe:	2308      	moveq	r3, #8
 8006100:	230a      	movne	r3, #10
 8006102:	4852      	ldr	r0, [pc, #328]	; (800624c <_printf_i+0x244>)
 8006104:	2100      	movs	r1, #0
 8006106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800610a:	6865      	ldr	r5, [r4, #4]
 800610c:	2d00      	cmp	r5, #0
 800610e:	bfa8      	it	ge
 8006110:	6821      	ldrge	r1, [r4, #0]
 8006112:	60a5      	str	r5, [r4, #8]
 8006114:	bfa4      	itt	ge
 8006116:	f021 0104 	bicge.w	r1, r1, #4
 800611a:	6021      	strge	r1, [r4, #0]
 800611c:	b90e      	cbnz	r6, 8006122 <_printf_i+0x11a>
 800611e:	2d00      	cmp	r5, #0
 8006120:	d04d      	beq.n	80061be <_printf_i+0x1b6>
 8006122:	4615      	mov	r5, r2
 8006124:	fbb6 f1f3 	udiv	r1, r6, r3
 8006128:	fb03 6711 	mls	r7, r3, r1, r6
 800612c:	5dc7      	ldrb	r7, [r0, r7]
 800612e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006132:	4637      	mov	r7, r6
 8006134:	42bb      	cmp	r3, r7
 8006136:	460e      	mov	r6, r1
 8006138:	d9f4      	bls.n	8006124 <_printf_i+0x11c>
 800613a:	2b08      	cmp	r3, #8
 800613c:	d10b      	bne.n	8006156 <_printf_i+0x14e>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	07de      	lsls	r6, r3, #31
 8006142:	d508      	bpl.n	8006156 <_printf_i+0x14e>
 8006144:	6923      	ldr	r3, [r4, #16]
 8006146:	6861      	ldr	r1, [r4, #4]
 8006148:	4299      	cmp	r1, r3
 800614a:	bfde      	ittt	le
 800614c:	2330      	movle	r3, #48	; 0x30
 800614e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006152:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006156:	1b52      	subs	r2, r2, r5
 8006158:	6122      	str	r2, [r4, #16]
 800615a:	464b      	mov	r3, r9
 800615c:	4621      	mov	r1, r4
 800615e:	4640      	mov	r0, r8
 8006160:	f8cd a000 	str.w	sl, [sp]
 8006164:	aa03      	add	r2, sp, #12
 8006166:	f7ff fedf 	bl	8005f28 <_printf_common>
 800616a:	3001      	adds	r0, #1
 800616c:	d14c      	bne.n	8006208 <_printf_i+0x200>
 800616e:	f04f 30ff 	mov.w	r0, #4294967295
 8006172:	b004      	add	sp, #16
 8006174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006178:	4834      	ldr	r0, [pc, #208]	; (800624c <_printf_i+0x244>)
 800617a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800617e:	6829      	ldr	r1, [r5, #0]
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f851 6b04 	ldr.w	r6, [r1], #4
 8006186:	6029      	str	r1, [r5, #0]
 8006188:	061d      	lsls	r5, r3, #24
 800618a:	d514      	bpl.n	80061b6 <_printf_i+0x1ae>
 800618c:	07df      	lsls	r7, r3, #31
 800618e:	bf44      	itt	mi
 8006190:	f043 0320 	orrmi.w	r3, r3, #32
 8006194:	6023      	strmi	r3, [r4, #0]
 8006196:	b91e      	cbnz	r6, 80061a0 <_printf_i+0x198>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	f023 0320 	bic.w	r3, r3, #32
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	2310      	movs	r3, #16
 80061a2:	e7af      	b.n	8006104 <_printf_i+0xfc>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	f043 0320 	orr.w	r3, r3, #32
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	2378      	movs	r3, #120	; 0x78
 80061ae:	4828      	ldr	r0, [pc, #160]	; (8006250 <_printf_i+0x248>)
 80061b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061b4:	e7e3      	b.n	800617e <_printf_i+0x176>
 80061b6:	0659      	lsls	r1, r3, #25
 80061b8:	bf48      	it	mi
 80061ba:	b2b6      	uxthmi	r6, r6
 80061bc:	e7e6      	b.n	800618c <_printf_i+0x184>
 80061be:	4615      	mov	r5, r2
 80061c0:	e7bb      	b.n	800613a <_printf_i+0x132>
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	6826      	ldr	r6, [r4, #0]
 80061c6:	1d18      	adds	r0, r3, #4
 80061c8:	6961      	ldr	r1, [r4, #20]
 80061ca:	6028      	str	r0, [r5, #0]
 80061cc:	0635      	lsls	r5, r6, #24
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	d501      	bpl.n	80061d6 <_printf_i+0x1ce>
 80061d2:	6019      	str	r1, [r3, #0]
 80061d4:	e002      	b.n	80061dc <_printf_i+0x1d4>
 80061d6:	0670      	lsls	r0, r6, #25
 80061d8:	d5fb      	bpl.n	80061d2 <_printf_i+0x1ca>
 80061da:	8019      	strh	r1, [r3, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	4615      	mov	r5, r2
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	e7ba      	b.n	800615a <_printf_i+0x152>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	2100      	movs	r1, #0
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	602a      	str	r2, [r5, #0]
 80061ec:	681d      	ldr	r5, [r3, #0]
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fbd1 	bl	8006998 <memchr>
 80061f6:	b108      	cbz	r0, 80061fc <_printf_i+0x1f4>
 80061f8:	1b40      	subs	r0, r0, r5
 80061fa:	6060      	str	r0, [r4, #4]
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	2300      	movs	r3, #0
 8006202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006206:	e7a8      	b.n	800615a <_printf_i+0x152>
 8006208:	462a      	mov	r2, r5
 800620a:	4649      	mov	r1, r9
 800620c:	4640      	mov	r0, r8
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	47d0      	blx	sl
 8006212:	3001      	adds	r0, #1
 8006214:	d0ab      	beq.n	800616e <_printf_i+0x166>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	079b      	lsls	r3, r3, #30
 800621a:	d413      	bmi.n	8006244 <_printf_i+0x23c>
 800621c:	68e0      	ldr	r0, [r4, #12]
 800621e:	9b03      	ldr	r3, [sp, #12]
 8006220:	4298      	cmp	r0, r3
 8006222:	bfb8      	it	lt
 8006224:	4618      	movlt	r0, r3
 8006226:	e7a4      	b.n	8006172 <_printf_i+0x16a>
 8006228:	2301      	movs	r3, #1
 800622a:	4632      	mov	r2, r6
 800622c:	4649      	mov	r1, r9
 800622e:	4640      	mov	r0, r8
 8006230:	47d0      	blx	sl
 8006232:	3001      	adds	r0, #1
 8006234:	d09b      	beq.n	800616e <_printf_i+0x166>
 8006236:	3501      	adds	r5, #1
 8006238:	68e3      	ldr	r3, [r4, #12]
 800623a:	9903      	ldr	r1, [sp, #12]
 800623c:	1a5b      	subs	r3, r3, r1
 800623e:	42ab      	cmp	r3, r5
 8006240:	dcf2      	bgt.n	8006228 <_printf_i+0x220>
 8006242:	e7eb      	b.n	800621c <_printf_i+0x214>
 8006244:	2500      	movs	r5, #0
 8006246:	f104 0619 	add.w	r6, r4, #25
 800624a:	e7f5      	b.n	8006238 <_printf_i+0x230>
 800624c:	08008375 	.word	0x08008375
 8006250:	08008386 	.word	0x08008386

08006254 <iprintf>:
 8006254:	b40f      	push	{r0, r1, r2, r3}
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <iprintf+0x2c>)
 8006258:	b513      	push	{r0, r1, r4, lr}
 800625a:	681c      	ldr	r4, [r3, #0]
 800625c:	b124      	cbz	r4, 8006268 <iprintf+0x14>
 800625e:	69a3      	ldr	r3, [r4, #24]
 8006260:	b913      	cbnz	r3, 8006268 <iprintf+0x14>
 8006262:	4620      	mov	r0, r4
 8006264:	f000 fa92 	bl	800678c <__sinit>
 8006268:	ab05      	add	r3, sp, #20
 800626a:	4620      	mov	r0, r4
 800626c:	9a04      	ldr	r2, [sp, #16]
 800626e:	68a1      	ldr	r1, [r4, #8]
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	f7ff fd29 	bl	8005cc8 <_vfiprintf_r>
 8006276:	b002      	add	sp, #8
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	b004      	add	sp, #16
 800627e:	4770      	bx	lr
 8006280:	2000008c 	.word	0x2000008c

08006284 <_puts_r>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	460e      	mov	r6, r1
 8006288:	4605      	mov	r5, r0
 800628a:	b118      	cbz	r0, 8006294 <_puts_r+0x10>
 800628c:	6983      	ldr	r3, [r0, #24]
 800628e:	b90b      	cbnz	r3, 8006294 <_puts_r+0x10>
 8006290:	f000 fa7c 	bl	800678c <__sinit>
 8006294:	69ab      	ldr	r3, [r5, #24]
 8006296:	68ac      	ldr	r4, [r5, #8]
 8006298:	b913      	cbnz	r3, 80062a0 <_puts_r+0x1c>
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fa76 	bl	800678c <__sinit>
 80062a0:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <_puts_r+0xd0>)
 80062a2:	429c      	cmp	r4, r3
 80062a4:	d120      	bne.n	80062e8 <_puts_r+0x64>
 80062a6:	686c      	ldr	r4, [r5, #4]
 80062a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062aa:	07db      	lsls	r3, r3, #31
 80062ac:	d405      	bmi.n	80062ba <_puts_r+0x36>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	0598      	lsls	r0, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_puts_r+0x36>
 80062b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b6:	f000 fb07 	bl	80068c8 <__retarget_lock_acquire_recursive>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	0719      	lsls	r1, r3, #28
 80062be:	d51d      	bpl.n	80062fc <_puts_r+0x78>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b1db      	cbz	r3, 80062fc <_puts_r+0x78>
 80062c4:	3e01      	subs	r6, #1
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062cc:	3b01      	subs	r3, #1
 80062ce:	60a3      	str	r3, [r4, #8]
 80062d0:	bb39      	cbnz	r1, 8006322 <_puts_r+0x9e>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da38      	bge.n	8006348 <_puts_r+0xc4>
 80062d6:	4622      	mov	r2, r4
 80062d8:	210a      	movs	r1, #10
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 f878 	bl	80063d0 <__swbuf_r>
 80062e0:	3001      	adds	r0, #1
 80062e2:	d011      	beq.n	8006308 <_puts_r+0x84>
 80062e4:	250a      	movs	r5, #10
 80062e6:	e011      	b.n	800630c <_puts_r+0x88>
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <_puts_r+0xd4>)
 80062ea:	429c      	cmp	r4, r3
 80062ec:	d101      	bne.n	80062f2 <_puts_r+0x6e>
 80062ee:	68ac      	ldr	r4, [r5, #8]
 80062f0:	e7da      	b.n	80062a8 <_puts_r+0x24>
 80062f2:	4b1a      	ldr	r3, [pc, #104]	; (800635c <_puts_r+0xd8>)
 80062f4:	429c      	cmp	r4, r3
 80062f6:	bf08      	it	eq
 80062f8:	68ec      	ldreq	r4, [r5, #12]
 80062fa:	e7d5      	b.n	80062a8 <_puts_r+0x24>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 f8b8 	bl	8006474 <__swsetup_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	d0dd      	beq.n	80062c4 <_puts_r+0x40>
 8006308:	f04f 35ff 	mov.w	r5, #4294967295
 800630c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800630e:	07da      	lsls	r2, r3, #31
 8006310:	d405      	bmi.n	800631e <_puts_r+0x9a>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	059b      	lsls	r3, r3, #22
 8006316:	d402      	bmi.n	800631e <_puts_r+0x9a>
 8006318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800631a:	f000 fad6 	bl	80068ca <__retarget_lock_release_recursive>
 800631e:	4628      	mov	r0, r5
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	2b00      	cmp	r3, #0
 8006324:	da04      	bge.n	8006330 <_puts_r+0xac>
 8006326:	69a2      	ldr	r2, [r4, #24]
 8006328:	429a      	cmp	r2, r3
 800632a:	dc06      	bgt.n	800633a <_puts_r+0xb6>
 800632c:	290a      	cmp	r1, #10
 800632e:	d004      	beq.n	800633a <_puts_r+0xb6>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	7019      	strb	r1, [r3, #0]
 8006338:	e7c5      	b.n	80062c6 <_puts_r+0x42>
 800633a:	4622      	mov	r2, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 f847 	bl	80063d0 <__swbuf_r>
 8006342:	3001      	adds	r0, #1
 8006344:	d1bf      	bne.n	80062c6 <_puts_r+0x42>
 8006346:	e7df      	b.n	8006308 <_puts_r+0x84>
 8006348:	250a      	movs	r5, #10
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	6022      	str	r2, [r4, #0]
 8006350:	701d      	strb	r5, [r3, #0]
 8006352:	e7db      	b.n	800630c <_puts_r+0x88>
 8006354:	080083b8 	.word	0x080083b8
 8006358:	080083d8 	.word	0x080083d8
 800635c:	08008398 	.word	0x08008398

08006360 <puts>:
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <puts+0xc>)
 8006362:	4601      	mov	r1, r0
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f7ff bf8d 	b.w	8006284 <_puts_r>
 800636a:	bf00      	nop
 800636c:	2000008c 	.word	0x2000008c

08006370 <_sbrk_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	2300      	movs	r3, #0
 8006374:	4d05      	ldr	r5, [pc, #20]	; (800638c <_sbrk_r+0x1c>)
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fb ffd6 	bl	800232c <_sbrk>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_sbrk_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_sbrk_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000a48 	.word	0x20000a48

08006390 <siprintf>:
 8006390:	b40e      	push	{r1, r2, r3}
 8006392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006396:	b500      	push	{lr}
 8006398:	b09c      	sub	sp, #112	; 0x70
 800639a:	ab1d      	add	r3, sp, #116	; 0x74
 800639c:	9002      	str	r0, [sp, #8]
 800639e:	9006      	str	r0, [sp, #24]
 80063a0:	9107      	str	r1, [sp, #28]
 80063a2:	9104      	str	r1, [sp, #16]
 80063a4:	4808      	ldr	r0, [pc, #32]	; (80063c8 <siprintf+0x38>)
 80063a6:	4909      	ldr	r1, [pc, #36]	; (80063cc <siprintf+0x3c>)
 80063a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ac:	9105      	str	r1, [sp, #20]
 80063ae:	6800      	ldr	r0, [r0, #0]
 80063b0:	a902      	add	r1, sp, #8
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	f000 fbbc 	bl	8006b30 <_svfiprintf_r>
 80063b8:	2200      	movs	r2, #0
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	b01c      	add	sp, #112	; 0x70
 80063c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c4:	b003      	add	sp, #12
 80063c6:	4770      	bx	lr
 80063c8:	2000008c 	.word	0x2000008c
 80063cc:	ffff0208 	.word	0xffff0208

080063d0 <__swbuf_r>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	460e      	mov	r6, r1
 80063d4:	4614      	mov	r4, r2
 80063d6:	4605      	mov	r5, r0
 80063d8:	b118      	cbz	r0, 80063e2 <__swbuf_r+0x12>
 80063da:	6983      	ldr	r3, [r0, #24]
 80063dc:	b90b      	cbnz	r3, 80063e2 <__swbuf_r+0x12>
 80063de:	f000 f9d5 	bl	800678c <__sinit>
 80063e2:	4b21      	ldr	r3, [pc, #132]	; (8006468 <__swbuf_r+0x98>)
 80063e4:	429c      	cmp	r4, r3
 80063e6:	d12b      	bne.n	8006440 <__swbuf_r+0x70>
 80063e8:	686c      	ldr	r4, [r5, #4]
 80063ea:	69a3      	ldr	r3, [r4, #24]
 80063ec:	60a3      	str	r3, [r4, #8]
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	071a      	lsls	r2, r3, #28
 80063f2:	d52f      	bpl.n	8006454 <__swbuf_r+0x84>
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	b36b      	cbz	r3, 8006454 <__swbuf_r+0x84>
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	b2f6      	uxtb	r6, r6
 80063fe:	1ac0      	subs	r0, r0, r3
 8006400:	6963      	ldr	r3, [r4, #20]
 8006402:	4637      	mov	r7, r6
 8006404:	4283      	cmp	r3, r0
 8006406:	dc04      	bgt.n	8006412 <__swbuf_r+0x42>
 8006408:	4621      	mov	r1, r4
 800640a:	4628      	mov	r0, r5
 800640c:	f000 f92a 	bl	8006664 <_fflush_r>
 8006410:	bb30      	cbnz	r0, 8006460 <__swbuf_r+0x90>
 8006412:	68a3      	ldr	r3, [r4, #8]
 8006414:	3001      	adds	r0, #1
 8006416:	3b01      	subs	r3, #1
 8006418:	60a3      	str	r3, [r4, #8]
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	6022      	str	r2, [r4, #0]
 8006420:	701e      	strb	r6, [r3, #0]
 8006422:	6963      	ldr	r3, [r4, #20]
 8006424:	4283      	cmp	r3, r0
 8006426:	d004      	beq.n	8006432 <__swbuf_r+0x62>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	07db      	lsls	r3, r3, #31
 800642c:	d506      	bpl.n	800643c <__swbuf_r+0x6c>
 800642e:	2e0a      	cmp	r6, #10
 8006430:	d104      	bne.n	800643c <__swbuf_r+0x6c>
 8006432:	4621      	mov	r1, r4
 8006434:	4628      	mov	r0, r5
 8006436:	f000 f915 	bl	8006664 <_fflush_r>
 800643a:	b988      	cbnz	r0, 8006460 <__swbuf_r+0x90>
 800643c:	4638      	mov	r0, r7
 800643e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006440:	4b0a      	ldr	r3, [pc, #40]	; (800646c <__swbuf_r+0x9c>)
 8006442:	429c      	cmp	r4, r3
 8006444:	d101      	bne.n	800644a <__swbuf_r+0x7a>
 8006446:	68ac      	ldr	r4, [r5, #8]
 8006448:	e7cf      	b.n	80063ea <__swbuf_r+0x1a>
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <__swbuf_r+0xa0>)
 800644c:	429c      	cmp	r4, r3
 800644e:	bf08      	it	eq
 8006450:	68ec      	ldreq	r4, [r5, #12]
 8006452:	e7ca      	b.n	80063ea <__swbuf_r+0x1a>
 8006454:	4621      	mov	r1, r4
 8006456:	4628      	mov	r0, r5
 8006458:	f000 f80c 	bl	8006474 <__swsetup_r>
 800645c:	2800      	cmp	r0, #0
 800645e:	d0cb      	beq.n	80063f8 <__swbuf_r+0x28>
 8006460:	f04f 37ff 	mov.w	r7, #4294967295
 8006464:	e7ea      	b.n	800643c <__swbuf_r+0x6c>
 8006466:	bf00      	nop
 8006468:	080083b8 	.word	0x080083b8
 800646c:	080083d8 	.word	0x080083d8
 8006470:	08008398 	.word	0x08008398

08006474 <__swsetup_r>:
 8006474:	4b32      	ldr	r3, [pc, #200]	; (8006540 <__swsetup_r+0xcc>)
 8006476:	b570      	push	{r4, r5, r6, lr}
 8006478:	681d      	ldr	r5, [r3, #0]
 800647a:	4606      	mov	r6, r0
 800647c:	460c      	mov	r4, r1
 800647e:	b125      	cbz	r5, 800648a <__swsetup_r+0x16>
 8006480:	69ab      	ldr	r3, [r5, #24]
 8006482:	b913      	cbnz	r3, 800648a <__swsetup_r+0x16>
 8006484:	4628      	mov	r0, r5
 8006486:	f000 f981 	bl	800678c <__sinit>
 800648a:	4b2e      	ldr	r3, [pc, #184]	; (8006544 <__swsetup_r+0xd0>)
 800648c:	429c      	cmp	r4, r3
 800648e:	d10f      	bne.n	80064b0 <__swsetup_r+0x3c>
 8006490:	686c      	ldr	r4, [r5, #4]
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006498:	0719      	lsls	r1, r3, #28
 800649a:	d42c      	bmi.n	80064f6 <__swsetup_r+0x82>
 800649c:	06dd      	lsls	r5, r3, #27
 800649e:	d411      	bmi.n	80064c4 <__swsetup_r+0x50>
 80064a0:	2309      	movs	r3, #9
 80064a2:	6033      	str	r3, [r6, #0]
 80064a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	81a3      	strh	r3, [r4, #12]
 80064ae:	e03e      	b.n	800652e <__swsetup_r+0xba>
 80064b0:	4b25      	ldr	r3, [pc, #148]	; (8006548 <__swsetup_r+0xd4>)
 80064b2:	429c      	cmp	r4, r3
 80064b4:	d101      	bne.n	80064ba <__swsetup_r+0x46>
 80064b6:	68ac      	ldr	r4, [r5, #8]
 80064b8:	e7eb      	b.n	8006492 <__swsetup_r+0x1e>
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <__swsetup_r+0xd8>)
 80064bc:	429c      	cmp	r4, r3
 80064be:	bf08      	it	eq
 80064c0:	68ec      	ldreq	r4, [r5, #12]
 80064c2:	e7e6      	b.n	8006492 <__swsetup_r+0x1e>
 80064c4:	0758      	lsls	r0, r3, #29
 80064c6:	d512      	bpl.n	80064ee <__swsetup_r+0x7a>
 80064c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ca:	b141      	cbz	r1, 80064de <__swsetup_r+0x6a>
 80064cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d0:	4299      	cmp	r1, r3
 80064d2:	d002      	beq.n	80064da <__swsetup_r+0x66>
 80064d4:	4630      	mov	r0, r6
 80064d6:	f7ff faf3 	bl	8005ac0 <_free_r>
 80064da:	2300      	movs	r3, #0
 80064dc:	6363      	str	r3, [r4, #52]	; 0x34
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	2300      	movs	r3, #0
 80064e8:	6063      	str	r3, [r4, #4]
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	f043 0308 	orr.w	r3, r3, #8
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	b94b      	cbnz	r3, 800650e <__swsetup_r+0x9a>
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d003      	beq.n	800650e <__swsetup_r+0x9a>
 8006506:	4621      	mov	r1, r4
 8006508:	4630      	mov	r0, r6
 800650a:	f000 fa05 	bl	8006918 <__smakebuf_r>
 800650e:	89a0      	ldrh	r0, [r4, #12]
 8006510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006514:	f010 0301 	ands.w	r3, r0, #1
 8006518:	d00a      	beq.n	8006530 <__swsetup_r+0xbc>
 800651a:	2300      	movs	r3, #0
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	6963      	ldr	r3, [r4, #20]
 8006520:	425b      	negs	r3, r3
 8006522:	61a3      	str	r3, [r4, #24]
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	b943      	cbnz	r3, 800653a <__swsetup_r+0xc6>
 8006528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800652c:	d1ba      	bne.n	80064a4 <__swsetup_r+0x30>
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	0781      	lsls	r1, r0, #30
 8006532:	bf58      	it	pl
 8006534:	6963      	ldrpl	r3, [r4, #20]
 8006536:	60a3      	str	r3, [r4, #8]
 8006538:	e7f4      	b.n	8006524 <__swsetup_r+0xb0>
 800653a:	2000      	movs	r0, #0
 800653c:	e7f7      	b.n	800652e <__swsetup_r+0xba>
 800653e:	bf00      	nop
 8006540:	2000008c 	.word	0x2000008c
 8006544:	080083b8 	.word	0x080083b8
 8006548:	080083d8 	.word	0x080083d8
 800654c:	08008398 	.word	0x08008398

08006550 <abort>:
 8006550:	2006      	movs	r0, #6
 8006552:	b508      	push	{r3, lr}
 8006554:	f000 fc14 	bl	8006d80 <raise>
 8006558:	2001      	movs	r0, #1
 800655a:	f7fb fe8f 	bl	800227c <_exit>
	...

08006560 <__sflush_r>:
 8006560:	898a      	ldrh	r2, [r1, #12]
 8006562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006564:	4605      	mov	r5, r0
 8006566:	0710      	lsls	r0, r2, #28
 8006568:	460c      	mov	r4, r1
 800656a:	d457      	bmi.n	800661c <__sflush_r+0xbc>
 800656c:	684b      	ldr	r3, [r1, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	dc04      	bgt.n	800657c <__sflush_r+0x1c>
 8006572:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	dc01      	bgt.n	800657c <__sflush_r+0x1c>
 8006578:	2000      	movs	r0, #0
 800657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800657c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800657e:	2e00      	cmp	r6, #0
 8006580:	d0fa      	beq.n	8006578 <__sflush_r+0x18>
 8006582:	2300      	movs	r3, #0
 8006584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006588:	682f      	ldr	r7, [r5, #0]
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	d032      	beq.n	80065f4 <__sflush_r+0x94>
 800658e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	075a      	lsls	r2, r3, #29
 8006594:	d505      	bpl.n	80065a2 <__sflush_r+0x42>
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	1ac0      	subs	r0, r0, r3
 800659a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800659c:	b10b      	cbz	r3, 80065a2 <__sflush_r+0x42>
 800659e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065a0:	1ac0      	subs	r0, r0, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	4602      	mov	r2, r0
 80065a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065a8:	4628      	mov	r0, r5
 80065aa:	6a21      	ldr	r1, [r4, #32]
 80065ac:	47b0      	blx	r6
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	d106      	bne.n	80065c2 <__sflush_r+0x62>
 80065b4:	6829      	ldr	r1, [r5, #0]
 80065b6:	291d      	cmp	r1, #29
 80065b8:	d82c      	bhi.n	8006614 <__sflush_r+0xb4>
 80065ba:	4a29      	ldr	r2, [pc, #164]	; (8006660 <__sflush_r+0x100>)
 80065bc:	40ca      	lsrs	r2, r1
 80065be:	07d6      	lsls	r6, r2, #31
 80065c0:	d528      	bpl.n	8006614 <__sflush_r+0xb4>
 80065c2:	2200      	movs	r2, #0
 80065c4:	6062      	str	r2, [r4, #4]
 80065c6:	6922      	ldr	r2, [r4, #16]
 80065c8:	04d9      	lsls	r1, r3, #19
 80065ca:	6022      	str	r2, [r4, #0]
 80065cc:	d504      	bpl.n	80065d8 <__sflush_r+0x78>
 80065ce:	1c42      	adds	r2, r0, #1
 80065d0:	d101      	bne.n	80065d6 <__sflush_r+0x76>
 80065d2:	682b      	ldr	r3, [r5, #0]
 80065d4:	b903      	cbnz	r3, 80065d8 <__sflush_r+0x78>
 80065d6:	6560      	str	r0, [r4, #84]	; 0x54
 80065d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065da:	602f      	str	r7, [r5, #0]
 80065dc:	2900      	cmp	r1, #0
 80065de:	d0cb      	beq.n	8006578 <__sflush_r+0x18>
 80065e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <__sflush_r+0x8e>
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7ff fa69 	bl	8005ac0 <_free_r>
 80065ee:	2000      	movs	r0, #0
 80065f0:	6360      	str	r0, [r4, #52]	; 0x34
 80065f2:	e7c2      	b.n	800657a <__sflush_r+0x1a>
 80065f4:	6a21      	ldr	r1, [r4, #32]
 80065f6:	2301      	movs	r3, #1
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b0      	blx	r6
 80065fc:	1c41      	adds	r1, r0, #1
 80065fe:	d1c7      	bne.n	8006590 <__sflush_r+0x30>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0c4      	beq.n	8006590 <__sflush_r+0x30>
 8006606:	2b1d      	cmp	r3, #29
 8006608:	d001      	beq.n	800660e <__sflush_r+0xae>
 800660a:	2b16      	cmp	r3, #22
 800660c:	d101      	bne.n	8006612 <__sflush_r+0xb2>
 800660e:	602f      	str	r7, [r5, #0]
 8006610:	e7b2      	b.n	8006578 <__sflush_r+0x18>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	e7ae      	b.n	800657a <__sflush_r+0x1a>
 800661c:	690f      	ldr	r7, [r1, #16]
 800661e:	2f00      	cmp	r7, #0
 8006620:	d0aa      	beq.n	8006578 <__sflush_r+0x18>
 8006622:	0793      	lsls	r3, r2, #30
 8006624:	bf18      	it	ne
 8006626:	2300      	movne	r3, #0
 8006628:	680e      	ldr	r6, [r1, #0]
 800662a:	bf08      	it	eq
 800662c:	694b      	ldreq	r3, [r1, #20]
 800662e:	1bf6      	subs	r6, r6, r7
 8006630:	600f      	str	r7, [r1, #0]
 8006632:	608b      	str	r3, [r1, #8]
 8006634:	2e00      	cmp	r6, #0
 8006636:	dd9f      	ble.n	8006578 <__sflush_r+0x18>
 8006638:	4633      	mov	r3, r6
 800663a:	463a      	mov	r2, r7
 800663c:	4628      	mov	r0, r5
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006644:	47e0      	blx	ip
 8006646:	2800      	cmp	r0, #0
 8006648:	dc06      	bgt.n	8006658 <__sflush_r+0xf8>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	f04f 30ff 	mov.w	r0, #4294967295
 8006650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	e790      	b.n	800657a <__sflush_r+0x1a>
 8006658:	4407      	add	r7, r0
 800665a:	1a36      	subs	r6, r6, r0
 800665c:	e7ea      	b.n	8006634 <__sflush_r+0xd4>
 800665e:	bf00      	nop
 8006660:	20400001 	.word	0x20400001

08006664 <_fflush_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	690b      	ldr	r3, [r1, #16]
 8006668:	4605      	mov	r5, r0
 800666a:	460c      	mov	r4, r1
 800666c:	b913      	cbnz	r3, 8006674 <_fflush_r+0x10>
 800666e:	2500      	movs	r5, #0
 8006670:	4628      	mov	r0, r5
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	b118      	cbz	r0, 800667e <_fflush_r+0x1a>
 8006676:	6983      	ldr	r3, [r0, #24]
 8006678:	b90b      	cbnz	r3, 800667e <_fflush_r+0x1a>
 800667a:	f000 f887 	bl	800678c <__sinit>
 800667e:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <_fflush_r+0x6c>)
 8006680:	429c      	cmp	r4, r3
 8006682:	d11b      	bne.n	80066bc <_fflush_r+0x58>
 8006684:	686c      	ldr	r4, [r5, #4]
 8006686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0ef      	beq.n	800666e <_fflush_r+0xa>
 800668e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006690:	07d0      	lsls	r0, r2, #31
 8006692:	d404      	bmi.n	800669e <_fflush_r+0x3a>
 8006694:	0599      	lsls	r1, r3, #22
 8006696:	d402      	bmi.n	800669e <_fflush_r+0x3a>
 8006698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800669a:	f000 f915 	bl	80068c8 <__retarget_lock_acquire_recursive>
 800669e:	4628      	mov	r0, r5
 80066a0:	4621      	mov	r1, r4
 80066a2:	f7ff ff5d 	bl	8006560 <__sflush_r>
 80066a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066a8:	4605      	mov	r5, r0
 80066aa:	07da      	lsls	r2, r3, #31
 80066ac:	d4e0      	bmi.n	8006670 <_fflush_r+0xc>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	059b      	lsls	r3, r3, #22
 80066b2:	d4dd      	bmi.n	8006670 <_fflush_r+0xc>
 80066b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066b6:	f000 f908 	bl	80068ca <__retarget_lock_release_recursive>
 80066ba:	e7d9      	b.n	8006670 <_fflush_r+0xc>
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <_fflush_r+0x70>)
 80066be:	429c      	cmp	r4, r3
 80066c0:	d101      	bne.n	80066c6 <_fflush_r+0x62>
 80066c2:	68ac      	ldr	r4, [r5, #8]
 80066c4:	e7df      	b.n	8006686 <_fflush_r+0x22>
 80066c6:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <_fflush_r+0x74>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	bf08      	it	eq
 80066cc:	68ec      	ldreq	r4, [r5, #12]
 80066ce:	e7da      	b.n	8006686 <_fflush_r+0x22>
 80066d0:	080083b8 	.word	0x080083b8
 80066d4:	080083d8 	.word	0x080083d8
 80066d8:	08008398 	.word	0x08008398

080066dc <std>:
 80066dc:	2300      	movs	r3, #0
 80066de:	b510      	push	{r4, lr}
 80066e0:	4604      	mov	r4, r0
 80066e2:	e9c0 3300 	strd	r3, r3, [r0]
 80066e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066ea:	6083      	str	r3, [r0, #8]
 80066ec:	8181      	strh	r1, [r0, #12]
 80066ee:	6643      	str	r3, [r0, #100]	; 0x64
 80066f0:	81c2      	strh	r2, [r0, #14]
 80066f2:	6183      	str	r3, [r0, #24]
 80066f4:	4619      	mov	r1, r3
 80066f6:	2208      	movs	r2, #8
 80066f8:	305c      	adds	r0, #92	; 0x5c
 80066fa:	f7ff f9d9 	bl	8005ab0 <memset>
 80066fe:	4b05      	ldr	r3, [pc, #20]	; (8006714 <std+0x38>)
 8006700:	6224      	str	r4, [r4, #32]
 8006702:	6263      	str	r3, [r4, #36]	; 0x24
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <std+0x3c>)
 8006706:	62a3      	str	r3, [r4, #40]	; 0x28
 8006708:	4b04      	ldr	r3, [pc, #16]	; (800671c <std+0x40>)
 800670a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <std+0x44>)
 800670e:	6323      	str	r3, [r4, #48]	; 0x30
 8006710:	bd10      	pop	{r4, pc}
 8006712:	bf00      	nop
 8006714:	08006db9 	.word	0x08006db9
 8006718:	08006ddb 	.word	0x08006ddb
 800671c:	08006e13 	.word	0x08006e13
 8006720:	08006e37 	.word	0x08006e37

08006724 <_cleanup_r>:
 8006724:	4901      	ldr	r1, [pc, #4]	; (800672c <_cleanup_r+0x8>)
 8006726:	f000 b8af 	b.w	8006888 <_fwalk_reent>
 800672a:	bf00      	nop
 800672c:	08006665 	.word	0x08006665

08006730 <__sfmoreglue>:
 8006730:	2268      	movs	r2, #104	; 0x68
 8006732:	b570      	push	{r4, r5, r6, lr}
 8006734:	1e4d      	subs	r5, r1, #1
 8006736:	4355      	muls	r5, r2
 8006738:	460e      	mov	r6, r1
 800673a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800673e:	f7ff fa27 	bl	8005b90 <_malloc_r>
 8006742:	4604      	mov	r4, r0
 8006744:	b140      	cbz	r0, 8006758 <__sfmoreglue+0x28>
 8006746:	2100      	movs	r1, #0
 8006748:	e9c0 1600 	strd	r1, r6, [r0]
 800674c:	300c      	adds	r0, #12
 800674e:	60a0      	str	r0, [r4, #8]
 8006750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006754:	f7ff f9ac 	bl	8005ab0 <memset>
 8006758:	4620      	mov	r0, r4
 800675a:	bd70      	pop	{r4, r5, r6, pc}

0800675c <__sfp_lock_acquire>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__sfp_lock_acquire+0x8>)
 800675e:	f000 b8b3 	b.w	80068c8 <__retarget_lock_acquire_recursive>
 8006762:	bf00      	nop
 8006764:	20000a45 	.word	0x20000a45

08006768 <__sfp_lock_release>:
 8006768:	4801      	ldr	r0, [pc, #4]	; (8006770 <__sfp_lock_release+0x8>)
 800676a:	f000 b8ae 	b.w	80068ca <__retarget_lock_release_recursive>
 800676e:	bf00      	nop
 8006770:	20000a45 	.word	0x20000a45

08006774 <__sinit_lock_acquire>:
 8006774:	4801      	ldr	r0, [pc, #4]	; (800677c <__sinit_lock_acquire+0x8>)
 8006776:	f000 b8a7 	b.w	80068c8 <__retarget_lock_acquire_recursive>
 800677a:	bf00      	nop
 800677c:	20000a46 	.word	0x20000a46

08006780 <__sinit_lock_release>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__sinit_lock_release+0x8>)
 8006782:	f000 b8a2 	b.w	80068ca <__retarget_lock_release_recursive>
 8006786:	bf00      	nop
 8006788:	20000a46 	.word	0x20000a46

0800678c <__sinit>:
 800678c:	b510      	push	{r4, lr}
 800678e:	4604      	mov	r4, r0
 8006790:	f7ff fff0 	bl	8006774 <__sinit_lock_acquire>
 8006794:	69a3      	ldr	r3, [r4, #24]
 8006796:	b11b      	cbz	r3, 80067a0 <__sinit+0x14>
 8006798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800679c:	f7ff bff0 	b.w	8006780 <__sinit_lock_release>
 80067a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067a4:	6523      	str	r3, [r4, #80]	; 0x50
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <__sinit+0x68>)
 80067a8:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <__sinit+0x6c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80067ae:	42a3      	cmp	r3, r4
 80067b0:	bf08      	it	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	4620      	mov	r0, r4
 80067b6:	bf08      	it	eq
 80067b8:	61a3      	streq	r3, [r4, #24]
 80067ba:	f000 f81f 	bl	80067fc <__sfp>
 80067be:	6060      	str	r0, [r4, #4]
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f81b 	bl	80067fc <__sfp>
 80067c6:	60a0      	str	r0, [r4, #8]
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 f817 	bl	80067fc <__sfp>
 80067ce:	2200      	movs	r2, #0
 80067d0:	2104      	movs	r1, #4
 80067d2:	60e0      	str	r0, [r4, #12]
 80067d4:	6860      	ldr	r0, [r4, #4]
 80067d6:	f7ff ff81 	bl	80066dc <std>
 80067da:	2201      	movs	r2, #1
 80067dc:	2109      	movs	r1, #9
 80067de:	68a0      	ldr	r0, [r4, #8]
 80067e0:	f7ff ff7c 	bl	80066dc <std>
 80067e4:	2202      	movs	r2, #2
 80067e6:	2112      	movs	r1, #18
 80067e8:	68e0      	ldr	r0, [r4, #12]
 80067ea:	f7ff ff77 	bl	80066dc <std>
 80067ee:	2301      	movs	r3, #1
 80067f0:	61a3      	str	r3, [r4, #24]
 80067f2:	e7d1      	b.n	8006798 <__sinit+0xc>
 80067f4:	08008360 	.word	0x08008360
 80067f8:	08006725 	.word	0x08006725

080067fc <__sfp>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	4607      	mov	r7, r0
 8006800:	f7ff ffac 	bl	800675c <__sfp_lock_acquire>
 8006804:	4b1e      	ldr	r3, [pc, #120]	; (8006880 <__sfp+0x84>)
 8006806:	681e      	ldr	r6, [r3, #0]
 8006808:	69b3      	ldr	r3, [r6, #24]
 800680a:	b913      	cbnz	r3, 8006812 <__sfp+0x16>
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff ffbd 	bl	800678c <__sinit>
 8006812:	3648      	adds	r6, #72	; 0x48
 8006814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006818:	3b01      	subs	r3, #1
 800681a:	d503      	bpl.n	8006824 <__sfp+0x28>
 800681c:	6833      	ldr	r3, [r6, #0]
 800681e:	b30b      	cbz	r3, 8006864 <__sfp+0x68>
 8006820:	6836      	ldr	r6, [r6, #0]
 8006822:	e7f7      	b.n	8006814 <__sfp+0x18>
 8006824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006828:	b9d5      	cbnz	r5, 8006860 <__sfp+0x64>
 800682a:	4b16      	ldr	r3, [pc, #88]	; (8006884 <__sfp+0x88>)
 800682c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006830:	60e3      	str	r3, [r4, #12]
 8006832:	6665      	str	r5, [r4, #100]	; 0x64
 8006834:	f000 f847 	bl	80068c6 <__retarget_lock_init_recursive>
 8006838:	f7ff ff96 	bl	8006768 <__sfp_lock_release>
 800683c:	2208      	movs	r2, #8
 800683e:	4629      	mov	r1, r5
 8006840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006848:	6025      	str	r5, [r4, #0]
 800684a:	61a5      	str	r5, [r4, #24]
 800684c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006850:	f7ff f92e 	bl	8005ab0 <memset>
 8006854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800685c:	4620      	mov	r0, r4
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006860:	3468      	adds	r4, #104	; 0x68
 8006862:	e7d9      	b.n	8006818 <__sfp+0x1c>
 8006864:	2104      	movs	r1, #4
 8006866:	4638      	mov	r0, r7
 8006868:	f7ff ff62 	bl	8006730 <__sfmoreglue>
 800686c:	4604      	mov	r4, r0
 800686e:	6030      	str	r0, [r6, #0]
 8006870:	2800      	cmp	r0, #0
 8006872:	d1d5      	bne.n	8006820 <__sfp+0x24>
 8006874:	f7ff ff78 	bl	8006768 <__sfp_lock_release>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	e7ee      	b.n	800685c <__sfp+0x60>
 800687e:	bf00      	nop
 8006880:	08008360 	.word	0x08008360
 8006884:	ffff0001 	.word	0xffff0001

08006888 <_fwalk_reent>:
 8006888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800688c:	4606      	mov	r6, r0
 800688e:	4688      	mov	r8, r1
 8006890:	2700      	movs	r7, #0
 8006892:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800689a:	f1b9 0901 	subs.w	r9, r9, #1
 800689e:	d505      	bpl.n	80068ac <_fwalk_reent+0x24>
 80068a0:	6824      	ldr	r4, [r4, #0]
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d1f7      	bne.n	8006896 <_fwalk_reent+0xe>
 80068a6:	4638      	mov	r0, r7
 80068a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ac:	89ab      	ldrh	r3, [r5, #12]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d907      	bls.n	80068c2 <_fwalk_reent+0x3a>
 80068b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068b6:	3301      	adds	r3, #1
 80068b8:	d003      	beq.n	80068c2 <_fwalk_reent+0x3a>
 80068ba:	4629      	mov	r1, r5
 80068bc:	4630      	mov	r0, r6
 80068be:	47c0      	blx	r8
 80068c0:	4307      	orrs	r7, r0
 80068c2:	3568      	adds	r5, #104	; 0x68
 80068c4:	e7e9      	b.n	800689a <_fwalk_reent+0x12>

080068c6 <__retarget_lock_init_recursive>:
 80068c6:	4770      	bx	lr

080068c8 <__retarget_lock_acquire_recursive>:
 80068c8:	4770      	bx	lr

080068ca <__retarget_lock_release_recursive>:
 80068ca:	4770      	bx	lr

080068cc <__swhatbuf_r>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	460e      	mov	r6, r1
 80068d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d4:	4614      	mov	r4, r2
 80068d6:	2900      	cmp	r1, #0
 80068d8:	461d      	mov	r5, r3
 80068da:	b096      	sub	sp, #88	; 0x58
 80068dc:	da08      	bge.n	80068f0 <__swhatbuf_r+0x24>
 80068de:	2200      	movs	r2, #0
 80068e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068e4:	602a      	str	r2, [r5, #0]
 80068e6:	061a      	lsls	r2, r3, #24
 80068e8:	d410      	bmi.n	800690c <__swhatbuf_r+0x40>
 80068ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ee:	e00e      	b.n	800690e <__swhatbuf_r+0x42>
 80068f0:	466a      	mov	r2, sp
 80068f2:	f000 fac7 	bl	8006e84 <_fstat_r>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	dbf1      	blt.n	80068de <__swhatbuf_r+0x12>
 80068fa:	9a01      	ldr	r2, [sp, #4]
 80068fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006904:	425a      	negs	r2, r3
 8006906:	415a      	adcs	r2, r3
 8006908:	602a      	str	r2, [r5, #0]
 800690a:	e7ee      	b.n	80068ea <__swhatbuf_r+0x1e>
 800690c:	2340      	movs	r3, #64	; 0x40
 800690e:	2000      	movs	r0, #0
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	b016      	add	sp, #88	; 0x58
 8006914:	bd70      	pop	{r4, r5, r6, pc}
	...

08006918 <__smakebuf_r>:
 8006918:	898b      	ldrh	r3, [r1, #12]
 800691a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800691c:	079d      	lsls	r5, r3, #30
 800691e:	4606      	mov	r6, r0
 8006920:	460c      	mov	r4, r1
 8006922:	d507      	bpl.n	8006934 <__smakebuf_r+0x1c>
 8006924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	2301      	movs	r3, #1
 800692e:	6163      	str	r3, [r4, #20]
 8006930:	b002      	add	sp, #8
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	466a      	mov	r2, sp
 8006936:	ab01      	add	r3, sp, #4
 8006938:	f7ff ffc8 	bl	80068cc <__swhatbuf_r>
 800693c:	9900      	ldr	r1, [sp, #0]
 800693e:	4605      	mov	r5, r0
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff f925 	bl	8005b90 <_malloc_r>
 8006946:	b948      	cbnz	r0, 800695c <__smakebuf_r+0x44>
 8006948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800694c:	059a      	lsls	r2, r3, #22
 800694e:	d4ef      	bmi.n	8006930 <__smakebuf_r+0x18>
 8006950:	f023 0303 	bic.w	r3, r3, #3
 8006954:	f043 0302 	orr.w	r3, r3, #2
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	e7e3      	b.n	8006924 <__smakebuf_r+0xc>
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <__smakebuf_r+0x7c>)
 800695e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	9b00      	ldr	r3, [sp, #0]
 800696c:	6120      	str	r0, [r4, #16]
 800696e:	6163      	str	r3, [r4, #20]
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	b15b      	cbz	r3, 800698c <__smakebuf_r+0x74>
 8006974:	4630      	mov	r0, r6
 8006976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800697a:	f000 fa95 	bl	8006ea8 <_isatty_r>
 800697e:	b128      	cbz	r0, 800698c <__smakebuf_r+0x74>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	f023 0303 	bic.w	r3, r3, #3
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	89a0      	ldrh	r0, [r4, #12]
 800698e:	4305      	orrs	r5, r0
 8006990:	81a5      	strh	r5, [r4, #12]
 8006992:	e7cd      	b.n	8006930 <__smakebuf_r+0x18>
 8006994:	08006725 	.word	0x08006725

08006998 <memchr>:
 8006998:	4603      	mov	r3, r0
 800699a:	b510      	push	{r4, lr}
 800699c:	b2c9      	uxtb	r1, r1
 800699e:	4402      	add	r2, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	d101      	bne.n	80069aa <memchr+0x12>
 80069a6:	2000      	movs	r0, #0
 80069a8:	e003      	b.n	80069b2 <memchr+0x1a>
 80069aa:	7804      	ldrb	r4, [r0, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	428c      	cmp	r4, r1
 80069b0:	d1f6      	bne.n	80069a0 <memchr+0x8>
 80069b2:	bd10      	pop	{r4, pc}

080069b4 <memcpy>:
 80069b4:	440a      	add	r2, r1
 80069b6:	4291      	cmp	r1, r2
 80069b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069bc:	d100      	bne.n	80069c0 <memcpy+0xc>
 80069be:	4770      	bx	lr
 80069c0:	b510      	push	{r4, lr}
 80069c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c6:	4291      	cmp	r1, r2
 80069c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069cc:	d1f9      	bne.n	80069c2 <memcpy+0xe>
 80069ce:	bd10      	pop	{r4, pc}

080069d0 <memmove>:
 80069d0:	4288      	cmp	r0, r1
 80069d2:	b510      	push	{r4, lr}
 80069d4:	eb01 0402 	add.w	r4, r1, r2
 80069d8:	d902      	bls.n	80069e0 <memmove+0x10>
 80069da:	4284      	cmp	r4, r0
 80069dc:	4623      	mov	r3, r4
 80069de:	d807      	bhi.n	80069f0 <memmove+0x20>
 80069e0:	1e43      	subs	r3, r0, #1
 80069e2:	42a1      	cmp	r1, r4
 80069e4:	d008      	beq.n	80069f8 <memmove+0x28>
 80069e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ee:	e7f8      	b.n	80069e2 <memmove+0x12>
 80069f0:	4601      	mov	r1, r0
 80069f2:	4402      	add	r2, r0
 80069f4:	428a      	cmp	r2, r1
 80069f6:	d100      	bne.n	80069fa <memmove+0x2a>
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a02:	e7f7      	b.n	80069f4 <memmove+0x24>

08006a04 <__malloc_lock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__malloc_lock+0x8>)
 8006a06:	f7ff bf5f 	b.w	80068c8 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20000a44 	.word	0x20000a44

08006a10 <__malloc_unlock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_unlock+0x8>)
 8006a12:	f7ff bf5a 	b.w	80068ca <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000a44 	.word	0x20000a44

08006a1c <_realloc_r>:
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	4680      	mov	r8, r0
 8006a22:	4614      	mov	r4, r2
 8006a24:	460e      	mov	r6, r1
 8006a26:	b921      	cbnz	r1, 8006a32 <_realloc_r+0x16>
 8006a28:	4611      	mov	r1, r2
 8006a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2e:	f7ff b8af 	b.w	8005b90 <_malloc_r>
 8006a32:	b92a      	cbnz	r2, 8006a40 <_realloc_r+0x24>
 8006a34:	f7ff f844 	bl	8005ac0 <_free_r>
 8006a38:	4625      	mov	r5, r4
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a40:	f000 fa54 	bl	8006eec <_malloc_usable_size_r>
 8006a44:	4284      	cmp	r4, r0
 8006a46:	4607      	mov	r7, r0
 8006a48:	d802      	bhi.n	8006a50 <_realloc_r+0x34>
 8006a4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a4e:	d812      	bhi.n	8006a76 <_realloc_r+0x5a>
 8006a50:	4621      	mov	r1, r4
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff f89c 	bl	8005b90 <_malloc_r>
 8006a58:	4605      	mov	r5, r0
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d0ed      	beq.n	8006a3a <_realloc_r+0x1e>
 8006a5e:	42bc      	cmp	r4, r7
 8006a60:	4622      	mov	r2, r4
 8006a62:	4631      	mov	r1, r6
 8006a64:	bf28      	it	cs
 8006a66:	463a      	movcs	r2, r7
 8006a68:	f7ff ffa4 	bl	80069b4 <memcpy>
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff f826 	bl	8005ac0 <_free_r>
 8006a74:	e7e1      	b.n	8006a3a <_realloc_r+0x1e>
 8006a76:	4635      	mov	r5, r6
 8006a78:	e7df      	b.n	8006a3a <_realloc_r+0x1e>

08006a7a <__ssputs_r>:
 8006a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7e:	688e      	ldr	r6, [r1, #8]
 8006a80:	4682      	mov	sl, r0
 8006a82:	429e      	cmp	r6, r3
 8006a84:	460c      	mov	r4, r1
 8006a86:	4690      	mov	r8, r2
 8006a88:	461f      	mov	r7, r3
 8006a8a:	d838      	bhi.n	8006afe <__ssputs_r+0x84>
 8006a8c:	898a      	ldrh	r2, [r1, #12]
 8006a8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a92:	d032      	beq.n	8006afa <__ssputs_r+0x80>
 8006a94:	6825      	ldr	r5, [r4, #0]
 8006a96:	6909      	ldr	r1, [r1, #16]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	eba5 0901 	sub.w	r9, r5, r1
 8006a9e:	6965      	ldr	r5, [r4, #20]
 8006aa0:	444b      	add	r3, r9
 8006aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aaa:	106d      	asrs	r5, r5, #1
 8006aac:	429d      	cmp	r5, r3
 8006aae:	bf38      	it	cc
 8006ab0:	461d      	movcc	r5, r3
 8006ab2:	0553      	lsls	r3, r2, #21
 8006ab4:	d531      	bpl.n	8006b1a <__ssputs_r+0xa0>
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	f7ff f86a 	bl	8005b90 <_malloc_r>
 8006abc:	4606      	mov	r6, r0
 8006abe:	b950      	cbnz	r0, 8006ad6 <__ssputs_r+0x5c>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac6:	f8ca 3000 	str.w	r3, [sl]
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad0:	81a3      	strh	r3, [r4, #12]
 8006ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad6:	464a      	mov	r2, r9
 8006ad8:	6921      	ldr	r1, [r4, #16]
 8006ada:	f7ff ff6b 	bl	80069b4 <memcpy>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	6126      	str	r6, [r4, #16]
 8006aec:	444e      	add	r6, r9
 8006aee:	6026      	str	r6, [r4, #0]
 8006af0:	463e      	mov	r6, r7
 8006af2:	6165      	str	r5, [r4, #20]
 8006af4:	eba5 0509 	sub.w	r5, r5, r9
 8006af8:	60a5      	str	r5, [r4, #8]
 8006afa:	42be      	cmp	r6, r7
 8006afc:	d900      	bls.n	8006b00 <__ssputs_r+0x86>
 8006afe:	463e      	mov	r6, r7
 8006b00:	4632      	mov	r2, r6
 8006b02:	4641      	mov	r1, r8
 8006b04:	6820      	ldr	r0, [r4, #0]
 8006b06:	f7ff ff63 	bl	80069d0 <memmove>
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	1b9b      	subs	r3, r3, r6
 8006b10:	60a3      	str	r3, [r4, #8]
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	4433      	add	r3, r6
 8006b16:	6023      	str	r3, [r4, #0]
 8006b18:	e7db      	b.n	8006ad2 <__ssputs_r+0x58>
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	f7ff ff7e 	bl	8006a1c <_realloc_r>
 8006b20:	4606      	mov	r6, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d1e1      	bne.n	8006aea <__ssputs_r+0x70>
 8006b26:	4650      	mov	r0, sl
 8006b28:	6921      	ldr	r1, [r4, #16]
 8006b2a:	f7fe ffc9 	bl	8005ac0 <_free_r>
 8006b2e:	e7c7      	b.n	8006ac0 <__ssputs_r+0x46>

08006b30 <_svfiprintf_r>:
 8006b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	4698      	mov	r8, r3
 8006b36:	898b      	ldrh	r3, [r1, #12]
 8006b38:	4607      	mov	r7, r0
 8006b3a:	061b      	lsls	r3, r3, #24
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	4614      	mov	r4, r2
 8006b40:	b09d      	sub	sp, #116	; 0x74
 8006b42:	d50e      	bpl.n	8006b62 <_svfiprintf_r+0x32>
 8006b44:	690b      	ldr	r3, [r1, #16]
 8006b46:	b963      	cbnz	r3, 8006b62 <_svfiprintf_r+0x32>
 8006b48:	2140      	movs	r1, #64	; 0x40
 8006b4a:	f7ff f821 	bl	8005b90 <_malloc_r>
 8006b4e:	6028      	str	r0, [r5, #0]
 8006b50:	6128      	str	r0, [r5, #16]
 8006b52:	b920      	cbnz	r0, 8006b5e <_svfiprintf_r+0x2e>
 8006b54:	230c      	movs	r3, #12
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e0d1      	b.n	8006d02 <_svfiprintf_r+0x1d2>
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	616b      	str	r3, [r5, #20]
 8006b62:	2300      	movs	r3, #0
 8006b64:	9309      	str	r3, [sp, #36]	; 0x24
 8006b66:	2320      	movs	r3, #32
 8006b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b6c:	2330      	movs	r3, #48	; 0x30
 8006b6e:	f04f 0901 	mov.w	r9, #1
 8006b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d1c <_svfiprintf_r+0x1ec>
 8006b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b7e:	4623      	mov	r3, r4
 8006b80:	469a      	mov	sl, r3
 8006b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b86:	b10a      	cbz	r2, 8006b8c <_svfiprintf_r+0x5c>
 8006b88:	2a25      	cmp	r2, #37	; 0x25
 8006b8a:	d1f9      	bne.n	8006b80 <_svfiprintf_r+0x50>
 8006b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b90:	d00b      	beq.n	8006baa <_svfiprintf_r+0x7a>
 8006b92:	465b      	mov	r3, fp
 8006b94:	4622      	mov	r2, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f7ff ff6e 	bl	8006a7a <__ssputs_r>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	f000 80aa 	beq.w	8006cf8 <_svfiprintf_r+0x1c8>
 8006ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba6:	445a      	add	r2, fp
 8006ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8006baa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80a2 	beq.w	8006cf8 <_svfiprintf_r+0x1c8>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bbe:	f10a 0a01 	add.w	sl, sl, #1
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	9307      	str	r3, [sp, #28]
 8006bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bca:	931a      	str	r3, [sp, #104]	; 0x68
 8006bcc:	4654      	mov	r4, sl
 8006bce:	2205      	movs	r2, #5
 8006bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd4:	4851      	ldr	r0, [pc, #324]	; (8006d1c <_svfiprintf_r+0x1ec>)
 8006bd6:	f7ff fedf 	bl	8006998 <memchr>
 8006bda:	9a04      	ldr	r2, [sp, #16]
 8006bdc:	b9d8      	cbnz	r0, 8006c16 <_svfiprintf_r+0xe6>
 8006bde:	06d0      	lsls	r0, r2, #27
 8006be0:	bf44      	itt	mi
 8006be2:	2320      	movmi	r3, #32
 8006be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be8:	0711      	lsls	r1, r2, #28
 8006bea:	bf44      	itt	mi
 8006bec:	232b      	movmi	r3, #43	; 0x2b
 8006bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf8:	d015      	beq.n	8006c26 <_svfiprintf_r+0xf6>
 8006bfa:	4654      	mov	r4, sl
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f04f 0c0a 	mov.w	ip, #10
 8006c02:	9a07      	ldr	r2, [sp, #28]
 8006c04:	4621      	mov	r1, r4
 8006c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c0a:	3b30      	subs	r3, #48	; 0x30
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d94e      	bls.n	8006cae <_svfiprintf_r+0x17e>
 8006c10:	b1b0      	cbz	r0, 8006c40 <_svfiprintf_r+0x110>
 8006c12:	9207      	str	r2, [sp, #28]
 8006c14:	e014      	b.n	8006c40 <_svfiprintf_r+0x110>
 8006c16:	eba0 0308 	sub.w	r3, r0, r8
 8006c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	46a2      	mov	sl, r4
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	e7d2      	b.n	8006bcc <_svfiprintf_r+0x9c>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	1d19      	adds	r1, r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9103      	str	r1, [sp, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfbb      	ittet	lt
 8006c32:	425b      	neglt	r3, r3
 8006c34:	f042 0202 	orrlt.w	r2, r2, #2
 8006c38:	9307      	strge	r3, [sp, #28]
 8006c3a:	9307      	strlt	r3, [sp, #28]
 8006c3c:	bfb8      	it	lt
 8006c3e:	9204      	strlt	r2, [sp, #16]
 8006c40:	7823      	ldrb	r3, [r4, #0]
 8006c42:	2b2e      	cmp	r3, #46	; 0x2e
 8006c44:	d10c      	bne.n	8006c60 <_svfiprintf_r+0x130>
 8006c46:	7863      	ldrb	r3, [r4, #1]
 8006c48:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4a:	d135      	bne.n	8006cb8 <_svfiprintf_r+0x188>
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	3402      	adds	r4, #2
 8006c50:	1d1a      	adds	r2, r3, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	9203      	str	r2, [sp, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfb8      	it	lt
 8006c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c5e:	9305      	str	r3, [sp, #20]
 8006c60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006d20 <_svfiprintf_r+0x1f0>
 8006c64:	2203      	movs	r2, #3
 8006c66:	4650      	mov	r0, sl
 8006c68:	7821      	ldrb	r1, [r4, #0]
 8006c6a:	f7ff fe95 	bl	8006998 <memchr>
 8006c6e:	b140      	cbz	r0, 8006c82 <_svfiprintf_r+0x152>
 8006c70:	2340      	movs	r3, #64	; 0x40
 8006c72:	eba0 000a 	sub.w	r0, r0, sl
 8006c76:	fa03 f000 	lsl.w	r0, r3, r0
 8006c7a:	9b04      	ldr	r3, [sp, #16]
 8006c7c:	3401      	adds	r4, #1
 8006c7e:	4303      	orrs	r3, r0
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c86:	2206      	movs	r2, #6
 8006c88:	4826      	ldr	r0, [pc, #152]	; (8006d24 <_svfiprintf_r+0x1f4>)
 8006c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c8e:	f7ff fe83 	bl	8006998 <memchr>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d038      	beq.n	8006d08 <_svfiprintf_r+0x1d8>
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <_svfiprintf_r+0x1f8>)
 8006c98:	bb1b      	cbnz	r3, 8006ce2 <_svfiprintf_r+0x1b2>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	3307      	adds	r3, #7
 8006c9e:	f023 0307 	bic.w	r3, r3, #7
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	9303      	str	r3, [sp, #12]
 8006ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca8:	4433      	add	r3, r6
 8006caa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cac:	e767      	b.n	8006b7e <_svfiprintf_r+0x4e>
 8006cae:	460c      	mov	r4, r1
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb6:	e7a5      	b.n	8006c04 <_svfiprintf_r+0xd4>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f04f 0c0a 	mov.w	ip, #10
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	3401      	adds	r4, #1
 8006cc2:	9305      	str	r3, [sp, #20]
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cca:	3a30      	subs	r2, #48	; 0x30
 8006ccc:	2a09      	cmp	r2, #9
 8006cce:	d903      	bls.n	8006cd8 <_svfiprintf_r+0x1a8>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0c5      	beq.n	8006c60 <_svfiprintf_r+0x130>
 8006cd4:	9105      	str	r1, [sp, #20]
 8006cd6:	e7c3      	b.n	8006c60 <_svfiprintf_r+0x130>
 8006cd8:	4604      	mov	r4, r0
 8006cda:	2301      	movs	r3, #1
 8006cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ce0:	e7f0      	b.n	8006cc4 <_svfiprintf_r+0x194>
 8006ce2:	ab03      	add	r3, sp, #12
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	4638      	mov	r0, r7
 8006cea:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <_svfiprintf_r+0x1fc>)
 8006cec:	a904      	add	r1, sp, #16
 8006cee:	f3af 8000 	nop.w
 8006cf2:	1c42      	adds	r2, r0, #1
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	d1d6      	bne.n	8006ca6 <_svfiprintf_r+0x176>
 8006cf8:	89ab      	ldrh	r3, [r5, #12]
 8006cfa:	065b      	lsls	r3, r3, #25
 8006cfc:	f53f af2c 	bmi.w	8006b58 <_svfiprintf_r+0x28>
 8006d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d02:	b01d      	add	sp, #116	; 0x74
 8006d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	ab03      	add	r3, sp, #12
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	462a      	mov	r2, r5
 8006d0e:	4638      	mov	r0, r7
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <_svfiprintf_r+0x1fc>)
 8006d12:	a904      	add	r1, sp, #16
 8006d14:	f7ff f978 	bl	8006008 <_printf_i>
 8006d18:	e7eb      	b.n	8006cf2 <_svfiprintf_r+0x1c2>
 8006d1a:	bf00      	nop
 8006d1c:	08008364 	.word	0x08008364
 8006d20:	0800836a 	.word	0x0800836a
 8006d24:	0800836e 	.word	0x0800836e
 8006d28:	00000000 	.word	0x00000000
 8006d2c:	08006a7b 	.word	0x08006a7b

08006d30 <_raise_r>:
 8006d30:	291f      	cmp	r1, #31
 8006d32:	b538      	push	{r3, r4, r5, lr}
 8006d34:	4604      	mov	r4, r0
 8006d36:	460d      	mov	r5, r1
 8006d38:	d904      	bls.n	8006d44 <_raise_r+0x14>
 8006d3a:	2316      	movs	r3, #22
 8006d3c:	6003      	str	r3, [r0, #0]
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d46:	b112      	cbz	r2, 8006d4e <_raise_r+0x1e>
 8006d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d4c:	b94b      	cbnz	r3, 8006d62 <_raise_r+0x32>
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f830 	bl	8006db4 <_getpid_r>
 8006d54:	462a      	mov	r2, r5
 8006d56:	4601      	mov	r1, r0
 8006d58:	4620      	mov	r0, r4
 8006d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d5e:	f000 b817 	b.w	8006d90 <_kill_r>
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d00a      	beq.n	8006d7c <_raise_r+0x4c>
 8006d66:	1c59      	adds	r1, r3, #1
 8006d68:	d103      	bne.n	8006d72 <_raise_r+0x42>
 8006d6a:	2316      	movs	r3, #22
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	2001      	movs	r0, #1
 8006d70:	e7e7      	b.n	8006d42 <_raise_r+0x12>
 8006d72:	2400      	movs	r4, #0
 8006d74:	4628      	mov	r0, r5
 8006d76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d7a:	4798      	blx	r3
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	e7e0      	b.n	8006d42 <_raise_r+0x12>

08006d80 <raise>:
 8006d80:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <raise+0xc>)
 8006d82:	4601      	mov	r1, r0
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	f7ff bfd3 	b.w	8006d30 <_raise_r>
 8006d8a:	bf00      	nop
 8006d8c:	2000008c 	.word	0x2000008c

08006d90 <_kill_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	2300      	movs	r3, #0
 8006d94:	4d06      	ldr	r5, [pc, #24]	; (8006db0 <_kill_r+0x20>)
 8006d96:	4604      	mov	r4, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	602b      	str	r3, [r5, #0]
 8006d9e:	f7fb fa5d 	bl	800225c <_kill>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	d102      	bne.n	8006dac <_kill_r+0x1c>
 8006da6:	682b      	ldr	r3, [r5, #0]
 8006da8:	b103      	cbz	r3, 8006dac <_kill_r+0x1c>
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
 8006dae:	bf00      	nop
 8006db0:	20000a48 	.word	0x20000a48

08006db4 <_getpid_r>:
 8006db4:	f7fb ba4b 	b.w	800224e <_getpid>

08006db8 <__sread>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	460c      	mov	r4, r1
 8006dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc0:	f000 f89c 	bl	8006efc <_read_r>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	bfab      	itete	ge
 8006dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dca:	89a3      	ldrhlt	r3, [r4, #12]
 8006dcc:	181b      	addge	r3, r3, r0
 8006dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dd2:	bfac      	ite	ge
 8006dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dd6:	81a3      	strhlt	r3, [r4, #12]
 8006dd8:	bd10      	pop	{r4, pc}

08006dda <__swrite>:
 8006dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dde:	461f      	mov	r7, r3
 8006de0:	898b      	ldrh	r3, [r1, #12]
 8006de2:	4605      	mov	r5, r0
 8006de4:	05db      	lsls	r3, r3, #23
 8006de6:	460c      	mov	r4, r1
 8006de8:	4616      	mov	r6, r2
 8006dea:	d505      	bpl.n	8006df8 <__swrite+0x1e>
 8006dec:	2302      	movs	r3, #2
 8006dee:	2200      	movs	r2, #0
 8006df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df4:	f000 f868 	bl	8006ec8 <_lseek_r>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	4632      	mov	r2, r6
 8006dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	4628      	mov	r0, r5
 8006e04:	463b      	mov	r3, r7
 8006e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0e:	f000 b817 	b.w	8006e40 <_write_r>

08006e12 <__sseek>:
 8006e12:	b510      	push	{r4, lr}
 8006e14:	460c      	mov	r4, r1
 8006e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1a:	f000 f855 	bl	8006ec8 <_lseek_r>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	bf15      	itete	ne
 8006e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e2e:	81a3      	strheq	r3, [r4, #12]
 8006e30:	bf18      	it	ne
 8006e32:	81a3      	strhne	r3, [r4, #12]
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <__sclose>:
 8006e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3a:	f000 b813 	b.w	8006e64 <_close_r>
	...

08006e40 <_write_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	4611      	mov	r1, r2
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4d05      	ldr	r5, [pc, #20]	; (8006e60 <_write_r+0x20>)
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7f9 fc9f 	bl	8000792 <_write>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_write_r+0x1e>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_write_r+0x1e>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20000a48 	.word	0x20000a48

08006e64 <_close_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	2300      	movs	r3, #0
 8006e68:	4d05      	ldr	r5, [pc, #20]	; (8006e80 <_close_r+0x1c>)
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	f7fb fa2b 	bl	80022ca <_close>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_close_r+0x1a>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_close_r+0x1a>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	20000a48 	.word	0x20000a48

08006e84 <_fstat_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	2300      	movs	r3, #0
 8006e88:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_fstat_r+0x20>)
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	f7fb fa25 	bl	80022e0 <_fstat>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	d102      	bne.n	8006ea0 <_fstat_r+0x1c>
 8006e9a:	682b      	ldr	r3, [r5, #0]
 8006e9c:	b103      	cbz	r3, 8006ea0 <_fstat_r+0x1c>
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000a48 	.word	0x20000a48

08006ea8 <_isatty_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4d05      	ldr	r5, [pc, #20]	; (8006ec4 <_isatty_r+0x1c>)
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	f7fb fa23 	bl	80022fe <_isatty>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_isatty_r+0x1a>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_isatty_r+0x1a>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	20000a48 	.word	0x20000a48

08006ec8 <_lseek_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4d05      	ldr	r5, [pc, #20]	; (8006ee8 <_lseek_r+0x20>)
 8006ed4:	602a      	str	r2, [r5, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f7fb fa1b 	bl	8002312 <_lseek>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_lseek_r+0x1e>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_lseek_r+0x1e>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	20000a48 	.word	0x20000a48

08006eec <_malloc_usable_size_r>:
 8006eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef0:	1f18      	subs	r0, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bfbc      	itt	lt
 8006ef6:	580b      	ldrlt	r3, [r1, r0]
 8006ef8:	18c0      	addlt	r0, r0, r3
 8006efa:	4770      	bx	lr

08006efc <_read_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	2200      	movs	r2, #0
 8006f06:	4d05      	ldr	r5, [pc, #20]	; (8006f1c <_read_r+0x20>)
 8006f08:	602a      	str	r2, [r5, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f7fb f9c0 	bl	8002290 <_read>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_read_r+0x1e>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_read_r+0x1e>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	20000a48 	.word	0x20000a48

08006f20 <_init>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	bf00      	nop
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr

08006f2c <_fini>:
 8006f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2e:	bf00      	nop
 8006f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f32:	bc08      	pop	{r3}
 8006f34:	469e      	mov	lr, r3
 8006f36:	4770      	bx	lr
