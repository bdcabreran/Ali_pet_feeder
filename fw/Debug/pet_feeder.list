
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007334  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006d5c  08007440  08007440  00017440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e19c  0800e19c  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e19c  0800e19c  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e19c  0800e19c  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e19c  0800e19c  0001e19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1a0  0800e1a0  0001e1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800e1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200000f8  0800e29c  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  0800e29c  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016adb  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004093  00000000  00000000  00036bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0003ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b98d  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d73a  00000000  00000000  00057e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096cb2  00000000  00000000  0007553f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010c1f1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001560  00000000  00000000  0010c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c3c  00000000  00000000  0010d7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f8 	.word	0x200000f8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007428 	.word	0x08007428

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000fc 	.word	0x200000fc
 8000148:	08007428 	.word	0x08007428

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2iz>:
 8000988:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000990:	d30f      	bcc.n	80009b2 <__aeabi_f2iz+0x2a>
 8000992:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d90d      	bls.n	80009b8 <__aeabi_f2iz+0x30>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	bf18      	it	ne
 80009ae:	4240      	negne	r0, r0
 80009b0:	4770      	bx	lr
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	4770      	bx	lr
 80009b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009bc:	d101      	bne.n	80009c2 <__aeabi_f2iz+0x3a>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d105      	bne.n	80009ce <__aeabi_f2iz+0x46>
 80009c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009c6:	bf08      	it	eq
 80009c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <btn_debounce_init>:
#include "event_manager_fsm.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <btn_debounce_init+0x84>)
 80009e0:	611a      	str	r2, [r3, #16]
    btn->down.gpio.pin  = DOWN_Pin;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2220      	movs	r2, #32
 80009e6:	829a      	strh	r2, [r3, #20]
    btn->up.gpio.port = UP_GPIO_Port;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <btn_debounce_init+0x84>)
 80009ec:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2210      	movs	r2, #16
 80009f2:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <btn_debounce_init+0x88>)
 80009f8:	621a      	str	r2, [r3, #32]
    btn->left.gpio.pin = LEFT_Pin;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2220      	movs	r2, #32
 80009fe:	849a      	strh	r2, [r3, #36]	; 0x24
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <btn_debounce_init+0x88>)
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
    btn->right.gpio.pin = RIGHT_Pin;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	869a      	strh	r2, [r3, #52]	; 0x34
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <btn_debounce_init+0x8c>)
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40
    btn->enter.gpio.pin = ENTER_Pin;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e00d      	b.n	8000a44 <btn_debounce_init+0x70>
    {
        time_event_stop(&btn_ptr->debounce);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fd77 	bl	8001520 <time_event_stop>
        btn_ptr->pressed = false;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2200      	movs	r2, #0
 8000a36:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	3301      	adds	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d3ed      	bcc.n	8000a28 <btn_debounce_init+0x54>
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <btn_key_enter_combination>:

static btn_ev_ext_t btn_key_enter_combination(navigation_btn_t *btn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    if (btn->down.pressed)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7f1b      	ldrb	r3, [r3, #28]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d022      	beq.n	8000aba <btn_key_enter_combination+0x56>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f004 fa5b 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d111      	bne.n	8000ab0 <btn_key_enter_combination+0x4c>
        {
            if(time_event_is_active(&btn->enter.debounce))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3348      	adds	r3, #72	; 0x48
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fd57 	bl	8001544 <time_event_is_active>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <btn_key_enter_combination+0x42>
                time_event_stop(&btn->enter.debounce);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3348      	adds	r3, #72	; 0x48
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fd3d 	bl	8001520 <time_event_stop>

            printf("btn down + enter pressed\r\n");
 8000aa6:	4843      	ldr	r0, [pc, #268]	; (8000bb4 <btn_key_enter_combination+0x150>)
 8000aa8:	f005 fede 	bl	8006868 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000aac:	2307      	movs	r3, #7
 8000aae:	e07c      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn down pressed\r\n");
 8000ab0:	4841      	ldr	r0, [pc, #260]	; (8000bb8 <btn_key_enter_combination+0x154>)
 8000ab2:	f005 fed9 	bl	8006868 <puts>
            return EVT_EXT_BTN_DOWN_PRESSED;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e077      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->up.pressed)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7b1b      	ldrb	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d022      	beq.n	8000b08 <btn_key_enter_combination+0xa4>
    {
        if (HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000acc:	4619      	mov	r1, r3
 8000ace:	4610      	mov	r0, r2
 8000ad0:	f004 fa34 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <btn_key_enter_combination+0x9a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3348      	adds	r3, #72	; 0x48
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd30 	bl	8001544 <time_event_is_active>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d004      	beq.n	8000af4 <btn_key_enter_combination+0x90>
                time_event_stop(&btn->enter.debounce);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3348      	adds	r3, #72	; 0x48
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fd16 	bl	8001520 <time_event_stop>

            printf("btn up + enter pressed\r\n");
 8000af4:	4831      	ldr	r0, [pc, #196]	; (8000bbc <btn_key_enter_combination+0x158>)
 8000af6:	f005 feb7 	bl	8006868 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000afa:	2306      	movs	r3, #6
 8000afc:	e055      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn up pressed\r\n");
 8000afe:	4830      	ldr	r0, [pc, #192]	; (8000bc0 <btn_key_enter_combination+0x15c>)
 8000b00:	f005 feb2 	bl	8006868 <puts>
            return EVT_EXT_BTN_UP_PRESSED;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e050      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->left.pressed)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d022      	beq.n	8000b58 <btn_key_enter_combination+0xf4>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4610      	mov	r0, r2
 8000b20:	f004 fa0c 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <btn_key_enter_combination+0xea>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3348      	adds	r3, #72	; 0x48
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fd08 	bl	8001544 <time_event_is_active>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <btn_key_enter_combination+0xe0>
                time_event_stop(&btn->enter.debounce);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fcee 	bl	8001520 <time_event_stop>
            
            printf("btn left + enter pressed\r\n");
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <btn_key_enter_combination+0x160>)
 8000b46:	f005 fe8f 	bl	8006868 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	e02d      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else 
        {
            printf("btn left pressed\r\n");
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <btn_key_enter_combination+0x164>)
 8000b50:	f005 fe8a 	bl	8006868 <puts>
            return EVT_EXT_BTN_LEFT_PRESSED;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e028      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->right.pressed)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d022      	beq.n	8000ba8 <btn_key_enter_combination+0x144>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f004 f9e4 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d111      	bne.n	8000b9e <btn_key_enter_combination+0x13a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3348      	adds	r3, #72	; 0x48
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fce0 	bl	8001544 <time_event_is_active>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d004      	beq.n	8000b94 <btn_key_enter_combination+0x130>
                time_event_stop(&btn->enter.debounce);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3348      	adds	r3, #72	; 0x48
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fcc6 	bl	8001520 <time_event_stop>
            
            printf("btn right + enter pressed\r\n");
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <btn_key_enter_combination+0x168>)
 8000b96:	f005 fe67 	bl	8006868 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	e005      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn right pressed\r\n");
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <btn_key_enter_combination+0x16c>)
 8000ba0:	f005 fe62 	bl	8006868 <puts>
            return EVT_EXT_BTN_RIGHT_PRESSED;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e000      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    return EVT_EXT_BTN_INVALID;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08007440 	.word	0x08007440
 8000bb8:	0800745c 	.word	0x0800745c
 8000bbc:	08007470 	.word	0x08007470
 8000bc0:	08007488 	.word	0x08007488
 8000bc4:	08007498 	.word	0x08007498
 8000bc8:	080074b4 	.word	0x080074b4
 8000bcc:	080074c8 	.word	0x080074c8
 8000bd0:	080074e4 	.word	0x080074e4

08000bd4 <btn_enter_key_combination>:


static btn_ev_ext_t btn_enter_key_combination(navigation_btn_t *btn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    if (btn->enter.pressed)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d078      	beq.n	8000cd8 <btn_enter_key_combination+0x104>
    {
        if (HAL_GPIO_ReadPin(btn->down.gpio.port, btn->down.gpio.pin) == GPIO_PIN_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	8a9b      	ldrh	r3, [r3, #20]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	f004 f9a3 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <btn_enter_key_combination+0x4c>
        {
            if (time_event_is_active(&btn->down.debounce))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3318      	adds	r3, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fc9f 	bl	8001544 <time_event_is_active>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d004      	beq.n	8000c16 <btn_enter_key_combination+0x42>
                time_event_stop(&btn->down.debounce);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fc85 	bl	8001520 <time_event_stop>
            printf("btn enter + down pressed\r\n");
 8000c16:	4833      	ldr	r0, [pc, #204]	; (8000ce4 <btn_enter_key_combination+0x110>)
 8000c18:	f005 fe26 	bl	8006868 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	e05c      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->up.gpio.port, btn->up.gpio.pin) == GPIO_PIN_RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f004 f986 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d111      	bne.n	8000c5a <btn_enter_key_combination+0x86>
        {
            if (time_event_is_active(&btn->up.debounce))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fc82 	bl	8001544 <time_event_is_active>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <btn_enter_key_combination+0x7c>
                time_event_stop(&btn->up.debounce);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3308      	adds	r3, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fc68 	bl	8001520 <time_event_stop>
            printf("btn enter + up pressed\r\n");
 8000c50:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <btn_enter_key_combination+0x114>)
 8000c52:	f005 fe09 	bl	8006868 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000c56:	2306      	movs	r3, #6
 8000c58:	e03f      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->left.gpio.port, btn->left.gpio.pin) == GPIO_PIN_RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f004 f969 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <btn_enter_key_combination+0xc0>
        {
            if (time_event_is_active(&btn->left.debounce))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3328      	adds	r3, #40	; 0x28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fc65 	bl	8001544 <time_event_is_active>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d004      	beq.n	8000c8a <btn_enter_key_combination+0xb6>
                time_event_stop(&btn->left.debounce);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3328      	adds	r3, #40	; 0x28
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fc4b 	bl	8001520 <time_event_stop>
            printf("btn enter + left pressed\r\n");
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <btn_enter_key_combination+0x118>)
 8000c8c:	f005 fdec 	bl	8006868 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000c90:	2308      	movs	r3, #8
 8000c92:	e022      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->right.gpio.port, btn->right.gpio.pin) == GPIO_PIN_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f004 f94c 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <btn_enter_key_combination+0xfa>
        {
            if (time_event_is_active(&btn->right.debounce))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3338      	adds	r3, #56	; 0x38
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc48 	bl	8001544 <time_event_is_active>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <btn_enter_key_combination+0xf0>
                time_event_stop(&btn->right.debounce);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3338      	adds	r3, #56	; 0x38
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fc2e 	bl	8001520 <time_event_stop>
            printf("btn enter + right pressed\r\n");
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <btn_enter_key_combination+0x11c>)
 8000cc6:	f005 fdcf 	bl	8006868 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	e005      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
        else
        {
            printf("btn enter pressed\r\n");
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <btn_enter_key_combination+0x120>)
 8000cd0:	f005 fdca 	bl	8006868 <puts>
            return EVT_EXT_BTN_ENTER_PRESSED;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e000      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
    }
    return EVT_EXT_BTN_INVALID;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	080074f8 	.word	0x080074f8
 8000ce8:	08007514 	.word	0x08007514
 8000cec:	0800752c 	.word	0x0800752c
 8000cf0:	08007548 	.word	0x08007548
 8000cf4:	08007564 	.word	0x08007564

08000cf8 <btn_debounce_run>:


void btn_debounce_run(navigation_btn_t *btn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09c      	sub	sp, #112	; 0x70
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000d00:	2305      	movs	r3, #5
 8000d02:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    push_button_t *btn_ptr = &btn->up;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	66fb      	str	r3, [r7, #108]	; 0x6c

    for (size_t i = 0; i < btn_cnt; i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d0e:	e025      	b.n	8000d5c <btn_debounce_run+0x64>
    {
        time_event_update(&btn_ptr->debounce);
 8000d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d12:	3308      	adds	r3, #8
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fc20 	bl	800155a <time_event_update>
        if(time_event_is_raised(&btn_ptr->debounce))
 8000d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d1c:	3308      	adds	r3, #8
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fc3c 	bl	800159c <time_event_is_raised>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d012      	beq.n	8000d50 <btn_debounce_run+0x58>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 8000d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d30:	889b      	ldrh	r3, [r3, #4]
 8000d32:	4619      	mov	r1, r3
 8000d34:	4610      	mov	r0, r2
 8000d36:	f004 f901 	bl	8004f3c <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <btn_debounce_run+0x4e>
                btn_ptr->pressed = true;
 8000d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d42:	2201      	movs	r2, #1
 8000d44:	731a      	strb	r2, [r3, #12]
            
            time_event_stop(&btn_ptr->debounce);
 8000d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d48:	3308      	adds	r3, #8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fbe8 	bl	8001520 <time_event_stop>
        }
        btn_ptr++;
 8000d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d52:	3310      	adds	r3, #16
 8000d54:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d58:	3301      	adds	r3, #1
 8000d5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d5c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000d60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3d4      	bcc.n	8000d10 <btn_debounce_run+0x18>
    }

    /*Notify events*/
    event_t event;
    event.header.name = EVT_EXT_BTN_INVALID;
 8000d66:	2300      	movs	r3, #0
 8000d68:	733b      	strb	r3, [r7, #12]
    event.header.fsm_src = BTN_FSM;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	737b      	strb	r3, [r7, #13]
    event.header.fsm_dst = UI_FSM;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
    event.header.payload_len = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]

    event.header.name = btn_key_enter_combination(btn);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fe74 	bl	8000a64 <btn_key_enter_combination>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	733b      	strb	r3, [r7, #12]
    if(event.header.name != EVT_EXT_BTN_INVALID)
 8000d80:	7b3b      	ldrb	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <btn_debounce_run+0xa0>
        event_manager_write(event_manager_fsm_get(), &event);
 8000d86:	f000 fc4b 	bl	8001620 <event_manager_fsm_get>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	4610      	mov	r0, r2
 8000d94:	f000 fd11 	bl	80017ba <event_manager_write>

    event.header.name = btn_enter_key_combination(btn);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff1b 	bl	8000bd4 <btn_enter_key_combination>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	733b      	strb	r3, [r7, #12]
    if(event.header.name != EVT_EXT_BTN_INVALID)
 8000da2:	7b3b      	ldrb	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d008      	beq.n	8000dba <btn_debounce_run+0xc2>
        event_manager_write(event_manager_fsm_get(), &event);
 8000da8:	f000 fc3a 	bl	8001620 <event_manager_fsm_get>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	4610      	mov	r0, r2
 8000db6:	f000 fd00 	bl	80017ba <event_manager_write>

    btn_ptr = &btn->up;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	667b      	str	r3, [r7, #100]	; 0x64
 8000dc2:	e008      	b.n	8000dd6 <btn_debounce_run+0xde>
    {
        btn_ptr->pressed = false;
 8000dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dcc:	3310      	adds	r3, #16
 8000dce:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8000dd6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3f1      	bcc.n	8000dc4 <btn_debounce_run+0xcc>
    }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3770      	adds	r7, #112	; 0x70
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm_src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm_dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->evt);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->header.payload_len);

    if(evt->header.payload_len)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	78db      	ldrb	r3, [r3, #3]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->payload.buff, evt->header.payload_len);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	1d19      	adds	r1, r3, #4
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	78db      	ldrb	r3, [r3, #3]
 8000e02:	461a      	mov	r2, r3
 8000e04:	2058      	movs	r0, #88	; 0x58
 8000e06:	f000 f917 	bl	8001038 <print_buffer>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	4619      	mov	r1, r3
 8000e24:	68b8      	ldr	r0, [r7, #8]
 8000e26:	f000 f9d9 	bl	80011dc <ring_buffer_init>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	711a      	strb	r2, [r3, #4]
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	791b      	ldrb	r3, [r3, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <event_queue_write>:

uint8_t event_queue_write(event_queue_t *queue, event_t *evt)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t write_st = RING_BUFF_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
    evt_queue_dbg("writing event \r\n");
    event_print_info(evt);
 8000e62:	6838      	ldr	r0, [r7, #0]
 8000e64:	f7ff ffc1 	bl	8000dea <event_print_info>

    write_st = ring_buffer_write(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fac9 	bl	8001408 <ring_buffer_write>
 8000e76:	4603      	mov	r3, r0
 8000e78:	73fb      	strb	r3, [r7, #15]
    if (evt->header.payload_len)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	78db      	ldrb	r3, [r3, #3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <event_queue_write+0x44>
        write_st = ring_buffer_write(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	1d19      	adds	r1, r3, #4
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	78db      	ldrb	r3, [r3, #3]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f000 faba 	bl	8001408 <ring_buffer_write>
 8000e94:	4603      	mov	r3, r0
 8000e96:	73fb      	strb	r3, [r7, #15]

    if (write_st == RING_BUFF_OK)
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <event_queue_write+0x58>
        queue->pending_cnt++;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	711a      	strb	r2, [r3, #4]
 8000eaa:	e00c      	b.n	8000ec6 <event_queue_write+0x72>
    else
        printf_dbg_error("could not write on evt queue\r\n");
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <event_queue_write+0x7c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 fc53 	bl	800675c <iprintf>
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <event_queue_write+0x80>)
 8000eb8:	f005 fcd6 	bl	8006868 <puts>
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <event_queue_write+0x7c>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 fc4b 	bl	800675c <iprintf>

    return write_st;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	08007578 	.word	0x08007578

08000ed8 <event_queue_read>:

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa9 	bl	8000e3e <event_queue_get_pending>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d031      	beq.n	8000f56 <event_queue_read+0x7e>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	2204      	movs	r2, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fac4 	bl	8001488 <ring_buffer_read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
        if (evt->header.payload_len)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	78db      	ldrb	r3, [r3, #3]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00a      	beq.n	8000f22 <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	1d19      	adds	r1, r3, #4
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	78db      	ldrb	r3, [r3, #3]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f000 fab5 	bl	8001488 <ring_buffer_read>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d109      	bne.n	8000f3c <event_queue_read+0x64>
        {
            queue->pending_cnt--;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f7ff ff58 	bl	8000dea <event_print_info>
 8000f3a:	e00c      	b.n	8000f56 <event_queue_read+0x7e>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <event_queue_read+0x88>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 fc0b 	bl	800675c <iprintf>
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <event_queue_read+0x8c>)
 8000f48:	f005 fc8e 	bl	8006868 <puts>
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <event_queue_read+0x88>)
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fc03 	bl	800675c <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000020 	.word	0x20000020
 8000f64:	08007598 	.word	0x08007598

08000f68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00b      	beq.n	8000fa8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f90:	e000      	b.n	8000f94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <itm_enable>:

#include "itm_dbg.h"
#include "stdio.h"

void itm_enable(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <itm_enable+0x2c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <itm_enable+0x2c>)
 8000fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fc2:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 8000fc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fcc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	e000edfc 	.word	0xe000edfc

08000fe4 <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e009      	b.n	8001008 <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffb3 	bl	8000f68 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf1      	blt.n	8000ff4 <itm_write+0x10>
	}
	return len;
 8001010:	683b      	ldr	r3, [r7, #0]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f7ff ffdb 	bl	8000fe4 <itm_write>
 800102e:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 8001048:	481a      	ldr	r0, [pc, #104]	; (80010b4 <print_buffer+0x7c>)
 800104a:	f005 fc0d 	bl	8006868 <puts>
	for (size_t i = 0; i < len; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e023      	b.n	800109c <print_buffer+0x64>
	{
		switch (format)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b43      	cmp	r3, #67	; 0x43
 8001058:	d002      	beq.n	8001060 <print_buffer+0x28>
 800105a:	2b58      	cmp	r3, #88	; 0x58
 800105c:	d009      	beq.n	8001072 <print_buffer+0x3a>
 800105e:	e011      	b.n	8001084 <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4813      	ldr	r0, [pc, #76]	; (80010b8 <print_buffer+0x80>)
 800106c:	f005 fb76 	bl	800675c <iprintf>
 8001070:	e011      	b.n	8001096 <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	480f      	ldr	r0, [pc, #60]	; (80010bc <print_buffer+0x84>)
 800107e:	f005 fb6d 	bl	800675c <iprintf>
 8001082:	e008      	b.n	8001096 <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <print_buffer+0x84>)
 8001090:	f005 fb64 	bl	800675c <iprintf>
 8001094:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3d7      	bcc.n	8001054 <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <print_buffer+0x88>)
 80010a6:	f005 fbdf 	bl	8006868 <puts>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08007618 	.word	0x08007618
 80010b8:	08007624 	.word	0x08007624
 80010bc:	0800762c 	.word	0x0800762c
 80010c0:	08007634 	.word	0x08007634

080010c4 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    assert(rb);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <head_ptr_advance+0x1a>
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <head_ptr_advance+0x74>)
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <head_ptr_advance+0x78>)
 80010d6:	2126      	movs	r1, #38	; 0x26
 80010d8:	4819      	ldr	r0, [pc, #100]	; (8001140 <head_ptr_advance+0x7c>)
 80010da:	f004 ff0b 	bl	8005ef4 <__assert_func>

    if (rb->full)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7c1b      	ldrb	r3, [r3, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68d2      	ldr	r2, [r2, #12]
 80010f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80010f4:	fb01 f202 	mul.w	r2, r1, r2
 80010f8:	1a9a      	subs	r2, r3, r2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68d2      	ldr	r2, [r2, #12]
 8001108:	fbb3 f1f2 	udiv	r1, r3, r2
 800110c:	fb01 f202 	mul.w	r2, r1, r2
 8001110:	1a9a      	subs	r2, r3, r2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	741a      	strb	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	08007638 	.word	0x08007638
 800113c:	0800dfa8 	.word	0x0800dfa8
 8001140:	0800763c 	.word	0x0800763c

08001144 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <tail_ptr_retreat+0x1a>
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <tail_ptr_retreat+0x40>)
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <tail_ptr_retreat+0x44>)
 8001156:	2139      	movs	r1, #57	; 0x39
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <tail_ptr_retreat+0x48>)
 800115a:	f004 fecb 	bl	8005ef4 <__assert_func>

    rb->full = 0;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68d2      	ldr	r2, [r2, #12]
 800116e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001172:	fb01 f202 	mul.w	r2, r1, r2
 8001176:	1a9a      	subs	r2, r3, r2
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08007638 	.word	0x08007638
 8001188:	0800dfbc 	.word	0x0800dfbc
 800118c:	0800763c 	.word	0x0800763c

08001190 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    assert(rb);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d105      	bne.n	80011aa <is_ring_buffer_empty+0x1a>
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <is_ring_buffer_empty+0x40>)
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <is_ring_buffer_empty+0x44>)
 80011a2:	214e      	movs	r1, #78	; 0x4e
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <is_ring_buffer_empty+0x48>)
 80011a6:	f004 fea5 	bl	8005ef4 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7c1b      	ldrb	r3, [r3, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d107      	bne.n	80011c2 <is_ring_buffer_empty+0x32>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d101      	bne.n	80011c2 <is_ring_buffer_empty+0x32>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <is_ring_buffer_empty+0x34>
 80011c2:	2300      	movs	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08007638 	.word	0x08007638
 80011d4:	0800dfd0 	.word	0x0800dfd0
 80011d8:	0800763c 	.word	0x0800763c

080011dc <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <ring_buffer_init+0x16>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d105      	bne.n	80011fe <ring_buffer_init+0x22>
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <ring_buffer_init+0x74>)
 80011f4:	4a17      	ldr	r2, [pc, #92]	; (8001254 <ring_buffer_init+0x78>)
 80011f6:	2169      	movs	r1, #105	; 0x69
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <ring_buffer_init+0x7c>)
 80011fa:	f004 fe7b 	bl	8005ef4 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80011fe:	2014      	movs	r0, #20
 8001200:	f004 fed2 	bl	8005fa8 <malloc>
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]
    assert(rb);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <ring_buffer_init+0x3e>
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <ring_buffer_init+0x80>)
 8001210:	4a10      	ldr	r2, [pc, #64]	; (8001254 <ring_buffer_init+0x78>)
 8001212:	216c      	movs	r1, #108	; 0x6c
 8001214:	4810      	ldr	r0, [pc, #64]	; (8001258 <ring_buffer_init+0x7c>)
 8001216:	f004 fe6d 	bl	8005ef4 <__assert_func>

    rb->buffer = buffer;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 f81c 	bl	8001264 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff ffaf 	bl	8001190 <is_ring_buffer_empty>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <ring_buffer_init+0x68>
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <ring_buffer_init+0x84>)
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <ring_buffer_init+0x78>)
 800123c:	2172      	movs	r1, #114	; 0x72
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <ring_buffer_init+0x7c>)
 8001240:	f004 fe58 	bl	8005ef4 <__assert_func>

    return rb;
 8001244:	68fb      	ldr	r3, [r7, #12]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	08007668 	.word	0x08007668
 8001254:	0800dfe8 	.word	0x0800dfe8
 8001258:	0800763c 	.word	0x0800763c
 800125c:	08007638 	.word	0x08007638
 8001260:	08007678 	.word	0x08007678

08001264 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d105      	bne.n	800127e <ring_buffer_reset+0x1a>
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <ring_buffer_reset+0x34>)
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <ring_buffer_reset+0x38>)
 8001276:	2189      	movs	r1, #137	; 0x89
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <ring_buffer_reset+0x3c>)
 800127a:	f004 fe3b 	bl	8005ef4 <__assert_func>
    rb->head = 0;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	741a      	strb	r2, [r3, #16]
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	08007638 	.word	0x08007638
 800129c:	0800dffc 	.word	0x0800dffc
 80012a0:	0800763c 	.word	0x0800763c

080012a4 <ring_buffer_get_data_len>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return number of bytes in buffer.
 */
size_t ring_buffer_get_data_len(ring_buffer_handle_t rb)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    assert(rb);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <ring_buffer_get_data_len+0x1a>
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <ring_buffer_get_data_len+0x60>)
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <ring_buffer_get_data_len+0x64>)
 80012b6:	2197      	movs	r1, #151	; 0x97
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <ring_buffer_get_data_len+0x68>)
 80012ba:	f004 fe1b 	bl	8005ef4 <__assert_func>

    size_t size = rb->length;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	60fb      	str	r3, [r7, #12]

    if (!rb->full)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7c1b      	ldrb	r3, [r3, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <ring_buffer_get_data_len+0x54>
    {
        if (rb->head >= rb->tail)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d306      	bcc.n	80012e6 <ring_buffer_get_data_len+0x42>
        {
            size = (rb->head - rb->tail);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	e008      	b.n	80012f8 <ring_buffer_get_data_len+0x54>
        }
        else
        {
            size = (rb->length + rb->head - rb->tail);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	441a      	add	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	60fb      	str	r3, [r7, #12]
        }
    }

    return size;
 80012f8:	68fb      	ldr	r3, [r7, #12]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08007638 	.word	0x08007638
 8001308:	0800e010 	.word	0x0800e010
 800130c:	0800763c 	.word	0x0800763c

08001310 <ring_buffer_get_free_space>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return the number of bytes available in ring buffer 
 */
size_t ring_buffer_get_free_space(ring_buffer_handle_t rb)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    assert(rb);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <ring_buffer_get_free_space+0x1a>
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <ring_buffer_get_free_space+0x30>)
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <ring_buffer_get_free_space+0x34>)
 8001322:	21be      	movs	r1, #190	; 0xbe
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <ring_buffer_get_free_space+0x38>)
 8001326:	f004 fde5 	bl	8005ef4 <__assert_func>
    return (rb->length - ring_buffer_get_data_len(rb));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68dc      	ldr	r4, [r3, #12]
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffb8 	bl	80012a4 <ring_buffer_get_data_len>
 8001334:	4603      	mov	r3, r0
 8001336:	1ae3      	subs	r3, r4, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	08007638 	.word	0x08007638
 8001344:	0800e02c 	.word	0x0800e02c
 8001348:	0800763c 	.word	0x0800763c

0800134c <ring_buffer_put>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint8_t data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
    assert(rb && rb->buffer);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <ring_buffer_put+0x1a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <ring_buffer_put+0x26>
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <ring_buffer_put+0x44>)
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <ring_buffer_put+0x48>)
 800136a:	21ca      	movs	r1, #202	; 0xca
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <ring_buffer_put+0x4c>)
 800136e:	f004 fdc1 	bl	8005ef4 <__assert_func>

    rb->buffer[rb->head] = data;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4413      	add	r3, r2
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	701a      	strb	r2, [r3, #0]

    head_ptr_advance(rb);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fe9f 	bl	80010c4 <head_ptr_advance>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	08007694 	.word	0x08007694
 8001394:	0800e048 	.word	0x0800e048
 8001398:	0800763c 	.word	0x0800763c

0800139c <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <ring_buffer_get+0x1e>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <ring_buffer_get+0x1e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <ring_buffer_get+0x2a>
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <ring_buffer_get+0x60>)
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <ring_buffer_get+0x64>)
 80013be:	21da      	movs	r1, #218	; 0xda
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <ring_buffer_get+0x68>)
 80013c2:	f004 fd97 	bl	8005ef4 <__assert_func>

    int r = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fee0 	bl	8001190 <is_ring_buffer_empty>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4413      	add	r3, r2
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff feac 	bl	8001144 <tail_ptr_retreat>

        r = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
    }

    return r;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	b2db      	uxtb	r3, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	080076a8 	.word	0x080076a8
 8001400:	0800e058 	.word	0x0800e058
 8001404:	0800763c 	.word	0x0800763c

08001408 <ring_buffer_write>:
 * @param data   pointer to a buffer that contains the data to be written in buffer
 * @param data_len number of bytes of data to be written in buffer
 * @return ring_buffer_st_t  return status of buffer.
 */
ring_buffer_st_t ring_buffer_write(ring_buffer_handle_t rb, uint8_t *data, uint8_t data_len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	4613      	mov	r3, r2
 8001414:	71fb      	strb	r3, [r7, #7]
    assert(rb && rb->buffer);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <ring_buffer_write+0x1c>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d105      	bne.n	8001430 <ring_buffer_write+0x28>
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <ring_buffer_write+0x74>)
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <ring_buffer_write+0x78>)
 8001428:	21f3      	movs	r1, #243	; 0xf3
 800142a:	4816      	ldr	r0, [pc, #88]	; (8001484 <ring_buffer_write+0x7c>)
 800142c:	f004 fd62 	bl	8005ef4 <__assert_func>

    if (rb->full)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	7c1b      	ldrb	r3, [r3, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <ring_buffer_write+0x34>
    {
        return RING_BUFF_FULL;
 8001438:	2301      	movs	r3, #1
 800143a:	e01a      	b.n	8001472 <ring_buffer_write+0x6a>
    }

    if (ring_buffer_get_free_space(rb) < data_len)
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff ff67 	bl	8001310 <ring_buffer_get_free_space>
 8001442:	4602      	mov	r2, r0
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	429a      	cmp	r2, r3
 8001448:	d201      	bcs.n	800144e <ring_buffer_write+0x46>
    {
        return RING_BUFF_NOT_ENOUGH_SPACE;
 800144a:	2302      	movs	r3, #2
 800144c:	e011      	b.n	8001472 <ring_buffer_write+0x6a>
    }
    else
    {
        size_t data_counter = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]

        while (data_counter < data_len)
 8001452:	e009      	b.n	8001468 <ring_buffer_write+0x60>
        {
            ring_buffer_put(rb, data[data_counter++]);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	617a      	str	r2, [r7, #20]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ff72 	bl	800134c <ring_buffer_put>
        while (data_counter < data_len)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	d3f1      	bcc.n	8001454 <ring_buffer_write+0x4c>
        }

        return RING_BUFF_OK;
 8001470:	2300      	movs	r3, #0
    }
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08007694 	.word	0x08007694
 8001480:	0800e068 	.word	0x0800e068
 8001484:	0800763c 	.word	0x0800763c

08001488 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <ring_buffer_read+0x20>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <ring_buffer_read+0x20>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d106      	bne.n	80014b6 <ring_buffer_read+0x2e>
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <ring_buffer_read+0x64>)
 80014aa:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <ring_buffer_read+0x68>)
 80014ac:	f240 1115 	movw	r1, #277	; 0x115
 80014b0:	4810      	ldr	r0, [pc, #64]	; (80014f4 <ring_buffer_read+0x6c>)
 80014b2:	f004 fd1f 	bl	8005ef4 <__assert_func>

    size_t data_counter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 80014ba:	e00d      	b.n	80014d8 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	617a      	str	r2, [r7, #20]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f7ff ff67 	bl	800139c <ring_buffer_get>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e004      	b.n	80014e2 <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3ed      	bcc.n	80014bc <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080076c4 	.word	0x080076c4
 80014f0:	0800e07c 	.word	0x0800e07c
 80014f4:	0800763c 	.word	0x0800763c

080014f8 <time_event_start>:
#include <assert.h>

bool volatile pending_time_update = false;

void time_event_start(time_event_t *time_event, const uint16_t time_ms)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
    time_event->tick_cnt = time_ms;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	801a      	strh	r2, [r3, #0]
    time_event->active = true;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	70da      	strb	r2, [r3, #3]
}   
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    time_event->active = false;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	70da      	strb	r2, [r3, #3]
    time_event->tick_cnt = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <time_event_is_active>:

bool time_event_is_active(time_event_t *time_event)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    return time_event->active;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	789b      	ldrb	r3, [r3, #2]
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <time_event_update>:

bool time_event_update(time_event_t *time_event)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
    if (time_event->active == true)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	789b      	ldrb	r3, [r3, #2]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d012      	beq.n	8001590 <time_event_update+0x36>
    {
        if (time_event->tick_cnt > 0)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <time_event_update+0x24>
            time_event->tick_cnt--;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	801a      	strh	r2, [r3, #0]

        if(!time_event->tick_cnt)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <time_event_update+0x32>
            time_event->raised = true;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	70da      	strb	r2, [r3, #3]
        
        return true;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <time_event_update+0x38>
    }
    return false;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <time_event_is_raised>:

bool time_event_is_raised(time_event_t *time_event)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	78db      	ldrb	r3, [r3, #3]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <time_event_set_pending_update>:

void time_event_set_pending_update(bool status)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <time_event_set_pending_update+0x1c>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	7013      	strb	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000164 	.word	0x20000164

080015d4 <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
    return pending_time_update;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <time_event_get_pending_update+0x14>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000164 	.word	0x20000164

080015ec <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff ffdf 	bl	80015b4 <time_event_set_pending_update>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8001600:	f7ff ffe8 	bl	80015d4 <time_event_get_pending_update>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <time_events_poll_update+0x1a>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <time_events_poll_update+0x20>)
 800160c:	f7ff fb74 	bl	8000cf8 <btn_debounce_run>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ffcf 	bl	80015b4 <time_event_set_pending_update>
    }
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000114 	.word	0x20000114

08001620 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <event_manager_fsm_get+0x10>)
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000230 	.word	0x20000230

08001634 <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	705a      	strb	r2, [r3, #1]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d002      	beq.n	800166c <event_manager_fsm_run+0x16>
 8001666:	2b02      	cmp	r3, #2
 8001668:	d004      	beq.n	8001674 <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 800166a:	e007      	b.n	800167c <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f84d 	bl	800170c <wait_event_on_react>
 8001672:	e003      	b.n	800167c <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f891 	bl	800179c <notify_event_on_react>
 800167a:	bf00      	nop
    }
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3358      	adds	r3, #88	; 0x58
 8001690:	22c8      	movs	r2, #200	; 0xc8
 8001692:	4905      	ldr	r1, [pc, #20]	; (80016a8 <event_manager_fsm_init+0x24>)
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fbbc 	bl	8000e12 <event_queue_init>
    enter_seq_wait_event(handle);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f806 	bl	80016ac <enter_seq_wait_event>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000168 	.word	0x20000168

080016ac <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffbc 	bl	8001634 <fsm_set_next_state>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f7ff fbfd 	bl	8000ed8 <event_queue_read>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3358      	adds	r3, #88	; 0x58
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fba3 	bl	8000e3e <event_queue_get_pending>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	705a      	strb	r2, [r3, #1]
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ffcf 	bl	80016c4 <exit_action_wait_event>
        enter_seq_notify_event(handle);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f810 	bl	800174c <enter_seq_notify_event>
 800172c:	e001      	b.n	8001732 <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	f083 0301 	eor.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffd1 	bl	80016e6 <during_action_wait_event>
    }
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 8001754:	2102      	movs	r1, #2
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff6c 	bl	8001634 <fsm_set_next_state>
    entry_action_notify_event(handle);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f804 	bl	800176a <entry_action_notify_event>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
    event_manager_dbg("\t notify evt = [0x%X], from [0x%X] to [0x%X]\r\n",
                 handle->iface.event.header.event,
                 handle->iface.event.header.fsm_src,
                 handle->iface.event.header.fsm_dst);

    switch (handle->iface.event.header.fsm_dst)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	799b      	ldrb	r3, [r3, #6]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <entry_action_notify_event+0x22>
    {
        case UI_FSM:
        {
            ui_fsm_set_ext_event(ui_fsm_get(), &handle->iface.event);
 800177a:	f000 fb23 	bl	8001dc4 <ui_fsm_get>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f000 fb66 	bl	8001e58 <ui_fsm_set_ext_event>
        }
    
    default:
        break;
 800178c:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	705a      	strb	r2, [r3, #1]
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d102      	bne.n	80017b2 <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff7d 	bl	80016ac <enter_seq_wait_event>
    }
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <event_manager_write>:

//------------------ Event Manager Function Definition ---------------------------------------//

uint8_t event_manager_write(event_manager_handle_t handle, event_t *event)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
    return event_queue_write(&handle->iface.queue, event);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3358      	adds	r3, #88	; 0x58
 80017c8:	6839      	ldr	r1, [r7, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fb42 	bl	8000e54 <event_queue_write>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <ui_win_show>:
        {"Snack 3"  , 2, 33*6}
    };


void ui_win_show(ui_window_t *win, uint16_t color, bool show)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	707b      	strb	r3, [r7, #1]
    if (show == true)
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d011      	beq.n	8001814 <ui_win_show+0x3a>
    {
        BSP_LCD_SetTextColor(color);
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fd34 	bl	8003260 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	8818      	ldrh	r0, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	8859      	ldrh	r1, [r3, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	889a      	ldrh	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	88db      	ldrh	r3, [r3, #6]
 8001808:	f001 fec0 	bl	800358c <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 800180c:	2000      	movs	r0, #0
 800180e:	f001 fd27 	bl	8003260 <BSP_LCD_SetTextColor>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 8001812:	e010      	b.n	8001836 <ui_win_show+0x5c>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8001814:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001818:	f001 fd22 	bl	8003260 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8818      	ldrh	r0, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	8859      	ldrh	r1, [r3, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	889a      	ldrh	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	88db      	ldrh	r3, [r3, #6]
 800182c:	f001 feae 	bl	800358c <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001830:	2000      	movs	r0, #0
 8001832:	f001 fd15 	bl	8003260 <BSP_LCD_SetTextColor>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <ui_date_time_init>:


/////////////////////////////////// Date Hour Related Functions /////////////////////////////////////////////

void ui_date_time_init(date_time_menu_t *menu)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    menu->win.main.x = 17;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2211      	movs	r2, #17
 800184c:	801a      	strh	r2, [r3, #0]
    menu->win.main.y = 116;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2274      	movs	r2, #116	; 0x74
 8001852:	805a      	strh	r2, [r3, #2]
    menu->win.main.w = 442;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800185a:	809a      	strh	r2, [r3, #4]
    menu->win.main.h = 161;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	22a1      	movs	r2, #161	; 0xa1
 8001860:	80da      	strh	r2, [r3, #6]

    menu->time.hour.x = menu->win.main.x + 31;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	331f      	adds	r3, #31
 8001868:	b29a      	uxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	811a      	strh	r2, [r3, #8]
    menu->time.hour.y = menu->win.main.y + 29;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	885b      	ldrh	r3, [r3, #2]
 8001872:	331d      	adds	r3, #29
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	815a      	strh	r2, [r3, #10]
    menu->time.min.x = menu->win.main.x + 191;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	33bf      	adds	r3, #191	; 0xbf
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	819a      	strh	r2, [r3, #12]
    menu->time.min.y = menu->win.main.y + 29;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	885b      	ldrh	r3, [r3, #2]
 800188a:	331d      	adds	r3, #29
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	81da      	strh	r2, [r3, #14]

    menu->date.day.x = menu->win.main.x + 347;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	f203 135b 	addw	r3, r3, #347	; 0x15b
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	831a      	strh	r2, [r3, #24]
    menu->date.day.y = menu->win.main.y + 61;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	885b      	ldrh	r3, [r3, #2]
 80018a4:	333d      	adds	r3, #61	; 0x3d
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	835a      	strh	r2, [r3, #26]
    menu->date.month.x = menu->win.main.x + 389;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	f203 1385 	addw	r3, r3, #389	; 0x185
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	829a      	strh	r2, [r3, #20]
    menu->date.month.y = menu->win.main.y + 61;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	885b      	ldrh	r3, [r3, #2]
 80018be:	333d      	adds	r3, #61	; 0x3d
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	82da      	strh	r2, [r3, #22]

    BSP_LCD_SetFont(&Font24);
 80018c6:	4818      	ldr	r0, [pc, #96]	; (8001928 <ui_date_time_init+0xe8>)
 80018c8:	f001 fcea 	bl	80032a0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(menu->time.hour.x, menu->time.hour.y, "--:", LEFT_MODE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8918      	ldrh	r0, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	8959      	ldrh	r1, [r3, #10]
 80018d4:	2303      	movs	r3, #3
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <ui_date_time_init+0xec>)
 80018d8:	f001 fd38 	bl	800334c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(menu->time.min.x, menu->time.min.y, "--", LEFT_MODE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8998      	ldrh	r0, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	89d9      	ldrh	r1, [r3, #14]
 80018e4:	2303      	movs	r3, #3
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <ui_date_time_init+0xf0>)
 80018e8:	f001 fd30 	bl	800334c <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetFont(&Font16);
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <ui_date_time_init+0xf4>)
 80018ee:	f001 fcd7 	bl	80032a0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(menu->date.day.x, menu->date.day.y, "--/", LEFT_MODE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	8b18      	ldrh	r0, [r3, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	8b59      	ldrh	r1, [r3, #26]
 80018fa:	2303      	movs	r3, #3
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <ui_date_time_init+0xf8>)
 80018fe:	f001 fd25 	bl	800334c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(menu->date.month.x, menu->date.month.y, "--", LEFT_MODE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8a98      	ldrh	r0, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8ad9      	ldrh	r1, [r3, #22]
 800190a:	2303      	movs	r3, #3
 800190c:	4a08      	ldr	r2, [pc, #32]	; (8001930 <ui_date_time_init+0xf0>)
 800190e:	f001 fd1d 	bl	800334c <BSP_LCD_DisplayStringAt>

    ui_win_show(&menu->win, LCD_DEFAULT_TEXTCOLOR, true);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5e 	bl	80017da <ui_win_show>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000010 	.word	0x20000010
 800192c:	08007754 	.word	0x08007754
 8001930:	08007758 	.word	0x08007758
 8001934:	20000000 	.word	0x20000000
 8001938:	0800775c 	.word	0x0800775c

0800193c <ui_date_time_set_config>:

void ui_date_time_set_config(date_time_menu_t *menu, date_time_config_t *conf)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    uint8_t buff[5];
    uint16_t color = LCD_DEFAULT_TEXTCOLOR;
 8001946:	2300      	movs	r3, #0
 8001948:	81fb      	strh	r3, [r7, #14]

    if (conf->select == UI_ITEM_SELECT)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	791b      	ldrb	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <ui_date_time_set_config+0x1a>
        color = FEEDER_CONFIG_SELECTION_COLOR;
 8001952:	231f      	movs	r3, #31
 8001954:	81fb      	strh	r3, [r7, #14]

    BSP_LCD_SetTextColor(color);
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fc81 	bl	8003260 <BSP_LCD_SetTextColor>

    switch (conf->item)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d862      	bhi.n	8001a2c <ui_date_time_set_config+0xf0>
 8001966:	a201      	add	r2, pc, #4	; (adr r2, 800196c <ui_date_time_set_config+0x30>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	0800197d 	.word	0x0800197d
 8001970:	080019a9 	.word	0x080019a9
 8001974:	080019d5 	.word	0x080019d5
 8001978:	08001a01 	.word	0x08001a01
    {
    case DATE_TIME_CNF_HOUR: {
            BSP_LCD_SetFont(&Font24);
 800197c:	4831      	ldr	r0, [pc, #196]	; (8001a44 <ui_date_time_set_config+0x108>)
 800197e:	f001 fc8f 	bl	80032a0 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->time.hour);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	461a      	mov	r2, r3
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	492e      	ldr	r1, [pc, #184]	; (8001a48 <ui_date_time_set_config+0x10c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f004 ff82 	bl	8006898 <siprintf>
            BSP_LCD_DisplayStringAt(menu->time.hour.x,menu->time.hour.y,buff, LEFT_MODE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8918      	ldrh	r0, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8959      	ldrh	r1, [r3, #10]
 800199c:	f107 0208 	add.w	r2, r7, #8
 80019a0:	2303      	movs	r3, #3
 80019a2:	f001 fcd3 	bl	800334c <BSP_LCD_DisplayStringAt>
    } break;
 80019a6:	e042      	b.n	8001a2e <ui_date_time_set_config+0xf2>

    case DATE_TIME_CNF_MIN: {
            BSP_LCD_SetFont(&Font24);
 80019a8:	4826      	ldr	r0, [pc, #152]	; (8001a44 <ui_date_time_set_config+0x108>)
 80019aa:	f001 fc79 	bl	80032a0 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->time.min);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	4923      	ldr	r1, [pc, #140]	; (8001a48 <ui_date_time_set_config+0x10c>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 ff6c 	bl	8006898 <siprintf>
            BSP_LCD_DisplayStringAt(menu->time.min.x,menu->time.min.y,buff, LEFT_MODE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	8998      	ldrh	r0, [r3, #12]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	89d9      	ldrh	r1, [r3, #14]
 80019c8:	f107 0208 	add.w	r2, r7, #8
 80019cc:	2303      	movs	r3, #3
 80019ce:	f001 fcbd 	bl	800334c <BSP_LCD_DisplayStringAt>
    } break;
 80019d2:	e02c      	b.n	8001a2e <ui_date_time_set_config+0xf2>
    case DATE_TIME_CNF_DAY: {
            BSP_LCD_SetFont(&Font16);
 80019d4:	481d      	ldr	r0, [pc, #116]	; (8001a4c <ui_date_time_set_config+0x110>)
 80019d6:	f001 fc63 	bl	80032a0 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->date.day);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	461a      	mov	r2, r3
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4918      	ldr	r1, [pc, #96]	; (8001a48 <ui_date_time_set_config+0x10c>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 ff56 	bl	8006898 <siprintf>
            BSP_LCD_DisplayStringAt(menu->date.day.x,menu->date.day.y,buff, LEFT_MODE); 
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	8b18      	ldrh	r0, [r3, #24]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8b59      	ldrh	r1, [r3, #26]
 80019f4:	f107 0208 	add.w	r2, r7, #8
 80019f8:	2303      	movs	r3, #3
 80019fa:	f001 fca7 	bl	800334c <BSP_LCD_DisplayStringAt>
    } break;
 80019fe:	e016      	b.n	8001a2e <ui_date_time_set_config+0xf2>
    case DATE_TIME_CNF_MONTH: {
            BSP_LCD_SetFont(&Font16);
 8001a00:	4812      	ldr	r0, [pc, #72]	; (8001a4c <ui_date_time_set_config+0x110>)
 8001a02:	f001 fc4d 	bl	80032a0 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->date.month);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	789b      	ldrb	r3, [r3, #2]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	490d      	ldr	r1, [pc, #52]	; (8001a48 <ui_date_time_set_config+0x10c>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 ff40 	bl	8006898 <siprintf>
            BSP_LCD_DisplayStringAt(menu->date.month.x,menu->date.month.y,buff, LEFT_MODE); 
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	8a98      	ldrh	r0, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8ad9      	ldrh	r1, [r3, #22]
 8001a20:	f107 0208 	add.w	r2, r7, #8
 8001a24:	2303      	movs	r3, #3
 8001a26:	f001 fc91 	bl	800334c <BSP_LCD_DisplayStringAt>
    } break;
 8001a2a:	e000      	b.n	8001a2e <ui_date_time_set_config+0xf2>
    default:
        break;
 8001a2c:	bf00      	nop
    }

    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a2e:	4808      	ldr	r0, [pc, #32]	; (8001a50 <ui_date_time_set_config+0x114>)
 8001a30:	f001 fc36 	bl	80032a0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f001 fc13 	bl	8003260 <BSP_LCD_SetTextColor>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000010 	.word	0x20000010
 8001a48:	08007760 	.word	0x08007760
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000018 	.word	0x20000018

08001a54 <ui_drawers_clean>:


/////////////////////////////////// Drawers Related Functions /////////////////////////////////////////////

static void ui_drawers_clean(ui_drawers_t *drawers)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    ui_win_show(&drawers->form.main_frame, LCD_DEFAULT_TEXTCOLOR, true);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	2201      	movs	r2, #1
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff feb8 	bl	80017da <ui_win_show>

    for (uint8_t i = 0; i < DRAWERn; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e031      	b.n	8001ad4 <ui_drawers_clean+0x80>
    {
        drawers->form.single_frame.x = drawers->form.main_frame.x + drawer_label[i].x;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	891a      	ldrh	r2, [r3, #8]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <ui_drawers_clean+0x90>)
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	821a      	strh	r2, [r3, #16]
        drawers->form.single_frame.y = drawers->form.main_frame.y + drawer_label[i].y;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	895a      	ldrh	r2, [r3, #10]
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	4915      	ldr	r1, [pc, #84]	; (8001ae4 <ui_drawers_clean+0x90>)
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	88db      	ldrh	r3, [r3, #6]
 8001a94:	4413      	add	r3, r2
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	825a      	strh	r2, [r3, #18]
        ui_win_show(&drawers->form.single_frame, LCD_DEFAULT_TEXTCOLOR, true);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fe98 	bl	80017da <ui_win_show>
        BSP_LCD_SetFont(&DRAWER_SELECTION_FONT);
 8001aaa:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <ui_drawers_clean+0x94>)
 8001aac:	f001 fbf8 	bl	80032a0 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(drawers->form.single_frame.x + 15, drawers->form.single_frame.y + 4, drawer_label[i].name, LEFT_MODE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	8a1b      	ldrh	r3, [r3, #16]
 8001ab4:	330f      	adds	r3, #15
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	8a5b      	ldrh	r3, [r3, #18]
 8001abc:	3304      	adds	r3, #4
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <ui_drawers_clean+0x90>)
 8001ac4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f001 fc3f 	bl	800334c <BSP_LCD_DisplayStringAt>
    for (uint8_t i = 0; i < DRAWERn; i++)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d9ca      	bls.n	8001a70 <ui_drawers_clean+0x1c>
    }
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	0800e090 	.word	0x0800e090
 8001ae8:	20000008 	.word	0x20000008

08001aec <ui_drawers_init>:

void ui_drawers_init(ui_drawers_t *drawers)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    drawers->win.main.x = 15;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	220f      	movs	r2, #15
 8001af8:	801a      	strh	r2, [r3, #0]
    drawers->win.main.y = 10;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220a      	movs	r2, #10
 8001afe:	805a      	strh	r2, [r3, #2]
    drawers->win.main.h = 81;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2251      	movs	r2, #81	; 0x51
 8001b04:	80da      	strh	r2, [r3, #6]
    drawers->win.main.w = 132;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2284      	movs	r2, #132	; 0x84
 8001b0a:	809a      	strh	r2, [r3, #4]

    drawers->form.main_frame.x = drawers->win.main.x + 4;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	3304      	adds	r3, #4
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	811a      	strh	r2, [r3, #8]
    drawers->form.main_frame.y = drawers->win.main.y + 4;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	885b      	ldrh	r3, [r3, #2]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	815a      	strh	r2, [r3, #10]
    drawers->form.main_frame.h = drawers->win.main.h - 8;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	88db      	ldrh	r3, [r3, #6]
 8001b28:	3b08      	subs	r3, #8
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	81da      	strh	r2, [r3, #14]
    drawers->form.main_frame.w = drawers->win.main.w - 8;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	889b      	ldrh	r3, [r3, #4]
 8001b34:	3b08      	subs	r3, #8
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	819a      	strh	r2, [r3, #12]

    drawers->form.single_frame.w = 50;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2232      	movs	r2, #50	; 0x32
 8001b40:	829a      	strh	r2, [r3, #20]
    drawers->form.single_frame.h = 25;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2219      	movs	r2, #25
 8001b46:	82da      	strh	r2, [r3, #22]

    ui_drawers_clean(drawers);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff83 	bl	8001a54 <ui_drawers_clean>
    // ui_win_show(&drawers->win.main, DRAWER_SELECTION_COLOR, true);
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <ui_battery_init>:



/////////////////////////////////// Battery Related Functions /////////////////////////////////////////////
void ui_battery_init(ui_battery_t *batt)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    batt->win.main.x = 366;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001b66:	801a      	strh	r2, [r3, #0]
    batt->win.main.y = 10;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	220a      	movs	r2, #10
 8001b6c:	805a      	strh	r2, [r3, #2]
    batt->win.main.h = 81;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2251      	movs	r2, #81	; 0x51
 8001b72:	80da      	strh	r2, [r3, #6]
    batt->win.main.w = 96;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2260      	movs	r2, #96	; 0x60
 8001b78:	809a      	strh	r2, [r3, #4]

    batt->icon.icon_batt.ptr = &battery_icon;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a31      	ldr	r2, [pc, #196]	; (8001c44 <ui_battery_init+0xec>)
 8001b7e:	615a      	str	r2, [r3, #20]
    batt->icon.icon_batt.x = batt->win.main.x + 4;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3304      	adds	r3, #4
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	821a      	strh	r2, [r3, #16]
    batt->icon.icon_batt.y = batt->win.main.y + 16;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	885b      	ldrh	r3, [r3, #2]
 8001b90:	3310      	adds	r3, #16
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	825a      	strh	r2, [r3, #18]

    batt->icon.icon_error.ptr = &batt_error_icon;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a2b      	ldr	r2, [pc, #172]	; (8001c48 <ui_battery_init+0xf0>)
 8001b9c:	61da      	str	r2, [r3, #28]
    batt->icon.icon_error.x = batt->icon.icon_batt.x + 16;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	8a1b      	ldrh	r3, [r3, #16]
 8001ba2:	3310      	adds	r3, #16
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	831a      	strh	r2, [r3, #24]
    batt->icon.icon_error.y = batt->icon.icon_batt.y + 16;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	8a5b      	ldrh	r3, [r3, #18]
 8001bae:	3310      	adds	r3, #16
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	835a      	strh	r2, [r3, #26]

    batt->icon.icon_warn.ptr = &batt_warning_icon;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a24      	ldr	r2, [pc, #144]	; (8001c4c <ui_battery_init+0xf4>)
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
    batt->icon.icon_warn.x = batt->icon.icon_batt.x + 16;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8a1b      	ldrh	r3, [r3, #16]
 8001bc0:	3310      	adds	r3, #16
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	841a      	strh	r2, [r3, #32]
    batt->icon.icon_warn.y = batt->icon.icon_batt.y + 16;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	8a5b      	ldrh	r3, [r3, #18]
 8001bcc:	3310      	adds	r3, #16
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	845a      	strh	r2, [r3, #34]	; 0x22

    batt->form.charge.x = batt->icon.icon_batt.x + 17;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	8a1b      	ldrh	r3, [r3, #16]
 8001bd8:	3311      	adds	r3, #17
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	811a      	strh	r2, [r3, #8]
    batt->form.charge.y = batt->icon.icon_batt.y + 8;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8a5b      	ldrh	r3, [r3, #18]
 8001be4:	3308      	adds	r3, #8
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	815a      	strh	r2, [r3, #10]
    batt->form.charge.h = batt->icon.icon_batt.ptr->infoHeader.biHeight - 16;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b10      	subs	r3, #16
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	81da      	strh	r2, [r3, #14]
    batt->form.charge.w = batt->icon.icon_batt.ptr->infoHeader.biWidth - 24;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b18      	subs	r3, #24
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	819a      	strh	r2, [r3, #12]

    batt->text.charge.font = &Font20;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <ui_battery_init+0xf8>)
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
    batt->text.charge.x = batt->form.charge.x + 15;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	891b      	ldrh	r3, [r3, #8]
 8001c1a:	330f      	adds	r3, #15
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28
    batt->text.charge.y = batt->form.charge.y + 10;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	895b      	ldrh	r3, [r3, #10]
 8001c26:	330a      	adds	r3, #10
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    ui_win_show(&batt->win.main, LCD_DEFAULT_TEXTCOLOR, true);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fdd0 	bl	80017da <ui_win_show>

}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	0800bc18 	.word	0x0800bc18
 8001c48:	0800b060 	.word	0x0800b060
 8001c4c:	0800b898 	.word	0x0800b898
 8001c50:	20000008 	.word	0x20000008

08001c54 <ui_battery_show>:

void ui_battery_show(ui_battery_t *batt, bool show)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
    if(show == true)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <ui_battery_show+0x26>
    {
        BSP_LCD_DrawBitmap(batt->icon.icon_batt.x, batt->icon.icon_batt.y, (uint8_t*)batt->icon.icon_batt.ptr);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	8a18      	ldrh	r0, [r3, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	8a59      	ldrh	r1, [r3, #18]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	461a      	mov	r2, r3
 8001c74:	f001 fcc0 	bl	80035f8 <BSP_LCD_DrawBitmap>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_FillRect(batt->win.main.x, batt->win.main.y, batt->win.main.w, batt->win.main.h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 8001c78:	e010      	b.n	8001c9c <ui_battery_show+0x48>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8001c7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c7e:	f001 faef 	bl	8003260 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->win.main.x, batt->win.main.y, batt->win.main.w, batt->win.main.h);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	8818      	ldrh	r0, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	8859      	ldrh	r1, [r3, #2]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	889a      	ldrh	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	88db      	ldrh	r3, [r3, #6]
 8001c92:	f001 fd0b 	bl	80036ac <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f001 fae2 	bl	8003260 <BSP_LCD_SetTextColor>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <ui_battery_charge>:
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}

void ui_battery_charge(ui_battery_t *batt, uint8_t batt_level, bool show)
{
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	70bb      	strb	r3, [r7, #2]
    if (show)
 8001cb4:	78bb      	ldrb	r3, [r7, #2]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d069      	beq.n	8001d8e <ui_battery_charge+0xea>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8001cba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cbe:	f001 facf 	bl	8003260 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, batt->form.charge.w, batt->form.charge.h);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	8918      	ldrh	r0, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8959      	ldrh	r1, [r3, #10]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	899a      	ldrh	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	89db      	ldrh	r3, [r3, #14]
 8001cd2:	f001 fceb 	bl	80036ac <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f001 fac2 	bl	8003260 <BSP_LCD_SetTextColor>

        float width = batt->form.charge.w*(batt_level/100.0);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	899b      	ldrh	r3, [r3, #12]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fb85 	bl	80003f0 <__aeabi_i2d>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460d      	mov	r5, r1
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fb7f 	bl	80003f0 <__aeabi_i2d>
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <ui_battery_charge+0x114>)
 8001cf8:	f7fe fd0e 	bl	8000718 <__aeabi_ddiv>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4620      	mov	r0, r4
 8001d02:	4629      	mov	r1, r5
 8001d04:	f7fe fbde 	bl	80004c4 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe fdea 	bl	80008e8 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	617b      	str	r3, [r7, #20]

        BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001d18:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d1c:	f001 faa0 	bl	8003260 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, (int)width, batt->form.charge.h);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	891c      	ldrh	r4, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	895d      	ldrh	r5, [r3, #10]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7fe fe2d 	bl	8000988 <__aeabi_f2iz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	89db      	ldrh	r3, [r3, #14]
 8001d36:	4629      	mov	r1, r5
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f001 fcb7 	bl	80036ac <BSP_LCD_FillRect>
        BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001d3e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d42:	f001 fa9d 	bl	8003280 <BSP_LCD_SetBackColor>

        uint8_t buff[5] = {0};
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	743b      	strb	r3, [r7, #16]
        sprintf(buff, "%d%%", batt_level);
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4919      	ldr	r1, [pc, #100]	; (8001dbc <ui_battery_charge+0x118>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fd9e 	bl	8006898 <siprintf>

        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f001 fa7f 	bl	8003260 <BSP_LCD_SetTextColor>
        BSP_LCD_SetFont(batt->text.charge.font);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 fa9a 	bl	80032a0 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(batt->text.charge.x, batt->text.charge.y, buff ,LEFT_MODE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 8001d74:	f107 020c 	add.w	r2, r7, #12
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f001 fae7 	bl	800334c <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001d7e:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <ui_battery_charge+0x11c>)
 8001d80:	f001 fa8e 	bl	80032a0 <BSP_LCD_SetFont>
        BSP_LCD_SetBackColor(LCD_DEFAULT_BACKCOLOR);
 8001d84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d88:	f001 fa7a 	bl	8003280 <BSP_LCD_SetBackColor>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, batt->form.charge.w, batt->form.charge.h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 8001d8c:	e010      	b.n	8001db0 <ui_battery_charge+0x10c>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8001d8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d92:	f001 fa65 	bl	8003260 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, batt->form.charge.w, batt->form.charge.h);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8918      	ldrh	r0, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	8959      	ldrh	r1, [r3, #10]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	899a      	ldrh	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	89db      	ldrh	r3, [r3, #14]
 8001da6:	f001 fc81 	bl	80036ac <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f001 fa58 	bl	8003260 <BSP_LCD_SetTextColor>
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bdb0      	pop	{r4, r5, r7, pc}
 8001db8:	40590000 	.word	0x40590000
 8001dbc:	08007794 	.word	0x08007794
 8001dc0:	20000018 	.word	0x20000018

08001dc4 <ui_fsm_get>:


////////////////////////////// Public function declaration //////////////////////////////////////

ui_handle_t ui_fsm_get(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
    return &ui_fsm;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <ui_fsm_get+0x10>)
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200002f4 	.word	0x200002f4

08001dd8 <ui_fsm_init>:

void ui_fsm_init(ui_handle_t handle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    // ui_battery_init(&ui_battery);
    // ui_drawers_init(&ui_drawers);
	main_menu_enter_seq(handle);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f84b 	bl	8001e7c <main_menu_enter_seq>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <ui_fsm_run>:

void ui_fsm_run(ui_handle_t handle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d810      	bhi.n	8001e24 <ui_fsm_run+0x34>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <ui_fsm_run+0x18>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e1d 	.word	0x08001e1d
 8001e0c:	08001e25 	.word	0x08001e25
 8001e10:	08001e25 	.word	0x08001e25
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001e25 	.word	0x08001e25
    {
        case ST_UI_MAIN_MENU:  main_menu_on_react(handle); break;
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f885 	bl	8001f2c <main_menu_on_react>
 8001e22:	e000      	b.n	8001e26 <ui_fsm_run+0x36>
        case ST_UI_DATE_TIME_CONFIG: break;
        case ST_UI_PET_CALL_CONFIG: break;
        case ST_UI_FEEDER_CONFIG: break;
        case ST_UI_OPEN_DRAWER: break;
    default:
        break;
 8001e24:	bf00      	nop
    }

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop

08001e30 <fsm_set_next_state>:

static void fsm_set_next_state(ui_handle_t handle, ui_state_t next_st)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
    handle->state = next_st;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	701a      	strb	r2, [r3, #0]
    handle->event.btn = EVT_EXT_BTN_INVALID;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	709a      	strb	r2, [r3, #2]
    handle->event.internal = EVT_INT_UI_INVALID;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	70da      	strb	r2, [r3, #3]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <ui_fsm_set_ext_event>:
		time_event++;
	}
}

void ui_fsm_set_ext_event(ui_handle_t handle, event_t *event)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    if(event->header.fsm_src == BTN_FSM)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d103      	bne.n	8001e72 <ui_fsm_set_ext_event+0x1a>
    {
        ui_fsm_dbg("btn event detected\r\n");
        handle->event.btn = event->header.name;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	709a      	strb	r2, [r3, #2]
    }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <main_menu_enter_seq>:


/////////////////////////////////// Main Menu State  ///////////////////////////////////////////

static void main_menu_enter_seq(ui_handle_t handle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ main menu ]");
    fsm_set_next_state(handle, ST_UI_MAIN_MENU);
 8001e84:	2101      	movs	r1, #1
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffd2 	bl	8001e30 <fsm_set_next_state>
    entry_action_main_menu(handle);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f805 	bl	8001e9c <entry_action_main_menu>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <entry_action_main_menu>:

static void entry_action_main_menu(ui_handle_t handle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    /*1. draw battery */
    /*1. put icons in the main screen with the updated values */
    /*2. put cursor in the first navigation item */
    /*3. start timer to update gui */
    ui_battery_init(&ui_battery);
 8001ea4:	481e      	ldr	r0, [pc, #120]	; (8001f20 <entry_action_main_menu+0x84>)
 8001ea6:	f7ff fe57 	bl	8001b58 <ui_battery_init>
    ui_battery_show(&ui_battery, true);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	481c      	ldr	r0, [pc, #112]	; (8001f20 <entry_action_main_menu+0x84>)
 8001eae:	f7ff fed1 	bl	8001c54 <ui_battery_show>
    ui_battery_charge(&ui_battery, 99, true);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2163      	movs	r1, #99	; 0x63
 8001eb6:	481a      	ldr	r0, [pc, #104]	; (8001f20 <entry_action_main_menu+0x84>)
 8001eb8:	f7ff fef4 	bl	8001ca4 <ui_battery_charge>
    ui_drawers_init(&ui_drawers);
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <entry_action_main_menu+0x88>)
 8001ebe:	f7ff fe15 	bl	8001aec <ui_drawers_init>
    // ui_feeder_menu_init(&ui_feeder_menu);
    ui_date_time_init(&ui_date_time_menu);
 8001ec2:	4819      	ldr	r0, [pc, #100]	; (8001f28 <entry_action_main_menu+0x8c>)
 8001ec4:	f7ff fcbc 	bl	8001840 <ui_date_time_init>
    HAL_Delay(2000);
 8001ec8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ecc:	f002 fb14 	bl	80044f8 <HAL_Delay>
    ui_feeder_menu_set_config(&ui_feeder_menu, &config);
    HAL_Delay(1000);
#endif 

    date_time_config_t config;
    config.item = DATE_TIME_CNF_HOUR;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	723b      	strb	r3, [r7, #8]
    config.select = UI_ITEM_SELECT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	733b      	strb	r3, [r7, #12]
    config.time.hour = 5;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	727b      	strb	r3, [r7, #9]
    ui_date_time_set_config(&ui_date_time_menu, &config);
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4811      	ldr	r0, [pc, #68]	; (8001f28 <entry_action_main_menu+0x8c>)
 8001ee4:	f7ff fd2a 	bl	800193c <ui_date_time_set_config>
    HAL_Delay(1000);
 8001ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eec:	f002 fb04 	bl	80044f8 <HAL_Delay>

    config.select = UI_ITEM_DESELECT;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	733b      	strb	r3, [r7, #12]
    ui_date_time_set_config(&ui_date_time_menu, &config);
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480b      	ldr	r0, [pc, #44]	; (8001f28 <entry_action_main_menu+0x8c>)
 8001efc:	f7ff fd1e 	bl	800193c <ui_date_time_set_config>
    HAL_Delay(1000);
 8001f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f04:	f002 faf8 	bl	80044f8 <HAL_Delay>



    time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff faf1 	bl	80014f8 <time_event_start>
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000290 	.word	0x20000290
 8001f24:	200002c0 	.word	0x200002c0
 8001f28:	200002d8 	.word	0x200002d8

08001f2c <main_menu_on_react>:

static void main_menu_on_react(ui_handle_t handle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    /*navigation key update item selection*/
    switch (handle->event.btn)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	789b      	ldrb	r3, [r3, #2]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d814      	bhi.n	8001f68 <main_menu_on_react+0x3c>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <main_menu_on_react+0x18>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f69 	.word	0x08001f69
 8001f48:	08001f69 	.word	0x08001f69
 8001f4c:	08001f69 	.word	0x08001f69
 8001f50:	08001f69 	.word	0x08001f69
 8001f54:	08001f69 	.word	0x08001f69
 8001f58:	08001f69 	.word	0x08001f69
 8001f5c:	08001f69 	.word	0x08001f69
 8001f60:	08001f69 	.word	0x08001f69
 8001f64:	08001f69 	.word	0x08001f69
        case EVT_EXT_BTN_UP_AND_ENTER_PRESSED:    break;
        case EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED:  break;
        case EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED:  break;
        case EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED: break;  
    default:
        break;
 8001f68:	bf00      	nop
    }

    if(time_event_is_raised(&handle->event.time.update_gui)== true)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fb14 	bl	800159c <time_event_is_raised>
    {
        /*Update GUI*/
    }
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d02b      	beq.n	8001fe4 <HAL_GPIO_EXTI_Callback+0x68>
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	dc2e      	bgt.n	8001fee <HAL_GPIO_EXTI_Callback+0x72>
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d010      	beq.n	8001fb6 <HAL_GPIO_EXTI_Callback+0x3a>
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	dc2a      	bgt.n	8001fee <HAL_GPIO_EXTI_Callback+0x72>
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d002      	beq.n	8001fa2 <HAL_GPIO_EXTI_Callback+0x26>
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_EXTI_Callback+0x30>
        case GPIO_PIN_7: {
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
         }break;
    
    default:
        break;
 8001fa0:	e025      	b.n	8001fee <HAL_GPIO_EXTI_Callback+0x72>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 8001fa2:	2132      	movs	r1, #50	; 0x32
 8001fa4:	4815      	ldr	r0, [pc, #84]	; (8001ffc <HAL_GPIO_EXTI_Callback+0x80>)
 8001fa6:	f7ff faa7 	bl	80014f8 <time_event_start>
        }break;
 8001faa:	e023      	b.n	8001ff4 <HAL_GPIO_EXTI_Callback+0x78>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8001fac:	2132      	movs	r1, #50	; 0x32
 8001fae:	4814      	ldr	r0, [pc, #80]	; (8002000 <HAL_GPIO_EXTI_Callback+0x84>)
 8001fb0:	f7ff faa2 	bl	80014f8 <time_event_start>
        }break;
 8001fb4:	e01e      	b.n	8001ff4 <HAL_GPIO_EXTI_Callback+0x78>
            if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_RESET)
 8001fb6:	2120      	movs	r1, #32
 8001fb8:	4812      	ldr	r0, [pc, #72]	; (8002004 <HAL_GPIO_EXTI_Callback+0x88>)
 8001fba:	f002 ffbf 	bl	8004f3c <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <HAL_GPIO_EXTI_Callback+0x50>
                time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 8001fc4:	2132      	movs	r1, #50	; 0x32
 8001fc6:	4810      	ldr	r0, [pc, #64]	; (8002008 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fc8:	f7ff fa96 	bl	80014f8 <time_event_start>
            if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) == GPIO_PIN_RESET)
 8001fcc:	2120      	movs	r1, #32
 8001fce:	480f      	ldr	r0, [pc, #60]	; (800200c <HAL_GPIO_EXTI_Callback+0x90>)
 8001fd0:	f002 ffb4 	bl	8004f3c <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x76>
                  time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 8001fda:	2132      	movs	r1, #50	; 0x32
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <HAL_GPIO_EXTI_Callback+0x94>)
 8001fde:	f7ff fa8b 	bl	80014f8 <time_event_start>
         }break;
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x76>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 8001fe4:	2132      	movs	r1, #50	; 0x32
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <HAL_GPIO_EXTI_Callback+0x98>)
 8001fe8:	f7ff fa86 	bl	80014f8 <time_event_start>
         }break;
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_EXTI_Callback+0x78>
        break;
 8001fee:	bf00      	nop
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_EXTI_Callback+0x78>
         }break;
 8001ff2:	bf00      	nop
    }

}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000015c 	.word	0x2000015c
 8002000:	2000011c 	.word	0x2000011c
 8002004:	40010800 	.word	0x40010800
 8002008:	2000013c 	.word	0x2000013c
 800200c:	40011000 	.word	0x40011000
 8002010:	2000012c 	.word	0x2000012c
 8002014:	2000014c 	.word	0x2000014c

08002018 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 800201c:	2001      	movs	r0, #1
 800201e:	f002 ffbd 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}

08002026 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 800202a:	2010      	movs	r0, #16
 800202c:	f002 ffb6 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5), Down (C5)
 8002038:	2020      	movs	r0, #32
 800203a:	f002 ffaf 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 800203e:	2080      	movs	r0, #128	; 0x80
 8002040:	f002 ffac 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b094      	sub	sp, #80	; 0x50
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002052:	2228      	movs	r2, #40	; 0x28
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f003 ffae 	bl	8005fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002078:	2302      	movs	r3, #2
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800207c:	2301      	movs	r3, #1
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002080:	2310      	movs	r3, #16
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002084:	2302      	movs	r3, #2
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002088:	2300      	movs	r3, #0
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800208c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002096:	4618      	mov	r0, r3
 8002098:	f003 f8dc 	bl	8005254 <HAL_RCC_OscConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80020a2:	f000 fa4f 	bl	8002544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a6:	230f      	movs	r3, #15
 80020a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fb49 	bl	8005758 <HAL_RCC_ClockConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80020cc:	f000 fa3a 	bl	8002544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020d0:	2302      	movs	r3, #2
 80020d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fcc0 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80020e6:	f000 fa2d 	bl	8002544 <Error_Handler>
  }
}
 80020ea:	bf00      	nop
 80020ec:	3750      	adds	r7, #80	; 0x50
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_ADC1_Init+0x74>)
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <MX_ADC1_Init+0x78>)
 8002108:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_ADC1_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_ADC1_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_ADC1_Init+0x74>)
 8002118:	2200      	movs	r2, #0
 800211a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_ADC1_Init+0x74>)
 800211e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <MX_ADC1_Init+0x74>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_ADC1_Init+0x74>)
 800212c:	2201      	movs	r2, #1
 800212e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <MX_ADC1_Init+0x74>)
 8002132:	f002 fa05 	bl	8004540 <HAL_ADC_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800213c:	f000 fa02 	bl	8002544 <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 8002140:	230a      	movs	r3, #10
 8002142:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002144:	2301      	movs	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_ADC1_Init+0x74>)
 8002152:	f002 facd 	bl	80046f0 <HAL_ADC_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800215c:	f000 f9f2 	bl	8002544 <Error_Handler>
  }
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000304 	.word	0x20000304
 800216c:	40012400 	.word	0x40012400

08002170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <MX_I2C1_Init+0x54>)
 8002178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_I2C1_Init+0x50>)
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <MX_I2C1_Init+0x58>)
 800217e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_I2C1_Init+0x50>)
 800218e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_I2C1_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <MX_I2C1_Init+0x50>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_I2C1_Init+0x50>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_I2C1_Init+0x50>)
 80021ae:	f002 ff0d 	bl	8004fcc <HAL_I2C_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021b8:	f000 f9c4 	bl	8002544 <Error_Handler>
  }
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000334 	.word	0x20000334
 80021c4:	40005400 	.word	0x40005400
 80021c8:	000186a0 	.word	0x000186a0

080021cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_SPI2_Init+0x64>)
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <MX_SPI2_Init+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_SPI2_Init+0x64>)
 80021d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_SPI2_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <MX_SPI2_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_SPI2_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <MX_SPI2_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_SPI2_Init+0x64>)
 80021f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_SPI2_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <MX_SPI2_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_SPI2_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <MX_SPI2_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_SPI2_Init+0x64>)
 8002218:	220a      	movs	r2, #10
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <MX_SPI2_Init+0x64>)
 800221e:	f003 fcd5 	bl	8005bcc <HAL_SPI_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002228:	f000 f98c 	bl	8002544 <Error_Handler>
  }
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000388 	.word	0x20000388
 8002234:	40003800 	.word	0x40003800

08002238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223e:	463b      	mov	r3, r7
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <MX_TIM1_Init+0x70>)
 8002248:	4a18      	ldr	r2, [pc, #96]	; (80022ac <MX_TIM1_Init+0x74>)
 800224a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <MX_TIM1_Init+0x70>)
 800224e:	2200      	movs	r2, #0
 8002250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <MX_TIM1_Init+0x70>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <MX_TIM1_Init+0x70>)
 800225a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_TIM1_Init+0x70>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_TIM1_Init+0x70>)
 8002268:	2200      	movs	r2, #0
 800226a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_TIM1_Init+0x70>)
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8002272:	2108      	movs	r1, #8
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <MX_TIM1_Init+0x70>)
 8002276:	f003 fd2d 	bl	8005cd4 <HAL_TIM_OnePulse_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8002280:	f000 f960 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_TIM1_Init+0x70>)
 8002292:	f003 fdd1 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800229c:	f000 f952 	bl	8002544 <Error_Handler>
  }


}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000468 	.word	0x20000468
 80022ac:	40012c00 	.word	0x40012c00

080022b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_DMA_Init+0x48>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <MX_DMA_Init+0x48>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6153      	str	r3, [r2, #20]
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <MX_DMA_Init+0x48>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	200e      	movs	r0, #14
 80022d4:	f002 fc1d 	bl	8004b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80022d8:	200e      	movs	r0, #14
 80022da:	f002 fc36 	bl	8004b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	200f      	movs	r0, #15
 80022e4:	f002 fc15 	bl	8004b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80022e8:	200f      	movs	r0, #15
 80022ea:	f002 fc2e 	bl	8004b4a <HAL_NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000

080022fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002328:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a61      	ldr	r2, [pc, #388]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 800232e:	f043 0320 	orr.w	r3, r3, #32
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a5b      	ldr	r2, [pc, #364]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a55      	ldr	r2, [pc, #340]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 800235e:	f043 0308 	orr.w	r3, r3, #8
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <MX_GPIO_Init+0x1b8>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	2102      	movs	r1, #2
 8002374:	4850      	ldr	r0, [pc, #320]	; (80024b8 <MX_GPIO_Init+0x1bc>)
 8002376:	f002 fdf8 	bl	8004f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 800237a:	2200      	movs	r2, #0
 800237c:	f640 715f 	movw	r1, #3935	; 0xf5f
 8002380:	484e      	ldr	r0, [pc, #312]	; (80024bc <MX_GPIO_Init+0x1c0>)
 8002382:	f002 fdf2 	bl	8004f6a <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800238c:	484c      	ldr	r0, [pc, #304]	; (80024c0 <MX_GPIO_Init+0x1c4>)
 800238e:	f002 fdec 	bl	8004f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8002392:	2302      	movs	r3, #2
 8002394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2302      	movs	r3, #2
 80023a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4619      	mov	r1, r3
 80023a8:	4843      	ldr	r0, [pc, #268]	; (80024b8 <MX_GPIO_Init+0x1bc>)
 80023aa:	f002 fc43 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 80023ae:	f241 338c 	movw	r3, #5004	; 0x138c
 80023b2:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	4619      	mov	r1, r3
 80023c2:	483d      	ldr	r0, [pc, #244]	; (80024b8 <MX_GPIO_Init+0x1bc>)
 80023c4:	f002 fc36 	bl	8004c34 <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 80023c8:	f640 735f 	movw	r3, #3935	; 0xf5f
 80023cc:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4619      	mov	r1, r3
 80023e0:	4836      	ldr	r0, [pc, #216]	; (80024bc <MX_GPIO_Init+0x1c0>)
 80023e2:	f002 fc27 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 80023e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	4619      	mov	r1, r3
 80023fa:	4830      	ldr	r0, [pc, #192]	; (80024bc <MX_GPIO_Init+0x1c0>)
 80023fc:	f002 fc1a 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8002400:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2302      	movs	r3, #2
 8002410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4619      	mov	r1, r3
 8002418:	4829      	ldr	r0, [pc, #164]	; (80024c0 <MX_GPIO_Init+0x1c4>)
 800241a:	f002 fc0b 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 800241e:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8002422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <MX_GPIO_Init+0x1c8>)
 8002426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4619      	mov	r1, r3
 8002432:	4821      	ldr	r0, [pc, #132]	; (80024b8 <MX_GPIO_Init+0x1bc>)
 8002434:	f002 fbfe 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 8002438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <MX_GPIO_Init+0x1c8>)
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	4619      	mov	r1, r3
 800244c:	481b      	ldr	r0, [pc, #108]	; (80024bc <MX_GPIO_Init+0x1c0>)
 800244e:	f002 fbf1 	bl	8004c34 <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8002452:	2330      	movs	r3, #48	; 0x30
 8002454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <MX_GPIO_Init+0x1cc>)
 8002458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	4619      	mov	r1, r3
 8002464:	4814      	ldr	r0, [pc, #80]	; (80024b8 <MX_GPIO_Init+0x1bc>)
 8002466:	f002 fbe5 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 800246a:	23a0      	movs	r3, #160	; 0xa0
 800246c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_GPIO_Init+0x1cc>)
 8002470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	4619      	mov	r1, r3
 800247c:	480f      	ldr	r0, [pc, #60]	; (80024bc <MX_GPIO_Init+0x1c0>)
 800247e:	f002 fbd9 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8002482:	2301      	movs	r3, #1
 8002484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <MX_GPIO_Init+0x1cc>)
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	4619      	mov	r1, r3
 8002494:	480a      	ldr	r0, [pc, #40]	; (80024c0 <MX_GPIO_Init+0x1c4>)
 8002496:	f002 fbcd 	bl	8004c34 <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 800249a:	2006      	movs	r0, #6
 800249c:	f002 fb55 	bl	8004b4a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, down -> C5, right -> A7
 80024a0:	2017      	movs	r0, #23
 80024a2:	f002 fb52 	bl	8004b4a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 80024a6:	200a      	movs	r0, #10
 80024a8:	f002 fb4f 	bl	8004b4a <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 80024ac:	bf00      	nop
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40010800 	.word	0x40010800
 80024c0:	40010c00 	.word	0x40010c00
 80024c4:	10110000 	.word	0x10110000
 80024c8:	10210000 	.word	0x10210000

080024cc <init_peripherals>:

void init_peripherals(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d0:	f001 ffb0 	bl	8004434 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80024d4:	f7ff fdb8 	bl	8002048 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d8:	f7ff ff10 	bl	80022fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80024dc:	f7ff fe0a 	bl	80020f4 <MX_ADC1_Init>
  MX_SPI2_Init();
 80024e0:	f7ff fe74 	bl	80021cc <MX_SPI2_Init>
  MX_DMA_Init();
 80024e4:	f7ff fee4 	bl	80022b0 <MX_DMA_Init>
  MX_TIM1_Init();
 80024e8:	f7ff fea6 	bl	8002238 <MX_TIM1_Init>
  MX_I2C1_Init();
 80024ec:	f7ff fe40 	bl	8002170 <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 80024f0:	f7fe fd60 	bl	8000fb4 <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 80024f4:	f000 fe78 	bl	80031e8 <BSP_LCD_Init>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  init_peripherals();
 8002502:	f7ff ffe3 	bl	80024cc <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 8002506:	480d      	ldr	r0, [pc, #52]	; (800253c <main+0x40>)
 8002508:	f7fe fa64 	bl	80009d4 <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 800250c:	f7ff f888 	bl	8001620 <event_manager_fsm_get>
 8002510:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff f8b6 	bl	8001684 <event_manager_fsm_init>

  /*Init UI */
  ui_handle_t ui_fsm = ui_fsm_get();
 8002518:	f7ff fc54 	bl	8001dc4 <ui_fsm_get>
 800251c:	6038      	str	r0, [r7, #0]
  ui_fsm_init(ui_fsm);
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f7ff fc5a 	bl	8001dd8 <ui_fsm_init>

  printf("Ali Pet Feeder Project\r\n");
 8002524:	4806      	ldr	r0, [pc, #24]	; (8002540 <main+0x44>)
 8002526:	f004 f99f 	bl	8006868 <puts>

  /* Infinite loop */
  while (1)
  {
    ui_fsm_run(ui_fsm);
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f7ff fc60 	bl	8001df0 <ui_fsm_run>
    event_manager_fsm_run(evm_fsm);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff f890 	bl	8001656 <event_manager_fsm_run>
    time_events_poll_update();
 8002536:	f7ff f861 	bl	80015fc <time_events_poll_update>
    ui_fsm_run(ui_fsm);
 800253a:	e7f6      	b.n	800252a <main+0x2e>
 800253c:	20000114 	.word	0x20000114
 8002540:	0800779c 	.word	0x0800779c

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800254c:	e7fe      	b.n	800254c <Error_Handler+0x8>
	...

08002550 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_MspInit+0x5c>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_MspInit+0x5c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6193      	str	r3, [r2, #24]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_MspInit+0x5c>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_MspInit+0x5c>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_MspInit+0x5c>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_MspInit+0x5c>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_MspInit+0x60>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_MspInit+0x60>)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6053      	str	r3, [r2, #4]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010000 	.word	0x40010000

080025b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_ADC_MspInit+0x6c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d121      	bne.n	8002618 <HAL_ADC_MspInit+0x64>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_ADC_MspInit+0x70>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_ADC_MspInit+0x70>)
 80025da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025de:	6193      	str	r3, [r2, #24]
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_ADC_MspInit+0x70>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_ADC_MspInit+0x70>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <HAL_ADC_MspInit+0x70>)
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_ADC_MspInit+0x70>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 8002604:	2301      	movs	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002608:	2303      	movs	r3, #3
 800260a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	4619      	mov	r1, r3
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <HAL_ADC_MspInit+0x74>)
 8002614:	f002 fb0e 	bl	8004c34 <HAL_GPIO_Init>
  }

}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40012400 	.word	0x40012400
 8002624:	40021000 	.word	0x40021000
 8002628:	40011000 	.word	0x40011000

0800262c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <HAL_I2C_MspInit+0x70>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d123      	bne.n	8002694 <HAL_I2C_MspInit+0x68>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8002664:	23c0      	movs	r3, #192	; 0xc0
 8002666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	4619      	mov	r1, r3
 8002676:	480b      	ldr	r0, [pc, #44]	; (80026a4 <HAL_I2C_MspInit+0x78>)
 8002678:	f002 fadc 	bl	8004c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 8002682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002686:	61d3      	str	r3, [r2, #28]
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_I2C_MspInit+0x74>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]

  }

}
 8002694:	bf00      	nop
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40005400 	.word	0x40005400
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40010c00 	.word	0x40010c00

080026a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_SPI_MspInit+0x124>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d17d      	bne.n	80027c4 <HAL_SPI_MspInit+0x11c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026c8:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_SPI_MspInit+0x128>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4a40      	ldr	r2, [pc, #256]	; (80027d0 <HAL_SPI_MspInit+0x128>)
 80026ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d2:	61d3      	str	r3, [r2, #28]
 80026d4:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_SPI_MspInit+0x128>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_SPI_MspInit+0x128>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <HAL_SPI_MspInit+0x128>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_SPI_MspInit+0x128>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80026f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4619      	mov	r1, r3
 800270c:	4831      	ldr	r0, [pc, #196]	; (80027d4 <HAL_SPI_MspInit+0x12c>)
 800270e:	f002 fa91 	bl	8004c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8002712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4619      	mov	r1, r3
 8002726:	482b      	ldr	r0, [pc, #172]	; (80027d4 <HAL_SPI_MspInit+0x12c>)
 8002728:	f002 fa84 	bl	8004c34 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <HAL_SPI_MspInit+0x134>)
 8002730:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002732:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002734:	2200      	movs	r2, #0
 8002736:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002744:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002758:	2200      	movs	r2, #0
 800275a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800275c:	481e      	ldr	r0, [pc, #120]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 800275e:	f002 fa0f 	bl	8004b80 <HAL_DMA_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002768:	f7ff feec 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002770:	64da      	str	r2, [r3, #76]	; 0x4c
 8002772:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 800277a:	4a1a      	ldr	r2, [pc, #104]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 800277c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 8002780:	2210      	movs	r2, #16
 8002782:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 8002798:	2200      	movs	r2, #0
 800279a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800279c:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 80027aa:	f002 f9e9 	bl	8004b80 <HAL_DMA_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80027b4:	f7ff fec6 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 80027bc:	649a      	str	r2, [r3, #72]	; 0x48
 80027be:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6253      	str	r3, [r2, #36]	; 0x24


  }

}
 80027c4:	bf00      	nop
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40003800 	.word	0x40003800
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010c00 	.word	0x40010c00
 80027d8:	200003e0 	.word	0x200003e0
 80027dc:	40020044 	.word	0x40020044
 80027e0:	20000424 	.word	0x20000424
 80027e4:	40020058 	.word	0x40020058

080027e8 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <HAL_TIM_OnePulse_MspInit+0x34>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10b      	bne.n	8002812 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_TIM_OnePulse_MspInit+0x38>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_TIM_OnePulse_MspInit+0x38>)
 8002800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002804:	6193      	str	r3, [r2, #24]
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_TIM_OnePulse_MspInit+0x38>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
  }

}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40021000 	.word	0x40021000

08002824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  while (1)
 8002828:	e7fe      	b.n	8002828 <NMI_Handler+0x4>

0800282a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  while (1)
 800282e:	e7fe      	b.n	800282e <HardFault_Handler+0x4>

08002830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  while (1)
 8002834:	e7fe      	b.n	8002834 <MemManage_Handler+0x4>

08002836 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  while (1)
 800283a:	e7fe      	b.n	800283a <BusFault_Handler+0x4>

0800283c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  while (1)
 8002840:	e7fe      	b.n	8002840 <UsageFault_Handler+0x4>

08002842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800286a:	f7fe febf 	bl	80015ec <HAL_SYSTICK_Callback>
  HAL_IncTick();
 800286e:	f001 fe27 	bl	80044c0 <HAL_IncTick>
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}

08002876 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
	return 1;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <_kill>:

int _kill(int pid, int sig)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800288e:	f003 fb4f 	bl	8005f30 <__errno>
 8002892:	4603      	mov	r3, r0
 8002894:	2216      	movs	r2, #22
 8002896:	601a      	str	r2, [r3, #0]
	return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_exit>:

void _exit (int status)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ffe7 	bl	8002884 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028b6:	e7fe      	b.n	80028b6 <_exit+0x12>

080028b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e00a      	b.n	80028e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ca:	f3af 8000 	nop.w
 80028ce:	4601      	mov	r1, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	dbf0      	blt.n	80028ca <_read+0x12>
	}

return len;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return -1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002918:	605a      	str	r2, [r3, #4]
	return 0;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <_isatty>:

int _isatty(int file)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
	return 1;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
	return 0;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
	...

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f003 fad4 	bl	8005f30 <__errno>
 8002988:	4603      	mov	r3, r0
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20005000 	.word	0x20005000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	200004b0 	.word	0x200004b0
 80029bc:	20000958 	.word	0x20000958

080029c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ce:	490d      	ldr	r1, [pc, #52]	; (8002a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029d0:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e4:	4c0a      	ldr	r4, [pc, #40]	; (8002a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029f2:	f7ff ffe5 	bl	80029c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f003 fab3 	bl	8005f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029fa:	f7ff fd7f 	bl	80024fc <main>
  bx lr
 80029fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a04:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002a08:	0800e1a4 	.word	0x0800e1a4
  ldr r2, =_sbss
 8002a0c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002a10:	20000954 	.word	0x20000954

08002a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC1_2_IRQHandler>
	...

08002a18 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8002a1c:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <ili9488_Init+0x114>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d115      	bne.n	8002a54 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8002a28:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <ili9488_Init+0x114>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <ili9488_Init+0x114>)
 8002a34:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <ili9488_Init+0x114>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <ili9488_Init+0x2e>
      LCD_IO_Init();
 8002a42:	f001 fb75 	bl	8004130 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <ili9488_Init+0x114>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <ili9488_Init+0x114>)
 8002a52:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8002a54:	2069      	movs	r0, #105	; 0x69
 8002a56:	f001 fb49 	bl	80040ec <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f001 fbfc 	bl	8004258 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8002a60:	2005      	movs	r0, #5
 8002a62:	f001 fb43 	bl	80040ec <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8002a66:	220f      	movs	r2, #15
 8002a68:	4931      	ldr	r1, [pc, #196]	; (8002b30 <ili9488_Init+0x118>)
 8002a6a:	20e0      	movs	r0, #224	; 0xe0
 8002a6c:	f001 fc52 	bl	8004314 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8002a70:	220f      	movs	r2, #15
 8002a72:	4930      	ldr	r1, [pc, #192]	; (8002b34 <ili9488_Init+0x11c>)
 8002a74:	20e1      	movs	r0, #225	; 0xe1
 8002a76:	f001 fc4d 	bl	8004314 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	492e      	ldr	r1, [pc, #184]	; (8002b38 <ili9488_Init+0x120>)
 8002a7e:	20c0      	movs	r0, #192	; 0xc0
 8002a80:	f001 fc48 	bl	8004314 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002a84:	2005      	movs	r0, #5
 8002a86:	f001 fb31 	bl	80040ec <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8002a8a:	20c1      	movs	r0, #193	; 0xc1
 8002a8c:	f001 fbe4 	bl	8004258 <LCD_IO_WriteCmd8>
 8002a90:	2041      	movs	r0, #65	; 0x41
 8002a92:	f001 fbfd 	bl	8004290 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8002a96:	2005      	movs	r0, #5
 8002a98:	f001 fb28 	bl	80040ec <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4927      	ldr	r1, [pc, #156]	; (8002b3c <ili9488_Init+0x124>)
 8002aa0:	20c5      	movs	r0, #197	; 0xc5
 8002aa2:	f001 fc37 	bl	8004314 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002aa6:	2005      	movs	r0, #5
 8002aa8:	f001 fb20 	bl	80040ec <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8002aac:	203a      	movs	r0, #58	; 0x3a
 8002aae:	f001 fbd3 	bl	8004258 <LCD_IO_WriteCmd8>
 8002ab2:	2066      	movs	r0, #102	; 0x66
 8002ab4:	f001 fbec 	bl	8004290 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 8002ab8:	20b0      	movs	r0, #176	; 0xb0
 8002aba:	f001 fbcd 	bl	8004258 <LCD_IO_WriteCmd8>
 8002abe:	2080      	movs	r0, #128	; 0x80
 8002ac0:	f001 fbe6 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8002ac4:	20b1      	movs	r0, #177	; 0xb1
 8002ac6:	f001 fbc7 	bl	8004258 <LCD_IO_WriteCmd8>
 8002aca:	20a0      	movs	r0, #160	; 0xa0
 8002acc:	f001 fbe0 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8002ad0:	20b4      	movs	r0, #180	; 0xb4
 8002ad2:	f001 fbc1 	bl	8004258 <LCD_IO_WriteCmd8>
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f001 fbda 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8002adc:	2202      	movs	r2, #2
 8002ade:	4918      	ldr	r1, [pc, #96]	; (8002b40 <ili9488_Init+0x128>)
 8002ae0:	20b6      	movs	r0, #182	; 0xb6
 8002ae2:	f001 fc17 	bl	8004314 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8002ae6:	20e9      	movs	r0, #233	; 0xe9
 8002ae8:	f001 fbb6 	bl	8004258 <LCD_IO_WriteCmd8>
 8002aec:	2000      	movs	r0, #0
 8002aee:	f001 fbcf 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8002af2:	2204      	movs	r2, #4
 8002af4:	4913      	ldr	r1, [pc, #76]	; (8002b44 <ili9488_Init+0x12c>)
 8002af6:	20f7      	movs	r0, #247	; 0xf7
 8002af8:	f001 fc0c 	bl	8004314 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002afc:	2005      	movs	r0, #5
 8002afe:	f001 faf5 	bl	80040ec <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8002b02:	2011      	movs	r0, #17
 8002b04:	f001 fba8 	bl	8004258 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8002b08:	2078      	movs	r0, #120	; 0x78
 8002b0a:	f001 faef 	bl	80040ec <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8002b0e:	2029      	movs	r0, #41	; 0x29
 8002b10:	f001 fba2 	bl	8004258 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8002b14:	2005      	movs	r0, #5
 8002b16:	f001 fae9 	bl	80040ec <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8002b1a:	2036      	movs	r0, #54	; 0x36
 8002b1c:	f001 fb9c 	bl	8004258 <LCD_IO_WriteCmd8>
 8002b20:	20e8      	movs	r0, #232	; 0xe8
 8002b22:	f001 fbb5 	bl	8004290 <LCD_IO_WriteData8>
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200004b4 	.word	0x200004b4
 8002b30:	080077b4 	.word	0x080077b4
 8002b34:	080077c4 	.word	0x080077c4
 8002b38:	080077d4 	.word	0x080077d4
 8002b3c:	080077d8 	.word	0x080077d8
 8002b40:	080077dc 	.word	0x080077dc
 8002b44:	080077e0 	.word	0x080077e0

08002b48 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8002b4c:	2011      	movs	r0, #17
 8002b4e:	f001 fb83 	bl	8004258 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f001 fad6 	bl	8004104 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8002b60:	2010      	movs	r0, #16
 8002b62:	f001 fb79 	bl	8004258 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f001 facc 	bl	8004104 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8002b74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8002b84:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <ili9488_ReadID+0x40>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8002ba2:	f7ff ff39 	bl	8002a18 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8002ba6:	1d39      	adds	r1, r7, #4
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2203      	movs	r2, #3
 8002bac:	2004      	movs	r0, #4
 8002bae:	f001 fbf5 	bl	800439c <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <ili9488_ReadID+0x44>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <ili9488_ReadID+0x36>
    return 0x9488;
 8002bc0:	f249 4388 	movw	r3, #38024	; 0x9488
 8002bc4:	e000      	b.n	8002bc8 <ili9488_ReadID+0x38>
  return 0;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200004b4 	.word	0x200004b4
 8002bd4:	00668054 	.word	0x00668054

08002bd8 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	460a      	mov	r2, r1
 8002be2:	80fb      	strh	r3, [r7, #6]
 8002be4:	4613      	mov	r3, r2
 8002be6:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002be8:	202a      	movs	r0, #42	; 0x2a
 8002bea:	f001 fb35 	bl	8004258 <LCD_IO_WriteCmd8>
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fb4a 	bl	8004290 <LCD_IO_WriteData8>
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 fb45 	bl	8004290 <LCD_IO_WriteData8>
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fb3e 	bl	8004290 <LCD_IO_WriteData8>
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fb39 	bl	8004290 <LCD_IO_WriteData8>
 8002c1e:	202b      	movs	r0, #43	; 0x2b
 8002c20:	f001 fb1a 	bl	8004258 <LCD_IO_WriteCmd8>
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fb2f 	bl	8004290 <LCD_IO_WriteData8>
 8002c32:	88bb      	ldrh	r3, [r7, #4]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fb2a 	bl	8004290 <LCD_IO_WriteData8>
 8002c3c:	88bb      	ldrh	r3, [r7, #4]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 fb23 	bl	8004290 <LCD_IO_WriteData8>
 8002c4a:	88bb      	ldrh	r3, [r7, #4]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 fb1e 	bl	8004290 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	121b      	asrs	r3, r3, #8
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f023 0307 	bic.w	r3, r3, #7
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fb0c 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	10db      	asrs	r3, r3, #3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fb03 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 fafd 	bl	8004290 <LCD_IO_WriteData8>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	80fb      	strh	r3, [r7, #6]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	80bb      	strh	r3, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002cb0:	202a      	movs	r0, #42	; 0x2a
 8002cb2:	f001 fad1 	bl	8004258 <LCD_IO_WriteCmd8>
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f001 fae6 	bl	8004290 <LCD_IO_WriteData8>
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fae1 	bl	8004290 <LCD_IO_WriteData8>
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fada 	bl	8004290 <LCD_IO_WriteData8>
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 fad5 	bl	8004290 <LCD_IO_WriteData8>
 8002ce6:	202b      	movs	r0, #43	; 0x2b
 8002ce8:	f001 fab6 	bl	8004258 <LCD_IO_WriteCmd8>
 8002cec:	88bb      	ldrh	r3, [r7, #4]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 facb 	bl	8004290 <LCD_IO_WriteData8>
 8002cfa:	88bb      	ldrh	r3, [r7, #4]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fac6 	bl	8004290 <LCD_IO_WriteData8>
 8002d04:	88bb      	ldrh	r3, [r7, #4]
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fabf 	bl	8004290 <LCD_IO_WriteData8>
 8002d12:	88bb      	ldrh	r3, [r7, #4]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 faba 	bl	8004290 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002d1c:	202c      	movs	r0, #44	; 0x2c
 8002d1e:	f001 fa9b 	bl	8004258 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff99 	bl	8002c5c <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	80fb      	strh	r3, [r7, #6]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002d42:	202a      	movs	r0, #42	; 0x2a
 8002d44:	f001 fa88 	bl	8004258 <LCD_IO_WriteCmd8>
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 fa9d 	bl	8004290 <LCD_IO_WriteData8>
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fa98 	bl	8004290 <LCD_IO_WriteData8>
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fa91 	bl	8004290 <LCD_IO_WriteData8>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fa8c 	bl	8004290 <LCD_IO_WriteData8>
 8002d78:	202b      	movs	r0, #43	; 0x2b
 8002d7a:	f001 fa6d 	bl	8004258 <LCD_IO_WriteCmd8>
 8002d7e:	88bb      	ldrh	r3, [r7, #4]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fa82 	bl	8004290 <LCD_IO_WriteData8>
 8002d8c:	88bb      	ldrh	r3, [r7, #4]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 fa7d 	bl	8004290 <LCD_IO_WriteData8>
 8002d96:	88bb      	ldrh	r3, [r7, #4]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 fa76 	bl	8004290 <LCD_IO_WriteData8>
 8002da4:	88bb      	ldrh	r3, [r7, #4]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fa71 	bl	8004290 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8002dae:	f107 010e 	add.w	r1, r7, #14
 8002db2:	2301      	movs	r3, #1
 8002db4:	2201      	movs	r2, #1
 8002db6:	202e      	movs	r0, #46	; 0x2e
 8002db8:	f001 fb16 	bl	80043e8 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	80fb      	strh	r3, [r7, #6]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80bb      	strh	r3, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	807b      	strh	r3, [r7, #2]
 8002de2:	4613      	mov	r3, r2
 8002de4:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8002de6:	4a2a      	ldr	r2, [pc, #168]	; (8002e90 <ili9488_SetDisplayWindow+0xc8>)
 8002de8:	88bb      	ldrh	r3, [r7, #4]
 8002dea:	8013      	strh	r3, [r2, #0]
 8002dec:	88ba      	ldrh	r2, [r7, #4]
 8002dee:	883b      	ldrh	r3, [r7, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <ili9488_SetDisplayWindow+0xcc>)
 8002dfa:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8002dfc:	202a      	movs	r0, #42	; 0x2a
 8002dfe:	f001 fa2b 	bl	8004258 <LCD_IO_WriteCmd8>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 fa40 	bl	8004290 <LCD_IO_WriteData8>
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 fa3b 	bl	8004290 <LCD_IO_WriteData8>
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b01      	subs	r3, #1
 8002e22:	121b      	asrs	r3, r3, #8
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 fa32 	bl	8004290 <LCD_IO_WriteData8>
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 fa27 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8002e42:	202b      	movs	r0, #43	; 0x2b
 8002e44:	f001 fa08 	bl	8004258 <LCD_IO_WriteCmd8>
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fa1d 	bl	8004290 <LCD_IO_WriteData8>
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fa18 	bl	8004290 <LCD_IO_WriteData8>
 8002e60:	88ba      	ldrh	r2, [r7, #4]
 8002e62:	883b      	ldrh	r3, [r7, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	3b01      	subs	r3, #1
 8002e68:	121b      	asrs	r3, r3, #8
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 fa0f 	bl	8004290 <LCD_IO_WriteData8>
 8002e72:	88bb      	ldrh	r3, [r7, #4]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	883b      	ldrh	r3, [r7, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fa04 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}
 8002e90:	200004b6 	.word	0x200004b6
 8002e94:	200004b8 	.word	0x200004b8

08002e98 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	80fb      	strh	r3, [r7, #6]
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80bb      	strh	r3, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	807b      	strh	r3, [r7, #2]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 8002eb6:	883a      	ldrh	r2, [r7, #0]
 8002eb8:	8879      	ldrh	r1, [r7, #2]
 8002eba:	88b8      	ldrh	r0, [r7, #4]
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f000 f820 	bl	8002f06 <ili9488_FillRect>
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}

08002ece <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002ece:	b590      	push	{r4, r7, lr}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af02      	add	r7, sp, #8
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	4608      	mov	r0, r1
 8002ed8:	4611      	mov	r1, r2
 8002eda:	461a      	mov	r2, r3
 8002edc:	4623      	mov	r3, r4
 8002ede:	80fb      	strh	r3, [r7, #6]
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	80bb      	strh	r3, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8002eec:	883a      	ldrh	r2, [r7, #0]
 8002eee:	8879      	ldrh	r1, [r7, #2]
 8002ef0:	88b8      	ldrh	r0, [r7, #4]
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f000 f804 	bl	8002f06 <ili9488_FillRect>
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}

08002f06 <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002f06:	b590      	push	{r4, r7, lr}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	4608      	mov	r0, r1
 8002f10:	4611      	mov	r1, r2
 8002f12:	461a      	mov	r2, r3
 8002f14:	4623      	mov	r3, r4
 8002f16:	80fb      	strh	r3, [r7, #6]
 8002f18:	4603      	mov	r3, r0
 8002f1a:	80bb      	strh	r3, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002f24:	883b      	ldrh	r3, [r7, #0]
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	88b9      	ldrh	r1, [r7, #4]
 8002f2a:	88f8      	ldrh	r0, [r7, #6]
 8002f2c:	f7ff ff4c 	bl	8002dc8 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002f30:	202c      	movs	r0, #44	; 0x2c
 8002f32:	f001 f991 	bl	8004258 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	883a      	ldrh	r2, [r7, #0]
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 8002f40:	e003      	b.n	8002f4a <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 8002f42:	8c3b      	ldrh	r3, [r7, #32]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fe89 	bl	8002c5c <ili9488_write16to24>
  while(XYsize--)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e5a      	subs	r2, r3, #1
 8002f4e:	60fa      	str	r2, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f6      	bne.n	8002f42 <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}
	...

08002f60 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	603a      	str	r2, [r7, #0]
 8002f6a:	80fb      	strh	r3, [r7, #6]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3316      	adds	r3, #22
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	3317      	adds	r3, #23
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	88bb      	ldrh	r3, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	330a      	adds	r3, #10
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 8002fe4:	2036      	movs	r0, #54	; 0x36
 8002fe6:	f001 f937 	bl	8004258 <LCD_IO_WriteCmd8>
 8002fea:	20a8      	movs	r0, #168	; 0xa8
 8002fec:	f001 f950 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 8002ff0:	202b      	movs	r0, #43	; 0x2b
 8002ff2:	f001 f931 	bl	8004258 <LCD_IO_WriteCmd8>
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <ili9488_DrawBitmap+0x118>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002ffe:	3301      	adds	r3, #1
 8003000:	121b      	asrs	r3, r3, #8
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	f001 f943 	bl	8004290 <LCD_IO_WriteData8>
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <ili9488_DrawBitmap+0x118>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f001 f93a 	bl	8004290 <LCD_IO_WriteData8>
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <ili9488_DrawBitmap+0x11c>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003024:	3301      	adds	r3, #1
 8003026:	121b      	asrs	r3, r3, #8
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f930 	bl	8004290 <LCD_IO_WriteData8>
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <ili9488_DrawBitmap+0x11c>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	f001 f927 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8003042:	202c      	movs	r0, #44	; 0x2c
 8003044:	f001 f908 	bl	8004258 <LCD_IO_WriteCmd8>
  while(size--)
 8003048:	e007      	b.n	800305a <ili9488_DrawBitmap+0xfa>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fe04 	bl	8002c5c <ili9488_write16to24>
    pbmp+= 2;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3302      	adds	r3, #2
 8003058:	603b      	str	r3, [r7, #0]
  while(size--)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	60fa      	str	r2, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f2      	bne.n	800304a <ili9488_DrawBitmap+0xea>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8003064:	2036      	movs	r0, #54	; 0x36
 8003066:	f001 f8f7 	bl	8004258 <LCD_IO_WriteCmd8>
 800306a:	20e8      	movs	r0, #232	; 0xe8
 800306c:	f001 f910 	bl	8004290 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200004b8 	.word	0x200004b8
 800307c:	200004b6 	.word	0x200004b6

08003080 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	4604      	mov	r4, r0
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4623      	mov	r3, r4
 8003090:	80fb      	strh	r3, [r7, #6]
 8003092:	4603      	mov	r3, r0
 8003094:	80bb      	strh	r3, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]
 800309a:	4613      	mov	r3, r2
 800309c:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	883a      	ldrh	r2, [r7, #0]
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80030a8:	883b      	ldrh	r3, [r7, #0]
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	88b9      	ldrh	r1, [r7, #4]
 80030ae:	88f8      	ldrh	r0, [r7, #6]
 80030b0:	f7ff fe8a 	bl	8002dc8 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80030b4:	202c      	movs	r0, #44	; 0x2c
 80030b6:	f001 f8cf 	bl	8004258 <LCD_IO_WriteCmd8>
  while(size--)
 80030ba:	e007      	b.n	80030cc <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fdcb 	bl	8002c5c <ili9488_write16to24>
    pdata++;
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	3302      	adds	r3, #2
 80030ca:	623b      	str	r3, [r7, #32]
  while(size--)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e5a      	subs	r2, r3, #1
 80030d0:	60fa      	str	r2, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f2      	bne.n	80030bc <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}

080030e0 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	80fb      	strh	r3, [r7, #6]
 80030f2:	4603      	mov	r3, r0
 80030f4:	80bb      	strh	r3, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	807b      	strh	r3, [r7, #2]
 80030fa:	4613      	mov	r3, r2
 80030fc:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	883a      	ldrh	r2, [r7, #0]
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800310c:	883b      	ldrh	r3, [r7, #0]
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	88b9      	ldrh	r1, [r7, #4]
 8003112:	88f8      	ldrh	r0, [r7, #6]
 8003114:	f7ff fe58 	bl	8002dc8 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 8003118:	2301      	movs	r3, #1
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	202e      	movs	r0, #46	; 0x2e
 8003120:	f001 f962 	bl	80043e8 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bd90      	pop	{r4, r7, pc}

0800312c <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	460b      	mov	r3, r1
 8003138:	80bb      	strh	r3, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <ili9488_Scroll+0xb4>)
 8003140:	88db      	ldrh	r3, [r3, #6]
 8003142:	88ba      	ldrh	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d104      	bne.n	8003152 <ili9488_Scroll+0x26>
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <ili9488_Scroll+0xb4>)
 800314a:	885b      	ldrh	r3, [r3, #2]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	429a      	cmp	r2, r3
 8003150:	d013      	beq.n	800317a <ili9488_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8003152:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <ili9488_Scroll+0xb4>)
 8003154:	88bb      	ldrh	r3, [r7, #4]
 8003156:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8003158:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <ili9488_Scroll+0xb4>)
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 800315e:	88ba      	ldrh	r2, [r7, #4]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	4413      	add	r3, r2
 8003164:	b29b      	uxth	r3, r3
 8003166:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800316a:	b29a      	uxth	r2, r3
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <ili9488_Scroll+0xb4>)
 800316e:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8003170:	2203      	movs	r2, #3
 8003172:	491c      	ldr	r1, [pc, #112]	; (80031e4 <ili9488_Scroll+0xb8>)
 8003174:	2033      	movs	r0, #51	; 0x33
 8003176:	f001 f8ed 	bl	8004354 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 800317a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <ili9488_Scroll+0xb4>)
 8003180:	8892      	ldrh	r2, [r2, #4]
 8003182:	fb93 f1f2 	sdiv	r1, r3, r2
 8003186:	fb01 f202 	mul.w	r2, r1, r2
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 800318e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	da0a      	bge.n	80031ac <ili9488_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <ili9488_Scroll+0xb4>)
 8003198:	889a      	ldrh	r2, [r3, #4]
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4413      	add	r3, r2
 800319e:	b29a      	uxth	r2, r3
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <ili9488_Scroll+0xb4>)
 80031a2:	885b      	ldrh	r3, [r3, #2]
 80031a4:	4413      	add	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	80fb      	strh	r3, [r7, #6]
 80031aa:	e005      	b.n	80031b8 <ili9488_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <ili9488_Scroll+0xb4>)
 80031ae:	885a      	ldrh	r2, [r3, #2]
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4413      	add	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 80031b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031bc:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <ili9488_Scroll+0xb4>)
 80031be:	8812      	ldrh	r2, [r2, #0]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <ili9488_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <ili9488_Scroll+0xb4>)
 80031c8:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <ili9488_Scroll+0xb4>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	4619      	mov	r1, r3
 80031d2:	2037      	movs	r0, #55	; 0x37
 80031d4:	f001 f878 	bl	80042c8 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200004bc 	.word	0x200004bc
 80031e4:	200004be 	.word	0x200004be

080031e8 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <BSP_LCD_Init+0x3c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <BSP_LCD_Init+0x40>)
 80031fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003200:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <BSP_LCD_Init+0x40>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <BSP_LCD_Init+0x40>)
 800320a:	4a08      	ldr	r2, [pc, #32]	; (800322c <BSP_LCD_Init+0x44>)
 800320c:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 800320e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003212:	f000 f853 	bl	80032bc <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800321a:	79fb      	ldrb	r3, [r7, #7]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000088 	.word	0x20000088
 8003228:	200004c4 	.word	0x200004c4
 800322c:	20000018 	.word	0x20000018

08003230 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <BSP_LCD_GetXSize+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	4798      	blx	r3
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000088 	.word	0x20000088

08003248 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <BSP_LCD_GetYSize+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	4798      	blx	r3
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000088 	.word	0x20000088

08003260 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <BSP_LCD_SetTextColor+0x1c>)
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	200004c4 	.word	0x200004c4

08003280 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	4a03      	ldr	r2, [pc, #12]	; (800329c <BSP_LCD_SetBackColor+0x1c>)
 800328e:	6053      	str	r3, [r2, #4]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	200004c4 	.word	0x200004c4

080032a0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80032a8:	4a03      	ldr	r2, [pc, #12]	; (80032b8 <BSP_LCD_SetFont+0x18>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6093      	str	r3, [r2, #8]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	200004c4 	.word	0x200004c4

080032bc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80032bc:	b5b0      	push	{r4, r5, r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	4603      	mov	r3, r0
 80032c4:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <BSP_LCD_Clear+0x38>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80032cc:	f7ff ffb0 	bl	8003230 <BSP_LCD_GetXSize>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461d      	mov	r5, r3
 80032d4:	f7ff ffb8 	bl	8003248 <BSP_LCD_GetYSize>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	462a      	mov	r2, r5
 80032e4:	2100      	movs	r1, #0
 80032e6:	2000      	movs	r0, #0
 80032e8:	47a0      	blx	r4
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bdb0      	pop	{r4, r5, r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000088 	.word	0x20000088

080032f8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
 8003302:	460b      	mov	r3, r1
 8003304:	80bb      	strh	r3, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <BSP_LCD_DisplayChar+0x50>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003314:	490c      	ldr	r1, [pc, #48]	; (8003348 <BSP_LCD_DisplayChar+0x50>)
 8003316:	6889      	ldr	r1, [r1, #8]
 8003318:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800331a:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <BSP_LCD_DisplayChar+0x50>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	889b      	ldrh	r3, [r3, #4]
 8003324:	3307      	adds	r3, #7
 8003326:	2b00      	cmp	r3, #0
 8003328:	da00      	bge.n	800332c <BSP_LCD_DisplayChar+0x34>
 800332a:	3307      	adds	r3, #7
 800332c:	10db      	asrs	r3, r3, #3
 800332e:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003332:	441a      	add	r2, r3
 8003334:	88b9      	ldrh	r1, [r7, #4]
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f9db 	bl	80036f4 <DrawChar>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200004c4 	.word	0x200004c4

0800334c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60ba      	str	r2, [r7, #8]
 8003354:	461a      	mov	r2, r3
 8003356:	4603      	mov	r3, r0
 8003358:	81fb      	strh	r3, [r7, #14]
 800335a:	460b      	mov	r3, r1
 800335c:	81bb      	strh	r3, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003362:	2301      	movs	r3, #1
 8003364:	83fb      	strh	r3, [r7, #30]
 8003366:	2300      	movs	r3, #0
 8003368:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003376:	e002      	b.n	800337e <BSP_LCD_DisplayStringAt+0x32>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	3301      	adds	r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	617a      	str	r2, [r7, #20]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f6      	bne.n	8003378 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800338a:	f7ff ff51 	bl	8003230 <BSP_LCD_GetXSize>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	4b35      	ldr	r3, [pc, #212]	; (8003468 <BSP_LCD_DisplayStringAt+0x11c>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	889b      	ldrh	r3, [r3, #4]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	b29b      	uxth	r3, r3
 800339e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d014      	beq.n	80033d0 <BSP_LCD_DisplayStringAt+0x84>
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	dc23      	bgt.n	80033f2 <BSP_LCD_DisplayStringAt+0xa6>
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d002      	beq.n	80033b4 <BSP_LCD_DisplayStringAt+0x68>
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d011      	beq.n	80033d6 <BSP_LCD_DisplayStringAt+0x8a>
 80033b2:	e01e      	b.n	80033f2 <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <BSP_LCD_DisplayStringAt+0x11c>)
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	8892      	ldrh	r2, [r2, #4]
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	89fb      	ldrh	r3, [r7, #14]
 80033ca:	4413      	add	r3, r2
 80033cc:	83fb      	strh	r3, [r7, #30]
      break;
 80033ce:	e013      	b.n	80033f8 <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	83fb      	strh	r3, [r7, #30]
      break;
 80033d4:	e010      	b.n	80033f8 <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4a22      	ldr	r2, [pc, #136]	; (8003468 <BSP_LCD_DisplayStringAt+0x11c>)
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	8892      	ldrh	r2, [r2, #4]
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	89fb      	ldrh	r3, [r7, #14]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	83fb      	strh	r3, [r7, #30]
      break;
 80033f0:	e002      	b.n	80033f8 <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 80033f2:	89fb      	ldrh	r3, [r7, #14]
 80033f4:	83fb      	strh	r3, [r7, #30]
      break;
 80033f6:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80033f8:	e012      	b.n	8003420 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	89b9      	ldrh	r1, [r7, #12]
 8003400:	8bfb      	ldrh	r3, [r7, #30]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff78 	bl	80032f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003408:	4b17      	ldr	r3, [pc, #92]	; (8003468 <BSP_LCD_DisplayStringAt+0x11c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	889a      	ldrh	r2, [r3, #4]
 800340e:	8bfb      	ldrh	r3, [r7, #30]
 8003410:	4413      	add	r3, r2
 8003412:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3301      	adds	r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
    i++;
 800341a:	8bbb      	ldrh	r3, [r7, #28]
 800341c:	3301      	adds	r3, #1
 800341e:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2dc      	uxtb	r4, r3
 800342e:	f7ff feff 	bl	8003230 <BSP_LCD_GetXSize>
 8003432:	4603      	mov	r3, r0
 8003434:	4619      	mov	r1, r3
 8003436:	8bbb      	ldrh	r3, [r7, #28]
 8003438:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <BSP_LCD_DisplayStringAt+0x11c>)
 800343a:	6892      	ldr	r2, [r2, #8]
 800343c:	8892      	ldrh	r2, [r2, #4]
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	1acb      	subs	r3, r1, r3
 8003444:	b29b      	uxth	r3, r3
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <BSP_LCD_DisplayStringAt+0x11c>)
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	8892      	ldrh	r2, [r2, #4]
 800344c:	4293      	cmp	r3, r2
 800344e:	bfac      	ite	ge
 8003450:	2301      	movge	r3, #1
 8003452:	2300      	movlt	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4023      	ands	r3, r4
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1cd      	bne.n	80033fa <BSP_LCD_DisplayStringAt+0xae>
  }
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	3724      	adds	r7, #36	; 0x24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd90      	pop	{r4, r7, pc}
 8003468:	200004c4 	.word	0x200004c4

0800346c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
 8003476:	460b      	mov	r3, r1
 8003478:	80bb      	strh	r3, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <BSP_LCD_DrawPixel+0x34>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <BSP_LCD_DrawPixel+0x34>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	88b9      	ldrh	r1, [r7, #4]
 8003492:	88f8      	ldrh	r0, [r7, #6]
 8003494:	4798      	blx	r3
  }
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000088 	.word	0x20000088

080034a4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
 80034ae:	460b      	mov	r3, r1
 80034b0:	80bb      	strh	r3, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <BSP_LCD_DrawHLine+0x6c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <BSP_LCD_DrawHLine+0x6c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a1c      	ldr	r4, [r3, #32]
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <BSP_LCD_DrawHLine+0x70>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b298      	uxth	r0, r3
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	88ba      	ldrh	r2, [r7, #4]
 80034d4:	88f9      	ldrh	r1, [r7, #6]
 80034d6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80034d8:	e015      	b.n	8003506 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e00e      	b.n	80034fe <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	4413      	add	r3, r2
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <BSP_LCD_DrawHLine+0x70>)
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	b292      	uxth	r2, r2
 80034f0:	88b9      	ldrh	r1, [r7, #4]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ffba 	bl	800346c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3301      	adds	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	429a      	cmp	r2, r3
 8003504:	d3ec      	bcc.n	80034e0 <BSP_LCD_DrawHLine+0x3c>
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	bf00      	nop
 8003510:	20000088 	.word	0x20000088
 8003514:	200004c4 	.word	0x200004c4

08003518 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
 8003522:	460b      	mov	r3, r1
 8003524:	80bb      	strh	r3, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <BSP_LCD_DrawVLine+0x6c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <BSP_LCD_DrawVLine+0x6c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <BSP_LCD_DrawVLine+0x70>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b298      	uxth	r0, r3
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	88ba      	ldrh	r2, [r7, #4]
 8003548:	88f9      	ldrh	r1, [r7, #6]
 800354a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 800354c:	e015      	b.n	800357a <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e00e      	b.n	8003572 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	b29a      	uxth	r2, r3
 8003558:	88bb      	ldrh	r3, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	b299      	uxth	r1, r3
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <BSP_LCD_DrawVLine+0x70>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b29a      	uxth	r2, r3
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff80 	bl	800346c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	429a      	cmp	r2, r3
 8003578:	d3ec      	bcc.n	8003554 <BSP_LCD_DrawVLine+0x3c>
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bd90      	pop	{r4, r7, pc}
 8003582:	bf00      	nop
 8003584:	20000088 	.word	0x20000088
 8003588:	200004c4 	.word	0x200004c4

0800358c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4604      	mov	r4, r0
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4623      	mov	r3, r4
 800359c:	80fb      	strh	r3, [r7, #6]
 800359e:	4603      	mov	r3, r0
 80035a0:	80bb      	strh	r3, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	807b      	strh	r3, [r7, #2]
 80035a6:	4613      	mov	r3, r2
 80035a8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	88b9      	ldrh	r1, [r7, #4]
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff77 	bl	80034a4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 80035b6:	88ba      	ldrh	r2, [r7, #4]
 80035b8:	883b      	ldrh	r3, [r7, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b299      	uxth	r1, r3
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff6c 	bl	80034a4 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80035cc:	883a      	ldrh	r2, [r7, #0]
 80035ce:	88b9      	ldrh	r1, [r7, #4]
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ffa0 	bl	8003518 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	4413      	add	r3, r2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	883a      	ldrh	r2, [r7, #0]
 80035e6:	88b9      	ldrh	r1, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff95 	bl	8003518 <BSP_LCD_DrawVLine>
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd90      	pop	{r4, r7, pc}
	...

080035f8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	603a      	str	r2, [r7, #0]
 8003602:	80fb      	strh	r3, [r7, #6]
 8003604:	460b      	mov	r3, r1
 8003606:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3312      	adds	r3, #18
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	3313      	adds	r3, #19
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	441a      	add	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	3314      	adds	r3, #20
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	441a      	add	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3315      	adds	r3, #21
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	4413      	add	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	3316      	adds	r3, #22
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	3317      	adds	r3, #23
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	441a      	add	r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	3318      	adds	r3, #24
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	441a      	add	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	3319      	adds	r3, #25
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	061b      	lsls	r3, r3, #24
 800365c:	4413      	add	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	b29b      	uxth	r3, r3
 8003668:	88b9      	ldrh	r1, [r7, #4]
 800366a:	88f8      	ldrh	r0, [r7, #6]
 800366c:	f000 f934 	bl	80038d8 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <BSP_LCD_DrawBitmap+0xb0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <BSP_LCD_DrawBitmap+0xb0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	88b9      	ldrh	r1, [r7, #4]
 8003682:	88f8      	ldrh	r0, [r7, #6]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003688:	f7ff fdd2 	bl	8003230 <BSP_LCD_GetXSize>
 800368c:	4603      	mov	r3, r0
 800368e:	461c      	mov	r4, r3
 8003690:	f7ff fdda 	bl	8003248 <BSP_LCD_GetYSize>
 8003694:	4603      	mov	r3, r0
 8003696:	4622      	mov	r2, r4
 8003698:	2100      	movs	r1, #0
 800369a:	2000      	movs	r0, #0
 800369c:	f000 f91c 	bl	80038d8 <SetDisplayWindow>
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	20000088 	.word	0x20000088

080036ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80036ac:	b5b0      	push	{r4, r5, r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	4604      	mov	r4, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	461a      	mov	r2, r3
 80036ba:	4623      	mov	r3, r4
 80036bc:	80fb      	strh	r3, [r7, #6]
 80036be:	4603      	mov	r3, r0
 80036c0:	80bb      	strh	r3, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	807b      	strh	r3, [r7, #2]
 80036c6:	4613      	mov	r3, r2
 80036c8:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <BSP_LCD_FillRect+0x40>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <BSP_LCD_FillRect+0x44>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	883d      	ldrh	r5, [r7, #0]
 80036d8:	887a      	ldrh	r2, [r7, #2]
 80036da:	88b9      	ldrh	r1, [r7, #4]
 80036dc:	88f8      	ldrh	r0, [r7, #6]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	462b      	mov	r3, r5
 80036e2:	47a0      	blx	r4
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdb0      	pop	{r4, r5, r7, pc}
 80036ec:	20000088 	.word	0x20000088
 80036f0:	200004c4 	.word	0x200004c4

080036f4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	603a      	str	r2, [r7, #0]
 80036fe:	80fb      	strh	r3, [r7, #6]
 8003700:	460b      	mov	r3, r1
 8003702:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	2300      	movs	r3, #0
 800370e:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	82fb      	strh	r3, [r7, #22]
 8003714:	2300      	movs	r3, #0
 8003716:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8003724:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <DrawChar+0x1c0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	88db      	ldrh	r3, [r3, #6]
 800372a:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 800372c:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <DrawChar+0x1c0>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	889b      	ldrh	r3, [r3, #4]
 8003732:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8003734:	8afb      	ldrh	r3, [r7, #22]
 8003736:	8aba      	ldrh	r2, [r7, #20]
 8003738:	fb02 f303 	mul.w	r3, r2, r3
 800373c:	b29b      	uxth	r3, r3
 800373e:	331b      	adds	r3, #27
 8003740:	b29b      	uxth	r3, r3
 8003742:	4a5d      	ldr	r2, [pc, #372]	; (80038b8 <DrawChar+0x1c4>)
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	b29b      	uxth	r3, r3
 8003748:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 800374a:	8afb      	ldrh	r3, [r7, #22]
 800374c:	8aba      	ldrh	r2, [r7, #20]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	331b      	adds	r3, #27
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	141a      	asrs	r2, r3, #16
 8003758:	4b58      	ldr	r3, [pc, #352]	; (80038bc <DrawChar+0x1c8>)
 800375a:	b292      	uxth	r2, r2
 800375c:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 800375e:	4b58      	ldr	r3, [pc, #352]	; (80038c0 <DrawChar+0x1cc>)
 8003760:	2236      	movs	r2, #54	; 0x36
 8003762:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8003764:	4a57      	ldr	r2, [pc, #348]	; (80038c4 <DrawChar+0x1d0>)
 8003766:	8abb      	ldrh	r3, [r7, #20]
 8003768:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800376a:	8abb      	ldrh	r3, [r7, #20]
 800376c:	141a      	asrs	r2, r3, #16
 800376e:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <DrawChar+0x1d4>)
 8003770:	b292      	uxth	r2, r2
 8003772:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8003774:	4a55      	ldr	r2, [pc, #340]	; (80038cc <DrawChar+0x1d8>)
 8003776:	8afb      	ldrh	r3, [r7, #22]
 8003778:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 800377a:	8afb      	ldrh	r3, [r7, #22]
 800377c:	141a      	asrs	r2, r3, #16
 800377e:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <DrawChar+0x1dc>)
 8003780:	b292      	uxth	r2, r2
 8003782:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8003784:	8abb      	ldrh	r3, [r7, #20]
 8003786:	3307      	adds	r3, #7
 8003788:	2b00      	cmp	r3, #0
 800378a:	da00      	bge.n	800378e <DrawChar+0x9a>
 800378c:	3307      	adds	r3, #7
 800378e:	10db      	asrs	r3, r3, #3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	b2da      	uxtb	r2, r3
 8003796:	8abb      	ldrh	r3, [r7, #20]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	e078      	b.n	8003896 <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 80037a4:	8abb      	ldrh	r3, [r7, #20]
 80037a6:	3307      	adds	r3, #7
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da00      	bge.n	80037ae <DrawChar+0xba>
 80037ac:	3307      	adds	r3, #7
 80037ae:	10db      	asrs	r3, r3, #3
 80037b0:	461a      	mov	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 80037be:	8abb      	ldrh	r3, [r7, #20]
 80037c0:	3b11      	subs	r3, #17
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d80c      	bhi.n	80037e0 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	041a      	lsls	r2, r3, #16
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	4313      	orrs	r3, r2
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	3202      	adds	r2, #2
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 80037e0:	8abb      	ldrh	r3, [r7, #20]
 80037e2:	3b09      	subs	r3, #9
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d807      	bhi.n	80037f8 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	3201      	adds	r2, #1
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 80037f8:	8abb      	ldrh	r3, [r7, #20]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	2b07      	cmp	r3, #7
 80037fe:	d802      	bhi.n	8003806 <DrawChar+0x112>
    {
      line =  pchar[0];
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	e03d      	b.n	8003888 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 800380c:	8afa      	ldrh	r2, [r7, #22]
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	8aba      	ldrh	r2, [r7, #20]
 8003816:	fb03 f202 	mul.w	r2, r3, r2
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	4413      	add	r3, r2
 800381e:	331b      	adds	r3, #27
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8003824:	8aba      	ldrh	r2, [r7, #20]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	1ad2      	subs	r2, r2, r3
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	4413      	add	r3, r2
 800382e:	3b01      	subs	r3, #1
 8003830:	2201      	movs	r2, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	461a      	mov	r2, r3
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <DrawChar+0x1c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b2d9      	uxtb	r1, r3
 8003846:	4a23      	ldr	r2, [pc, #140]	; (80038d4 <DrawChar+0x1e0>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4413      	add	r3, r2
 800384c:	460a      	mov	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <DrawChar+0x1c0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0a1a      	lsrs	r2, r3, #8
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	3301      	adds	r3, #1
 800385a:	b2d1      	uxtb	r1, r2
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <DrawChar+0x1e0>)
 800385e:	54d1      	strb	r1, [r2, r3]
 8003860:	e00f      	b.n	8003882 <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <DrawChar+0x1c0>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	b2d9      	uxtb	r1, r3
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <DrawChar+0x1e0>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4413      	add	r3, r2
 800386e:	460a      	mov	r2, r1
 8003870:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <DrawChar+0x1c0>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0a1a      	lsrs	r2, r3, #8
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	3301      	adds	r3, #1
 800387c:	b2d1      	uxtb	r1, r2
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <DrawChar+0x1e0>)
 8003880:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	3301      	adds	r3, #1
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	8abb      	ldrh	r3, [r7, #20]
 800388a:	6a3a      	ldr	r2, [r7, #32]
 800388c:	429a      	cmp	r2, r3
 800388e:	d3bd      	bcc.n	800380c <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3301      	adds	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	429a      	cmp	r2, r3
 800389c:	d382      	bcc.n	80037a4 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 800389e:	88b9      	ldrh	r1, [r7, #4]
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	4a0c      	ldr	r2, [pc, #48]	; (80038d4 <DrawChar+0x1e0>)
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fea7 	bl	80035f8 <BSP_LCD_DrawBitmap>
}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200004c4 	.word	0x200004c4
 80038b8:	200004d2 	.word	0x200004d2
 80038bc:	200004d4 	.word	0x200004d4
 80038c0:	200004da 	.word	0x200004da
 80038c4:	200004e2 	.word	0x200004e2
 80038c8:	200004e4 	.word	0x200004e4
 80038cc:	200004e6 	.word	0x200004e6
 80038d0:	200004e8 	.word	0x200004e8
 80038d4:	200004d0 	.word	0x200004d0

080038d8 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4604      	mov	r4, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	80fb      	strh	r3, [r7, #6]
 80038ea:	4603      	mov	r3, r0
 80038ec:	80bb      	strh	r3, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	807b      	strh	r3, [r7, #2]
 80038f2:	4613      	mov	r3, r2
 80038f4:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <SetDisplayWindow+0x40>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <SetDisplayWindow+0x40>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69dc      	ldr	r4, [r3, #28]
 8003906:	883b      	ldrh	r3, [r7, #0]
 8003908:	887a      	ldrh	r2, [r7, #2]
 800390a:	88b9      	ldrh	r1, [r7, #4]
 800390c:	88f8      	ldrh	r0, [r7, #6]
 800390e:	47a0      	blx	r4
  }  
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	20000088 	.word	0x20000088

0800391c <__NVIC_EnableIRQ>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db0b      	blt.n	8003946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4906      	ldr	r1, [pc, #24]	; (8003950 <__NVIC_EnableIRQ+0x34>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2001      	movs	r0, #1
 800393e:	fa00 f202 	lsl.w	r2, r0, r2
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100

08003954 <__NVIC_SetPriority>:
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	6039      	str	r1, [r7, #0]
 800395e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	2b00      	cmp	r3, #0
 8003966:	db0a      	blt.n	800397e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	490c      	ldr	r1, [pc, #48]	; (80039a0 <__NVIC_SetPriority+0x4c>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	440b      	add	r3, r1
 8003978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800397c:	e00a      	b.n	8003994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4908      	ldr	r1, [pc, #32]	; (80039a4 <__NVIC_SetPriority+0x50>)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	3b04      	subs	r3, #4
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	440b      	add	r3, r1
 8003992:	761a      	strb	r2, [r3, #24]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <LcdDirRead+0x70>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039b8:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <LcdDirRead+0x70>)
 80039ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80039be:	6013      	str	r3, [r2, #0]
  while(d--)
 80039c0:	e008      	b.n	80039d4 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <LcdDirRead+0x74>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 80039c8:	2000      	movs	r0, #0
 80039ca:	f000 fb7f 	bl	80040cc <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <LcdDirRead+0x74>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
  while(d--)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1e5a      	subs	r2, r3, #1
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f1      	bne.n	80039c2 <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <LcdDirRead+0x70>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039e6:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <LcdDirRead+0x70>)
 80039e8:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80039ec:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80039ee:	e002      	b.n	80039f6 <LcdDirRead+0x4e>
    d = SPIX->DR;
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <LcdDirRead+0x78>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <LcdDirRead+0x7c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f8      	bne.n	80039f0 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <LcdDirRead+0x78>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8003a06:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <LcdDirRead+0x78>)
 8003a08:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 8003a0c:	6013      	str	r3, [r2, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40010c04 	.word	0x40010c04
 8003a1c:	422181b4 	.word	0x422181b4
 8003a20:	40003800 	.word	0x40003800
 8003a24:	42070100 	.word	0x42070100

08003a28 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a38:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003a3a:	e002      	b.n	8003a42 <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <LcdDirWrite+0x60>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f8      	bne.n	8003a3c <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f000 fb36 	bl	80040cc <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003a60:	e002      	b.n	8003a68 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <LcdDirWrite+0x60>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f8      	bne.n	8003a62 <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <LcdDirWrite+0x5c>)
 8003a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40003800 	.word	0x40003800
 8003a88:	42070100 	.word	0x42070100

08003a8c <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <LcdWrite8+0x2c>)
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	f000 fb15 	bl	80040cc <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003aa2:	bf00      	nop
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <LcdWrite8+0x30>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1fb      	bne.n	8003aa4 <LcdWrite8+0x18>
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40003800 	.word	0x40003800
 8003abc:	4207011c 	.word	0x4207011c

08003ac0 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <LcdCmdWrite8+0x34>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8003ad0:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <LcdCmdWrite8+0x38>)
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003ad6:	2002      	movs	r0, #2
 8003ad8:	f000 faf8 	bl	80040cc <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003adc:	bf00      	nop
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <LcdCmdWrite8+0x3c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1fb      	bne.n	8003ade <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8003ae6:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <LcdCmdWrite8+0x34>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	422181ac 	.word	0x422181ac
 8003af8:	40003800 	.word	0x40003800
 8003afc:	4207011c 	.word	0x4207011c

08003b00 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8003b04:	bf00      	nop
 8003b06:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <WaitForDmaEnd+0x18>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1fb      	bne.n	8003b06 <WaitForDmaEnd+0x6>
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	20000838 	.word	0x20000838

08003b1c <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <DMA1_Channel5_IRQHandler+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <DMA1_Channel5_IRQHandler+0x64>)
 8003b2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b32:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <DMA1_Channel5_IRQHandler+0x68>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8003b3a:	bf00      	nop
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <DMA1_Channel5_IRQHandler+0x68>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f9      	bne.n	8003b3c <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <DMA1_Channel5_IRQHandler+0x6c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003b4e:	bf00      	nop
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <DMA1_Channel5_IRQHandler+0x70>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1fb      	bne.n	8003b50 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8003b58:	2003      	movs	r0, #3
 8003b5a:	f000 fab7 	bl	80040cc <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <DMA1_Channel5_IRQHandler+0x74>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d102      	bne.n	8003b6c <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <DMA1_Channel5_IRQHandler+0x78>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <DMA1_Channel5_IRQHandler+0x74>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8003b72:	e003      	b.n	8003b7c <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003b74:	4b02      	ldr	r3, [pc, #8]	; (8003b80 <DMA1_Channel5_IRQHandler+0x64>)
 8003b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b7a:	605a      	str	r2, [r3, #4]
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40020000 	.word	0x40020000
 8003b84:	40020058 	.word	0x40020058
 8003b88:	42070084 	.word	0x42070084
 8003b8c:	4207011c 	.word	0x4207011c
 8003b90:	20000838 	.word	0x20000838
 8003b94:	422181b0 	.word	0x422181b0

08003b98 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <LCD_IO_WriteMultiData+0x74>)
 8003ba6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003baa:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8003bac:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <LCD_IO_WriteMultiData+0x78>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <LCD_IO_WriteMultiData+0x78>)
 8003bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb6:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8003bbe:	bf00      	nop
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f9      	bne.n	8003bc0 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8003bcc:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <LCD_IO_WriteMultiData+0x80>)
 8003bd6:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8003bd8:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8003bde:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8003be4:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <LCD_IO_WriteMultiData+0x84>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <LCD_IO_WriteMultiData+0x78>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <LCD_IO_WriteMultiData+0x78>)
 8003bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf4:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <LCD_IO_WriteMultiData+0x7c>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6013      	str	r3, [r2, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	40003800 	.word	0x40003800
 8003c14:	40020058 	.word	0x40020058
 8003c18:	4000380c 	.word	0x4000380c
 8003c1c:	42070084 	.word	0x42070084

08003c20 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <LCD_IO_WriteMultiData8+0x98>)
 8003c38:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <LCD_IO_WriteMultiData8+0x98>)
 8003c3c:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8003c3e:	f241 0312 	movw	r3, #4114	; 0x1012
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e030      	b.n	8003ca8 <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8003c46:	f241 0392 	movw	r3, #4242	; 0x1092
 8003c4a:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8003c4c:	e02c      	b.n	8003ca8 <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d80f      	bhi.n	8003c78 <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <LCD_IO_WriteMultiData8+0x9c>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff ff98 	bl	8003b98 <LCD_IO_WriteMultiData>
      Size = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01a      	beq.n	8003ca8 <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8003c72:	f7ff ff45 	bl	8003b00 <WaitForDmaEnd>
 8003c76:	e017      	b.n	8003ca8 <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <LCD_IO_WriteMultiData8+0x9c>)
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff ff87 	bl	8003b98 <LCD_IO_WriteMultiData>
      if(dinc)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003c96:	33fe      	adds	r3, #254	; 0xfe
 8003c98:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003ca0:	3bfe      	subs	r3, #254	; 0xfe
 8003ca2:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003ca4:	f7ff ff2c 	bl	8003b00 <WaitForDmaEnd>
  while(Size)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1cf      	bne.n	8003c4e <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	2000083c 	.word	0x2000083c
 8003cbc:	20000838 	.word	0x20000838

08003cc0 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <LCD_IO_WriteMultiData16+0xdc>)
 8003cd8:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <LCD_IO_WriteMultiData16+0xdc>)
 8003cdc:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8003cde:	f241 5312 	movw	r3, #5394	; 0x1512
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e051      	b.n	8003d8a <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8003ce6:	f241 5392 	movw	r3, #5522	; 0x1592
 8003cea:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8003cec:	e04d      	b.n	8003d8a <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d80f      	bhi.n	8003d18 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <LCD_IO_WriteMultiData16+0xe0>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff ff48 	bl	8003b98 <LCD_IO_WriteMultiData>
      Size = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d03b      	beq.n	8003d8a <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 8003d12:	f7ff fef5 	bl	8003b00 <WaitForDmaEnd>
 8003d16:	e038      	b.n	8003d8a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <LCD_IO_WriteMultiData16+0xe4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d81b      	bhi.n	8003d58 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003d20:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <LCD_IO_WriteMultiData16+0xe0>)
 8003d22:	2202      	movs	r2, #2
 8003d24:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003d2c:	3bfe      	subs	r3, #254	; 0xfe
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4619      	mov	r1, r3
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff ff30 	bl	8003b98 <LCD_IO_WriteMultiData>
      if(dinc)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <LCD_IO_WriteMultiData16+0xe8>)
 8003d42:	4413      	add	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8003d4c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003d50:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003d52:	f7ff fed5 	bl	8003b00 <WaitForDmaEnd>
 8003d56:	e018      	b.n	8003d8a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <LCD_IO_WriteMultiData16+0xe0>)
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff ff17 	bl	8003b98 <LCD_IO_WriteMultiData>
      if(dinc)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003d76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d7a:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003d82:	3bfe      	subs	r3, #254	; 0xfe
 8003d84:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003d86:	f7ff febb 	bl	8003b00 <WaitForDmaEnd>
  while(Size)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ae      	bne.n	8003cee <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	2000083e 	.word	0x2000083e
 8003da0:	20000838 	.word	0x20000838
 8003da4:	0001fffb 	.word	0x0001fffb
 8003da8:	7fff0002 	.word	0x7fff0002

08003dac <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <DMA1_Channel4_IRQHandler+0x98>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d03a      	beq.n	8003e34 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <DMA1_Channel4_IRQHandler+0x98>)
 8003dc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dc4:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <DMA1_Channel4_IRQHandler+0x9c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003dcc:	e002      	b.n	8003dd4 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 8003dce:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <DMA1_Channel4_IRQHandler+0xa0>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <DMA1_Channel4_IRQHandler+0xa4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f8      	bne.n	8003dce <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <DMA1_Channel4_IRQHandler+0xa8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003de8:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <DMA1_Channel4_IRQHandler+0xa8>)
 8003dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dee:	f043 0318 	orr.w	r3, r3, #24
 8003df2:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8003df4:	2001      	movs	r0, #1
 8003df6:	f000 f969 	bl	80040cc <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003dfa:	e003      	b.n	8003e04 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 8003dfc:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <DMA1_Channel4_IRQHandler+0xa8>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <DMA1_Channel4_IRQHandler+0xa4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f7      	bne.n	8003dfc <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <DMA1_Channel4_IRQHandler+0xa8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <DMA1_Channel4_IRQHandler+0xa8>)
 8003e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e16:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <DMA1_Channel4_IRQHandler+0xac>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8003e1e:	bf00      	nop
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <DMA1_Channel4_IRQHandler+0xac>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f9      	bne.n	8003e20 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <DMA1_Channel4_IRQHandler+0xb0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8003e32:	e003      	b.n	8003e3c <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <DMA1_Channel4_IRQHandler+0x98>)
 8003e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e3a:	605a      	str	r2, [r3, #4]
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40020000 	.word	0x40020000
 8003e48:	42070080 	.word	0x42070080
 8003e4c:	4000380c 	.word	0x4000380c
 8003e50:	42070100 	.word	0x42070100
 8003e54:	40003800 	.word	0x40003800
 8003e58:	40020044 	.word	0x40020044
 8003e5c:	20000838 	.word	0x20000838

08003e60 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <LCD_IO_ReadMultiData+0x5c>)
 8003e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e72:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8003e7a:	bf00      	nop
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f9      	bne.n	8003e7c <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003e90:	4a0c      	ldr	r2, [pc, #48]	; (8003ec4 <LCD_IO_ReadMultiData+0x64>)
 8003e92:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a06      	ldr	r2, [pc, #24]	; (8003ec0 <LCD_IO_ReadMultiData+0x60>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <LCD_IO_ReadMultiData+0x68>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020044 	.word	0x40020044
 8003ec4:	4000380c 	.word	0x4000380c
 8003ec8:	42070080 	.word	0x42070080

08003ecc <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8003ed6:	f241 0382 	movw	r3, #4226	; 0x1082
 8003eda:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8003edc:	e024      	b.n	8003f28 <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d913      	bls.n	8003f10 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <LCD_IO_ReadMultiData8+0x74>)
 8003eea:	2202      	movs	r2, #2
 8003eec:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ffb3 	bl	8003e60 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003f00:	3bfe      	subs	r3, #254	; 0xfe
 8003f02:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003f0a:	33fe      	adds	r3, #254	; 0xfe
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	e009      	b.n	8003f24 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <LCD_IO_ReadMultiData8+0x74>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffa0 	bl	8003e60 <LCD_IO_ReadMultiData>
      Size = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8003f24:	f7ff fdec 	bl	8003b00 <WaitForDmaEnd>
  while(Size)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d7      	bne.n	8003ede <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <LCD_IO_ReadMultiData8+0x78>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8003f34:	f7ff fd78 	bl	8003a28 <LcdDirWrite>
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000838 	.word	0x20000838
 8003f44:	422181b0 	.word	0x422181b0

08003f48 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8003f5a:	4b54      	ldr	r3, [pc, #336]	; (80040ac <LCD_IO_ReadMultiData16to24+0x164>)
 8003f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f60:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8003f62:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8003f68:	bf00      	nop
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f9      	bne.n	8003f6a <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8003f76:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f78:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <LCD_IO_ReadMultiData16to24+0x16c>)
 8003f7a:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8003f7c:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f7e:	4a4e      	ldr	r2, [pc, #312]	; (80040b8 <LCD_IO_ReadMultiData16to24+0x170>)
 8003f80:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8003f82:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f88:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8003f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f8e:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8003f90:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f92:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 8003f96:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8003f98:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a44      	ldr	r2, [pc, #272]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 8003fa4:	4b45      	ldr	r3, [pc, #276]	; (80040bc <LCD_IO_ReadMultiData16to24+0x174>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
  while(Size)
 8003faa:	e044      	b.n	8004036 <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8003fac:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d03f      	beq.n	8004036 <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8003fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc6:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	1c53      	adds	r3, r2, #1
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	6139      	str	r1, [r7, #16]
 8003fda:	4936      	ldr	r1, [pc, #216]	; (80040b4 <LCD_IO_ReadMultiData16to24+0x16c>)
 8003fdc:	5c8a      	ldrb	r2, [r1, r2]
 8003fde:	3318      	adds	r3, #24
 8003fe0:	443b      	add	r3, r7
 8003fe2:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2bff      	cmp	r3, #255	; 0xff
 8003fea:	d901      	bls.n	8003ff0 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d11f      	bne.n	8004036 <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
        Size--;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8004000:	7a3b      	ldrb	r3, [r7, #8]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	b21b      	sxth	r3, r3
 8004006:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	b21a      	sxth	r2, r3
 8004010:	7a7b      	ldrb	r3, [r7, #9]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	b21b      	sxth	r3, r3
 8004016:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800401a:	b21b      	sxth	r3, r3
 800401c:	4313      	orrs	r3, r2
 800401e:	b21a      	sxth	r2, r3
 8004020:	7abb      	ldrb	r3, [r7, #10]
 8004022:	08db      	lsrs	r3, r3, #3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	b21b      	sxth	r3, r3
 8004028:	4313      	orrs	r3, r2
 800402a:	b219      	sxth	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	1c9a      	adds	r2, r3, #2
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	b28a      	uxth	r2, r1
 8004034:	801a      	strh	r2, [r3, #0]
  while(Size)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1b7      	bne.n	8003fac <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <LCD_IO_ReadMultiData16to24+0x174>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004042:	e003      	b.n	800404c <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <LCD_IO_ReadMultiData16to24+0x178>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <LCD_IO_ReadMultiData16to24+0x17c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f7      	bne.n	8004044 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <LCD_IO_ReadMultiData16to24+0x178>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004060:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <LCD_IO_ReadMultiData16to24+0x178>)
 8004062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004066:	f043 0308 	orr.w	r3, r3, #8
 800406a:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 800406c:	2001      	movs	r0, #1
 800406e:	f000 f82d 	bl	80040cc <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004072:	e003      	b.n	800407c <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8004074:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <LCD_IO_ReadMultiData16to24+0x178>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <LCD_IO_ReadMultiData16to24+0x17c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f7      	bne.n	8004074 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800408a:	bf00      	nop
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <LCD_IO_ReadMultiData16to24+0x168>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f9      	bne.n	800408c <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <LCD_IO_ReadMultiData16to24+0x180>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 800409e:	f7ff fcc3 	bl	8003a28 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40020000 	.word	0x40020000
 80040b0:	40020044 	.word	0x40020044
 80040b4:	20000840 	.word	0x20000840
 80040b8:	4000380c 	.word	0x4000380c
 80040bc:	42070080 	.word	0x42070080
 80040c0:	40003800 	.word	0x40003800
 80040c4:	42070100 	.word	0x42070100
 80040c8:	422181b0 	.word	0x422181b0

080040cc <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  while(c--);
 80040d4:	bf00      	nop
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1fa      	bne.n	80040d6 <LCD_IO_Delay+0xa>
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f9ff 	bl	80044f8 <HAL_Delay>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <LCD_IO_Bl_OnOff+0x28>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 800411a:	e002      	b.n	8004122 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <LCD_IO_Bl_OnOff+0x28>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	42220198 	.word	0x42220198

08004130 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8004134:	4b3f      	ldr	r3, [pc, #252]	; (8004234 <LCD_IO_Init+0x104>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4a3e      	ldr	r2, [pc, #248]	; (8004234 <LCD_IO_Init+0x104>)
 800413a:	f043 0318 	orr.w	r3, r3, #24
 800413e:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 8004140:	4b3c      	ldr	r3, [pc, #240]	; (8004234 <LCD_IO_Init+0x104>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <LCD_IO_Init+0x104>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 800414c:	4b3a      	ldr	r3, [pc, #232]	; (8004238 <LCD_IO_Init+0x108>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004154:	4a38      	ldr	r2, [pc, #224]	; (8004238 <LCD_IO_Init+0x108>)
 8004156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800415a:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 800415c:	4b37      	ldr	r3, [pc, #220]	; (800423c <LCD_IO_Init+0x10c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004164:	4a35      	ldr	r2, [pc, #212]	; (800423c <LCD_IO_Init+0x10c>)
 8004166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800416a:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 800416c:	2001      	movs	r0, #1
 800416e:	f7ff ffc9 	bl	8004104 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <LCD_IO_Init+0x108>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800417a:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <LCD_IO_Init+0x108>)
 800417c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004180:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8004182:	4b2f      	ldr	r3, [pc, #188]	; (8004240 <LCD_IO_Init+0x110>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8004188:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <LCD_IO_Init+0x114>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <LCD_IO_Init+0x118>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8004194:	4b28      	ldr	r3, [pc, #160]	; (8004238 <LCD_IO_Init+0x108>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419c:	4a26      	ldr	r2, [pc, #152]	; (8004238 <LCD_IO_Init+0x108>)
 800419e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80041a2:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <LCD_IO_Init+0x108>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <LCD_IO_Init+0x108>)
 80041ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80041b2:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <LCD_IO_Init+0x11c>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 80041ba:	4b25      	ldr	r3, [pc, #148]	; (8004250 <LCD_IO_Init+0x120>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <LCD_IO_Init+0x108>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <LCD_IO_Init+0x108>)
 80041ca:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80041ce:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <LCD_IO_Init+0x108>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041d8:	4a17      	ldr	r2, [pc, #92]	; (8004238 <LCD_IO_Init+0x108>)
 80041da:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 80041de:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80041e0:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <LCD_IO_Init+0x124>)
 80041e2:	f240 324f 	movw	r2, #847	; 0x34f
 80041e6:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <LCD_IO_Init+0x124>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <LCD_IO_Init+0x124>)
 80041ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f2:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80041f4:	200a      	movs	r0, #10
 80041f6:	f7ff ff79 	bl	80040ec <LCD_Delay>
  LCD_RST_ON;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <LCD_IO_Init+0x110>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8004200:	200a      	movs	r0, #10
 8004202:	f7ff ff73 	bl	80040ec <LCD_Delay>
  LCD_RST_OFF;
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <LCD_IO_Init+0x110>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 800420c:	200a      	movs	r0, #10
 800420e:	f7ff ff6d 	bl	80040ec <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8004212:	210f      	movs	r1, #15
 8004214:	200f      	movs	r0, #15
 8004216:	f7ff fb9d 	bl	8003954 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 800421a:	200f      	movs	r0, #15
 800421c:	f7ff fb7e 	bl	800391c <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8004220:	210f      	movs	r1, #15
 8004222:	200e      	movs	r0, #14
 8004224:	f7ff fb96 	bl	8003954 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8004228:	200e      	movs	r0, #14
 800422a:	f7ff fb77 	bl	800391c <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	40010c04 	.word	0x40010c04
 800423c:	40011000 	.word	0x40011000
 8004240:	422181a8 	.word	0x422181a8
 8004244:	422181ac 	.word	0x422181ac
 8004248:	422181b0 	.word	0x422181b0
 800424c:	422181b4 	.word	0x422181b4
 8004250:	424203b8 	.word	0x424203b8
 8004254:	40003800 	.word	0x40003800

08004258 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8004262:	f7ff fc4d 	bl	8003b00 <WaitForDmaEnd>
  LcdSpiMode8();
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <LCD_IO_WriteCmd8+0x30>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <LCD_IO_WriteCmd8+0x34>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fc23 	bl	8003ac0 <LcdCmdWrite8>
  LCD_CS_OFF;
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <LCD_IO_WriteCmd8+0x34>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	4207002c 	.word	0x4207002c
 800428c:	422181b0 	.word	0x422181b0

08004290 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 800429a:	f7ff fc31 	bl	8003b00 <WaitForDmaEnd>
  LcdSpiMode8();
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <LCD_IO_WriteData8+0x30>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <LCD_IO_WriteData8+0x34>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fbed 	bl	8003a8c <LcdWrite8>
  LCD_CS_OFF;
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <LCD_IO_WriteData8+0x34>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	4207002c 	.word	0x4207002c
 80042c4:	422181b0 	.word	0x422181b0

080042c8 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	603a      	str	r2, [r7, #0]
 80042d2:	71fb      	strb	r3, [r7, #7]
 80042d4:	460b      	mov	r3, r1
 80042d6:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 80042d8:	f7ff fc12 	bl	8003b00 <WaitForDmaEnd>
  LcdSpiMode8();
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <LCD_IO_WriteCmd8DataFill16+0x44>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <LCD_IO_WriteCmd8DataFill16+0x48>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fbe8 	bl	8003ac0 <LcdCmdWrite8>
  LcdSpiMode16();
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <LCD_IO_WriteCmd8DataFill16+0x44>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80042f6:	1d3b      	adds	r3, r7, #4
 80042f8:	2200      	movs	r2, #0
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fcdf 	bl	8003cc0 <LCD_IO_WriteMultiData16>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	4207002c 	.word	0x4207002c
 8004310:	422181b0 	.word	0x422181b0

08004314 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8004322:	f7ff fbed 	bl	8003b00 <WaitForDmaEnd>
  LcdSpiMode8();
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fbc3 	bl	8003ac0 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 800433a:	2201      	movs	r2, #1
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	68b8      	ldr	r0, [r7, #8]
 8004340:	f7ff fc6e 	bl	8003c20 <LCD_IO_WriteMultiData8>
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	4207002c 	.word	0x4207002c
 8004350:	422181b0 	.word	0x422181b0

08004354 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8004362:	f7ff fbcd 	bl	8003b00 <WaitForDmaEnd>
  LcdSpiMode8();
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fba3 	bl	8003ac0 <LcdCmdWrite8>
  LcdSpiMode16();
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8004380:	2201      	movs	r2, #1
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	68b8      	ldr	r0, [r7, #8]
 8004386:	f7ff fc9b 	bl	8003cc0 <LCD_IO_WriteMultiData16>
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	4207002c 	.word	0x4207002c
 8004398:	422181b0 	.word	0x422181b0

0800439c <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80043ac:	f7ff fba8 	bl	8003b00 <WaitForDmaEnd>
  LcdSpiMode8();
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fb7e 	bl	8003ac0 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 80043ca:	6838      	ldr	r0, [r7, #0]
 80043cc:	f7ff faec 	bl	80039a8 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	68b8      	ldr	r0, [r7, #8]
 80043d4:	f7ff fd7a 	bl	8003ecc <LCD_IO_ReadMultiData8>
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	4207002c 	.word	0x4207002c
 80043e4:	422181b0 	.word	0x422181b0

080043e8 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80043f8:	f7ff fb82 	bl	8003b00 <WaitForDmaEnd>
  LcdSpiMode8();
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fb58 	bl	8003ac0 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8004416:	6838      	ldr	r0, [r7, #0]
 8004418:	f7ff fac6 	bl	80039a8 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	68b8      	ldr	r0, [r7, #8]
 8004420:	f7ff fd92 	bl	8003f48 <LCD_IO_ReadMultiData16to24>
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	4207002c 	.word	0x4207002c
 8004430:	422181b0 	.word	0x422181b0

08004434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_Init+0x28>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_Init+0x28>)
 800443e:	f043 0310 	orr.w	r3, r3, #16
 8004442:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004444:	2003      	movs	r0, #3
 8004446:	f000 fb59 	bl	8004afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800444a:	200f      	movs	r0, #15
 800444c:	f000 f808 	bl	8004460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004450:	f7fe f87e 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40022000 	.word	0x40022000

08004460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_InitTick+0x54>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_InitTick+0x58>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4619      	mov	r1, r3
 8004472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004476:	fbb3 f3f1 	udiv	r3, r3, r1
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb71 	bl	8004b66 <HAL_SYSTICK_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e00e      	b.n	80044ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b0f      	cmp	r3, #15
 8004492:	d80a      	bhi.n	80044aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004494:	2200      	movs	r2, #0
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	f000 fb39 	bl	8004b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a0:	4a06      	ldr	r2, [pc, #24]	; (80044bc <HAL_InitTick+0x5c>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000040 	.word	0x20000040
 80044b8:	20000090 	.word	0x20000090
 80044bc:	2000008c 	.word	0x2000008c

080044c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_IncTick+0x1c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_IncTick+0x20>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	4a03      	ldr	r2, [pc, #12]	; (80044e0 <HAL_IncTick+0x20>)
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	20000090 	.word	0x20000090
 80044e0:	20000940 	.word	0x20000940

080044e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return uwTick;
 80044e8:	4b02      	ldr	r3, [pc, #8]	; (80044f4 <HAL_GetTick+0x10>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	20000940 	.word	0x20000940

080044f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004500:	f7ff fff0 	bl	80044e4 <HAL_GetTick>
 8004504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d005      	beq.n	800451e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_Delay+0x44>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800451e:	bf00      	nop
 8004520:	f7ff ffe0 	bl	80044e4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	429a      	cmp	r2, r3
 800452e:	d8f7      	bhi.n	8004520 <HAL_Delay+0x28>
  {
  }
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000090 	.word	0x20000090

08004540 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0be      	b.n	80046e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fe f818 	bl	80025b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9ab 	bl	80048e0 <ADC_ConversionStop_Disable>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 8099 	bne.w	80046ce <HAL_ADC_Init+0x18e>
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 8095 	bne.w	80046ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045ac:	f023 0302 	bic.w	r3, r3, #2
 80045b0:	f043 0202 	orr.w	r2, r3, #2
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7b1b      	ldrb	r3, [r3, #12]
 80045c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d8:	d003      	beq.n	80045e2 <HAL_ADC_Init+0xa2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d102      	bne.n	80045e8 <HAL_ADC_Init+0xa8>
 80045e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045e6:	e000      	b.n	80045ea <HAL_ADC_Init+0xaa>
 80045e8:	2300      	movs	r3, #0
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7d1b      	ldrb	r3, [r3, #20]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d119      	bne.n	800462c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7b1b      	ldrb	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	3b01      	subs	r3, #1
 8004606:	035a      	lsls	r2, r3, #13
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e00b      	b.n	800462c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f043 0201 	orr.w	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <HAL_ADC_Init+0x1a8>)
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	430b      	orrs	r3, r1
 8004652:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465c:	d003      	beq.n	8004666 <HAL_ADC_Init+0x126>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d104      	bne.n	8004670 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	3b01      	subs	r3, #1
 800466c:	051b      	lsls	r3, r3, #20
 800466e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	430a      	orrs	r2, r1
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <HAL_ADC_Init+0x1ac>)
 800468c:	4013      	ands	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	d10b      	bne.n	80046ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	f043 0201 	orr.w	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046aa:	e018      	b.n	80046de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f023 0312 	bic.w	r3, r3, #18
 80046b4:	f043 0210 	orr.w	r2, r3, #16
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	f043 0201 	orr.w	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046cc:	e007      	b.n	80046de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	f043 0210 	orr.w	r2, r3, #16
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	ffe1f7fd 	.word	0xffe1f7fd
 80046ec:	ff1f0efe 	.word	0xff1f0efe

080046f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x20>
 800470c:	2302      	movs	r3, #2
 800470e:	e0dc      	b.n	80048ca <HAL_ADC_ConfigChannel+0x1da>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b06      	cmp	r3, #6
 800471e:	d81c      	bhi.n	800475a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	3b05      	subs	r3, #5
 8004732:	221f      	movs	r2, #31
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	4019      	ands	r1, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	3b05      	subs	r3, #5
 800474c:	fa00 f203 	lsl.w	r2, r0, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	635a      	str	r2, [r3, #52]	; 0x34
 8004758:	e03c      	b.n	80047d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d81c      	bhi.n	800479c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	3b23      	subs	r3, #35	; 0x23
 8004774:	221f      	movs	r2, #31
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	4019      	ands	r1, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	3b23      	subs	r3, #35	; 0x23
 800478e:	fa00 f203 	lsl.w	r2, r0, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
 800479a:	e01b      	b.n	80047d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	3b41      	subs	r3, #65	; 0x41
 80047ae:	221f      	movs	r2, #31
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	4019      	ands	r1, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	3b41      	subs	r3, #65	; 0x41
 80047c8:	fa00 f203 	lsl.w	r2, r0, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b09      	cmp	r3, #9
 80047da:	d91c      	bls.n	8004816 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4613      	mov	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4413      	add	r3, r2
 80047ec:	3b1e      	subs	r3, #30
 80047ee:	2207      	movs	r2, #7
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	4019      	ands	r1, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6898      	ldr	r0, [r3, #8]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	3b1e      	subs	r3, #30
 8004808:	fa00 f203 	lsl.w	r2, r0, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	e019      	b.n	800484a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6919      	ldr	r1, [r3, #16]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	4413      	add	r3, r2
 8004826:	2207      	movs	r2, #7
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	4019      	ands	r1, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6898      	ldr	r0, [r3, #8]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	fa00 f203 	lsl.w	r2, r0, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b10      	cmp	r3, #16
 8004850:	d003      	beq.n	800485a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004856:	2b11      	cmp	r3, #17
 8004858:	d132      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d125      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d126      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004880:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b10      	cmp	r3, #16
 8004888:	d11a      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a13      	ldr	r2, [pc, #76]	; (80048dc <HAL_ADC_ConfigChannel+0x1ec>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	0c9a      	lsrs	r2, r3, #18
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048a0:	e002      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f9      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x1b2>
 80048ae:	e007      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	40012400 	.word	0x40012400
 80048d8:	20000040 	.word	0x20000040
 80048dc:	431bde83 	.word	0x431bde83

080048e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d12e      	bne.n	8004958 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800490a:	f7ff fdeb 	bl	80044e4 <HAL_GetTick>
 800490e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004910:	e01b      	b.n	800494a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004912:	f7ff fde7 	bl	80044e4 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d914      	bls.n	800494a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10d      	bne.n	800494a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	f043 0210 	orr.w	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e007      	b.n	800495a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d0dc      	beq.n	8004912 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <__NVIC_SetPriorityGrouping>:
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004980:	4013      	ands	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800498c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	60d3      	str	r3, [r2, #12]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_GetPriorityGrouping>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <__NVIC_GetPriorityGrouping+0x18>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f003 0307 	and.w	r3, r3, #7
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_EnableIRQ>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db0b      	blt.n	80049f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	4906      	ldr	r1, [pc, #24]	; (80049fc <__NVIC_EnableIRQ+0x34>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2001      	movs	r0, #1
 80049ea:	fa00 f202 	lsl.w	r2, r0, r2
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	e000e100 	.word	0xe000e100

08004a00 <__NVIC_SetPriority>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	db0a      	blt.n	8004a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	490c      	ldr	r1, [pc, #48]	; (8004a4c <__NVIC_SetPriority+0x4c>)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	0112      	lsls	r2, r2, #4
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	440b      	add	r3, r1
 8004a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a28:	e00a      	b.n	8004a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	4908      	ldr	r1, [pc, #32]	; (8004a50 <__NVIC_SetPriority+0x50>)
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	3b04      	subs	r3, #4
 8004a38:	0112      	lsls	r2, r2, #4
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	761a      	strb	r2, [r3, #24]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000e100 	.word	0xe000e100
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <NVIC_EncodePriority>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f1c3 0307 	rsb	r3, r3, #7
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	bf28      	it	cs
 8004a72:	2304      	movcs	r3, #4
 8004a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d902      	bls.n	8004a84 <NVIC_EncodePriority+0x30>
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3b03      	subs	r3, #3
 8004a82:	e000      	b.n	8004a86 <NVIC_EncodePriority+0x32>
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43da      	mvns	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	401a      	ands	r2, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	43d9      	mvns	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aac:	4313      	orrs	r3, r2
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <SysTick_Config>:
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac8:	d301      	bcc.n	8004ace <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00f      	b.n	8004aee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <SysTick_Config+0x40>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad6:	210f      	movs	r1, #15
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	f7ff ff90 	bl	8004a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <SysTick_Config+0x40>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <SysTick_Config+0x40>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	e000e010 	.word	0xe000e010

08004afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff2d 	bl	8004964 <__NVIC_SetPriorityGrouping>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b24:	f7ff ff42 	bl	80049ac <__NVIC_GetPriorityGrouping>
 8004b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	6978      	ldr	r0, [r7, #20]
 8004b30:	f7ff ff90 	bl	8004a54 <NVIC_EncodePriority>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff ff5f 	bl	8004a00 <__NVIC_SetPriority>
}
 8004b42:	bf00      	nop
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	4603      	mov	r3, r0
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff ff35 	bl	80049c8 <__NVIC_EnableIRQ>
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ffa2 	bl	8004ab8 <SysTick_Config>
 8004b74:	4603      	mov	r3, r0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e043      	b.n	8004c1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <HAL_DMA_Init+0xa8>)
 8004b9e:	4413      	add	r3, r2
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <HAL_DMA_Init+0xac>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <HAL_DMA_Init+0xb0>)
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr
 8004c28:	bffdfff8 	.word	0xbffdfff8
 8004c2c:	cccccccd 	.word	0xcccccccd
 8004c30:	40020000 	.word	0x40020000

08004c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b08b      	sub	sp, #44	; 0x2c
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c42:	2300      	movs	r3, #0
 8004c44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c46:	e169      	b.n	8004f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c48:	2201      	movs	r2, #1
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	f040 8158 	bne.w	8004f16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4a9a      	ldr	r2, [pc, #616]	; (8004ed4 <HAL_GPIO_Init+0x2a0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d05e      	beq.n	8004d2e <HAL_GPIO_Init+0xfa>
 8004c70:	4a98      	ldr	r2, [pc, #608]	; (8004ed4 <HAL_GPIO_Init+0x2a0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d875      	bhi.n	8004d62 <HAL_GPIO_Init+0x12e>
 8004c76:	4a98      	ldr	r2, [pc, #608]	; (8004ed8 <HAL_GPIO_Init+0x2a4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d058      	beq.n	8004d2e <HAL_GPIO_Init+0xfa>
 8004c7c:	4a96      	ldr	r2, [pc, #600]	; (8004ed8 <HAL_GPIO_Init+0x2a4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d86f      	bhi.n	8004d62 <HAL_GPIO_Init+0x12e>
 8004c82:	4a96      	ldr	r2, [pc, #600]	; (8004edc <HAL_GPIO_Init+0x2a8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d052      	beq.n	8004d2e <HAL_GPIO_Init+0xfa>
 8004c88:	4a94      	ldr	r2, [pc, #592]	; (8004edc <HAL_GPIO_Init+0x2a8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d869      	bhi.n	8004d62 <HAL_GPIO_Init+0x12e>
 8004c8e:	4a94      	ldr	r2, [pc, #592]	; (8004ee0 <HAL_GPIO_Init+0x2ac>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d04c      	beq.n	8004d2e <HAL_GPIO_Init+0xfa>
 8004c94:	4a92      	ldr	r2, [pc, #584]	; (8004ee0 <HAL_GPIO_Init+0x2ac>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d863      	bhi.n	8004d62 <HAL_GPIO_Init+0x12e>
 8004c9a:	4a92      	ldr	r2, [pc, #584]	; (8004ee4 <HAL_GPIO_Init+0x2b0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d046      	beq.n	8004d2e <HAL_GPIO_Init+0xfa>
 8004ca0:	4a90      	ldr	r2, [pc, #576]	; (8004ee4 <HAL_GPIO_Init+0x2b0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d85d      	bhi.n	8004d62 <HAL_GPIO_Init+0x12e>
 8004ca6:	2b12      	cmp	r3, #18
 8004ca8:	d82a      	bhi.n	8004d00 <HAL_GPIO_Init+0xcc>
 8004caa:	2b12      	cmp	r3, #18
 8004cac:	d859      	bhi.n	8004d62 <HAL_GPIO_Init+0x12e>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <HAL_GPIO_Init+0x80>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004d2f 	.word	0x08004d2f
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004d1b 	.word	0x08004d1b
 8004cc0:	08004d5d 	.word	0x08004d5d
 8004cc4:	08004d63 	.word	0x08004d63
 8004cc8:	08004d63 	.word	0x08004d63
 8004ccc:	08004d63 	.word	0x08004d63
 8004cd0:	08004d63 	.word	0x08004d63
 8004cd4:	08004d63 	.word	0x08004d63
 8004cd8:	08004d63 	.word	0x08004d63
 8004cdc:	08004d63 	.word	0x08004d63
 8004ce0:	08004d63 	.word	0x08004d63
 8004ce4:	08004d63 	.word	0x08004d63
 8004ce8:	08004d63 	.word	0x08004d63
 8004cec:	08004d63 	.word	0x08004d63
 8004cf0:	08004d63 	.word	0x08004d63
 8004cf4:	08004d63 	.word	0x08004d63
 8004cf8:	08004d11 	.word	0x08004d11
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	4a79      	ldr	r2, [pc, #484]	; (8004ee8 <HAL_GPIO_Init+0x2b4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d06:	e02c      	b.n	8004d62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	623b      	str	r3, [r7, #32]
          break;
 8004d0e:	e029      	b.n	8004d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	3304      	adds	r3, #4
 8004d16:	623b      	str	r3, [r7, #32]
          break;
 8004d18:	e024      	b.n	8004d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	623b      	str	r3, [r7, #32]
          break;
 8004d22:	e01f      	b.n	8004d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	623b      	str	r3, [r7, #32]
          break;
 8004d2c:	e01a      	b.n	8004d64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d36:	2304      	movs	r3, #4
 8004d38:	623b      	str	r3, [r7, #32]
          break;
 8004d3a:	e013      	b.n	8004d64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d105      	bne.n	8004d50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d44:	2308      	movs	r3, #8
 8004d46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	611a      	str	r2, [r3, #16]
          break;
 8004d4e:	e009      	b.n	8004d64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d50:	2308      	movs	r3, #8
 8004d52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	615a      	str	r2, [r3, #20]
          break;
 8004d5a:	e003      	b.n	8004d64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	623b      	str	r3, [r7, #32]
          break;
 8004d60:	e000      	b.n	8004d64 <HAL_GPIO_Init+0x130>
          break;
 8004d62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2bff      	cmp	r3, #255	; 0xff
 8004d68:	d801      	bhi.n	8004d6e <HAL_GPIO_Init+0x13a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	e001      	b.n	8004d72 <HAL_GPIO_Init+0x13e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2bff      	cmp	r3, #255	; 0xff
 8004d78:	d802      	bhi.n	8004d80 <HAL_GPIO_Init+0x14c>
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	e002      	b.n	8004d86 <HAL_GPIO_Init+0x152>
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	3b08      	subs	r3, #8
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	210f      	movs	r1, #15
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	401a      	ands	r2, r3
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	431a      	orrs	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80b1 	beq.w	8004f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004db4:	4b4d      	ldr	r3, [pc, #308]	; (8004eec <HAL_GPIO_Init+0x2b8>)
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	4a4c      	ldr	r2, [pc, #304]	; (8004eec <HAL_GPIO_Init+0x2b8>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6193      	str	r3, [r2, #24]
 8004dc0:	4b4a      	ldr	r3, [pc, #296]	; (8004eec <HAL_GPIO_Init+0x2b8>)
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004dcc:	4a48      	ldr	r2, [pc, #288]	; (8004ef0 <HAL_GPIO_Init+0x2bc>)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	3302      	adds	r3, #2
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	220f      	movs	r2, #15
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4013      	ands	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a40      	ldr	r2, [pc, #256]	; (8004ef4 <HAL_GPIO_Init+0x2c0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d013      	beq.n	8004e20 <HAL_GPIO_Init+0x1ec>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3f      	ldr	r2, [pc, #252]	; (8004ef8 <HAL_GPIO_Init+0x2c4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00d      	beq.n	8004e1c <HAL_GPIO_Init+0x1e8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3e      	ldr	r2, [pc, #248]	; (8004efc <HAL_GPIO_Init+0x2c8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <HAL_GPIO_Init+0x1e4>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3d      	ldr	r2, [pc, #244]	; (8004f00 <HAL_GPIO_Init+0x2cc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_GPIO_Init+0x1e0>
 8004e10:	2303      	movs	r3, #3
 8004e12:	e006      	b.n	8004e22 <HAL_GPIO_Init+0x1ee>
 8004e14:	2304      	movs	r3, #4
 8004e16:	e004      	b.n	8004e22 <HAL_GPIO_Init+0x1ee>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e002      	b.n	8004e22 <HAL_GPIO_Init+0x1ee>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_GPIO_Init+0x1ee>
 8004e20:	2300      	movs	r3, #0
 8004e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e24:	f002 0203 	and.w	r2, r2, #3
 8004e28:	0092      	lsls	r2, r2, #2
 8004e2a:	4093      	lsls	r3, r2
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e32:	492f      	ldr	r1, [pc, #188]	; (8004ef0 <HAL_GPIO_Init+0x2bc>)
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	3302      	adds	r3, #2
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d006      	beq.n	8004e5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e4c:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	492c      	ldr	r1, [pc, #176]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	e006      	b.n	8004e68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004e5a:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	4928      	ldr	r1, [pc, #160]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004e74:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	4922      	ldr	r1, [pc, #136]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	604b      	str	r3, [r1, #4]
 8004e80:	e006      	b.n	8004e90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e82:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	491e      	ldr	r1, [pc, #120]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d006      	beq.n	8004eaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e9c:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	4918      	ldr	r1, [pc, #96]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]
 8004ea8:	e006      	b.n	8004eb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004eaa:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	4914      	ldr	r1, [pc, #80]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d021      	beq.n	8004f08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	490e      	ldr	r1, [pc, #56]	; (8004f04 <HAL_GPIO_Init+0x2d0>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60cb      	str	r3, [r1, #12]
 8004ed0:	e021      	b.n	8004f16 <HAL_GPIO_Init+0x2e2>
 8004ed2:	bf00      	nop
 8004ed4:	10320000 	.word	0x10320000
 8004ed8:	10310000 	.word	0x10310000
 8004edc:	10220000 	.word	0x10220000
 8004ee0:	10210000 	.word	0x10210000
 8004ee4:	10120000 	.word	0x10120000
 8004ee8:	10110000 	.word	0x10110000
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40010800 	.word	0x40010800
 8004ef8:	40010c00 	.word	0x40010c00
 8004efc:	40011000 	.word	0x40011000
 8004f00:	40011400 	.word	0x40011400
 8004f04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	4909      	ldr	r1, [pc, #36]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	3301      	adds	r3, #1
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f47f ae8e 	bne.w	8004c48 <HAL_GPIO_Init+0x14>
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	372c      	adds	r7, #44	; 0x2c
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	40010400 	.word	0x40010400

08004f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e001      	b.n	8004f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	807b      	strh	r3, [r7, #2]
 8004f76:	4613      	mov	r3, r2
 8004f78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f7a:	787b      	ldrb	r3, [r7, #1]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f80:	887a      	ldrh	r2, [r7, #2]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f86:	e003      	b.n	8004f90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f88:	887b      	ldrh	r3, [r7, #2]
 8004f8a:	041a      	lsls	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	611a      	str	r2, [r3, #16]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr
	...

08004f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fb2:	4a05      	ldr	r2, [pc, #20]	; (8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fc ffde 	bl	8001f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40010400 	.word	0x40010400

08004fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e12b      	b.n	8005236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fb1a 	bl	800262c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	; 0x24
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800502e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005030:	f000 fce4 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8005034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4a81      	ldr	r2, [pc, #516]	; (8005240 <HAL_I2C_Init+0x274>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d807      	bhi.n	8005050 <HAL_I2C_Init+0x84>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a80      	ldr	r2, [pc, #512]	; (8005244 <HAL_I2C_Init+0x278>)
 8005044:	4293      	cmp	r3, r2
 8005046:	bf94      	ite	ls
 8005048:	2301      	movls	r3, #1
 800504a:	2300      	movhi	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	e006      	b.n	800505e <HAL_I2C_Init+0x92>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a7d      	ldr	r2, [pc, #500]	; (8005248 <HAL_I2C_Init+0x27c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	bf94      	ite	ls
 8005058:	2301      	movls	r3, #1
 800505a:	2300      	movhi	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0e7      	b.n	8005236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a78      	ldr	r2, [pc, #480]	; (800524c <HAL_I2C_Init+0x280>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0c9b      	lsrs	r3, r3, #18
 8005070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a6a      	ldr	r2, [pc, #424]	; (8005240 <HAL_I2C_Init+0x274>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d802      	bhi.n	80050a0 <HAL_I2C_Init+0xd4>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	3301      	adds	r3, #1
 800509e:	e009      	b.n	80050b4 <HAL_I2C_Init+0xe8>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	4a69      	ldr	r2, [pc, #420]	; (8005250 <HAL_I2C_Init+0x284>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	099b      	lsrs	r3, r3, #6
 80050b2:	3301      	adds	r3, #1
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	495c      	ldr	r1, [pc, #368]	; (8005240 <HAL_I2C_Init+0x274>)
 80050d0:	428b      	cmp	r3, r1
 80050d2:	d819      	bhi.n	8005108 <HAL_I2C_Init+0x13c>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1e59      	subs	r1, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e2:	1c59      	adds	r1, r3, #1
 80050e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050e8:	400b      	ands	r3, r1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_I2C_Init+0x138>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1e59      	subs	r1, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80050fc:	3301      	adds	r3, #1
 80050fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005102:	e051      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005104:	2304      	movs	r3, #4
 8005106:	e04f      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d111      	bne.n	8005134 <HAL_I2C_Init+0x168>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1e58      	subs	r0, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	440b      	add	r3, r1
 800511e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005122:	3301      	adds	r3, #1
 8005124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e012      	b.n	800515a <HAL_I2C_Init+0x18e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1e58      	subs	r0, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	0099      	lsls	r1, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	fbb0 f3f3 	udiv	r3, r0, r3
 800514a:	3301      	adds	r3, #1
 800514c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Init+0x196>
 800515e:	2301      	movs	r3, #1
 8005160:	e022      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10e      	bne.n	8005188 <HAL_I2C_Init+0x1bc>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1e58      	subs	r0, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	440b      	add	r3, r1
 8005178:	fbb0 f3f3 	udiv	r3, r0, r3
 800517c:	3301      	adds	r3, #1
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005186:	e00f      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1e58      	subs	r0, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	0099      	lsls	r1, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	fbb0 f3f3 	udiv	r3, r0, r3
 800519e:	3301      	adds	r3, #1
 80051a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	6809      	ldr	r1, [r1, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6911      	ldr	r1, [r2, #16]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68d2      	ldr	r2, [r2, #12]
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	000186a0 	.word	0x000186a0
 8005244:	001e847f 	.word	0x001e847f
 8005248:	003d08ff 	.word	0x003d08ff
 800524c:	431bde83 	.word	0x431bde83
 8005250:	10624dd3 	.word	0x10624dd3

08005254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e272      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8087 	beq.w	8005382 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005274:	4b92      	ldr	r3, [pc, #584]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b04      	cmp	r3, #4
 800527e:	d00c      	beq.n	800529a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005280:	4b8f      	ldr	r3, [pc, #572]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 030c 	and.w	r3, r3, #12
 8005288:	2b08      	cmp	r3, #8
 800528a:	d112      	bne.n	80052b2 <HAL_RCC_OscConfig+0x5e>
 800528c:	4b8c      	ldr	r3, [pc, #560]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005298:	d10b      	bne.n	80052b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529a:	4b89      	ldr	r3, [pc, #548]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d06c      	beq.n	8005380 <HAL_RCC_OscConfig+0x12c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d168      	bne.n	8005380 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e24c      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ba:	d106      	bne.n	80052ca <HAL_RCC_OscConfig+0x76>
 80052bc:	4b80      	ldr	r3, [pc, #512]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a7f      	ldr	r2, [pc, #508]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e02e      	b.n	8005328 <HAL_RCC_OscConfig+0xd4>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x98>
 80052d2:	4b7b      	ldr	r3, [pc, #492]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7a      	ldr	r2, [pc, #488]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b78      	ldr	r3, [pc, #480]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a77      	ldr	r2, [pc, #476]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e01d      	b.n	8005328 <HAL_RCC_OscConfig+0xd4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0xbc>
 80052f6:	4b72      	ldr	r3, [pc, #456]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a71      	ldr	r2, [pc, #452]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b6f      	ldr	r3, [pc, #444]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6e      	ldr	r2, [pc, #440]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e00b      	b.n	8005328 <HAL_RCC_OscConfig+0xd4>
 8005310:	4b6b      	ldr	r3, [pc, #428]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b68      	ldr	r3, [pc, #416]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a67      	ldr	r2, [pc, #412]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005326:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005330:	f7ff f8d8 	bl	80044e4 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005338:	f7ff f8d4 	bl	80044e4 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e200      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	4b5d      	ldr	r3, [pc, #372]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0xe4>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7ff f8c4 	bl	80044e4 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005360:	f7ff f8c0 	bl	80044e4 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e1ec      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005372:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x10c>
 800537e:	e000      	b.n	8005382 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d063      	beq.n	8005456 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800538e:	4b4c      	ldr	r3, [pc, #304]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800539a:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d11c      	bne.n	80053e0 <HAL_RCC_OscConfig+0x18c>
 80053a6:	4b46      	ldr	r3, [pc, #280]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d116      	bne.n	80053e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b2:	4b43      	ldr	r3, [pc, #268]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_RCC_OscConfig+0x176>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d001      	beq.n	80053ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e1c0      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ca:	4b3d      	ldr	r3, [pc, #244]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4939      	ldr	r1, [pc, #228]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053de:	e03a      	b.n	8005456 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d020      	beq.n	800542a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e8:	4b36      	ldr	r3, [pc, #216]	; (80054c4 <HAL_RCC_OscConfig+0x270>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7ff f879 	bl	80044e4 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f6:	f7ff f875 	bl	80044e4 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1a1      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005408:	4b2d      	ldr	r3, [pc, #180]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005414:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4927      	ldr	r1, [pc, #156]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
 8005428:	e015      	b.n	8005456 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <HAL_RCC_OscConfig+0x270>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7ff f858 	bl	80044e4 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005438:	f7ff f854 	bl	80044e4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e180      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d03a      	beq.n	80054d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d019      	beq.n	800549e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546a:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005470:	f7ff f838 	bl	80044e4 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005478:	f7ff f834 	bl	80044e4 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e160      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <HAL_RCC_OscConfig+0x26c>)
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005496:	2001      	movs	r0, #1
 8005498:	f000 fac4 	bl	8005a24 <RCC_Delay>
 800549c:	e01c      	b.n	80054d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a4:	f7ff f81e 	bl	80044e4 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054aa:	e00f      	b.n	80054cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ac:	f7ff f81a 	bl	80044e4 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d908      	bls.n	80054cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e146      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	42420000 	.word	0x42420000
 80054c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054cc:	4b92      	ldr	r3, [pc, #584]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e9      	bne.n	80054ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a6 	beq.w	8005632 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ea:	4b8b      	ldr	r3, [pc, #556]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10d      	bne.n	8005512 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f6:	4b88      	ldr	r3, [pc, #544]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4a87      	ldr	r2, [pc, #540]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80054fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005500:	61d3      	str	r3, [r2, #28]
 8005502:	4b85      	ldr	r3, [pc, #532]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005512:	4b82      	ldr	r3, [pc, #520]	; (800571c <HAL_RCC_OscConfig+0x4c8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d118      	bne.n	8005550 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551e:	4b7f      	ldr	r3, [pc, #508]	; (800571c <HAL_RCC_OscConfig+0x4c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a7e      	ldr	r2, [pc, #504]	; (800571c <HAL_RCC_OscConfig+0x4c8>)
 8005524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552a:	f7fe ffdb 	bl	80044e4 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005532:	f7fe ffd7 	bl	80044e4 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b64      	cmp	r3, #100	; 0x64
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e103      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005544:	4b75      	ldr	r3, [pc, #468]	; (800571c <HAL_RCC_OscConfig+0x4c8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d106      	bne.n	8005566 <HAL_RCC_OscConfig+0x312>
 8005558:	4b6f      	ldr	r3, [pc, #444]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	4a6e      	ldr	r2, [pc, #440]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	6213      	str	r3, [r2, #32]
 8005564:	e02d      	b.n	80055c2 <HAL_RCC_OscConfig+0x36e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10c      	bne.n	8005588 <HAL_RCC_OscConfig+0x334>
 800556e:	4b6a      	ldr	r3, [pc, #424]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4a69      	ldr	r2, [pc, #420]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	6213      	str	r3, [r2, #32]
 800557a:	4b67      	ldr	r3, [pc, #412]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	4a66      	ldr	r2, [pc, #408]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005580:	f023 0304 	bic.w	r3, r3, #4
 8005584:	6213      	str	r3, [r2, #32]
 8005586:	e01c      	b.n	80055c2 <HAL_RCC_OscConfig+0x36e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b05      	cmp	r3, #5
 800558e:	d10c      	bne.n	80055aa <HAL_RCC_OscConfig+0x356>
 8005590:	4b61      	ldr	r3, [pc, #388]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	4a60      	ldr	r2, [pc, #384]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005596:	f043 0304 	orr.w	r3, r3, #4
 800559a:	6213      	str	r3, [r2, #32]
 800559c:	4b5e      	ldr	r3, [pc, #376]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	4a5d      	ldr	r2, [pc, #372]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6213      	str	r3, [r2, #32]
 80055a8:	e00b      	b.n	80055c2 <HAL_RCC_OscConfig+0x36e>
 80055aa:	4b5b      	ldr	r3, [pc, #364]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	4a5a      	ldr	r2, [pc, #360]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	6213      	str	r3, [r2, #32]
 80055b6:	4b58      	ldr	r3, [pc, #352]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	4a57      	ldr	r2, [pc, #348]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80055bc:	f023 0304 	bic.w	r3, r3, #4
 80055c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d015      	beq.n	80055f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ca:	f7fe ff8b 	bl	80044e4 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fe ff87 	bl	80044e4 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e0b1      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	4b4b      	ldr	r3, [pc, #300]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0ee      	beq.n	80055d2 <HAL_RCC_OscConfig+0x37e>
 80055f4:	e014      	b.n	8005620 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f6:	f7fe ff75 	bl	80044e4 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055fc:	e00a      	b.n	8005614 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fe:	f7fe ff71 	bl	80044e4 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	4293      	cmp	r3, r2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e09b      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005614:	4b40      	ldr	r3, [pc, #256]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1ee      	bne.n	80055fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d105      	bne.n	8005632 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005626:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 800562c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005630:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8087 	beq.w	800574a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800563c:	4b36      	ldr	r3, [pc, #216]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	2b08      	cmp	r3, #8
 8005646:	d061      	beq.n	800570c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d146      	bne.n	80056de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005650:	4b33      	ldr	r3, [pc, #204]	; (8005720 <HAL_RCC_OscConfig+0x4cc>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fe ff45 	bl	80044e4 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565e:	f7fe ff41 	bl	80044e4 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e06d      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005670:	4b29      	ldr	r3, [pc, #164]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d108      	bne.n	8005698 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005686:	4b24      	ldr	r3, [pc, #144]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	4921      	ldr	r1, [pc, #132]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005698:	4b1f      	ldr	r3, [pc, #124]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a19      	ldr	r1, [r3, #32]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	430b      	orrs	r3, r1
 80056aa:	491b      	ldr	r1, [pc, #108]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_RCC_OscConfig+0x4cc>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b6:	f7fe ff15 	bl	80044e4 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056be:	f7fe ff11 	bl	80044e4 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e03d      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056d0:	4b11      	ldr	r3, [pc, #68]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x46a>
 80056dc:	e035      	b.n	800574a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <HAL_RCC_OscConfig+0x4cc>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fe fefe 	bl	80044e4 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ec:	f7fe fefa 	bl	80044e4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e026      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_RCC_OscConfig+0x4c4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x498>
 800570a:	e01e      	b.n	800574a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d107      	bne.n	8005724 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e019      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
 8005718:	40021000 	.word	0x40021000
 800571c:	40007000 	.word	0x40007000
 8005720:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_OscConfig+0x500>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	429a      	cmp	r2, r3
 8005736:	d106      	bne.n	8005746 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000

08005758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0d0      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800576c:	4b6a      	ldr	r3, [pc, #424]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d910      	bls.n	800579c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b67      	ldr	r3, [pc, #412]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 0207 	bic.w	r2, r3, #7
 8005782:	4965      	ldr	r1, [pc, #404]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a52      	ldr	r2, [pc, #328]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d040      	beq.n	8005878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d115      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e073      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005826:	4b3d      	ldr	r3, [pc, #244]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06b      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f023 0203 	bic.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4936      	ldr	r1, [pc, #216]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005848:	f7fe fe4c 	bl	80044e4 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584e:	e00a      	b.n	8005866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005850:	f7fe fe48 	bl	80044e4 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e053      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	4b2d      	ldr	r3, [pc, #180]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 020c 	and.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	429a      	cmp	r2, r3
 8005876:	d1eb      	bne.n	8005850 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d210      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 0207 	bic.w	r2, r3, #7
 800588e:	4922      	ldr	r1, [pc, #136]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	490a      	ldr	r1, [pc, #40]	; (8005920 <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1cc>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_RCC_ClockConfig+0x1d0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fdaa 	bl	8004460 <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40022000 	.word	0x40022000
 800591c:	40021000 	.word	0x40021000
 8005920:	0800e0b0 	.word	0x0800e0b0
 8005924:	20000040 	.word	0x20000040
 8005928:	2000008c 	.word	0x2000008c

0800592c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	b490      	push	{r4, r7}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005932:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005934:	1d3c      	adds	r4, r7, #4
 8005936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800593c:	f240 2301 	movw	r3, #513	; 0x201
 8005940:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005956:	4b21      	ldr	r3, [pc, #132]	; (80059dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b04      	cmp	r3, #4
 8005964:	d002      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005966:	2b08      	cmp	r3, #8
 8005968:	d003      	beq.n	8005972 <HAL_RCC_GetSysClockFreq+0x46>
 800596a:	e02b      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800596c:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800596e:	623b      	str	r3, [r7, #32]
      break;
 8005970:	e02b      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	0c9b      	lsrs	r3, r3, #18
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	3328      	adds	r3, #40	; 0x28
 800597c:	443b      	add	r3, r7
 800597e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005982:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800598e:	4b13      	ldr	r3, [pc, #76]	; (80059dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	0c5b      	lsrs	r3, r3, #17
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	3328      	adds	r3, #40	; 0x28
 800599a:	443b      	add	r3, r7
 800599c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4a0e      	ldr	r2, [pc, #56]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80059a6:	fb03 f202 	mul.w	r2, r3, r2
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	e004      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4a0b      	ldr	r2, [pc, #44]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b8:	fb02 f303 	mul.w	r3, r2, r3
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	623b      	str	r3, [r7, #32]
      break;
 80059c2:	e002      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80059c6:	623b      	str	r3, [r7, #32]
      break;
 80059c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ca:	6a3b      	ldr	r3, [r7, #32]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3728      	adds	r7, #40	; 0x28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc90      	pop	{r4, r7}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	080077e8 	.word	0x080077e8
 80059dc:	40021000 	.word	0x40021000
 80059e0:	007a1200 	.word	0x007a1200
 80059e4:	003d0900 	.word	0x003d0900

080059e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059ec:	4b02      	ldr	r3, [pc, #8]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80059ee:	681b      	ldr	r3, [r3, #0]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr
 80059f8:	20000040 	.word	0x20000040

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a00:	f7ff fff2 	bl	80059e8 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	0800e0c0 	.word	0x0800e0c0

08005a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <RCC_Delay+0x34>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <RCC_Delay+0x38>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	0a5b      	lsrs	r3, r3, #9
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a40:	bf00      	nop
  }
  while (Delay --);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1e5a      	subs	r2, r3, #1
 8005a46:	60fa      	str	r2, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f9      	bne.n	8005a40 <RCC_Delay+0x1c>
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr
 8005a58:	20000040 	.word	0x20000040
 8005a5c:	10624dd3 	.word	0x10624dd3

08005a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d07d      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a80:	4b4f      	ldr	r3, [pc, #316]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10d      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8c:	4b4c      	ldr	r3, [pc, #304]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	4a4b      	ldr	r2, [pc, #300]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a96:	61d3      	str	r3, [r2, #28]
 8005a98:	4b49      	ldr	r3, [pc, #292]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa8:	4b46      	ldr	r3, [pc, #280]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d118      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab4:	4b43      	ldr	r3, [pc, #268]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a42      	ldr	r2, [pc, #264]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac0:	f7fe fd10 	bl	80044e4 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac6:	e008      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac8:	f7fe fd0c 	bl	80044e4 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b64      	cmp	r3, #100	; 0x64
 8005ad4:	d901      	bls.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e06d      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ada:	4b3a      	ldr	r3, [pc, #232]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ae6:	4b36      	ldr	r3, [pc, #216]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d02e      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d027      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b04:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b0e:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b1a:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d014      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2a:	f7fe fcdb 	bl	80044e4 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b30:	e00a      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b32:	f7fe fcd7 	bl	80044e4 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e036      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b48:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0ee      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b54:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4917      	ldr	r1, [pc, #92]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6c:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	490b      	ldr	r1, [pc, #44]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ba2:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4904      	ldr	r1, [pc, #16]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	42420440 	.word	0x42420440

08005bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e076      	b.n	8005ccc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d108      	bne.n	8005bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bee:	d009      	beq.n	8005c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	61da      	str	r2, [r3, #28]
 8005bf6:	e005      	b.n	8005c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fc fd42 	bl	80026a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c88:	ea42 0103 	orr.w	r1, r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	0c1a      	lsrs	r2, r3, #16
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f002 0204 	and.w	r2, r2, #4
 8005caa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e041      	b.n	8005d6c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fc fd73 	bl	80027e8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f000 f82d 	bl	8005d74 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0208 	bic.w	r2, r2, #8
 8005d28:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a29      	ldr	r2, [pc, #164]	; (8005e2c <TIM_Base_SetConfig+0xb8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x30>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x30>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a26      	ldr	r2, [pc, #152]	; (8005e30 <TIM_Base_SetConfig+0xbc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x30>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <TIM_Base_SetConfig+0xc0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <TIM_Base_SetConfig+0xb8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_Base_SetConfig+0x62>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d007      	beq.n	8005dd6 <TIM_Base_SetConfig+0x62>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <TIM_Base_SetConfig+0xbc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_Base_SetConfig+0x62>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <TIM_Base_SetConfig+0xc0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a07      	ldr	r2, [pc, #28]	; (8005e2c <TIM_Base_SetConfig+0xb8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d103      	bne.n	8005e1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	615a      	str	r2, [r3, #20]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40000800 	.word	0x40000800

08005e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e046      	b.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a10      	ldr	r2, [pc, #64]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d10c      	bne.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800

08005ef4 <__assert_func>:
 8005ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <__assert_func+0x2c>)
 8005efc:	4605      	mov	r5, r0
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68d8      	ldr	r0, [r3, #12]
 8005f02:	b14c      	cbz	r4, 8005f18 <__assert_func+0x24>
 8005f04:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <__assert_func+0x30>)
 8005f06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f0a:	9100      	str	r1, [sp, #0]
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	4906      	ldr	r1, [pc, #24]	; (8005f28 <__assert_func+0x34>)
 8005f10:	f000 f814 	bl	8005f3c <fiprintf>
 8005f14:	f000 fda0 	bl	8006a58 <abort>
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <__assert_func+0x38>)
 8005f1a:	461c      	mov	r4, r3
 8005f1c:	e7f3      	b.n	8005f06 <__assert_func+0x12>
 8005f1e:	bf00      	nop
 8005f20:	20000094 	.word	0x20000094
 8005f24:	0800e0c8 	.word	0x0800e0c8
 8005f28:	0800e0d5 	.word	0x0800e0d5
 8005f2c:	0800e103 	.word	0x0800e103

08005f30 <__errno>:
 8005f30:	4b01      	ldr	r3, [pc, #4]	; (8005f38 <__errno+0x8>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000094 	.word	0x20000094

08005f3c <fiprintf>:
 8005f3c:	b40e      	push	{r1, r2, r3}
 8005f3e:	b503      	push	{r0, r1, lr}
 8005f40:	4601      	mov	r1, r0
 8005f42:	ab03      	add	r3, sp, #12
 8005f44:	4805      	ldr	r0, [pc, #20]	; (8005f5c <fiprintf+0x20>)
 8005f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	f000 f93f 	bl	80061d0 <_vfiprintf_r>
 8005f52:	b002      	add	sp, #8
 8005f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f58:	b003      	add	sp, #12
 8005f5a:	4770      	bx	lr
 8005f5c:	20000094 	.word	0x20000094

08005f60 <__libc_init_array>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	2600      	movs	r6, #0
 8005f64:	4d0c      	ldr	r5, [pc, #48]	; (8005f98 <__libc_init_array+0x38>)
 8005f66:	4c0d      	ldr	r4, [pc, #52]	; (8005f9c <__libc_init_array+0x3c>)
 8005f68:	1b64      	subs	r4, r4, r5
 8005f6a:	10a4      	asrs	r4, r4, #2
 8005f6c:	42a6      	cmp	r6, r4
 8005f6e:	d109      	bne.n	8005f84 <__libc_init_array+0x24>
 8005f70:	f001 fa5a 	bl	8007428 <_init>
 8005f74:	2600      	movs	r6, #0
 8005f76:	4d0a      	ldr	r5, [pc, #40]	; (8005fa0 <__libc_init_array+0x40>)
 8005f78:	4c0a      	ldr	r4, [pc, #40]	; (8005fa4 <__libc_init_array+0x44>)
 8005f7a:	1b64      	subs	r4, r4, r5
 8005f7c:	10a4      	asrs	r4, r4, #2
 8005f7e:	42a6      	cmp	r6, r4
 8005f80:	d105      	bne.n	8005f8e <__libc_init_array+0x2e>
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f88:	4798      	blx	r3
 8005f8a:	3601      	adds	r6, #1
 8005f8c:	e7ee      	b.n	8005f6c <__libc_init_array+0xc>
 8005f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f92:	4798      	blx	r3
 8005f94:	3601      	adds	r6, #1
 8005f96:	e7f2      	b.n	8005f7e <__libc_init_array+0x1e>
 8005f98:	0800e19c 	.word	0x0800e19c
 8005f9c:	0800e19c 	.word	0x0800e19c
 8005fa0:	0800e19c 	.word	0x0800e19c
 8005fa4:	0800e1a0 	.word	0x0800e1a0

08005fa8 <malloc>:
 8005fa8:	4b02      	ldr	r3, [pc, #8]	; (8005fb4 <malloc+0xc>)
 8005faa:	4601      	mov	r1, r0
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	f000 b873 	b.w	8006098 <_malloc_r>
 8005fb2:	bf00      	nop
 8005fb4:	20000094 	.word	0x20000094

08005fb8 <memset>:
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4402      	add	r2, r0
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d100      	bne.n	8005fc2 <memset+0xa>
 8005fc0:	4770      	bx	lr
 8005fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc6:	e7f9      	b.n	8005fbc <memset+0x4>

08005fc8 <_free_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4605      	mov	r5, r0
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d040      	beq.n	8006052 <_free_r+0x8a>
 8005fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd4:	1f0c      	subs	r4, r1, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfb8      	it	lt
 8005fda:	18e4      	addlt	r4, r4, r3
 8005fdc:	f000 ff96 	bl	8006f0c <__malloc_lock>
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <_free_r+0x8c>)
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	b933      	cbnz	r3, 8005ff4 <_free_r+0x2c>
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	6014      	str	r4, [r2, #0]
 8005fea:	4628      	mov	r0, r5
 8005fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ff0:	f000 bf92 	b.w	8006f18 <__malloc_unlock>
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	d908      	bls.n	800600a <_free_r+0x42>
 8005ff8:	6820      	ldr	r0, [r4, #0]
 8005ffa:	1821      	adds	r1, r4, r0
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	bf01      	itttt	eq
 8006000:	6819      	ldreq	r1, [r3, #0]
 8006002:	685b      	ldreq	r3, [r3, #4]
 8006004:	1809      	addeq	r1, r1, r0
 8006006:	6021      	streq	r1, [r4, #0]
 8006008:	e7ed      	b.n	8005fe6 <_free_r+0x1e>
 800600a:	461a      	mov	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b10b      	cbz	r3, 8006014 <_free_r+0x4c>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d9fa      	bls.n	800600a <_free_r+0x42>
 8006014:	6811      	ldr	r1, [r2, #0]
 8006016:	1850      	adds	r0, r2, r1
 8006018:	42a0      	cmp	r0, r4
 800601a:	d10b      	bne.n	8006034 <_free_r+0x6c>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	4401      	add	r1, r0
 8006020:	1850      	adds	r0, r2, r1
 8006022:	4283      	cmp	r3, r0
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	d1e0      	bne.n	8005fea <_free_r+0x22>
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4401      	add	r1, r0
 800602e:	6011      	str	r1, [r2, #0]
 8006030:	6053      	str	r3, [r2, #4]
 8006032:	e7da      	b.n	8005fea <_free_r+0x22>
 8006034:	d902      	bls.n	800603c <_free_r+0x74>
 8006036:	230c      	movs	r3, #12
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	e7d6      	b.n	8005fea <_free_r+0x22>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	1821      	adds	r1, r4, r0
 8006040:	428b      	cmp	r3, r1
 8006042:	bf01      	itttt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	1809      	addeq	r1, r1, r0
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	6063      	str	r3, [r4, #4]
 800604e:	6054      	str	r4, [r2, #4]
 8006050:	e7cb      	b.n	8005fea <_free_r+0x22>
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	20000944 	.word	0x20000944

08006058 <sbrk_aligned>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	4e0e      	ldr	r6, [pc, #56]	; (8006094 <sbrk_aligned+0x3c>)
 800605c:	460c      	mov	r4, r1
 800605e:	6831      	ldr	r1, [r6, #0]
 8006060:	4605      	mov	r5, r0
 8006062:	b911      	cbnz	r1, 800606a <sbrk_aligned+0x12>
 8006064:	f000 fc08 	bl	8006878 <_sbrk_r>
 8006068:	6030      	str	r0, [r6, #0]
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 fc03 	bl	8006878 <_sbrk_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	d00a      	beq.n	800608c <sbrk_aligned+0x34>
 8006076:	1cc4      	adds	r4, r0, #3
 8006078:	f024 0403 	bic.w	r4, r4, #3
 800607c:	42a0      	cmp	r0, r4
 800607e:	d007      	beq.n	8006090 <sbrk_aligned+0x38>
 8006080:	1a21      	subs	r1, r4, r0
 8006082:	4628      	mov	r0, r5
 8006084:	f000 fbf8 	bl	8006878 <_sbrk_r>
 8006088:	3001      	adds	r0, #1
 800608a:	d101      	bne.n	8006090 <sbrk_aligned+0x38>
 800608c:	f04f 34ff 	mov.w	r4, #4294967295
 8006090:	4620      	mov	r0, r4
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	20000948 	.word	0x20000948

08006098 <_malloc_r>:
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	1ccd      	adds	r5, r1, #3
 800609e:	f025 0503 	bic.w	r5, r5, #3
 80060a2:	3508      	adds	r5, #8
 80060a4:	2d0c      	cmp	r5, #12
 80060a6:	bf38      	it	cc
 80060a8:	250c      	movcc	r5, #12
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	4607      	mov	r7, r0
 80060ae:	db01      	blt.n	80060b4 <_malloc_r+0x1c>
 80060b0:	42a9      	cmp	r1, r5
 80060b2:	d905      	bls.n	80060c0 <_malloc_r+0x28>
 80060b4:	230c      	movs	r3, #12
 80060b6:	2600      	movs	r6, #0
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4630      	mov	r0, r6
 80060bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c0:	4e2e      	ldr	r6, [pc, #184]	; (800617c <_malloc_r+0xe4>)
 80060c2:	f000 ff23 	bl	8006f0c <__malloc_lock>
 80060c6:	6833      	ldr	r3, [r6, #0]
 80060c8:	461c      	mov	r4, r3
 80060ca:	bb34      	cbnz	r4, 800611a <_malloc_r+0x82>
 80060cc:	4629      	mov	r1, r5
 80060ce:	4638      	mov	r0, r7
 80060d0:	f7ff ffc2 	bl	8006058 <sbrk_aligned>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	4604      	mov	r4, r0
 80060d8:	d14d      	bne.n	8006176 <_malloc_r+0xde>
 80060da:	6834      	ldr	r4, [r6, #0]
 80060dc:	4626      	mov	r6, r4
 80060de:	2e00      	cmp	r6, #0
 80060e0:	d140      	bne.n	8006164 <_malloc_r+0xcc>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	4631      	mov	r1, r6
 80060e6:	4638      	mov	r0, r7
 80060e8:	eb04 0803 	add.w	r8, r4, r3
 80060ec:	f000 fbc4 	bl	8006878 <_sbrk_r>
 80060f0:	4580      	cmp	r8, r0
 80060f2:	d13a      	bne.n	800616a <_malloc_r+0xd2>
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	3503      	adds	r5, #3
 80060f8:	1a6d      	subs	r5, r5, r1
 80060fa:	f025 0503 	bic.w	r5, r5, #3
 80060fe:	3508      	adds	r5, #8
 8006100:	2d0c      	cmp	r5, #12
 8006102:	bf38      	it	cc
 8006104:	250c      	movcc	r5, #12
 8006106:	4638      	mov	r0, r7
 8006108:	4629      	mov	r1, r5
 800610a:	f7ff ffa5 	bl	8006058 <sbrk_aligned>
 800610e:	3001      	adds	r0, #1
 8006110:	d02b      	beq.n	800616a <_malloc_r+0xd2>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	442b      	add	r3, r5
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	e00e      	b.n	8006138 <_malloc_r+0xa0>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	1b52      	subs	r2, r2, r5
 800611e:	d41e      	bmi.n	800615e <_malloc_r+0xc6>
 8006120:	2a0b      	cmp	r2, #11
 8006122:	d916      	bls.n	8006152 <_malloc_r+0xba>
 8006124:	1961      	adds	r1, r4, r5
 8006126:	42a3      	cmp	r3, r4
 8006128:	6025      	str	r5, [r4, #0]
 800612a:	bf18      	it	ne
 800612c:	6059      	strne	r1, [r3, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	bf08      	it	eq
 8006132:	6031      	streq	r1, [r6, #0]
 8006134:	5162      	str	r2, [r4, r5]
 8006136:	604b      	str	r3, [r1, #4]
 8006138:	4638      	mov	r0, r7
 800613a:	f104 060b 	add.w	r6, r4, #11
 800613e:	f000 feeb 	bl	8006f18 <__malloc_unlock>
 8006142:	f026 0607 	bic.w	r6, r6, #7
 8006146:	1d23      	adds	r3, r4, #4
 8006148:	1af2      	subs	r2, r6, r3
 800614a:	d0b6      	beq.n	80060ba <_malloc_r+0x22>
 800614c:	1b9b      	subs	r3, r3, r6
 800614e:	50a3      	str	r3, [r4, r2]
 8006150:	e7b3      	b.n	80060ba <_malloc_r+0x22>
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	42a3      	cmp	r3, r4
 8006156:	bf0c      	ite	eq
 8006158:	6032      	streq	r2, [r6, #0]
 800615a:	605a      	strne	r2, [r3, #4]
 800615c:	e7ec      	b.n	8006138 <_malloc_r+0xa0>
 800615e:	4623      	mov	r3, r4
 8006160:	6864      	ldr	r4, [r4, #4]
 8006162:	e7b2      	b.n	80060ca <_malloc_r+0x32>
 8006164:	4634      	mov	r4, r6
 8006166:	6876      	ldr	r6, [r6, #4]
 8006168:	e7b9      	b.n	80060de <_malloc_r+0x46>
 800616a:	230c      	movs	r3, #12
 800616c:	4638      	mov	r0, r7
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	f000 fed2 	bl	8006f18 <__malloc_unlock>
 8006174:	e7a1      	b.n	80060ba <_malloc_r+0x22>
 8006176:	6025      	str	r5, [r4, #0]
 8006178:	e7de      	b.n	8006138 <_malloc_r+0xa0>
 800617a:	bf00      	nop
 800617c:	20000944 	.word	0x20000944

08006180 <__sfputc_r>:
 8006180:	6893      	ldr	r3, [r2, #8]
 8006182:	b410      	push	{r4}
 8006184:	3b01      	subs	r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	6093      	str	r3, [r2, #8]
 800618a:	da07      	bge.n	800619c <__sfputc_r+0x1c>
 800618c:	6994      	ldr	r4, [r2, #24]
 800618e:	42a3      	cmp	r3, r4
 8006190:	db01      	blt.n	8006196 <__sfputc_r+0x16>
 8006192:	290a      	cmp	r1, #10
 8006194:	d102      	bne.n	800619c <__sfputc_r+0x1c>
 8006196:	bc10      	pop	{r4}
 8006198:	f000 bb9e 	b.w	80068d8 <__swbuf_r>
 800619c:	6813      	ldr	r3, [r2, #0]
 800619e:	1c58      	adds	r0, r3, #1
 80061a0:	6010      	str	r0, [r2, #0]
 80061a2:	7019      	strb	r1, [r3, #0]
 80061a4:	4608      	mov	r0, r1
 80061a6:	bc10      	pop	{r4}
 80061a8:	4770      	bx	lr

080061aa <__sfputs_r>:
 80061aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	18d5      	adds	r5, r2, r3
 80061b4:	42ac      	cmp	r4, r5
 80061b6:	d101      	bne.n	80061bc <__sfputs_r+0x12>
 80061b8:	2000      	movs	r0, #0
 80061ba:	e007      	b.n	80061cc <__sfputs_r+0x22>
 80061bc:	463a      	mov	r2, r7
 80061be:	4630      	mov	r0, r6
 80061c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c4:	f7ff ffdc 	bl	8006180 <__sfputc_r>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d1f3      	bne.n	80061b4 <__sfputs_r+0xa>
 80061cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061d0 <_vfiprintf_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	460d      	mov	r5, r1
 80061d6:	4614      	mov	r4, r2
 80061d8:	4698      	mov	r8, r3
 80061da:	4606      	mov	r6, r0
 80061dc:	b09d      	sub	sp, #116	; 0x74
 80061de:	b118      	cbz	r0, 80061e8 <_vfiprintf_r+0x18>
 80061e0:	6983      	ldr	r3, [r0, #24]
 80061e2:	b90b      	cbnz	r3, 80061e8 <_vfiprintf_r+0x18>
 80061e4:	f000 fd56 	bl	8006c94 <__sinit>
 80061e8:	4b89      	ldr	r3, [pc, #548]	; (8006410 <_vfiprintf_r+0x240>)
 80061ea:	429d      	cmp	r5, r3
 80061ec:	d11b      	bne.n	8006226 <_vfiprintf_r+0x56>
 80061ee:	6875      	ldr	r5, [r6, #4]
 80061f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061f2:	07d9      	lsls	r1, r3, #31
 80061f4:	d405      	bmi.n	8006202 <_vfiprintf_r+0x32>
 80061f6:	89ab      	ldrh	r3, [r5, #12]
 80061f8:	059a      	lsls	r2, r3, #22
 80061fa:	d402      	bmi.n	8006202 <_vfiprintf_r+0x32>
 80061fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061fe:	f000 fde7 	bl	8006dd0 <__retarget_lock_acquire_recursive>
 8006202:	89ab      	ldrh	r3, [r5, #12]
 8006204:	071b      	lsls	r3, r3, #28
 8006206:	d501      	bpl.n	800620c <_vfiprintf_r+0x3c>
 8006208:	692b      	ldr	r3, [r5, #16]
 800620a:	b9eb      	cbnz	r3, 8006248 <_vfiprintf_r+0x78>
 800620c:	4629      	mov	r1, r5
 800620e:	4630      	mov	r0, r6
 8006210:	f000 fbb4 	bl	800697c <__swsetup_r>
 8006214:	b1c0      	cbz	r0, 8006248 <_vfiprintf_r+0x78>
 8006216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006218:	07dc      	lsls	r4, r3, #31
 800621a:	d50e      	bpl.n	800623a <_vfiprintf_r+0x6a>
 800621c:	f04f 30ff 	mov.w	r0, #4294967295
 8006220:	b01d      	add	sp, #116	; 0x74
 8006222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006226:	4b7b      	ldr	r3, [pc, #492]	; (8006414 <_vfiprintf_r+0x244>)
 8006228:	429d      	cmp	r5, r3
 800622a:	d101      	bne.n	8006230 <_vfiprintf_r+0x60>
 800622c:	68b5      	ldr	r5, [r6, #8]
 800622e:	e7df      	b.n	80061f0 <_vfiprintf_r+0x20>
 8006230:	4b79      	ldr	r3, [pc, #484]	; (8006418 <_vfiprintf_r+0x248>)
 8006232:	429d      	cmp	r5, r3
 8006234:	bf08      	it	eq
 8006236:	68f5      	ldreq	r5, [r6, #12]
 8006238:	e7da      	b.n	80061f0 <_vfiprintf_r+0x20>
 800623a:	89ab      	ldrh	r3, [r5, #12]
 800623c:	0598      	lsls	r0, r3, #22
 800623e:	d4ed      	bmi.n	800621c <_vfiprintf_r+0x4c>
 8006240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006242:	f000 fdc6 	bl	8006dd2 <__retarget_lock_release_recursive>
 8006246:	e7e9      	b.n	800621c <_vfiprintf_r+0x4c>
 8006248:	2300      	movs	r3, #0
 800624a:	9309      	str	r3, [sp, #36]	; 0x24
 800624c:	2320      	movs	r3, #32
 800624e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006252:	2330      	movs	r3, #48	; 0x30
 8006254:	f04f 0901 	mov.w	r9, #1
 8006258:	f8cd 800c 	str.w	r8, [sp, #12]
 800625c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800641c <_vfiprintf_r+0x24c>
 8006260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006264:	4623      	mov	r3, r4
 8006266:	469a      	mov	sl, r3
 8006268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800626c:	b10a      	cbz	r2, 8006272 <_vfiprintf_r+0xa2>
 800626e:	2a25      	cmp	r2, #37	; 0x25
 8006270:	d1f9      	bne.n	8006266 <_vfiprintf_r+0x96>
 8006272:	ebba 0b04 	subs.w	fp, sl, r4
 8006276:	d00b      	beq.n	8006290 <_vfiprintf_r+0xc0>
 8006278:	465b      	mov	r3, fp
 800627a:	4622      	mov	r2, r4
 800627c:	4629      	mov	r1, r5
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ff93 	bl	80061aa <__sfputs_r>
 8006284:	3001      	adds	r0, #1
 8006286:	f000 80aa 	beq.w	80063de <_vfiprintf_r+0x20e>
 800628a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800628c:	445a      	add	r2, fp
 800628e:	9209      	str	r2, [sp, #36]	; 0x24
 8006290:	f89a 3000 	ldrb.w	r3, [sl]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80a2 	beq.w	80063de <_vfiprintf_r+0x20e>
 800629a:	2300      	movs	r3, #0
 800629c:	f04f 32ff 	mov.w	r2, #4294967295
 80062a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062a4:	f10a 0a01 	add.w	sl, sl, #1
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	9307      	str	r3, [sp, #28]
 80062ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062b0:	931a      	str	r3, [sp, #104]	; 0x68
 80062b2:	4654      	mov	r4, sl
 80062b4:	2205      	movs	r2, #5
 80062b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ba:	4858      	ldr	r0, [pc, #352]	; (800641c <_vfiprintf_r+0x24c>)
 80062bc:	f000 fdf0 	bl	8006ea0 <memchr>
 80062c0:	9a04      	ldr	r2, [sp, #16]
 80062c2:	b9d8      	cbnz	r0, 80062fc <_vfiprintf_r+0x12c>
 80062c4:	06d1      	lsls	r1, r2, #27
 80062c6:	bf44      	itt	mi
 80062c8:	2320      	movmi	r3, #32
 80062ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ce:	0713      	lsls	r3, r2, #28
 80062d0:	bf44      	itt	mi
 80062d2:	232b      	movmi	r3, #43	; 0x2b
 80062d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062d8:	f89a 3000 	ldrb.w	r3, [sl]
 80062dc:	2b2a      	cmp	r3, #42	; 0x2a
 80062de:	d015      	beq.n	800630c <_vfiprintf_r+0x13c>
 80062e0:	4654      	mov	r4, sl
 80062e2:	2000      	movs	r0, #0
 80062e4:	f04f 0c0a 	mov.w	ip, #10
 80062e8:	9a07      	ldr	r2, [sp, #28]
 80062ea:	4621      	mov	r1, r4
 80062ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f0:	3b30      	subs	r3, #48	; 0x30
 80062f2:	2b09      	cmp	r3, #9
 80062f4:	d94e      	bls.n	8006394 <_vfiprintf_r+0x1c4>
 80062f6:	b1b0      	cbz	r0, 8006326 <_vfiprintf_r+0x156>
 80062f8:	9207      	str	r2, [sp, #28]
 80062fa:	e014      	b.n	8006326 <_vfiprintf_r+0x156>
 80062fc:	eba0 0308 	sub.w	r3, r0, r8
 8006300:	fa09 f303 	lsl.w	r3, r9, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	46a2      	mov	sl, r4
 8006308:	9304      	str	r3, [sp, #16]
 800630a:	e7d2      	b.n	80062b2 <_vfiprintf_r+0xe2>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	1d19      	adds	r1, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	9103      	str	r1, [sp, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfbb      	ittet	lt
 8006318:	425b      	neglt	r3, r3
 800631a:	f042 0202 	orrlt.w	r2, r2, #2
 800631e:	9307      	strge	r3, [sp, #28]
 8006320:	9307      	strlt	r3, [sp, #28]
 8006322:	bfb8      	it	lt
 8006324:	9204      	strlt	r2, [sp, #16]
 8006326:	7823      	ldrb	r3, [r4, #0]
 8006328:	2b2e      	cmp	r3, #46	; 0x2e
 800632a:	d10c      	bne.n	8006346 <_vfiprintf_r+0x176>
 800632c:	7863      	ldrb	r3, [r4, #1]
 800632e:	2b2a      	cmp	r3, #42	; 0x2a
 8006330:	d135      	bne.n	800639e <_vfiprintf_r+0x1ce>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	3402      	adds	r4, #2
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	9203      	str	r2, [sp, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	bfb8      	it	lt
 8006340:	f04f 33ff 	movlt.w	r3, #4294967295
 8006344:	9305      	str	r3, [sp, #20]
 8006346:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006420 <_vfiprintf_r+0x250>
 800634a:	2203      	movs	r2, #3
 800634c:	4650      	mov	r0, sl
 800634e:	7821      	ldrb	r1, [r4, #0]
 8006350:	f000 fda6 	bl	8006ea0 <memchr>
 8006354:	b140      	cbz	r0, 8006368 <_vfiprintf_r+0x198>
 8006356:	2340      	movs	r3, #64	; 0x40
 8006358:	eba0 000a 	sub.w	r0, r0, sl
 800635c:	fa03 f000 	lsl.w	r0, r3, r0
 8006360:	9b04      	ldr	r3, [sp, #16]
 8006362:	3401      	adds	r4, #1
 8006364:	4303      	orrs	r3, r0
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636c:	2206      	movs	r2, #6
 800636e:	482d      	ldr	r0, [pc, #180]	; (8006424 <_vfiprintf_r+0x254>)
 8006370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006374:	f000 fd94 	bl	8006ea0 <memchr>
 8006378:	2800      	cmp	r0, #0
 800637a:	d03f      	beq.n	80063fc <_vfiprintf_r+0x22c>
 800637c:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <_vfiprintf_r+0x258>)
 800637e:	bb1b      	cbnz	r3, 80063c8 <_vfiprintf_r+0x1f8>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	3307      	adds	r3, #7
 8006384:	f023 0307 	bic.w	r3, r3, #7
 8006388:	3308      	adds	r3, #8
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	443b      	add	r3, r7
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	e767      	b.n	8006264 <_vfiprintf_r+0x94>
 8006394:	460c      	mov	r4, r1
 8006396:	2001      	movs	r0, #1
 8006398:	fb0c 3202 	mla	r2, ip, r2, r3
 800639c:	e7a5      	b.n	80062ea <_vfiprintf_r+0x11a>
 800639e:	2300      	movs	r3, #0
 80063a0:	f04f 0c0a 	mov.w	ip, #10
 80063a4:	4619      	mov	r1, r3
 80063a6:	3401      	adds	r4, #1
 80063a8:	9305      	str	r3, [sp, #20]
 80063aa:	4620      	mov	r0, r4
 80063ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b0:	3a30      	subs	r2, #48	; 0x30
 80063b2:	2a09      	cmp	r2, #9
 80063b4:	d903      	bls.n	80063be <_vfiprintf_r+0x1ee>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0c5      	beq.n	8006346 <_vfiprintf_r+0x176>
 80063ba:	9105      	str	r1, [sp, #20]
 80063bc:	e7c3      	b.n	8006346 <_vfiprintf_r+0x176>
 80063be:	4604      	mov	r4, r0
 80063c0:	2301      	movs	r3, #1
 80063c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c6:	e7f0      	b.n	80063aa <_vfiprintf_r+0x1da>
 80063c8:	ab03      	add	r3, sp, #12
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4630      	mov	r0, r6
 80063d0:	4b16      	ldr	r3, [pc, #88]	; (800642c <_vfiprintf_r+0x25c>)
 80063d2:	a904      	add	r1, sp, #16
 80063d4:	f3af 8000 	nop.w
 80063d8:	4607      	mov	r7, r0
 80063da:	1c78      	adds	r0, r7, #1
 80063dc:	d1d6      	bne.n	800638c <_vfiprintf_r+0x1bc>
 80063de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e0:	07d9      	lsls	r1, r3, #31
 80063e2:	d405      	bmi.n	80063f0 <_vfiprintf_r+0x220>
 80063e4:	89ab      	ldrh	r3, [r5, #12]
 80063e6:	059a      	lsls	r2, r3, #22
 80063e8:	d402      	bmi.n	80063f0 <_vfiprintf_r+0x220>
 80063ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ec:	f000 fcf1 	bl	8006dd2 <__retarget_lock_release_recursive>
 80063f0:	89ab      	ldrh	r3, [r5, #12]
 80063f2:	065b      	lsls	r3, r3, #25
 80063f4:	f53f af12 	bmi.w	800621c <_vfiprintf_r+0x4c>
 80063f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063fa:	e711      	b.n	8006220 <_vfiprintf_r+0x50>
 80063fc:	ab03      	add	r3, sp, #12
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	462a      	mov	r2, r5
 8006402:	4630      	mov	r0, r6
 8006404:	4b09      	ldr	r3, [pc, #36]	; (800642c <_vfiprintf_r+0x25c>)
 8006406:	a904      	add	r1, sp, #16
 8006408:	f000 f882 	bl	8006510 <_printf_i>
 800640c:	e7e4      	b.n	80063d8 <_vfiprintf_r+0x208>
 800640e:	bf00      	nop
 8006410:	0800e15c 	.word	0x0800e15c
 8006414:	0800e17c 	.word	0x0800e17c
 8006418:	0800e13c 	.word	0x0800e13c
 800641c:	0800e108 	.word	0x0800e108
 8006420:	0800e10e 	.word	0x0800e10e
 8006424:	0800e112 	.word	0x0800e112
 8006428:	00000000 	.word	0x00000000
 800642c:	080061ab 	.word	0x080061ab

08006430 <_printf_common>:
 8006430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006434:	4616      	mov	r6, r2
 8006436:	4699      	mov	r9, r3
 8006438:	688a      	ldr	r2, [r1, #8]
 800643a:	690b      	ldr	r3, [r1, #16]
 800643c:	4607      	mov	r7, r0
 800643e:	4293      	cmp	r3, r2
 8006440:	bfb8      	it	lt
 8006442:	4613      	movlt	r3, r2
 8006444:	6033      	str	r3, [r6, #0]
 8006446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800644a:	460c      	mov	r4, r1
 800644c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006450:	b10a      	cbz	r2, 8006456 <_printf_common+0x26>
 8006452:	3301      	adds	r3, #1
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	0699      	lsls	r1, r3, #26
 800645a:	bf42      	ittt	mi
 800645c:	6833      	ldrmi	r3, [r6, #0]
 800645e:	3302      	addmi	r3, #2
 8006460:	6033      	strmi	r3, [r6, #0]
 8006462:	6825      	ldr	r5, [r4, #0]
 8006464:	f015 0506 	ands.w	r5, r5, #6
 8006468:	d106      	bne.n	8006478 <_printf_common+0x48>
 800646a:	f104 0a19 	add.w	sl, r4, #25
 800646e:	68e3      	ldr	r3, [r4, #12]
 8006470:	6832      	ldr	r2, [r6, #0]
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	42ab      	cmp	r3, r5
 8006476:	dc28      	bgt.n	80064ca <_printf_common+0x9a>
 8006478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800647c:	1e13      	subs	r3, r2, #0
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	bf18      	it	ne
 8006482:	2301      	movne	r3, #1
 8006484:	0692      	lsls	r2, r2, #26
 8006486:	d42d      	bmi.n	80064e4 <_printf_common+0xb4>
 8006488:	4649      	mov	r1, r9
 800648a:	4638      	mov	r0, r7
 800648c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006490:	47c0      	blx	r8
 8006492:	3001      	adds	r0, #1
 8006494:	d020      	beq.n	80064d8 <_printf_common+0xa8>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	68e5      	ldr	r5, [r4, #12]
 800649a:	f003 0306 	and.w	r3, r3, #6
 800649e:	2b04      	cmp	r3, #4
 80064a0:	bf18      	it	ne
 80064a2:	2500      	movne	r5, #0
 80064a4:	6832      	ldr	r2, [r6, #0]
 80064a6:	f04f 0600 	mov.w	r6, #0
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	bf08      	it	eq
 80064ae:	1aad      	subeq	r5, r5, r2
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	bf08      	it	eq
 80064b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b8:	4293      	cmp	r3, r2
 80064ba:	bfc4      	itt	gt
 80064bc:	1a9b      	subgt	r3, r3, r2
 80064be:	18ed      	addgt	r5, r5, r3
 80064c0:	341a      	adds	r4, #26
 80064c2:	42b5      	cmp	r5, r6
 80064c4:	d11a      	bne.n	80064fc <_printf_common+0xcc>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e008      	b.n	80064dc <_printf_common+0xac>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4652      	mov	r2, sl
 80064ce:	4649      	mov	r1, r9
 80064d0:	4638      	mov	r0, r7
 80064d2:	47c0      	blx	r8
 80064d4:	3001      	adds	r0, #1
 80064d6:	d103      	bne.n	80064e0 <_printf_common+0xb0>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	3501      	adds	r5, #1
 80064e2:	e7c4      	b.n	800646e <_printf_common+0x3e>
 80064e4:	2030      	movs	r0, #48	; 0x30
 80064e6:	18e1      	adds	r1, r4, r3
 80064e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f2:	4422      	add	r2, r4
 80064f4:	3302      	adds	r3, #2
 80064f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064fa:	e7c5      	b.n	8006488 <_printf_common+0x58>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4622      	mov	r2, r4
 8006500:	4649      	mov	r1, r9
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d0e6      	beq.n	80064d8 <_printf_common+0xa8>
 800650a:	3601      	adds	r6, #1
 800650c:	e7d9      	b.n	80064c2 <_printf_common+0x92>
	...

08006510 <_printf_i>:
 8006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	7e0f      	ldrb	r7, [r1, #24]
 8006516:	4691      	mov	r9, r2
 8006518:	2f78      	cmp	r7, #120	; 0x78
 800651a:	4680      	mov	r8, r0
 800651c:	460c      	mov	r4, r1
 800651e:	469a      	mov	sl, r3
 8006520:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006526:	d807      	bhi.n	8006538 <_printf_i+0x28>
 8006528:	2f62      	cmp	r7, #98	; 0x62
 800652a:	d80a      	bhi.n	8006542 <_printf_i+0x32>
 800652c:	2f00      	cmp	r7, #0
 800652e:	f000 80d9 	beq.w	80066e4 <_printf_i+0x1d4>
 8006532:	2f58      	cmp	r7, #88	; 0x58
 8006534:	f000 80a4 	beq.w	8006680 <_printf_i+0x170>
 8006538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800653c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006540:	e03a      	b.n	80065b8 <_printf_i+0xa8>
 8006542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006546:	2b15      	cmp	r3, #21
 8006548:	d8f6      	bhi.n	8006538 <_printf_i+0x28>
 800654a:	a101      	add	r1, pc, #4	; (adr r1, 8006550 <_printf_i+0x40>)
 800654c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065bd 	.word	0x080065bd
 8006558:	08006539 	.word	0x08006539
 800655c:	08006539 	.word	0x08006539
 8006560:	08006539 	.word	0x08006539
 8006564:	08006539 	.word	0x08006539
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006539 	.word	0x08006539
 8006570:	08006539 	.word	0x08006539
 8006574:	08006539 	.word	0x08006539
 8006578:	08006539 	.word	0x08006539
 800657c:	080066cb 	.word	0x080066cb
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080066ad 	.word	0x080066ad
 8006588:	08006539 	.word	0x08006539
 800658c:	08006539 	.word	0x08006539
 8006590:	080066ed 	.word	0x080066ed
 8006594:	08006539 	.word	0x08006539
 8006598:	080065ed 	.word	0x080065ed
 800659c:	08006539 	.word	0x08006539
 80065a0:	08006539 	.word	0x08006539
 80065a4:	080066b5 	.word	0x080066b5
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	602a      	str	r2, [r5, #0]
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0a4      	b.n	8006706 <_printf_i+0x1f6>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	6829      	ldr	r1, [r5, #0]
 80065c0:	0606      	lsls	r6, r0, #24
 80065c2:	f101 0304 	add.w	r3, r1, #4
 80065c6:	d50a      	bpl.n	80065de <_printf_i+0xce>
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	2e00      	cmp	r6, #0
 80065ce:	da03      	bge.n	80065d8 <_printf_i+0xc8>
 80065d0:	232d      	movs	r3, #45	; 0x2d
 80065d2:	4276      	negs	r6, r6
 80065d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d8:	230a      	movs	r3, #10
 80065da:	485e      	ldr	r0, [pc, #376]	; (8006754 <_printf_i+0x244>)
 80065dc:	e019      	b.n	8006612 <_printf_i+0x102>
 80065de:	680e      	ldr	r6, [r1, #0]
 80065e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	bf18      	it	ne
 80065e8:	b236      	sxthne	r6, r6
 80065ea:	e7ef      	b.n	80065cc <_printf_i+0xbc>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	6029      	str	r1, [r5, #0]
 80065f4:	0601      	lsls	r1, r0, #24
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0xec>
 80065f8:	681e      	ldr	r6, [r3, #0]
 80065fa:	e002      	b.n	8006602 <_printf_i+0xf2>
 80065fc:	0646      	lsls	r6, r0, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0xe8>
 8006600:	881e      	ldrh	r6, [r3, #0]
 8006602:	2f6f      	cmp	r7, #111	; 0x6f
 8006604:	bf0c      	ite	eq
 8006606:	2308      	moveq	r3, #8
 8006608:	230a      	movne	r3, #10
 800660a:	4852      	ldr	r0, [pc, #328]	; (8006754 <_printf_i+0x244>)
 800660c:	2100      	movs	r1, #0
 800660e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006612:	6865      	ldr	r5, [r4, #4]
 8006614:	2d00      	cmp	r5, #0
 8006616:	bfa8      	it	ge
 8006618:	6821      	ldrge	r1, [r4, #0]
 800661a:	60a5      	str	r5, [r4, #8]
 800661c:	bfa4      	itt	ge
 800661e:	f021 0104 	bicge.w	r1, r1, #4
 8006622:	6021      	strge	r1, [r4, #0]
 8006624:	b90e      	cbnz	r6, 800662a <_printf_i+0x11a>
 8006626:	2d00      	cmp	r5, #0
 8006628:	d04d      	beq.n	80066c6 <_printf_i+0x1b6>
 800662a:	4615      	mov	r5, r2
 800662c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006630:	fb03 6711 	mls	r7, r3, r1, r6
 8006634:	5dc7      	ldrb	r7, [r0, r7]
 8006636:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800663a:	4637      	mov	r7, r6
 800663c:	42bb      	cmp	r3, r7
 800663e:	460e      	mov	r6, r1
 8006640:	d9f4      	bls.n	800662c <_printf_i+0x11c>
 8006642:	2b08      	cmp	r3, #8
 8006644:	d10b      	bne.n	800665e <_printf_i+0x14e>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	07de      	lsls	r6, r3, #31
 800664a:	d508      	bpl.n	800665e <_printf_i+0x14e>
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	6861      	ldr	r1, [r4, #4]
 8006650:	4299      	cmp	r1, r3
 8006652:	bfde      	ittt	le
 8006654:	2330      	movle	r3, #48	; 0x30
 8006656:	f805 3c01 	strble.w	r3, [r5, #-1]
 800665a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800665e:	1b52      	subs	r2, r2, r5
 8006660:	6122      	str	r2, [r4, #16]
 8006662:	464b      	mov	r3, r9
 8006664:	4621      	mov	r1, r4
 8006666:	4640      	mov	r0, r8
 8006668:	f8cd a000 	str.w	sl, [sp]
 800666c:	aa03      	add	r2, sp, #12
 800666e:	f7ff fedf 	bl	8006430 <_printf_common>
 8006672:	3001      	adds	r0, #1
 8006674:	d14c      	bne.n	8006710 <_printf_i+0x200>
 8006676:	f04f 30ff 	mov.w	r0, #4294967295
 800667a:	b004      	add	sp, #16
 800667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006680:	4834      	ldr	r0, [pc, #208]	; (8006754 <_printf_i+0x244>)
 8006682:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006686:	6829      	ldr	r1, [r5, #0]
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	f851 6b04 	ldr.w	r6, [r1], #4
 800668e:	6029      	str	r1, [r5, #0]
 8006690:	061d      	lsls	r5, r3, #24
 8006692:	d514      	bpl.n	80066be <_printf_i+0x1ae>
 8006694:	07df      	lsls	r7, r3, #31
 8006696:	bf44      	itt	mi
 8006698:	f043 0320 	orrmi.w	r3, r3, #32
 800669c:	6023      	strmi	r3, [r4, #0]
 800669e:	b91e      	cbnz	r6, 80066a8 <_printf_i+0x198>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	f023 0320 	bic.w	r3, r3, #32
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	2310      	movs	r3, #16
 80066aa:	e7af      	b.n	800660c <_printf_i+0xfc>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	f043 0320 	orr.w	r3, r3, #32
 80066b2:	6023      	str	r3, [r4, #0]
 80066b4:	2378      	movs	r3, #120	; 0x78
 80066b6:	4828      	ldr	r0, [pc, #160]	; (8006758 <_printf_i+0x248>)
 80066b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066bc:	e7e3      	b.n	8006686 <_printf_i+0x176>
 80066be:	0659      	lsls	r1, r3, #25
 80066c0:	bf48      	it	mi
 80066c2:	b2b6      	uxthmi	r6, r6
 80066c4:	e7e6      	b.n	8006694 <_printf_i+0x184>
 80066c6:	4615      	mov	r5, r2
 80066c8:	e7bb      	b.n	8006642 <_printf_i+0x132>
 80066ca:	682b      	ldr	r3, [r5, #0]
 80066cc:	6826      	ldr	r6, [r4, #0]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6961      	ldr	r1, [r4, #20]
 80066d2:	6028      	str	r0, [r5, #0]
 80066d4:	0635      	lsls	r5, r6, #24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	d501      	bpl.n	80066de <_printf_i+0x1ce>
 80066da:	6019      	str	r1, [r3, #0]
 80066dc:	e002      	b.n	80066e4 <_printf_i+0x1d4>
 80066de:	0670      	lsls	r0, r6, #25
 80066e0:	d5fb      	bpl.n	80066da <_printf_i+0x1ca>
 80066e2:	8019      	strh	r1, [r3, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	4615      	mov	r5, r2
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	e7ba      	b.n	8006662 <_printf_i+0x152>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	2100      	movs	r1, #0
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	602a      	str	r2, [r5, #0]
 80066f4:	681d      	ldr	r5, [r3, #0]
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 fbd1 	bl	8006ea0 <memchr>
 80066fe:	b108      	cbz	r0, 8006704 <_printf_i+0x1f4>
 8006700:	1b40      	subs	r0, r0, r5
 8006702:	6060      	str	r0, [r4, #4]
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	2300      	movs	r3, #0
 800670a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670e:	e7a8      	b.n	8006662 <_printf_i+0x152>
 8006710:	462a      	mov	r2, r5
 8006712:	4649      	mov	r1, r9
 8006714:	4640      	mov	r0, r8
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	47d0      	blx	sl
 800671a:	3001      	adds	r0, #1
 800671c:	d0ab      	beq.n	8006676 <_printf_i+0x166>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	079b      	lsls	r3, r3, #30
 8006722:	d413      	bmi.n	800674c <_printf_i+0x23c>
 8006724:	68e0      	ldr	r0, [r4, #12]
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	4298      	cmp	r0, r3
 800672a:	bfb8      	it	lt
 800672c:	4618      	movlt	r0, r3
 800672e:	e7a4      	b.n	800667a <_printf_i+0x16a>
 8006730:	2301      	movs	r3, #1
 8006732:	4632      	mov	r2, r6
 8006734:	4649      	mov	r1, r9
 8006736:	4640      	mov	r0, r8
 8006738:	47d0      	blx	sl
 800673a:	3001      	adds	r0, #1
 800673c:	d09b      	beq.n	8006676 <_printf_i+0x166>
 800673e:	3501      	adds	r5, #1
 8006740:	68e3      	ldr	r3, [r4, #12]
 8006742:	9903      	ldr	r1, [sp, #12]
 8006744:	1a5b      	subs	r3, r3, r1
 8006746:	42ab      	cmp	r3, r5
 8006748:	dcf2      	bgt.n	8006730 <_printf_i+0x220>
 800674a:	e7eb      	b.n	8006724 <_printf_i+0x214>
 800674c:	2500      	movs	r5, #0
 800674e:	f104 0619 	add.w	r6, r4, #25
 8006752:	e7f5      	b.n	8006740 <_printf_i+0x230>
 8006754:	0800e119 	.word	0x0800e119
 8006758:	0800e12a 	.word	0x0800e12a

0800675c <iprintf>:
 800675c:	b40f      	push	{r0, r1, r2, r3}
 800675e:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <iprintf+0x2c>)
 8006760:	b513      	push	{r0, r1, r4, lr}
 8006762:	681c      	ldr	r4, [r3, #0]
 8006764:	b124      	cbz	r4, 8006770 <iprintf+0x14>
 8006766:	69a3      	ldr	r3, [r4, #24]
 8006768:	b913      	cbnz	r3, 8006770 <iprintf+0x14>
 800676a:	4620      	mov	r0, r4
 800676c:	f000 fa92 	bl	8006c94 <__sinit>
 8006770:	ab05      	add	r3, sp, #20
 8006772:	4620      	mov	r0, r4
 8006774:	9a04      	ldr	r2, [sp, #16]
 8006776:	68a1      	ldr	r1, [r4, #8]
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	f7ff fd29 	bl	80061d0 <_vfiprintf_r>
 800677e:	b002      	add	sp, #8
 8006780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006784:	b004      	add	sp, #16
 8006786:	4770      	bx	lr
 8006788:	20000094 	.word	0x20000094

0800678c <_puts_r>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	460e      	mov	r6, r1
 8006790:	4605      	mov	r5, r0
 8006792:	b118      	cbz	r0, 800679c <_puts_r+0x10>
 8006794:	6983      	ldr	r3, [r0, #24]
 8006796:	b90b      	cbnz	r3, 800679c <_puts_r+0x10>
 8006798:	f000 fa7c 	bl	8006c94 <__sinit>
 800679c:	69ab      	ldr	r3, [r5, #24]
 800679e:	68ac      	ldr	r4, [r5, #8]
 80067a0:	b913      	cbnz	r3, 80067a8 <_puts_r+0x1c>
 80067a2:	4628      	mov	r0, r5
 80067a4:	f000 fa76 	bl	8006c94 <__sinit>
 80067a8:	4b2c      	ldr	r3, [pc, #176]	; (800685c <_puts_r+0xd0>)
 80067aa:	429c      	cmp	r4, r3
 80067ac:	d120      	bne.n	80067f0 <_puts_r+0x64>
 80067ae:	686c      	ldr	r4, [r5, #4]
 80067b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b2:	07db      	lsls	r3, r3, #31
 80067b4:	d405      	bmi.n	80067c2 <_puts_r+0x36>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	0598      	lsls	r0, r3, #22
 80067ba:	d402      	bmi.n	80067c2 <_puts_r+0x36>
 80067bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067be:	f000 fb07 	bl	8006dd0 <__retarget_lock_acquire_recursive>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	0719      	lsls	r1, r3, #28
 80067c6:	d51d      	bpl.n	8006804 <_puts_r+0x78>
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	b1db      	cbz	r3, 8006804 <_puts_r+0x78>
 80067cc:	3e01      	subs	r6, #1
 80067ce:	68a3      	ldr	r3, [r4, #8]
 80067d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067d4:	3b01      	subs	r3, #1
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	bb39      	cbnz	r1, 800682a <_puts_r+0x9e>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da38      	bge.n	8006850 <_puts_r+0xc4>
 80067de:	4622      	mov	r2, r4
 80067e0:	210a      	movs	r1, #10
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 f878 	bl	80068d8 <__swbuf_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d011      	beq.n	8006810 <_puts_r+0x84>
 80067ec:	250a      	movs	r5, #10
 80067ee:	e011      	b.n	8006814 <_puts_r+0x88>
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <_puts_r+0xd4>)
 80067f2:	429c      	cmp	r4, r3
 80067f4:	d101      	bne.n	80067fa <_puts_r+0x6e>
 80067f6:	68ac      	ldr	r4, [r5, #8]
 80067f8:	e7da      	b.n	80067b0 <_puts_r+0x24>
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <_puts_r+0xd8>)
 80067fc:	429c      	cmp	r4, r3
 80067fe:	bf08      	it	eq
 8006800:	68ec      	ldreq	r4, [r5, #12]
 8006802:	e7d5      	b.n	80067b0 <_puts_r+0x24>
 8006804:	4621      	mov	r1, r4
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f8b8 	bl	800697c <__swsetup_r>
 800680c:	2800      	cmp	r0, #0
 800680e:	d0dd      	beq.n	80067cc <_puts_r+0x40>
 8006810:	f04f 35ff 	mov.w	r5, #4294967295
 8006814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006816:	07da      	lsls	r2, r3, #31
 8006818:	d405      	bmi.n	8006826 <_puts_r+0x9a>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	059b      	lsls	r3, r3, #22
 800681e:	d402      	bmi.n	8006826 <_puts_r+0x9a>
 8006820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006822:	f000 fad6 	bl	8006dd2 <__retarget_lock_release_recursive>
 8006826:	4628      	mov	r0, r5
 8006828:	bd70      	pop	{r4, r5, r6, pc}
 800682a:	2b00      	cmp	r3, #0
 800682c:	da04      	bge.n	8006838 <_puts_r+0xac>
 800682e:	69a2      	ldr	r2, [r4, #24]
 8006830:	429a      	cmp	r2, r3
 8006832:	dc06      	bgt.n	8006842 <_puts_r+0xb6>
 8006834:	290a      	cmp	r1, #10
 8006836:	d004      	beq.n	8006842 <_puts_r+0xb6>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	6022      	str	r2, [r4, #0]
 800683e:	7019      	strb	r1, [r3, #0]
 8006840:	e7c5      	b.n	80067ce <_puts_r+0x42>
 8006842:	4622      	mov	r2, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f000 f847 	bl	80068d8 <__swbuf_r>
 800684a:	3001      	adds	r0, #1
 800684c:	d1bf      	bne.n	80067ce <_puts_r+0x42>
 800684e:	e7df      	b.n	8006810 <_puts_r+0x84>
 8006850:	250a      	movs	r5, #10
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	701d      	strb	r5, [r3, #0]
 800685a:	e7db      	b.n	8006814 <_puts_r+0x88>
 800685c:	0800e15c 	.word	0x0800e15c
 8006860:	0800e17c 	.word	0x0800e17c
 8006864:	0800e13c 	.word	0x0800e13c

08006868 <puts>:
 8006868:	4b02      	ldr	r3, [pc, #8]	; (8006874 <puts+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f7ff bf8d 	b.w	800678c <_puts_r>
 8006872:	bf00      	nop
 8006874:	20000094 	.word	0x20000094

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	2300      	movs	r3, #0
 800687c:	4d05      	ldr	r5, [pc, #20]	; (8006894 <_sbrk_r+0x1c>)
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fc f866 	bl	8002954 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20000950 	.word	0x20000950

08006898 <siprintf>:
 8006898:	b40e      	push	{r1, r2, r3}
 800689a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800689e:	b500      	push	{lr}
 80068a0:	b09c      	sub	sp, #112	; 0x70
 80068a2:	ab1d      	add	r3, sp, #116	; 0x74
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	9006      	str	r0, [sp, #24]
 80068a8:	9107      	str	r1, [sp, #28]
 80068aa:	9104      	str	r1, [sp, #16]
 80068ac:	4808      	ldr	r0, [pc, #32]	; (80068d0 <siprintf+0x38>)
 80068ae:	4909      	ldr	r1, [pc, #36]	; (80068d4 <siprintf+0x3c>)
 80068b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b4:	9105      	str	r1, [sp, #20]
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	a902      	add	r1, sp, #8
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	f000 fbbc 	bl	8007038 <_svfiprintf_r>
 80068c0:	2200      	movs	r2, #0
 80068c2:	9b02      	ldr	r3, [sp, #8]
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	b01c      	add	sp, #112	; 0x70
 80068c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068cc:	b003      	add	sp, #12
 80068ce:	4770      	bx	lr
 80068d0:	20000094 	.word	0x20000094
 80068d4:	ffff0208 	.word	0xffff0208

080068d8 <__swbuf_r>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	460e      	mov	r6, r1
 80068dc:	4614      	mov	r4, r2
 80068de:	4605      	mov	r5, r0
 80068e0:	b118      	cbz	r0, 80068ea <__swbuf_r+0x12>
 80068e2:	6983      	ldr	r3, [r0, #24]
 80068e4:	b90b      	cbnz	r3, 80068ea <__swbuf_r+0x12>
 80068e6:	f000 f9d5 	bl	8006c94 <__sinit>
 80068ea:	4b21      	ldr	r3, [pc, #132]	; (8006970 <__swbuf_r+0x98>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	d12b      	bne.n	8006948 <__swbuf_r+0x70>
 80068f0:	686c      	ldr	r4, [r5, #4]
 80068f2:	69a3      	ldr	r3, [r4, #24]
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	071a      	lsls	r2, r3, #28
 80068fa:	d52f      	bpl.n	800695c <__swbuf_r+0x84>
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	b36b      	cbz	r3, 800695c <__swbuf_r+0x84>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	b2f6      	uxtb	r6, r6
 8006906:	1ac0      	subs	r0, r0, r3
 8006908:	6963      	ldr	r3, [r4, #20]
 800690a:	4637      	mov	r7, r6
 800690c:	4283      	cmp	r3, r0
 800690e:	dc04      	bgt.n	800691a <__swbuf_r+0x42>
 8006910:	4621      	mov	r1, r4
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f92a 	bl	8006b6c <_fflush_r>
 8006918:	bb30      	cbnz	r0, 8006968 <__swbuf_r+0x90>
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	3001      	adds	r0, #1
 800691e:	3b01      	subs	r3, #1
 8006920:	60a3      	str	r3, [r4, #8]
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	6022      	str	r2, [r4, #0]
 8006928:	701e      	strb	r6, [r3, #0]
 800692a:	6963      	ldr	r3, [r4, #20]
 800692c:	4283      	cmp	r3, r0
 800692e:	d004      	beq.n	800693a <__swbuf_r+0x62>
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	07db      	lsls	r3, r3, #31
 8006934:	d506      	bpl.n	8006944 <__swbuf_r+0x6c>
 8006936:	2e0a      	cmp	r6, #10
 8006938:	d104      	bne.n	8006944 <__swbuf_r+0x6c>
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 f915 	bl	8006b6c <_fflush_r>
 8006942:	b988      	cbnz	r0, 8006968 <__swbuf_r+0x90>
 8006944:	4638      	mov	r0, r7
 8006946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <__swbuf_r+0x9c>)
 800694a:	429c      	cmp	r4, r3
 800694c:	d101      	bne.n	8006952 <__swbuf_r+0x7a>
 800694e:	68ac      	ldr	r4, [r5, #8]
 8006950:	e7cf      	b.n	80068f2 <__swbuf_r+0x1a>
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <__swbuf_r+0xa0>)
 8006954:	429c      	cmp	r4, r3
 8006956:	bf08      	it	eq
 8006958:	68ec      	ldreq	r4, [r5, #12]
 800695a:	e7ca      	b.n	80068f2 <__swbuf_r+0x1a>
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f80c 	bl	800697c <__swsetup_r>
 8006964:	2800      	cmp	r0, #0
 8006966:	d0cb      	beq.n	8006900 <__swbuf_r+0x28>
 8006968:	f04f 37ff 	mov.w	r7, #4294967295
 800696c:	e7ea      	b.n	8006944 <__swbuf_r+0x6c>
 800696e:	bf00      	nop
 8006970:	0800e15c 	.word	0x0800e15c
 8006974:	0800e17c 	.word	0x0800e17c
 8006978:	0800e13c 	.word	0x0800e13c

0800697c <__swsetup_r>:
 800697c:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <__swsetup_r+0xcc>)
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	4606      	mov	r6, r0
 8006984:	460c      	mov	r4, r1
 8006986:	b125      	cbz	r5, 8006992 <__swsetup_r+0x16>
 8006988:	69ab      	ldr	r3, [r5, #24]
 800698a:	b913      	cbnz	r3, 8006992 <__swsetup_r+0x16>
 800698c:	4628      	mov	r0, r5
 800698e:	f000 f981 	bl	8006c94 <__sinit>
 8006992:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <__swsetup_r+0xd0>)
 8006994:	429c      	cmp	r4, r3
 8006996:	d10f      	bne.n	80069b8 <__swsetup_r+0x3c>
 8006998:	686c      	ldr	r4, [r5, #4]
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a0:	0719      	lsls	r1, r3, #28
 80069a2:	d42c      	bmi.n	80069fe <__swsetup_r+0x82>
 80069a4:	06dd      	lsls	r5, r3, #27
 80069a6:	d411      	bmi.n	80069cc <__swsetup_r+0x50>
 80069a8:	2309      	movs	r3, #9
 80069aa:	6033      	str	r3, [r6, #0]
 80069ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	e03e      	b.n	8006a36 <__swsetup_r+0xba>
 80069b8:	4b25      	ldr	r3, [pc, #148]	; (8006a50 <__swsetup_r+0xd4>)
 80069ba:	429c      	cmp	r4, r3
 80069bc:	d101      	bne.n	80069c2 <__swsetup_r+0x46>
 80069be:	68ac      	ldr	r4, [r5, #8]
 80069c0:	e7eb      	b.n	800699a <__swsetup_r+0x1e>
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <__swsetup_r+0xd8>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	bf08      	it	eq
 80069c8:	68ec      	ldreq	r4, [r5, #12]
 80069ca:	e7e6      	b.n	800699a <__swsetup_r+0x1e>
 80069cc:	0758      	lsls	r0, r3, #29
 80069ce:	d512      	bpl.n	80069f6 <__swsetup_r+0x7a>
 80069d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d2:	b141      	cbz	r1, 80069e6 <__swsetup_r+0x6a>
 80069d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d8:	4299      	cmp	r1, r3
 80069da:	d002      	beq.n	80069e2 <__swsetup_r+0x66>
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff faf3 	bl	8005fc8 <_free_r>
 80069e2:	2300      	movs	r3, #0
 80069e4:	6363      	str	r3, [r4, #52]	; 0x34
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	2300      	movs	r3, #0
 80069f0:	6063      	str	r3, [r4, #4]
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f043 0308 	orr.w	r3, r3, #8
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	b94b      	cbnz	r3, 8006a16 <__swsetup_r+0x9a>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0c:	d003      	beq.n	8006a16 <__swsetup_r+0x9a>
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 fa05 	bl	8006e20 <__smakebuf_r>
 8006a16:	89a0      	ldrh	r0, [r4, #12]
 8006a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a1c:	f010 0301 	ands.w	r3, r0, #1
 8006a20:	d00a      	beq.n	8006a38 <__swsetup_r+0xbc>
 8006a22:	2300      	movs	r3, #0
 8006a24:	60a3      	str	r3, [r4, #8]
 8006a26:	6963      	ldr	r3, [r4, #20]
 8006a28:	425b      	negs	r3, r3
 8006a2a:	61a3      	str	r3, [r4, #24]
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	b943      	cbnz	r3, 8006a42 <__swsetup_r+0xc6>
 8006a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a34:	d1ba      	bne.n	80069ac <__swsetup_r+0x30>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	0781      	lsls	r1, r0, #30
 8006a3a:	bf58      	it	pl
 8006a3c:	6963      	ldrpl	r3, [r4, #20]
 8006a3e:	60a3      	str	r3, [r4, #8]
 8006a40:	e7f4      	b.n	8006a2c <__swsetup_r+0xb0>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e7f7      	b.n	8006a36 <__swsetup_r+0xba>
 8006a46:	bf00      	nop
 8006a48:	20000094 	.word	0x20000094
 8006a4c:	0800e15c 	.word	0x0800e15c
 8006a50:	0800e17c 	.word	0x0800e17c
 8006a54:	0800e13c 	.word	0x0800e13c

08006a58 <abort>:
 8006a58:	2006      	movs	r0, #6
 8006a5a:	b508      	push	{r3, lr}
 8006a5c:	f000 fc14 	bl	8007288 <raise>
 8006a60:	2001      	movs	r0, #1
 8006a62:	f7fb ff1f 	bl	80028a4 <_exit>
	...

08006a68 <__sflush_r>:
 8006a68:	898a      	ldrh	r2, [r1, #12]
 8006a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	0710      	lsls	r0, r2, #28
 8006a70:	460c      	mov	r4, r1
 8006a72:	d457      	bmi.n	8006b24 <__sflush_r+0xbc>
 8006a74:	684b      	ldr	r3, [r1, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dc04      	bgt.n	8006a84 <__sflush_r+0x1c>
 8006a7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc01      	bgt.n	8006a84 <__sflush_r+0x1c>
 8006a80:	2000      	movs	r0, #0
 8006a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d0fa      	beq.n	8006a80 <__sflush_r+0x18>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a90:	682f      	ldr	r7, [r5, #0]
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	d032      	beq.n	8006afc <__sflush_r+0x94>
 8006a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	075a      	lsls	r2, r3, #29
 8006a9c:	d505      	bpl.n	8006aaa <__sflush_r+0x42>
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	1ac0      	subs	r0, r0, r3
 8006aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa4:	b10b      	cbz	r3, 8006aaa <__sflush_r+0x42>
 8006aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa8:	1ac0      	subs	r0, r0, r3
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4602      	mov	r2, r0
 8006aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	6a21      	ldr	r1, [r4, #32]
 8006ab4:	47b0      	blx	r6
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	d106      	bne.n	8006aca <__sflush_r+0x62>
 8006abc:	6829      	ldr	r1, [r5, #0]
 8006abe:	291d      	cmp	r1, #29
 8006ac0:	d82c      	bhi.n	8006b1c <__sflush_r+0xb4>
 8006ac2:	4a29      	ldr	r2, [pc, #164]	; (8006b68 <__sflush_r+0x100>)
 8006ac4:	40ca      	lsrs	r2, r1
 8006ac6:	07d6      	lsls	r6, r2, #31
 8006ac8:	d528      	bpl.n	8006b1c <__sflush_r+0xb4>
 8006aca:	2200      	movs	r2, #0
 8006acc:	6062      	str	r2, [r4, #4]
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	04d9      	lsls	r1, r3, #19
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	d504      	bpl.n	8006ae0 <__sflush_r+0x78>
 8006ad6:	1c42      	adds	r2, r0, #1
 8006ad8:	d101      	bne.n	8006ade <__sflush_r+0x76>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	b903      	cbnz	r3, 8006ae0 <__sflush_r+0x78>
 8006ade:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae2:	602f      	str	r7, [r5, #0]
 8006ae4:	2900      	cmp	r1, #0
 8006ae6:	d0cb      	beq.n	8006a80 <__sflush_r+0x18>
 8006ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aec:	4299      	cmp	r1, r3
 8006aee:	d002      	beq.n	8006af6 <__sflush_r+0x8e>
 8006af0:	4628      	mov	r0, r5
 8006af2:	f7ff fa69 	bl	8005fc8 <_free_r>
 8006af6:	2000      	movs	r0, #0
 8006af8:	6360      	str	r0, [r4, #52]	; 0x34
 8006afa:	e7c2      	b.n	8006a82 <__sflush_r+0x1a>
 8006afc:	6a21      	ldr	r1, [r4, #32]
 8006afe:	2301      	movs	r3, #1
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	1c41      	adds	r1, r0, #1
 8006b06:	d1c7      	bne.n	8006a98 <__sflush_r+0x30>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c4      	beq.n	8006a98 <__sflush_r+0x30>
 8006b0e:	2b1d      	cmp	r3, #29
 8006b10:	d001      	beq.n	8006b16 <__sflush_r+0xae>
 8006b12:	2b16      	cmp	r3, #22
 8006b14:	d101      	bne.n	8006b1a <__sflush_r+0xb2>
 8006b16:	602f      	str	r7, [r5, #0]
 8006b18:	e7b2      	b.n	8006a80 <__sflush_r+0x18>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	e7ae      	b.n	8006a82 <__sflush_r+0x1a>
 8006b24:	690f      	ldr	r7, [r1, #16]
 8006b26:	2f00      	cmp	r7, #0
 8006b28:	d0aa      	beq.n	8006a80 <__sflush_r+0x18>
 8006b2a:	0793      	lsls	r3, r2, #30
 8006b2c:	bf18      	it	ne
 8006b2e:	2300      	movne	r3, #0
 8006b30:	680e      	ldr	r6, [r1, #0]
 8006b32:	bf08      	it	eq
 8006b34:	694b      	ldreq	r3, [r1, #20]
 8006b36:	1bf6      	subs	r6, r6, r7
 8006b38:	600f      	str	r7, [r1, #0]
 8006b3a:	608b      	str	r3, [r1, #8]
 8006b3c:	2e00      	cmp	r6, #0
 8006b3e:	dd9f      	ble.n	8006a80 <__sflush_r+0x18>
 8006b40:	4633      	mov	r3, r6
 8006b42:	463a      	mov	r2, r7
 8006b44:	4628      	mov	r0, r5
 8006b46:	6a21      	ldr	r1, [r4, #32]
 8006b48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006b4c:	47e0      	blx	ip
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	dc06      	bgt.n	8006b60 <__sflush_r+0xf8>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5c:	81a3      	strh	r3, [r4, #12]
 8006b5e:	e790      	b.n	8006a82 <__sflush_r+0x1a>
 8006b60:	4407      	add	r7, r0
 8006b62:	1a36      	subs	r6, r6, r0
 8006b64:	e7ea      	b.n	8006b3c <__sflush_r+0xd4>
 8006b66:	bf00      	nop
 8006b68:	20400001 	.word	0x20400001

08006b6c <_fflush_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	4605      	mov	r5, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b913      	cbnz	r3, 8006b7c <_fflush_r+0x10>
 8006b76:	2500      	movs	r5, #0
 8006b78:	4628      	mov	r0, r5
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	b118      	cbz	r0, 8006b86 <_fflush_r+0x1a>
 8006b7e:	6983      	ldr	r3, [r0, #24]
 8006b80:	b90b      	cbnz	r3, 8006b86 <_fflush_r+0x1a>
 8006b82:	f000 f887 	bl	8006c94 <__sinit>
 8006b86:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <_fflush_r+0x6c>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d11b      	bne.n	8006bc4 <_fflush_r+0x58>
 8006b8c:	686c      	ldr	r4, [r5, #4]
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0ef      	beq.n	8006b76 <_fflush_r+0xa>
 8006b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b98:	07d0      	lsls	r0, r2, #31
 8006b9a:	d404      	bmi.n	8006ba6 <_fflush_r+0x3a>
 8006b9c:	0599      	lsls	r1, r3, #22
 8006b9e:	d402      	bmi.n	8006ba6 <_fflush_r+0x3a>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba2:	f000 f915 	bl	8006dd0 <__retarget_lock_acquire_recursive>
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	4621      	mov	r1, r4
 8006baa:	f7ff ff5d 	bl	8006a68 <__sflush_r>
 8006bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	07da      	lsls	r2, r3, #31
 8006bb4:	d4e0      	bmi.n	8006b78 <_fflush_r+0xc>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	059b      	lsls	r3, r3, #22
 8006bba:	d4dd      	bmi.n	8006b78 <_fflush_r+0xc>
 8006bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bbe:	f000 f908 	bl	8006dd2 <__retarget_lock_release_recursive>
 8006bc2:	e7d9      	b.n	8006b78 <_fflush_r+0xc>
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <_fflush_r+0x70>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d101      	bne.n	8006bce <_fflush_r+0x62>
 8006bca:	68ac      	ldr	r4, [r5, #8]
 8006bcc:	e7df      	b.n	8006b8e <_fflush_r+0x22>
 8006bce:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <_fflush_r+0x74>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	bf08      	it	eq
 8006bd4:	68ec      	ldreq	r4, [r5, #12]
 8006bd6:	e7da      	b.n	8006b8e <_fflush_r+0x22>
 8006bd8:	0800e15c 	.word	0x0800e15c
 8006bdc:	0800e17c 	.word	0x0800e17c
 8006be0:	0800e13c 	.word	0x0800e13c

08006be4 <std>:
 8006be4:	2300      	movs	r3, #0
 8006be6:	b510      	push	{r4, lr}
 8006be8:	4604      	mov	r4, r0
 8006bea:	e9c0 3300 	strd	r3, r3, [r0]
 8006bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf2:	6083      	str	r3, [r0, #8]
 8006bf4:	8181      	strh	r1, [r0, #12]
 8006bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf8:	81c2      	strh	r2, [r0, #14]
 8006bfa:	6183      	str	r3, [r0, #24]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	2208      	movs	r2, #8
 8006c00:	305c      	adds	r0, #92	; 0x5c
 8006c02:	f7ff f9d9 	bl	8005fb8 <memset>
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <std+0x38>)
 8006c08:	6224      	str	r4, [r4, #32]
 8006c0a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c0c:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <std+0x3c>)
 8006c0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c10:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <std+0x40>)
 8006c12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <std+0x44>)
 8006c16:	6323      	str	r3, [r4, #48]	; 0x30
 8006c18:	bd10      	pop	{r4, pc}
 8006c1a:	bf00      	nop
 8006c1c:	080072c1 	.word	0x080072c1
 8006c20:	080072e3 	.word	0x080072e3
 8006c24:	0800731b 	.word	0x0800731b
 8006c28:	0800733f 	.word	0x0800733f

08006c2c <_cleanup_r>:
 8006c2c:	4901      	ldr	r1, [pc, #4]	; (8006c34 <_cleanup_r+0x8>)
 8006c2e:	f000 b8af 	b.w	8006d90 <_fwalk_reent>
 8006c32:	bf00      	nop
 8006c34:	08006b6d 	.word	0x08006b6d

08006c38 <__sfmoreglue>:
 8006c38:	2268      	movs	r2, #104	; 0x68
 8006c3a:	b570      	push	{r4, r5, r6, lr}
 8006c3c:	1e4d      	subs	r5, r1, #1
 8006c3e:	4355      	muls	r5, r2
 8006c40:	460e      	mov	r6, r1
 8006c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c46:	f7ff fa27 	bl	8006098 <_malloc_r>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	b140      	cbz	r0, 8006c60 <__sfmoreglue+0x28>
 8006c4e:	2100      	movs	r1, #0
 8006c50:	e9c0 1600 	strd	r1, r6, [r0]
 8006c54:	300c      	adds	r0, #12
 8006c56:	60a0      	str	r0, [r4, #8]
 8006c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c5c:	f7ff f9ac 	bl	8005fb8 <memset>
 8006c60:	4620      	mov	r0, r4
 8006c62:	bd70      	pop	{r4, r5, r6, pc}

08006c64 <__sfp_lock_acquire>:
 8006c64:	4801      	ldr	r0, [pc, #4]	; (8006c6c <__sfp_lock_acquire+0x8>)
 8006c66:	f000 b8b3 	b.w	8006dd0 <__retarget_lock_acquire_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	2000094d 	.word	0x2000094d

08006c70 <__sfp_lock_release>:
 8006c70:	4801      	ldr	r0, [pc, #4]	; (8006c78 <__sfp_lock_release+0x8>)
 8006c72:	f000 b8ae 	b.w	8006dd2 <__retarget_lock_release_recursive>
 8006c76:	bf00      	nop
 8006c78:	2000094d 	.word	0x2000094d

08006c7c <__sinit_lock_acquire>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	; (8006c84 <__sinit_lock_acquire+0x8>)
 8006c7e:	f000 b8a7 	b.w	8006dd0 <__retarget_lock_acquire_recursive>
 8006c82:	bf00      	nop
 8006c84:	2000094e 	.word	0x2000094e

08006c88 <__sinit_lock_release>:
 8006c88:	4801      	ldr	r0, [pc, #4]	; (8006c90 <__sinit_lock_release+0x8>)
 8006c8a:	f000 b8a2 	b.w	8006dd2 <__retarget_lock_release_recursive>
 8006c8e:	bf00      	nop
 8006c90:	2000094e 	.word	0x2000094e

08006c94 <__sinit>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	4604      	mov	r4, r0
 8006c98:	f7ff fff0 	bl	8006c7c <__sinit_lock_acquire>
 8006c9c:	69a3      	ldr	r3, [r4, #24]
 8006c9e:	b11b      	cbz	r3, 8006ca8 <__sinit+0x14>
 8006ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca4:	f7ff bff0 	b.w	8006c88 <__sinit_lock_release>
 8006ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cac:	6523      	str	r3, [r4, #80]	; 0x50
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <__sinit+0x68>)
 8006cb0:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <__sinit+0x6c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	bf08      	it	eq
 8006cba:	2301      	moveq	r3, #1
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	bf08      	it	eq
 8006cc0:	61a3      	streq	r3, [r4, #24]
 8006cc2:	f000 f81f 	bl	8006d04 <__sfp>
 8006cc6:	6060      	str	r0, [r4, #4]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 f81b 	bl	8006d04 <__sfp>
 8006cce:	60a0      	str	r0, [r4, #8]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 f817 	bl	8006d04 <__sfp>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2104      	movs	r1, #4
 8006cda:	60e0      	str	r0, [r4, #12]
 8006cdc:	6860      	ldr	r0, [r4, #4]
 8006cde:	f7ff ff81 	bl	8006be4 <std>
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	2109      	movs	r1, #9
 8006ce6:	68a0      	ldr	r0, [r4, #8]
 8006ce8:	f7ff ff7c 	bl	8006be4 <std>
 8006cec:	2202      	movs	r2, #2
 8006cee:	2112      	movs	r1, #18
 8006cf0:	68e0      	ldr	r0, [r4, #12]
 8006cf2:	f7ff ff77 	bl	8006be4 <std>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61a3      	str	r3, [r4, #24]
 8006cfa:	e7d1      	b.n	8006ca0 <__sinit+0xc>
 8006cfc:	0800e104 	.word	0x0800e104
 8006d00:	08006c2d 	.word	0x08006c2d

08006d04 <__sfp>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	4607      	mov	r7, r0
 8006d08:	f7ff ffac 	bl	8006c64 <__sfp_lock_acquire>
 8006d0c:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <__sfp+0x84>)
 8006d0e:	681e      	ldr	r6, [r3, #0]
 8006d10:	69b3      	ldr	r3, [r6, #24]
 8006d12:	b913      	cbnz	r3, 8006d1a <__sfp+0x16>
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7ff ffbd 	bl	8006c94 <__sinit>
 8006d1a:	3648      	adds	r6, #72	; 0x48
 8006d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	d503      	bpl.n	8006d2c <__sfp+0x28>
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	b30b      	cbz	r3, 8006d6c <__sfp+0x68>
 8006d28:	6836      	ldr	r6, [r6, #0]
 8006d2a:	e7f7      	b.n	8006d1c <__sfp+0x18>
 8006d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d30:	b9d5      	cbnz	r5, 8006d68 <__sfp+0x64>
 8006d32:	4b16      	ldr	r3, [pc, #88]	; (8006d8c <__sfp+0x88>)
 8006d34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d38:	60e3      	str	r3, [r4, #12]
 8006d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d3c:	f000 f847 	bl	8006dce <__retarget_lock_init_recursive>
 8006d40:	f7ff ff96 	bl	8006c70 <__sfp_lock_release>
 8006d44:	2208      	movs	r2, #8
 8006d46:	4629      	mov	r1, r5
 8006d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d50:	6025      	str	r5, [r4, #0]
 8006d52:	61a5      	str	r5, [r4, #24]
 8006d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d58:	f7ff f92e 	bl	8005fb8 <memset>
 8006d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d64:	4620      	mov	r0, r4
 8006d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d68:	3468      	adds	r4, #104	; 0x68
 8006d6a:	e7d9      	b.n	8006d20 <__sfp+0x1c>
 8006d6c:	2104      	movs	r1, #4
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f7ff ff62 	bl	8006c38 <__sfmoreglue>
 8006d74:	4604      	mov	r4, r0
 8006d76:	6030      	str	r0, [r6, #0]
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d1d5      	bne.n	8006d28 <__sfp+0x24>
 8006d7c:	f7ff ff78 	bl	8006c70 <__sfp_lock_release>
 8006d80:	230c      	movs	r3, #12
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	e7ee      	b.n	8006d64 <__sfp+0x60>
 8006d86:	bf00      	nop
 8006d88:	0800e104 	.word	0x0800e104
 8006d8c:	ffff0001 	.word	0xffff0001

08006d90 <_fwalk_reent>:
 8006d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d94:	4606      	mov	r6, r0
 8006d96:	4688      	mov	r8, r1
 8006d98:	2700      	movs	r7, #0
 8006d9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da2:	f1b9 0901 	subs.w	r9, r9, #1
 8006da6:	d505      	bpl.n	8006db4 <_fwalk_reent+0x24>
 8006da8:	6824      	ldr	r4, [r4, #0]
 8006daa:	2c00      	cmp	r4, #0
 8006dac:	d1f7      	bne.n	8006d9e <_fwalk_reent+0xe>
 8006dae:	4638      	mov	r0, r7
 8006db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db4:	89ab      	ldrh	r3, [r5, #12]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d907      	bls.n	8006dca <_fwalk_reent+0x3a>
 8006dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	d003      	beq.n	8006dca <_fwalk_reent+0x3a>
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	47c0      	blx	r8
 8006dc8:	4307      	orrs	r7, r0
 8006dca:	3568      	adds	r5, #104	; 0x68
 8006dcc:	e7e9      	b.n	8006da2 <_fwalk_reent+0x12>

08006dce <__retarget_lock_init_recursive>:
 8006dce:	4770      	bx	lr

08006dd0 <__retarget_lock_acquire_recursive>:
 8006dd0:	4770      	bx	lr

08006dd2 <__retarget_lock_release_recursive>:
 8006dd2:	4770      	bx	lr

08006dd4 <__swhatbuf_r>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	460e      	mov	r6, r1
 8006dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ddc:	4614      	mov	r4, r2
 8006dde:	2900      	cmp	r1, #0
 8006de0:	461d      	mov	r5, r3
 8006de2:	b096      	sub	sp, #88	; 0x58
 8006de4:	da08      	bge.n	8006df8 <__swhatbuf_r+0x24>
 8006de6:	2200      	movs	r2, #0
 8006de8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dec:	602a      	str	r2, [r5, #0]
 8006dee:	061a      	lsls	r2, r3, #24
 8006df0:	d410      	bmi.n	8006e14 <__swhatbuf_r+0x40>
 8006df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df6:	e00e      	b.n	8006e16 <__swhatbuf_r+0x42>
 8006df8:	466a      	mov	r2, sp
 8006dfa:	f000 fac7 	bl	800738c <_fstat_r>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	dbf1      	blt.n	8006de6 <__swhatbuf_r+0x12>
 8006e02:	9a01      	ldr	r2, [sp, #4]
 8006e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e0c:	425a      	negs	r2, r3
 8006e0e:	415a      	adcs	r2, r3
 8006e10:	602a      	str	r2, [r5, #0]
 8006e12:	e7ee      	b.n	8006df2 <__swhatbuf_r+0x1e>
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	2000      	movs	r0, #0
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	b016      	add	sp, #88	; 0x58
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e20 <__smakebuf_r>:
 8006e20:	898b      	ldrh	r3, [r1, #12]
 8006e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e24:	079d      	lsls	r5, r3, #30
 8006e26:	4606      	mov	r6, r0
 8006e28:	460c      	mov	r4, r1
 8006e2a:	d507      	bpl.n	8006e3c <__smakebuf_r+0x1c>
 8006e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	6123      	str	r3, [r4, #16]
 8006e34:	2301      	movs	r3, #1
 8006e36:	6163      	str	r3, [r4, #20]
 8006e38:	b002      	add	sp, #8
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	466a      	mov	r2, sp
 8006e3e:	ab01      	add	r3, sp, #4
 8006e40:	f7ff ffc8 	bl	8006dd4 <__swhatbuf_r>
 8006e44:	9900      	ldr	r1, [sp, #0]
 8006e46:	4605      	mov	r5, r0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff f925 	bl	8006098 <_malloc_r>
 8006e4e:	b948      	cbnz	r0, 8006e64 <__smakebuf_r+0x44>
 8006e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e54:	059a      	lsls	r2, r3, #22
 8006e56:	d4ef      	bmi.n	8006e38 <__smakebuf_r+0x18>
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	f043 0302 	orr.w	r3, r3, #2
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	e7e3      	b.n	8006e2c <__smakebuf_r+0xc>
 8006e64:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <__smakebuf_r+0x7c>)
 8006e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	6020      	str	r0, [r4, #0]
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	6120      	str	r0, [r4, #16]
 8006e76:	6163      	str	r3, [r4, #20]
 8006e78:	9b01      	ldr	r3, [sp, #4]
 8006e7a:	b15b      	cbz	r3, 8006e94 <__smakebuf_r+0x74>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e82:	f000 fa95 	bl	80073b0 <_isatty_r>
 8006e86:	b128      	cbz	r0, 8006e94 <__smakebuf_r+0x74>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	89a0      	ldrh	r0, [r4, #12]
 8006e96:	4305      	orrs	r5, r0
 8006e98:	81a5      	strh	r5, [r4, #12]
 8006e9a:	e7cd      	b.n	8006e38 <__smakebuf_r+0x18>
 8006e9c:	08006c2d 	.word	0x08006c2d

08006ea0 <memchr>:
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	b2c9      	uxtb	r1, r1
 8006ea6:	4402      	add	r2, r0
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	d101      	bne.n	8006eb2 <memchr+0x12>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e003      	b.n	8006eba <memchr+0x1a>
 8006eb2:	7804      	ldrb	r4, [r0, #0]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	428c      	cmp	r4, r1
 8006eb8:	d1f6      	bne.n	8006ea8 <memchr+0x8>
 8006eba:	bd10      	pop	{r4, pc}

08006ebc <memcpy>:
 8006ebc:	440a      	add	r2, r1
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec4:	d100      	bne.n	8006ec8 <memcpy+0xc>
 8006ec6:	4770      	bx	lr
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed4:	d1f9      	bne.n	8006eca <memcpy+0xe>
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <memmove>:
 8006ed8:	4288      	cmp	r0, r1
 8006eda:	b510      	push	{r4, lr}
 8006edc:	eb01 0402 	add.w	r4, r1, r2
 8006ee0:	d902      	bls.n	8006ee8 <memmove+0x10>
 8006ee2:	4284      	cmp	r4, r0
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	d807      	bhi.n	8006ef8 <memmove+0x20>
 8006ee8:	1e43      	subs	r3, r0, #1
 8006eea:	42a1      	cmp	r1, r4
 8006eec:	d008      	beq.n	8006f00 <memmove+0x28>
 8006eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ef6:	e7f8      	b.n	8006eea <memmove+0x12>
 8006ef8:	4601      	mov	r1, r0
 8006efa:	4402      	add	r2, r0
 8006efc:	428a      	cmp	r2, r1
 8006efe:	d100      	bne.n	8006f02 <memmove+0x2a>
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f0a:	e7f7      	b.n	8006efc <memmove+0x24>

08006f0c <__malloc_lock>:
 8006f0c:	4801      	ldr	r0, [pc, #4]	; (8006f14 <__malloc_lock+0x8>)
 8006f0e:	f7ff bf5f 	b.w	8006dd0 <__retarget_lock_acquire_recursive>
 8006f12:	bf00      	nop
 8006f14:	2000094c 	.word	0x2000094c

08006f18 <__malloc_unlock>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__malloc_unlock+0x8>)
 8006f1a:	f7ff bf5a 	b.w	8006dd2 <__retarget_lock_release_recursive>
 8006f1e:	bf00      	nop
 8006f20:	2000094c 	.word	0x2000094c

08006f24 <_realloc_r>:
 8006f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f28:	4680      	mov	r8, r0
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	460e      	mov	r6, r1
 8006f2e:	b921      	cbnz	r1, 8006f3a <_realloc_r+0x16>
 8006f30:	4611      	mov	r1, r2
 8006f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	f7ff b8af 	b.w	8006098 <_malloc_r>
 8006f3a:	b92a      	cbnz	r2, 8006f48 <_realloc_r+0x24>
 8006f3c:	f7ff f844 	bl	8005fc8 <_free_r>
 8006f40:	4625      	mov	r5, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f48:	f000 fa54 	bl	80073f4 <_malloc_usable_size_r>
 8006f4c:	4284      	cmp	r4, r0
 8006f4e:	4607      	mov	r7, r0
 8006f50:	d802      	bhi.n	8006f58 <_realloc_r+0x34>
 8006f52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f56:	d812      	bhi.n	8006f7e <_realloc_r+0x5a>
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	f7ff f89c 	bl	8006098 <_malloc_r>
 8006f60:	4605      	mov	r5, r0
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d0ed      	beq.n	8006f42 <_realloc_r+0x1e>
 8006f66:	42bc      	cmp	r4, r7
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	bf28      	it	cs
 8006f6e:	463a      	movcs	r2, r7
 8006f70:	f7ff ffa4 	bl	8006ebc <memcpy>
 8006f74:	4631      	mov	r1, r6
 8006f76:	4640      	mov	r0, r8
 8006f78:	f7ff f826 	bl	8005fc8 <_free_r>
 8006f7c:	e7e1      	b.n	8006f42 <_realloc_r+0x1e>
 8006f7e:	4635      	mov	r5, r6
 8006f80:	e7df      	b.n	8006f42 <_realloc_r+0x1e>

08006f82 <__ssputs_r>:
 8006f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f86:	688e      	ldr	r6, [r1, #8]
 8006f88:	4682      	mov	sl, r0
 8006f8a:	429e      	cmp	r6, r3
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	4690      	mov	r8, r2
 8006f90:	461f      	mov	r7, r3
 8006f92:	d838      	bhi.n	8007006 <__ssputs_r+0x84>
 8006f94:	898a      	ldrh	r2, [r1, #12]
 8006f96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f9a:	d032      	beq.n	8007002 <__ssputs_r+0x80>
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	6909      	ldr	r1, [r1, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	eba5 0901 	sub.w	r9, r5, r1
 8006fa6:	6965      	ldr	r5, [r4, #20]
 8006fa8:	444b      	add	r3, r9
 8006faa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fb2:	106d      	asrs	r5, r5, #1
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	bf38      	it	cc
 8006fb8:	461d      	movcc	r5, r3
 8006fba:	0553      	lsls	r3, r2, #21
 8006fbc:	d531      	bpl.n	8007022 <__ssputs_r+0xa0>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7ff f86a 	bl	8006098 <_malloc_r>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	b950      	cbnz	r0, 8006fde <__ssputs_r+0x5c>
 8006fc8:	230c      	movs	r3, #12
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295
 8006fce:	f8ca 3000 	str.w	r3, [sl]
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd8:	81a3      	strh	r3, [r4, #12]
 8006fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fde:	464a      	mov	r2, r9
 8006fe0:	6921      	ldr	r1, [r4, #16]
 8006fe2:	f7ff ff6b 	bl	8006ebc <memcpy>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff0:	81a3      	strh	r3, [r4, #12]
 8006ff2:	6126      	str	r6, [r4, #16]
 8006ff4:	444e      	add	r6, r9
 8006ff6:	6026      	str	r6, [r4, #0]
 8006ff8:	463e      	mov	r6, r7
 8006ffa:	6165      	str	r5, [r4, #20]
 8006ffc:	eba5 0509 	sub.w	r5, r5, r9
 8007000:	60a5      	str	r5, [r4, #8]
 8007002:	42be      	cmp	r6, r7
 8007004:	d900      	bls.n	8007008 <__ssputs_r+0x86>
 8007006:	463e      	mov	r6, r7
 8007008:	4632      	mov	r2, r6
 800700a:	4641      	mov	r1, r8
 800700c:	6820      	ldr	r0, [r4, #0]
 800700e:	f7ff ff63 	bl	8006ed8 <memmove>
 8007012:	68a3      	ldr	r3, [r4, #8]
 8007014:	2000      	movs	r0, #0
 8007016:	1b9b      	subs	r3, r3, r6
 8007018:	60a3      	str	r3, [r4, #8]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	4433      	add	r3, r6
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	e7db      	b.n	8006fda <__ssputs_r+0x58>
 8007022:	462a      	mov	r2, r5
 8007024:	f7ff ff7e 	bl	8006f24 <_realloc_r>
 8007028:	4606      	mov	r6, r0
 800702a:	2800      	cmp	r0, #0
 800702c:	d1e1      	bne.n	8006ff2 <__ssputs_r+0x70>
 800702e:	4650      	mov	r0, sl
 8007030:	6921      	ldr	r1, [r4, #16]
 8007032:	f7fe ffc9 	bl	8005fc8 <_free_r>
 8007036:	e7c7      	b.n	8006fc8 <__ssputs_r+0x46>

08007038 <_svfiprintf_r>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4698      	mov	r8, r3
 800703e:	898b      	ldrh	r3, [r1, #12]
 8007040:	4607      	mov	r7, r0
 8007042:	061b      	lsls	r3, r3, #24
 8007044:	460d      	mov	r5, r1
 8007046:	4614      	mov	r4, r2
 8007048:	b09d      	sub	sp, #116	; 0x74
 800704a:	d50e      	bpl.n	800706a <_svfiprintf_r+0x32>
 800704c:	690b      	ldr	r3, [r1, #16]
 800704e:	b963      	cbnz	r3, 800706a <_svfiprintf_r+0x32>
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	f7ff f821 	bl	8006098 <_malloc_r>
 8007056:	6028      	str	r0, [r5, #0]
 8007058:	6128      	str	r0, [r5, #16]
 800705a:	b920      	cbnz	r0, 8007066 <_svfiprintf_r+0x2e>
 800705c:	230c      	movs	r3, #12
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	e0d1      	b.n	800720a <_svfiprintf_r+0x1d2>
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	616b      	str	r3, [r5, #20]
 800706a:	2300      	movs	r3, #0
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	2320      	movs	r3, #32
 8007070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007074:	2330      	movs	r3, #48	; 0x30
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	f8cd 800c 	str.w	r8, [sp, #12]
 800707e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007224 <_svfiprintf_r+0x1ec>
 8007082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007086:	4623      	mov	r3, r4
 8007088:	469a      	mov	sl, r3
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	b10a      	cbz	r2, 8007094 <_svfiprintf_r+0x5c>
 8007090:	2a25      	cmp	r2, #37	; 0x25
 8007092:	d1f9      	bne.n	8007088 <_svfiprintf_r+0x50>
 8007094:	ebba 0b04 	subs.w	fp, sl, r4
 8007098:	d00b      	beq.n	80070b2 <_svfiprintf_r+0x7a>
 800709a:	465b      	mov	r3, fp
 800709c:	4622      	mov	r2, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ff6e 	bl	8006f82 <__ssputs_r>
 80070a6:	3001      	adds	r0, #1
 80070a8:	f000 80aa 	beq.w	8007200 <_svfiprintf_r+0x1c8>
 80070ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ae:	445a      	add	r2, fp
 80070b0:	9209      	str	r2, [sp, #36]	; 0x24
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a2 	beq.w	8007200 <_svfiprintf_r+0x1c8>
 80070bc:	2300      	movs	r3, #0
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c6:	f10a 0a01 	add.w	sl, sl, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d2:	931a      	str	r3, [sp, #104]	; 0x68
 80070d4:	4654      	mov	r4, sl
 80070d6:	2205      	movs	r2, #5
 80070d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070dc:	4851      	ldr	r0, [pc, #324]	; (8007224 <_svfiprintf_r+0x1ec>)
 80070de:	f7ff fedf 	bl	8006ea0 <memchr>
 80070e2:	9a04      	ldr	r2, [sp, #16]
 80070e4:	b9d8      	cbnz	r0, 800711e <_svfiprintf_r+0xe6>
 80070e6:	06d0      	lsls	r0, r2, #27
 80070e8:	bf44      	itt	mi
 80070ea:	2320      	movmi	r3, #32
 80070ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f0:	0711      	lsls	r1, r2, #28
 80070f2:	bf44      	itt	mi
 80070f4:	232b      	movmi	r3, #43	; 0x2b
 80070f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fa:	f89a 3000 	ldrb.w	r3, [sl]
 80070fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007100:	d015      	beq.n	800712e <_svfiprintf_r+0xf6>
 8007102:	4654      	mov	r4, sl
 8007104:	2000      	movs	r0, #0
 8007106:	f04f 0c0a 	mov.w	ip, #10
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	4621      	mov	r1, r4
 800710e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007112:	3b30      	subs	r3, #48	; 0x30
 8007114:	2b09      	cmp	r3, #9
 8007116:	d94e      	bls.n	80071b6 <_svfiprintf_r+0x17e>
 8007118:	b1b0      	cbz	r0, 8007148 <_svfiprintf_r+0x110>
 800711a:	9207      	str	r2, [sp, #28]
 800711c:	e014      	b.n	8007148 <_svfiprintf_r+0x110>
 800711e:	eba0 0308 	sub.w	r3, r0, r8
 8007122:	fa09 f303 	lsl.w	r3, r9, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	46a2      	mov	sl, r4
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	e7d2      	b.n	80070d4 <_svfiprintf_r+0x9c>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	1d19      	adds	r1, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9103      	str	r1, [sp, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfbb      	ittet	lt
 800713a:	425b      	neglt	r3, r3
 800713c:	f042 0202 	orrlt.w	r2, r2, #2
 8007140:	9307      	strge	r3, [sp, #28]
 8007142:	9307      	strlt	r3, [sp, #28]
 8007144:	bfb8      	it	lt
 8007146:	9204      	strlt	r2, [sp, #16]
 8007148:	7823      	ldrb	r3, [r4, #0]
 800714a:	2b2e      	cmp	r3, #46	; 0x2e
 800714c:	d10c      	bne.n	8007168 <_svfiprintf_r+0x130>
 800714e:	7863      	ldrb	r3, [r4, #1]
 8007150:	2b2a      	cmp	r3, #42	; 0x2a
 8007152:	d135      	bne.n	80071c0 <_svfiprintf_r+0x188>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	3402      	adds	r4, #2
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	9203      	str	r2, [sp, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bfb8      	it	lt
 8007162:	f04f 33ff 	movlt.w	r3, #4294967295
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007228 <_svfiprintf_r+0x1f0>
 800716c:	2203      	movs	r2, #3
 800716e:	4650      	mov	r0, sl
 8007170:	7821      	ldrb	r1, [r4, #0]
 8007172:	f7ff fe95 	bl	8006ea0 <memchr>
 8007176:	b140      	cbz	r0, 800718a <_svfiprintf_r+0x152>
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	eba0 000a 	sub.w	r0, r0, sl
 800717e:	fa03 f000 	lsl.w	r0, r3, r0
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	3401      	adds	r4, #1
 8007186:	4303      	orrs	r3, r0
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718e:	2206      	movs	r2, #6
 8007190:	4826      	ldr	r0, [pc, #152]	; (800722c <_svfiprintf_r+0x1f4>)
 8007192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007196:	f7ff fe83 	bl	8006ea0 <memchr>
 800719a:	2800      	cmp	r0, #0
 800719c:	d038      	beq.n	8007210 <_svfiprintf_r+0x1d8>
 800719e:	4b24      	ldr	r3, [pc, #144]	; (8007230 <_svfiprintf_r+0x1f8>)
 80071a0:	bb1b      	cbnz	r3, 80071ea <_svfiprintf_r+0x1b2>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	3307      	adds	r3, #7
 80071a6:	f023 0307 	bic.w	r3, r3, #7
 80071aa:	3308      	adds	r3, #8
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b0:	4433      	add	r3, r6
 80071b2:	9309      	str	r3, [sp, #36]	; 0x24
 80071b4:	e767      	b.n	8007086 <_svfiprintf_r+0x4e>
 80071b6:	460c      	mov	r4, r1
 80071b8:	2001      	movs	r0, #1
 80071ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80071be:	e7a5      	b.n	800710c <_svfiprintf_r+0xd4>
 80071c0:	2300      	movs	r3, #0
 80071c2:	f04f 0c0a 	mov.w	ip, #10
 80071c6:	4619      	mov	r1, r3
 80071c8:	3401      	adds	r4, #1
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	4620      	mov	r0, r4
 80071ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d2:	3a30      	subs	r2, #48	; 0x30
 80071d4:	2a09      	cmp	r2, #9
 80071d6:	d903      	bls.n	80071e0 <_svfiprintf_r+0x1a8>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0c5      	beq.n	8007168 <_svfiprintf_r+0x130>
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	e7c3      	b.n	8007168 <_svfiprintf_r+0x130>
 80071e0:	4604      	mov	r4, r0
 80071e2:	2301      	movs	r3, #1
 80071e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e8:	e7f0      	b.n	80071cc <_svfiprintf_r+0x194>
 80071ea:	ab03      	add	r3, sp, #12
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	462a      	mov	r2, r5
 80071f0:	4638      	mov	r0, r7
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <_svfiprintf_r+0x1fc>)
 80071f4:	a904      	add	r1, sp, #16
 80071f6:	f3af 8000 	nop.w
 80071fa:	1c42      	adds	r2, r0, #1
 80071fc:	4606      	mov	r6, r0
 80071fe:	d1d6      	bne.n	80071ae <_svfiprintf_r+0x176>
 8007200:	89ab      	ldrh	r3, [r5, #12]
 8007202:	065b      	lsls	r3, r3, #25
 8007204:	f53f af2c 	bmi.w	8007060 <_svfiprintf_r+0x28>
 8007208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720a:	b01d      	add	sp, #116	; 0x74
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007210:	ab03      	add	r3, sp, #12
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	462a      	mov	r2, r5
 8007216:	4638      	mov	r0, r7
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <_svfiprintf_r+0x1fc>)
 800721a:	a904      	add	r1, sp, #16
 800721c:	f7ff f978 	bl	8006510 <_printf_i>
 8007220:	e7eb      	b.n	80071fa <_svfiprintf_r+0x1c2>
 8007222:	bf00      	nop
 8007224:	0800e108 	.word	0x0800e108
 8007228:	0800e10e 	.word	0x0800e10e
 800722c:	0800e112 	.word	0x0800e112
 8007230:	00000000 	.word	0x00000000
 8007234:	08006f83 	.word	0x08006f83

08007238 <_raise_r>:
 8007238:	291f      	cmp	r1, #31
 800723a:	b538      	push	{r3, r4, r5, lr}
 800723c:	4604      	mov	r4, r0
 800723e:	460d      	mov	r5, r1
 8007240:	d904      	bls.n	800724c <_raise_r+0x14>
 8007242:	2316      	movs	r3, #22
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800724e:	b112      	cbz	r2, 8007256 <_raise_r+0x1e>
 8007250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007254:	b94b      	cbnz	r3, 800726a <_raise_r+0x32>
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f830 	bl	80072bc <_getpid_r>
 800725c:	462a      	mov	r2, r5
 800725e:	4601      	mov	r1, r0
 8007260:	4620      	mov	r0, r4
 8007262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007266:	f000 b817 	b.w	8007298 <_kill_r>
 800726a:	2b01      	cmp	r3, #1
 800726c:	d00a      	beq.n	8007284 <_raise_r+0x4c>
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	d103      	bne.n	800727a <_raise_r+0x42>
 8007272:	2316      	movs	r3, #22
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	2001      	movs	r0, #1
 8007278:	e7e7      	b.n	800724a <_raise_r+0x12>
 800727a:	2400      	movs	r4, #0
 800727c:	4628      	mov	r0, r5
 800727e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007282:	4798      	blx	r3
 8007284:	2000      	movs	r0, #0
 8007286:	e7e0      	b.n	800724a <_raise_r+0x12>

08007288 <raise>:
 8007288:	4b02      	ldr	r3, [pc, #8]	; (8007294 <raise+0xc>)
 800728a:	4601      	mov	r1, r0
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	f7ff bfd3 	b.w	8007238 <_raise_r>
 8007292:	bf00      	nop
 8007294:	20000094 	.word	0x20000094

08007298 <_kill_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	2300      	movs	r3, #0
 800729c:	4d06      	ldr	r5, [pc, #24]	; (80072b8 <_kill_r+0x20>)
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f7fb faed 	bl	8002884 <_kill>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d102      	bne.n	80072b4 <_kill_r+0x1c>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b103      	cbz	r3, 80072b4 <_kill_r+0x1c>
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	20000950 	.word	0x20000950

080072bc <_getpid_r>:
 80072bc:	f7fb badb 	b.w	8002876 <_getpid>

080072c0 <__sread>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	460c      	mov	r4, r1
 80072c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c8:	f000 f89c 	bl	8007404 <_read_r>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	bfab      	itete	ge
 80072d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072d2:	89a3      	ldrhlt	r3, [r4, #12]
 80072d4:	181b      	addge	r3, r3, r0
 80072d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072da:	bfac      	ite	ge
 80072dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80072de:	81a3      	strhlt	r3, [r4, #12]
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <__swrite>:
 80072e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e6:	461f      	mov	r7, r3
 80072e8:	898b      	ldrh	r3, [r1, #12]
 80072ea:	4605      	mov	r5, r0
 80072ec:	05db      	lsls	r3, r3, #23
 80072ee:	460c      	mov	r4, r1
 80072f0:	4616      	mov	r6, r2
 80072f2:	d505      	bpl.n	8007300 <__swrite+0x1e>
 80072f4:	2302      	movs	r3, #2
 80072f6:	2200      	movs	r2, #0
 80072f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fc:	f000 f868 	bl	80073d0 <_lseek_r>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	4632      	mov	r2, r6
 8007304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	4628      	mov	r0, r5
 800730c:	463b      	mov	r3, r7
 800730e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007316:	f000 b817 	b.w	8007348 <_write_r>

0800731a <__sseek>:
 800731a:	b510      	push	{r4, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007322:	f000 f855 	bl	80073d0 <_lseek_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	bf15      	itete	ne
 800732c:	6560      	strne	r0, [r4, #84]	; 0x54
 800732e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007336:	81a3      	strheq	r3, [r4, #12]
 8007338:	bf18      	it	ne
 800733a:	81a3      	strhne	r3, [r4, #12]
 800733c:	bd10      	pop	{r4, pc}

0800733e <__sclose>:
 800733e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007342:	f000 b813 	b.w	800736c <_close_r>
	...

08007348 <_write_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4604      	mov	r4, r0
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	2200      	movs	r2, #0
 8007352:	4d05      	ldr	r5, [pc, #20]	; (8007368 <_write_r+0x20>)
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f7f9 fe5f 	bl	800101a <_write>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_write_r+0x1e>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_write_r+0x1e>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20000950 	.word	0x20000950

0800736c <_close_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	2300      	movs	r3, #0
 8007370:	4d05      	ldr	r5, [pc, #20]	; (8007388 <_close_r+0x1c>)
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7fb fabb 	bl	80028f2 <_close>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_close_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_close_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20000950 	.word	0x20000950

0800738c <_fstat_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	2300      	movs	r3, #0
 8007390:	4d06      	ldr	r5, [pc, #24]	; (80073ac <_fstat_r+0x20>)
 8007392:	4604      	mov	r4, r0
 8007394:	4608      	mov	r0, r1
 8007396:	4611      	mov	r1, r2
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	f7fb fab5 	bl	8002908 <_fstat>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d102      	bne.n	80073a8 <_fstat_r+0x1c>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	b103      	cbz	r3, 80073a8 <_fstat_r+0x1c>
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
 80073aa:	bf00      	nop
 80073ac:	20000950 	.word	0x20000950

080073b0 <_isatty_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	2300      	movs	r3, #0
 80073b4:	4d05      	ldr	r5, [pc, #20]	; (80073cc <_isatty_r+0x1c>)
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fb fab3 	bl	8002926 <_isatty>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_isatty_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_isatty_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000950 	.word	0x20000950

080073d0 <_lseek_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4604      	mov	r4, r0
 80073d4:	4608      	mov	r0, r1
 80073d6:	4611      	mov	r1, r2
 80073d8:	2200      	movs	r2, #0
 80073da:	4d05      	ldr	r5, [pc, #20]	; (80073f0 <_lseek_r+0x20>)
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7fb faab 	bl	800293a <_lseek>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_lseek_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_lseek_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000950 	.word	0x20000950

080073f4 <_malloc_usable_size_r>:
 80073f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f8:	1f18      	subs	r0, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfbc      	itt	lt
 80073fe:	580b      	ldrlt	r3, [r1, r0]
 8007400:	18c0      	addlt	r0, r0, r3
 8007402:	4770      	bx	lr

08007404 <_read_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	2200      	movs	r2, #0
 800740e:	4d05      	ldr	r5, [pc, #20]	; (8007424 <_read_r+0x20>)
 8007410:	602a      	str	r2, [r5, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f7fb fa50 	bl	80028b8 <_read>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_read_r+0x1e>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_read_r+0x1e>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20000950 	.word	0x20000950

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr
