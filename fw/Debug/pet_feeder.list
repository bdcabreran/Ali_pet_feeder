
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006d94  080074f8  080074f8  000174f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e28c  0800e28c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e28c  0800e28c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e28c  0800e28c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e28c  0800e28c  0001e28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e290  0800e290  0001e290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800e294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000100  0800e390  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000095c  0800e390  0002095c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b9a  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040bd  00000000  00000000  00036cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  0003ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b9df  00000000  00000000  0003c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d7fb  00000000  00000000  00057f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096def  00000000  00000000  00075752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010c541  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001570  00000000  00000000  0010c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c7c  00000000  00000000  0010db08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	080074e0 	.word	0x080074e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	080074e0 	.word	0x080074e0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2iz>:
 8000988:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000990:	d30f      	bcc.n	80009b2 <__aeabi_f2iz+0x2a>
 8000992:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d90d      	bls.n	80009b8 <__aeabi_f2iz+0x30>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	bf18      	it	ne
 80009ae:	4240      	negne	r0, r0
 80009b0:	4770      	bx	lr
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	4770      	bx	lr
 80009b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009bc:	d101      	bne.n	80009c2 <__aeabi_f2iz+0x3a>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d105      	bne.n	80009ce <__aeabi_f2iz+0x46>
 80009c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009c6:	bf08      	it	eq
 80009c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <btn_debounce_init>:
#include "event_manager_fsm.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <btn_debounce_init+0x84>)
 80009e0:	611a      	str	r2, [r3, #16]
    btn->down.gpio.pin  = DOWN_Pin;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2220      	movs	r2, #32
 80009e6:	829a      	strh	r2, [r3, #20]
    btn->up.gpio.port = UP_GPIO_Port;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <btn_debounce_init+0x84>)
 80009ec:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2210      	movs	r2, #16
 80009f2:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <btn_debounce_init+0x88>)
 80009f8:	621a      	str	r2, [r3, #32]
    btn->left.gpio.pin = LEFT_Pin;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2220      	movs	r2, #32
 80009fe:	849a      	strh	r2, [r3, #36]	; 0x24
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <btn_debounce_init+0x88>)
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
    btn->right.gpio.pin = RIGHT_Pin;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	869a      	strh	r2, [r3, #52]	; 0x34
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <btn_debounce_init+0x8c>)
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40
    btn->enter.gpio.pin = ENTER_Pin;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e00d      	b.n	8000a44 <btn_debounce_init+0x70>
    {
        time_event_stop(&btn_ptr->debounce);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fdab 	bl	8001588 <time_event_stop>
        btn_ptr->pressed = false;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2200      	movs	r2, #0
 8000a36:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	3301      	adds	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d3ed      	bcc.n	8000a28 <btn_debounce_init+0x54>
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <btn_key_enter_combination>:

static btn_ev_ext_t btn_key_enter_combination(navigation_btn_t *btn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    if (btn->down.pressed)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7f1b      	ldrb	r3, [r3, #28]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d022      	beq.n	8000aba <btn_key_enter_combination+0x56>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f004 fab7 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d111      	bne.n	8000ab0 <btn_key_enter_combination+0x4c>
        {
            if(time_event_is_active(&btn->enter.debounce))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3348      	adds	r3, #72	; 0x48
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fd8b 	bl	80015ac <time_event_is_active>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <btn_key_enter_combination+0x42>
                time_event_stop(&btn->enter.debounce);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3348      	adds	r3, #72	; 0x48
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fd71 	bl	8001588 <time_event_stop>

            printf("btn down + enter pressed\r\n");
 8000aa6:	4843      	ldr	r0, [pc, #268]	; (8000bb4 <btn_key_enter_combination+0x150>)
 8000aa8:	f005 ff3a 	bl	8006920 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000aac:	2307      	movs	r3, #7
 8000aae:	e07c      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn down pressed\r\n");
 8000ab0:	4841      	ldr	r0, [pc, #260]	; (8000bb8 <btn_key_enter_combination+0x154>)
 8000ab2:	f005 ff35 	bl	8006920 <puts>
            return EVT_EXT_BTN_DOWN_PRESSED;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e077      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->up.pressed)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7b1b      	ldrb	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d022      	beq.n	8000b08 <btn_key_enter_combination+0xa4>
    {
        if (HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000acc:	4619      	mov	r1, r3
 8000ace:	4610      	mov	r0, r2
 8000ad0:	f004 fa90 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <btn_key_enter_combination+0x9a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3348      	adds	r3, #72	; 0x48
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd64 	bl	80015ac <time_event_is_active>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d004      	beq.n	8000af4 <btn_key_enter_combination+0x90>
                time_event_stop(&btn->enter.debounce);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3348      	adds	r3, #72	; 0x48
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fd4a 	bl	8001588 <time_event_stop>

            printf("btn up + enter pressed\r\n");
 8000af4:	4831      	ldr	r0, [pc, #196]	; (8000bbc <btn_key_enter_combination+0x158>)
 8000af6:	f005 ff13 	bl	8006920 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000afa:	2306      	movs	r3, #6
 8000afc:	e055      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn up pressed\r\n");
 8000afe:	4830      	ldr	r0, [pc, #192]	; (8000bc0 <btn_key_enter_combination+0x15c>)
 8000b00:	f005 ff0e 	bl	8006920 <puts>
            return EVT_EXT_BTN_UP_PRESSED;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e050      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->left.pressed)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d022      	beq.n	8000b58 <btn_key_enter_combination+0xf4>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4610      	mov	r0, r2
 8000b20:	f004 fa68 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <btn_key_enter_combination+0xea>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3348      	adds	r3, #72	; 0x48
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fd3c 	bl	80015ac <time_event_is_active>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <btn_key_enter_combination+0xe0>
                time_event_stop(&btn->enter.debounce);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fd22 	bl	8001588 <time_event_stop>
            
            printf("btn left + enter pressed\r\n");
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <btn_key_enter_combination+0x160>)
 8000b46:	f005 feeb 	bl	8006920 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	e02d      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else 
        {
            printf("btn left pressed\r\n");
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <btn_key_enter_combination+0x164>)
 8000b50:	f005 fee6 	bl	8006920 <puts>
            return EVT_EXT_BTN_LEFT_PRESSED;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e028      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->right.pressed)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d022      	beq.n	8000ba8 <btn_key_enter_combination+0x144>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f004 fa40 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d111      	bne.n	8000b9e <btn_key_enter_combination+0x13a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3348      	adds	r3, #72	; 0x48
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fd14 	bl	80015ac <time_event_is_active>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d004      	beq.n	8000b94 <btn_key_enter_combination+0x130>
                time_event_stop(&btn->enter.debounce);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3348      	adds	r3, #72	; 0x48
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fcfa 	bl	8001588 <time_event_stop>
            
            printf("btn right + enter pressed\r\n");
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <btn_key_enter_combination+0x168>)
 8000b96:	f005 fec3 	bl	8006920 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	e005      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn right pressed\r\n");
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <btn_key_enter_combination+0x16c>)
 8000ba0:	f005 febe 	bl	8006920 <puts>
            return EVT_EXT_BTN_RIGHT_PRESSED;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e000      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    return EVT_EXT_BTN_INVALID;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	080074f8 	.word	0x080074f8
 8000bb8:	08007514 	.word	0x08007514
 8000bbc:	08007528 	.word	0x08007528
 8000bc0:	08007540 	.word	0x08007540
 8000bc4:	08007550 	.word	0x08007550
 8000bc8:	0800756c 	.word	0x0800756c
 8000bcc:	08007580 	.word	0x08007580
 8000bd0:	0800759c 	.word	0x0800759c

08000bd4 <btn_enter_key_combination>:


static btn_ev_ext_t btn_enter_key_combination(navigation_btn_t *btn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    if (btn->enter.pressed)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d078      	beq.n	8000cd8 <btn_enter_key_combination+0x104>
    {
        if (HAL_GPIO_ReadPin(btn->down.gpio.port, btn->down.gpio.pin) == GPIO_PIN_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	8a9b      	ldrh	r3, [r3, #20]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	f004 f9ff 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <btn_enter_key_combination+0x4c>
        {
            if (time_event_is_active(&btn->down.debounce))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3318      	adds	r3, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fcd3 	bl	80015ac <time_event_is_active>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d004      	beq.n	8000c16 <btn_enter_key_combination+0x42>
                time_event_stop(&btn->down.debounce);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fcb9 	bl	8001588 <time_event_stop>
            printf("btn enter + down pressed\r\n");
 8000c16:	4833      	ldr	r0, [pc, #204]	; (8000ce4 <btn_enter_key_combination+0x110>)
 8000c18:	f005 fe82 	bl	8006920 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	e05c      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->up.gpio.port, btn->up.gpio.pin) == GPIO_PIN_RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f004 f9e2 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d111      	bne.n	8000c5a <btn_enter_key_combination+0x86>
        {
            if (time_event_is_active(&btn->up.debounce))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcb6 	bl	80015ac <time_event_is_active>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <btn_enter_key_combination+0x7c>
                time_event_stop(&btn->up.debounce);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3308      	adds	r3, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fc9c 	bl	8001588 <time_event_stop>
            printf("btn enter + up pressed\r\n");
 8000c50:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <btn_enter_key_combination+0x114>)
 8000c52:	f005 fe65 	bl	8006920 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000c56:	2306      	movs	r3, #6
 8000c58:	e03f      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->left.gpio.port, btn->left.gpio.pin) == GPIO_PIN_RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f004 f9c5 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <btn_enter_key_combination+0xc0>
        {
            if (time_event_is_active(&btn->left.debounce))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3328      	adds	r3, #40	; 0x28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fc99 	bl	80015ac <time_event_is_active>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d004      	beq.n	8000c8a <btn_enter_key_combination+0xb6>
                time_event_stop(&btn->left.debounce);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3328      	adds	r3, #40	; 0x28
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fc7f 	bl	8001588 <time_event_stop>
            printf("btn enter + left pressed\r\n");
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <btn_enter_key_combination+0x118>)
 8000c8c:	f005 fe48 	bl	8006920 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000c90:	2308      	movs	r3, #8
 8000c92:	e022      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->right.gpio.port, btn->right.gpio.pin) == GPIO_PIN_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f004 f9a8 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <btn_enter_key_combination+0xfa>
        {
            if (time_event_is_active(&btn->right.debounce))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3338      	adds	r3, #56	; 0x38
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc7c 	bl	80015ac <time_event_is_active>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <btn_enter_key_combination+0xf0>
                time_event_stop(&btn->right.debounce);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3338      	adds	r3, #56	; 0x38
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fc62 	bl	8001588 <time_event_stop>
            printf("btn enter + right pressed\r\n");
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <btn_enter_key_combination+0x11c>)
 8000cc6:	f005 fe2b 	bl	8006920 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	e005      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
        else
        {
            printf("btn enter pressed\r\n");
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <btn_enter_key_combination+0x120>)
 8000cd0:	f005 fe26 	bl	8006920 <puts>
            return EVT_EXT_BTN_ENTER_PRESSED;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e000      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
    }
    return EVT_EXT_BTN_INVALID;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	080075b0 	.word	0x080075b0
 8000ce8:	080075cc 	.word	0x080075cc
 8000cec:	080075e4 	.word	0x080075e4
 8000cf0:	08007600 	.word	0x08007600
 8000cf4:	0800761c 	.word	0x0800761c

08000cf8 <poll_down_key_pressed>:

static void poll_down_key_pressed(navigation_btn_t *btn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    static GPIO_PinState pin_st = GPIO_PIN_SET;
    if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) != pin_st)
 8000d00:	2120      	movs	r1, #32
 8000d02:	4812      	ldr	r0, [pc, #72]	; (8000d4c <poll_down_key_pressed+0x54>)
 8000d04:	f004 f976 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <poll_down_key_pressed+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d016      	beq.n	8000d42 <poll_down_key_pressed+0x4a>
    {
        pin_st = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 8000d14:	2120      	movs	r1, #32
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <poll_down_key_pressed+0x54>)
 8000d18:	f004 f96c 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <poll_down_key_pressed+0x58>)
 8000d22:	701a      	strb	r2, [r3, #0]
        if(!time_event_is_active(&btn->down.debounce))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3318      	adds	r3, #24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fc3f 	bl	80015ac <time_event_is_active>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <poll_down_key_pressed+0x4a>
            time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 8000d3a:	2132      	movs	r1, #50	; 0x32
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <poll_down_key_pressed+0x5c>)
 8000d3e:	f000 fc0f 	bl	8001560 <time_event_start>
    }
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	20000020 	.word	0x20000020
 8000d54:	20000134 	.word	0x20000134

08000d58 <btn_debounce_run>:

void btn_debounce_run(navigation_btn_t *btn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09c      	sub	sp, #112	; 0x70
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    /*down button cannot be set IT mode, we have to do polling*/
    poll_down_key_pressed(btn);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ffc9 	bl	8000cf8 <poll_down_key_pressed>

    /*update debounce time for all buttons */
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000d66:	2305      	movs	r3, #5
 8000d68:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    push_button_t *btn_ptr = &btn->up;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	66fb      	str	r3, [r7, #108]	; 0x6c

    for (size_t i = 0; i < btn_cnt; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d74:	e025      	b.n	8000dc2 <btn_debounce_run+0x6a>
    {
        time_event_update(&btn_ptr->debounce);
 8000d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d78:	3308      	adds	r3, #8
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fc21 	bl	80015c2 <time_event_update>
        if(time_event_is_raised(&btn_ptr->debounce))
 8000d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d82:	3308      	adds	r3, #8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fc3d 	bl	8001604 <time_event_is_raised>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d012      	beq.n	8000db6 <btn_debounce_run+0x5e>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 8000d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d96:	889b      	ldrh	r3, [r3, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	f004 f92a 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <btn_debounce_run+0x54>
                btn_ptr->pressed = true;
 8000da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000da8:	2201      	movs	r2, #1
 8000daa:	731a      	strb	r2, [r3, #12]
            
            time_event_stop(&btn_ptr->debounce);
 8000dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dae:	3308      	adds	r3, #8
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fbe9 	bl	8001588 <time_event_stop>
        }
        btn_ptr++;
 8000db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000db8:	3310      	adds	r3, #16
 8000dba:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000dc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d3d4      	bcc.n	8000d76 <btn_debounce_run+0x1e>
    }

    /*Notify events*/
    event_t event;
    event.header.name = EVT_EXT_BTN_INVALID;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	733b      	strb	r3, [r7, #12]
    event.header.fsm_src = BTN_FSM;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	737b      	strb	r3, [r7, #13]
    event.header.fsm_dst = UI_FSM;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]
    event.header.payload_len = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

    event.header.name = btn_key_enter_combination(btn);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fe41 	bl	8000a64 <btn_key_enter_combination>
 8000de2:	4603      	mov	r3, r0
 8000de4:	733b      	strb	r3, [r7, #12]
    if(event.header.name != EVT_EXT_BTN_INVALID)
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <btn_debounce_run+0xa6>
        event_manager_write(event_manager_fsm_get(), &event);
 8000dec:	f000 fc4c 	bl	8001688 <event_manager_fsm_get>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	4610      	mov	r0, r2
 8000dfa:	f000 fd12 	bl	8001822 <event_manager_write>

    event.header.name = btn_enter_key_combination(btn);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fee8 	bl	8000bd4 <btn_enter_key_combination>
 8000e04:	4603      	mov	r3, r0
 8000e06:	733b      	strb	r3, [r7, #12]
    if(event.header.name != EVT_EXT_BTN_INVALID)
 8000e08:	7b3b      	ldrb	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d008      	beq.n	8000e20 <btn_debounce_run+0xc8>
        event_manager_write(event_manager_fsm_get(), &event);
 8000e0e:	f000 fc3b 	bl	8001688 <event_manager_fsm_get>
 8000e12:	4602      	mov	r2, r0
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	f000 fd01 	bl	8001822 <event_manager_write>

    btn_ptr = &btn->up;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	667b      	str	r3, [r7, #100]	; 0x64
 8000e28:	e008      	b.n	8000e3c <btn_debounce_run+0xe4>
    {
        btn_ptr->pressed = false;
 8000e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e32:	3310      	adds	r3, #16
 8000e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (size_t i = 0; i < btn_cnt; i++)
 8000e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e38:	3301      	adds	r3, #1
 8000e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8000e3c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000e40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3f1      	bcc.n	8000e2a <btn_debounce_run+0xd2>
    }
}
 8000e46:	bf00      	nop
 8000e48:	bf00      	nop
 8000e4a:	3770      	adds	r7, #112	; 0x70
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <event_print_info>:
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <event_print_info+0x20>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1d19      	adds	r1, r3, #4
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	78db      	ldrb	r3, [r3, #3]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2058      	movs	r0, #88	; 0x58
 8000e6c:	f000 f918 	bl	80010a0 <print_buffer>
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <event_queue_init>:
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	68b8      	ldr	r0, [r7, #8]
 8000e8c:	f000 f9da 	bl	8001244 <ring_buffer_init>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	711a      	strb	r2, [r3, #4]
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <event_queue_get_pending>:
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <event_queue_write>:
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	6838      	ldr	r0, [r7, #0]
 8000ecc:	f7ff ffc0 	bl	8000e50 <event_print_info>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6839      	ldr	r1, [r7, #0]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fac9 	bl	8001470 <ring_buffer_write>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	78db      	ldrb	r3, [r3, #3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00a      	beq.n	8000f00 <event_queue_write+0x44>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	1d19      	adds	r1, r3, #4
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	78db      	ldrb	r3, [r3, #3]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f000 faba 	bl	8001470 <ring_buffer_write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <event_queue_write+0x58>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	711a      	strb	r2, [r3, #4]
 8000f12:	e00c      	b.n	8000f2e <event_queue_write+0x72>
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <event_queue_write+0x7c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 fc7b 	bl	8006814 <iprintf>
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <event_queue_write+0x80>)
 8000f20:	f005 fcfe 	bl	8006920 <puts>
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <event_queue_write+0x7c>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 fc73 	bl	8006814 <iprintf>
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000024 	.word	0x20000024
 8000f3c:	08007630 	.word	0x08007630

08000f40 <event_queue_read>:
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa8 	bl	8000ea4 <event_queue_get_pending>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d031      	beq.n	8000fbe <event_queue_read+0x7e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	2204      	movs	r2, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fac4 	bl	80014f0 <ring_buffer_read>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	78db      	ldrb	r3, [r3, #3]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00a      	beq.n	8000f8a <event_queue_read+0x4a>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	1d19      	adds	r1, r3, #4
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	461a      	mov	r2, r3
 8000f82:	f000 fab5 	bl	80014f0 <ring_buffer_read>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <event_queue_read+0x64>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	711a      	strb	r2, [r3, #4]
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff ff57 	bl	8000e50 <event_print_info>
 8000fa2:	e00c      	b.n	8000fbe <event_queue_read+0x7e>
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <event_queue_read+0x88>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f005 fc33 	bl	8006814 <iprintf>
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <event_queue_read+0x8c>)
 8000fb0:	f005 fcb6 	bl	8006920 <puts>
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <event_queue_read+0x88>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f005 fc2b 	bl	8006814 <iprintf>
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000024 	.word	0x20000024
 8000fcc:	08007650 	.word	0x08007650

08000fd0 <ITM_SendChar>:
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fdc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d013      	beq.n	8001010 <ITM_SendChar+0x40>
 8000fe8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00b      	beq.n	8001010 <ITM_SendChar+0x40>
 8000ff8:	e000      	b.n	8000ffc <ITM_SendChar+0x2c>
 8000ffa:	bf00      	nop
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f9      	beq.n	8000ffa <ITM_SendChar+0x2a>
 8001006:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <itm_enable>:
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <itm_enable+0x2c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <itm_enable+0x2c>)
 8001026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001030:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001034:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	e000edfc 	.word	0xe000edfc

0800104c <itm_write>:
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e009      	b.n	8001070 <itm_write+0x24>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffb3 	bl	8000fd0 <ITM_SendChar>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf1      	blt.n	800105c <itm_write+0x10>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_write>:
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f7ff ffdb 	bl	800104c <itm_write>
 8001096:	4603      	mov	r3, r0
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <print_buffer>:
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <print_buffer+0x7c>)
 80010b2:	f005 fc35 	bl	8006920 <puts>
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e023      	b.n	8001104 <print_buffer+0x64>
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b43      	cmp	r3, #67	; 0x43
 80010c0:	d002      	beq.n	80010c8 <print_buffer+0x28>
 80010c2:	2b58      	cmp	r3, #88	; 0x58
 80010c4:	d009      	beq.n	80010da <print_buffer+0x3a>
 80010c6:	e011      	b.n	80010ec <print_buffer+0x4c>
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <print_buffer+0x80>)
 80010d4:	f005 fb9e 	bl	8006814 <iprintf>
 80010d8:	e011      	b.n	80010fe <print_buffer+0x5e>
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	480f      	ldr	r0, [pc, #60]	; (8001124 <print_buffer+0x84>)
 80010e6:	f005 fb95 	bl	8006814 <iprintf>
 80010ea:	e008      	b.n	80010fe <print_buffer+0x5e>
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <print_buffer+0x84>)
 80010f8:	f005 fb8c 	bl	8006814 <iprintf>
 80010fc:	bf00      	nop
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3d7      	bcc.n	80010bc <print_buffer+0x1c>
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <print_buffer+0x88>)
 800110e:	f005 fc07 	bl	8006920 <puts>
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	080076d0 	.word	0x080076d0
 8001120:	080076dc 	.word	0x080076dc
 8001124:	080076e4 	.word	0x080076e4
 8001128:	080076ec 	.word	0x080076ec

0800112c <head_ptr_advance>:
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <head_ptr_advance+0x1a>
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <head_ptr_advance+0x74>)
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <head_ptr_advance+0x78>)
 800113e:	2126      	movs	r1, #38	; 0x26
 8001140:	4819      	ldr	r0, [pc, #100]	; (80011a8 <head_ptr_advance+0x7c>)
 8001142:	f004 ff33 	bl	8005fac <__assert_func>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7c1b      	ldrb	r3, [r3, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <head_ptr_advance+0x3a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	3301      	adds	r3, #1
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68d2      	ldr	r2, [r2, #12]
 8001158:	fbb3 f1f2 	udiv	r1, r3, r2
 800115c:	fb01 f202 	mul.w	r2, r1, r2
 8001160:	1a9a      	subs	r2, r3, r2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	3301      	adds	r3, #1
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68d2      	ldr	r2, [r2, #12]
 8001170:	fbb3 f1f2 	udiv	r1, r3, r2
 8001174:	fb01 f202 	mul.w	r2, r1, r2
 8001178:	1a9a      	subs	r2, r3, r2
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	429a      	cmp	r2, r3
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	741a      	strb	r2, [r3, #16]
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	080076f0 	.word	0x080076f0
 80011a4:	0800e098 	.word	0x0800e098
 80011a8:	080076f4 	.word	0x080076f4

080011ac <tail_ptr_retreat>:
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d105      	bne.n	80011c6 <tail_ptr_retreat+0x1a>
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <tail_ptr_retreat+0x40>)
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <tail_ptr_retreat+0x44>)
 80011be:	2139      	movs	r1, #57	; 0x39
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <tail_ptr_retreat+0x48>)
 80011c2:	f004 fef3 	bl	8005fac <__assert_func>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	741a      	strb	r2, [r3, #16]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	3301      	adds	r3, #1
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68d2      	ldr	r2, [r2, #12]
 80011d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80011da:	fb01 f202 	mul.w	r2, r1, r2
 80011de:	1a9a      	subs	r2, r3, r2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	080076f0 	.word	0x080076f0
 80011f0:	0800e0ac 	.word	0x0800e0ac
 80011f4:	080076f4 	.word	0x080076f4

080011f8 <is_ring_buffer_empty>:
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <is_ring_buffer_empty+0x1a>
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <is_ring_buffer_empty+0x40>)
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <is_ring_buffer_empty+0x44>)
 800120a:	214e      	movs	r1, #78	; 0x4e
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <is_ring_buffer_empty+0x48>)
 800120e:	f004 fecd 	bl	8005fac <__assert_func>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7c1b      	ldrb	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d107      	bne.n	800122a <is_ring_buffer_empty+0x32>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d101      	bne.n	800122a <is_ring_buffer_empty+0x32>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <is_ring_buffer_empty+0x34>
 800122a:	2300      	movs	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	080076f0 	.word	0x080076f0
 800123c:	0800e0c0 	.word	0x0800e0c0
 8001240:	080076f4 	.word	0x080076f4

08001244 <ring_buffer_init>:
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <ring_buffer_init+0x16>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d105      	bne.n	8001266 <ring_buffer_init+0x22>
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <ring_buffer_init+0x74>)
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <ring_buffer_init+0x78>)
 800125e:	2169      	movs	r1, #105	; 0x69
 8001260:	4817      	ldr	r0, [pc, #92]	; (80012c0 <ring_buffer_init+0x7c>)
 8001262:	f004 fea3 	bl	8005fac <__assert_func>
 8001266:	2014      	movs	r0, #20
 8001268:	f004 fefa 	bl	8006060 <malloc>
 800126c:	4603      	mov	r3, r0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <ring_buffer_init+0x3e>
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <ring_buffer_init+0x80>)
 8001278:	4a10      	ldr	r2, [pc, #64]	; (80012bc <ring_buffer_init+0x78>)
 800127a:	216c      	movs	r1, #108	; 0x6c
 800127c:	4810      	ldr	r0, [pc, #64]	; (80012c0 <ring_buffer_init+0x7c>)
 800127e:	f004 fe95 	bl	8005fac <__assert_func>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f81c 	bl	80012cc <ring_buffer_reset>
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff ffaf 	bl	80011f8 <is_ring_buffer_empty>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d105      	bne.n	80012ac <ring_buffer_init+0x68>
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <ring_buffer_init+0x84>)
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <ring_buffer_init+0x78>)
 80012a4:	2172      	movs	r1, #114	; 0x72
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <ring_buffer_init+0x7c>)
 80012a8:	f004 fe80 	bl	8005fac <__assert_func>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08007720 	.word	0x08007720
 80012bc:	0800e0d8 	.word	0x0800e0d8
 80012c0:	080076f4 	.word	0x080076f4
 80012c4:	080076f0 	.word	0x080076f0
 80012c8:	08007730 	.word	0x08007730

080012cc <ring_buffer_reset>:
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <ring_buffer_reset+0x1a>
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <ring_buffer_reset+0x34>)
 80012dc:	4a09      	ldr	r2, [pc, #36]	; (8001304 <ring_buffer_reset+0x38>)
 80012de:	2189      	movs	r1, #137	; 0x89
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <ring_buffer_reset+0x3c>)
 80012e2:	f004 fe63 	bl	8005fac <__assert_func>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	741a      	strb	r2, [r3, #16]
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	080076f0 	.word	0x080076f0
 8001304:	0800e0ec 	.word	0x0800e0ec
 8001308:	080076f4 	.word	0x080076f4

0800130c <ring_buffer_get_data_len>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <ring_buffer_get_data_len+0x1a>
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <ring_buffer_get_data_len+0x60>)
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <ring_buffer_get_data_len+0x64>)
 800131e:	2197      	movs	r1, #151	; 0x97
 8001320:	4814      	ldr	r0, [pc, #80]	; (8001374 <ring_buffer_get_data_len+0x68>)
 8001322:	f004 fe43 	bl	8005fac <__assert_func>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7c1b      	ldrb	r3, [r3, #16]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d115      	bne.n	8001360 <ring_buffer_get_data_len+0x54>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	429a      	cmp	r2, r3
 800133e:	d306      	bcc.n	800134e <ring_buffer_get_data_len+0x42>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e008      	b.n	8001360 <ring_buffer_get_data_len+0x54>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	441a      	add	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	080076f0 	.word	0x080076f0
 8001370:	0800e100 	.word	0x0800e100
 8001374:	080076f4 	.word	0x080076f4

08001378 <ring_buffer_get_free_space>:
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <ring_buffer_get_free_space+0x1a>
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <ring_buffer_get_free_space+0x30>)
 8001388:	4a08      	ldr	r2, [pc, #32]	; (80013ac <ring_buffer_get_free_space+0x34>)
 800138a:	21be      	movs	r1, #190	; 0xbe
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <ring_buffer_get_free_space+0x38>)
 800138e:	f004 fe0d 	bl	8005fac <__assert_func>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68dc      	ldr	r4, [r3, #12]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffb8 	bl	800130c <ring_buffer_get_data_len>
 800139c:	4603      	mov	r3, r0
 800139e:	1ae3      	subs	r3, r4, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	080076f0 	.word	0x080076f0
 80013ac:	0800e11c 	.word	0x0800e11c
 80013b0:	080076f4 	.word	0x080076f4

080013b4 <ring_buffer_put>:
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <ring_buffer_put+0x1a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <ring_buffer_put+0x26>
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <ring_buffer_put+0x44>)
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <ring_buffer_put+0x48>)
 80013d2:	21ca      	movs	r1, #202	; 0xca
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <ring_buffer_put+0x4c>)
 80013d6:	f004 fde9 	bl	8005fac <__assert_func>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	78fa      	ldrb	r2, [r7, #3]
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe9f 	bl	800112c <head_ptr_advance>
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800774c 	.word	0x0800774c
 80013fc:	0800e138 	.word	0x0800e138
 8001400:	080076f4 	.word	0x080076f4

08001404 <ring_buffer_get>:
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <ring_buffer_get+0x1e>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <ring_buffer_get+0x1e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <ring_buffer_get+0x2a>
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <ring_buffer_get+0x60>)
 8001424:	4a10      	ldr	r2, [pc, #64]	; (8001468 <ring_buffer_get+0x64>)
 8001426:	21da      	movs	r1, #218	; 0xda
 8001428:	4810      	ldr	r0, [pc, #64]	; (800146c <ring_buffer_get+0x68>)
 800142a:	f004 fdbf 	bl	8005fac <__assert_func>
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fee0 	bl	80011f8 <is_ring_buffer_empty>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <ring_buffer_get+0x54>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4413      	add	r3, r2
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff feac 	bl	80011ac <tail_ptr_retreat>
 8001454:	2301      	movs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08007760 	.word	0x08007760
 8001468:	0800e148 	.word	0x0800e148
 800146c:	080076f4 	.word	0x080076f4

08001470 <ring_buffer_write>:
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	4613      	mov	r3, r2
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <ring_buffer_write+0x1c>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <ring_buffer_write+0x28>
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <ring_buffer_write+0x74>)
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <ring_buffer_write+0x78>)
 8001490:	21f3      	movs	r1, #243	; 0xf3
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <ring_buffer_write+0x7c>)
 8001494:	f004 fd8a 	bl	8005fac <__assert_func>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	7c1b      	ldrb	r3, [r3, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <ring_buffer_write+0x34>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e01a      	b.n	80014da <ring_buffer_write+0x6a>
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ff67 	bl	8001378 <ring_buffer_get_free_space>
 80014aa:	4602      	mov	r2, r0
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d201      	bcs.n	80014b6 <ring_buffer_write+0x46>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e011      	b.n	80014da <ring_buffer_write+0x6a>
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <ring_buffer_write+0x60>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	617a      	str	r2, [r7, #20]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7ff ff72 	bl	80013b4 <ring_buffer_put>
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3f1      	bcc.n	80014bc <ring_buffer_write+0x4c>
 80014d8:	2300      	movs	r3, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0800774c 	.word	0x0800774c
 80014e8:	0800e158 	.word	0x0800e158
 80014ec:	080076f4 	.word	0x080076f4

080014f0 <ring_buffer_read>:
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <ring_buffer_read+0x20>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <ring_buffer_read+0x20>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <ring_buffer_read+0x2e>
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <ring_buffer_read+0x64>)
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <ring_buffer_read+0x68>)
 8001514:	f240 1115 	movw	r1, #277	; 0x115
 8001518:	4810      	ldr	r0, [pc, #64]	; (800155c <ring_buffer_read+0x6c>)
 800151a:	f004 fd47 	bl	8005fac <__assert_func>
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e00d      	b.n	8001540 <ring_buffer_read+0x50>
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	617a      	str	r2, [r7, #20]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	4413      	add	r3, r2
 800152e:	4619      	mov	r1, r3
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff ff67 	bl	8001404 <ring_buffer_get>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <ring_buffer_read+0x50>
 800153c:	2303      	movs	r3, #3
 800153e:	e004      	b.n	800154a <ring_buffer_read+0x5a>
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3ed      	bcc.n	8001524 <ring_buffer_read+0x34>
 8001548:	2300      	movs	r3, #0
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	0800777c 	.word	0x0800777c
 8001558:	0800e16c 	.word	0x0800e16c
 800155c:	080076f4 	.word	0x080076f4

08001560 <time_event_start>:
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	801a      	strh	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	709a      	strb	r2, [r3, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	70da      	strb	r2, [r3, #3]
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <time_event_stop>:
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	709a      	strb	r2, [r3, #2]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	70da      	strb	r2, [r3, #3]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	801a      	strh	r2, [r3, #0]
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <time_event_is_active>:
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	789b      	ldrb	r3, [r3, #2]
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <time_event_update>:
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	789b      	ldrb	r3, [r3, #2]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d012      	beq.n	80015f8 <time_event_update+0x36>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <time_event_update+0x24>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	801a      	strh	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <time_event_update+0x32>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	70da      	strb	r2, [r3, #3]
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <time_event_update+0x38>
 80015f8:	2300      	movs	r3, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <time_event_is_raised>:
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	78db      	ldrb	r3, [r3, #3]
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
	...

0800161c <time_event_set_pending_update>:
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <time_event_set_pending_update+0x1c>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	7013      	strb	r3, [r2, #0]
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000016c 	.word	0x2000016c

0800163c <time_event_get_pending_update>:
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <time_event_get_pending_update+0x14>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000016c 	.word	0x2000016c

08001654 <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff ffdf 	bl	800161c <time_event_set_pending_update>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8001668:	f7ff ffe8 	bl	800163c <time_event_get_pending_update>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <time_events_poll_update+0x1a>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 8001672:	4804      	ldr	r0, [pc, #16]	; (8001684 <time_events_poll_update+0x20>)
 8001674:	f7ff fb70 	bl	8000d58 <btn_debounce_run>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff ffcf 	bl	800161c <time_event_set_pending_update>
    }
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000011c 	.word	0x2000011c

08001688 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <event_manager_fsm_get+0x10>)
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000238 	.word	0x20000238

0800169c <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	705a      	strb	r2, [r3, #1]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d002      	beq.n	80016d4 <event_manager_fsm_run+0x16>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d004      	beq.n	80016dc <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 80016d2:	e007      	b.n	80016e4 <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f84d 	bl	8001774 <wait_event_on_react>
 80016da:	e003      	b.n	80016e4 <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f891 	bl	8001804 <notify_event_on_react>
 80016e2:	bf00      	nop
    }
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3358      	adds	r3, #88	; 0x58
 80016f8:	22c8      	movs	r2, #200	; 0xc8
 80016fa:	4905      	ldr	r1, [pc, #20]	; (8001710 <event_manager_fsm_init+0x24>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fbbb 	bl	8000e78 <event_queue_init>
    enter_seq_wait_event(handle);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f806 	bl	8001714 <enter_seq_wait_event>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000170 	.word	0x20000170

08001714 <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 800171c:	2101      	movs	r1, #1
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffbc 	bl	800169c <fsm_set_next_state>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3304      	adds	r3, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f7ff fbfd 	bl	8000f40 <event_queue_read>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3358      	adds	r3, #88	; 0x58
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fba2 	bl	8000ea4 <event_queue_get_pending>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	705a      	strb	r2, [r3, #1]
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d106      	bne.n	8001796 <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffcf 	bl	800172c <exit_action_wait_event>
        enter_seq_notify_event(handle);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f810 	bl	80017b4 <enter_seq_notify_event>
 8001794:	e001      	b.n	800179a <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	f083 0301 	eor.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffd1 	bl	800174e <during_action_wait_event>
    }
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 80017bc:	2102      	movs	r1, #2
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff6c 	bl	800169c <fsm_set_next_state>
    entry_action_notify_event(handle);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f804 	bl	80017d2 <entry_action_notify_event>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
    event_manager_dbg("\t notify evt = [0x%X], from [0x%X] to [0x%X]\r\n",
                 handle->iface.event.header.event,
                 handle->iface.event.header.fsm_src,
                 handle->iface.event.header.fsm_dst);

    switch (handle->iface.event.header.fsm_dst)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	799b      	ldrb	r3, [r3, #6]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d108      	bne.n	80017f4 <entry_action_notify_event+0x22>
    {
        case UI_FSM:
        {
            ui_fsm_set_ext_event(ui_fsm_get(), &handle->iface.event);
 80017e2:	f000 fb23 	bl	8001e2c <ui_fsm_get>
 80017e6:	4602      	mov	r2, r0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3304      	adds	r3, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4610      	mov	r0, r2
 80017f0:	f000 fb66 	bl	8001ec0 <ui_fsm_set_ext_event>
        }
    
    default:
        break;
 80017f4:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	705a      	strb	r2, [r3, #1]
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d102      	bne.n	800181a <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff7d 	bl	8001714 <enter_seq_wait_event>
    }
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <event_manager_write>:

//------------------ Event Manager Function Definition ---------------------------------------//

uint8_t event_manager_write(event_manager_handle_t handle, event_t *event)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
    return event_queue_write(&handle->iface.queue, event);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3358      	adds	r3, #88	; 0x58
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb42 	bl	8000ebc <event_queue_write>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <ui_win_show>:
        {"Snack 3"  , 2, 33*6}
    };


void ui_win_show(ui_window_t *win, uint16_t color, bool show)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	707b      	strb	r3, [r7, #1]
    if (show == true)
 8001852:	787b      	ldrb	r3, [r7, #1]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d011      	beq.n	800187c <ui_win_show+0x3a>
    {
        BSP_LCD_SetTextColor(color);
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fd5c 	bl	8003318 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8818      	ldrh	r0, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8859      	ldrh	r1, [r3, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	889a      	ldrh	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	88db      	ldrh	r3, [r3, #6]
 8001870:	f001 fee8 	bl	8003644 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001874:	2000      	movs	r0, #0
 8001876:	f001 fd4f 	bl	8003318 <BSP_LCD_SetTextColor>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 800187a:	e010      	b.n	800189e <ui_win_show+0x5c>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 800187c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001880:	f001 fd4a 	bl	8003318 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	8818      	ldrh	r0, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	8859      	ldrh	r1, [r3, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	889a      	ldrh	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	88db      	ldrh	r3, [r3, #6]
 8001894:	f001 fed6 	bl	8003644 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001898:	2000      	movs	r0, #0
 800189a:	f001 fd3d 	bl	8003318 <BSP_LCD_SetTextColor>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <ui_date_time_init>:


/////////////////////////////////// Date Hour Related Functions /////////////////////////////////////////////

void ui_date_time_init(date_time_menu_t *menu)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    menu->win.main.x = 17;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2211      	movs	r2, #17
 80018b4:	801a      	strh	r2, [r3, #0]
    menu->win.main.y = 116;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2274      	movs	r2, #116	; 0x74
 80018ba:	805a      	strh	r2, [r3, #2]
    menu->win.main.w = 442;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 80018c2:	809a      	strh	r2, [r3, #4]
    menu->win.main.h = 161;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	22a1      	movs	r2, #161	; 0xa1
 80018c8:	80da      	strh	r2, [r3, #6]

    menu->time.hour.x = menu->win.main.x + 31;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	331f      	adds	r3, #31
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	811a      	strh	r2, [r3, #8]
    menu->time.hour.y = menu->win.main.y + 29;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	885b      	ldrh	r3, [r3, #2]
 80018da:	331d      	adds	r3, #29
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	815a      	strh	r2, [r3, #10]
    menu->time.min.x = menu->win.main.x + 191;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	33bf      	adds	r3, #191	; 0xbf
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	819a      	strh	r2, [r3, #12]
    menu->time.min.y = menu->win.main.y + 29;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	885b      	ldrh	r3, [r3, #2]
 80018f2:	331d      	adds	r3, #29
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	81da      	strh	r2, [r3, #14]

    menu->date.day.x = menu->win.main.x + 347;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	f203 135b 	addw	r3, r3, #347	; 0x15b
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	831a      	strh	r2, [r3, #24]
    menu->date.day.y = menu->win.main.y + 61;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	885b      	ldrh	r3, [r3, #2]
 800190c:	333d      	adds	r3, #61	; 0x3d
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	835a      	strh	r2, [r3, #26]
    menu->date.month.x = menu->win.main.x + 389;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	f203 1385 	addw	r3, r3, #389	; 0x185
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	829a      	strh	r2, [r3, #20]
    menu->date.month.y = menu->win.main.y + 61;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	885b      	ldrh	r3, [r3, #2]
 8001926:	333d      	adds	r3, #61	; 0x3d
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	82da      	strh	r2, [r3, #22]

    BSP_LCD_SetFont(&Font24);
 800192e:	4818      	ldr	r0, [pc, #96]	; (8001990 <ui_date_time_init+0xe8>)
 8001930:	f001 fd12 	bl	8003358 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(menu->time.hour.x, menu->time.hour.y, "--:", LEFT_MODE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	8918      	ldrh	r0, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	8959      	ldrh	r1, [r3, #10]
 800193c:	2303      	movs	r3, #3
 800193e:	4a15      	ldr	r2, [pc, #84]	; (8001994 <ui_date_time_init+0xec>)
 8001940:	f001 fd60 	bl	8003404 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(menu->time.min.x, menu->time.min.y, "--", LEFT_MODE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	8998      	ldrh	r0, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	89d9      	ldrh	r1, [r3, #14]
 800194c:	2303      	movs	r3, #3
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <ui_date_time_init+0xf0>)
 8001950:	f001 fd58 	bl	8003404 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetFont(&Font16);
 8001954:	4811      	ldr	r0, [pc, #68]	; (800199c <ui_date_time_init+0xf4>)
 8001956:	f001 fcff 	bl	8003358 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(menu->date.day.x, menu->date.day.y, "--/", LEFT_MODE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8b18      	ldrh	r0, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8b59      	ldrh	r1, [r3, #26]
 8001962:	2303      	movs	r3, #3
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <ui_date_time_init+0xf8>)
 8001966:	f001 fd4d 	bl	8003404 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(menu->date.month.x, menu->date.month.y, "--", LEFT_MODE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	8a98      	ldrh	r0, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	8ad9      	ldrh	r1, [r3, #22]
 8001972:	2303      	movs	r3, #3
 8001974:	4a08      	ldr	r2, [pc, #32]	; (8001998 <ui_date_time_init+0xf0>)
 8001976:	f001 fd45 	bl	8003404 <BSP_LCD_DisplayStringAt>

    ui_win_show(&menu->win, LCD_DEFAULT_TEXTCOLOR, true);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5e 	bl	8001842 <ui_win_show>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000010 	.word	0x20000010
 8001994:	0800780c 	.word	0x0800780c
 8001998:	08007810 	.word	0x08007810
 800199c:	20000000 	.word	0x20000000
 80019a0:	08007814 	.word	0x08007814

080019a4 <ui_date_time_set_config>:

void ui_date_time_set_config(date_time_menu_t *menu, date_time_config_t *conf)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
    uint8_t buff[5];
    uint16_t color = LCD_DEFAULT_TEXTCOLOR;
 80019ae:	2300      	movs	r3, #0
 80019b0:	81fb      	strh	r3, [r7, #14]

    if (conf->select == UI_ITEM_SELECT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <ui_date_time_set_config+0x1a>
        color = FEEDER_CONFIG_SELECTION_COLOR;
 80019ba:	231f      	movs	r3, #31
 80019bc:	81fb      	strh	r3, [r7, #14]

    BSP_LCD_SetTextColor(color);
 80019be:	89fb      	ldrh	r3, [r7, #14]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fca9 	bl	8003318 <BSP_LCD_SetTextColor>

    switch (conf->item)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d862      	bhi.n	8001a94 <ui_date_time_set_config+0xf0>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <ui_date_time_set_config+0x30>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	08001a11 	.word	0x08001a11
 80019dc:	08001a3d 	.word	0x08001a3d
 80019e0:	08001a69 	.word	0x08001a69
    {
    case DATE_TIME_CNF_HOUR: {
            BSP_LCD_SetFont(&Font24);
 80019e4:	4831      	ldr	r0, [pc, #196]	; (8001aac <ui_date_time_set_config+0x108>)
 80019e6:	f001 fcb7 	bl	8003358 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->time.hour);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	492e      	ldr	r1, [pc, #184]	; (8001ab0 <ui_date_time_set_config+0x10c>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 ffaa 	bl	8006950 <siprintf>
            BSP_LCD_DisplayStringAt(menu->time.hour.x,menu->time.hour.y,buff, LEFT_MODE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8918      	ldrh	r0, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	8959      	ldrh	r1, [r3, #10]
 8001a04:	f107 0208 	add.w	r2, r7, #8
 8001a08:	2303      	movs	r3, #3
 8001a0a:	f001 fcfb 	bl	8003404 <BSP_LCD_DisplayStringAt>
    } break;
 8001a0e:	e042      	b.n	8001a96 <ui_date_time_set_config+0xf2>

    case DATE_TIME_CNF_MIN: {
            BSP_LCD_SetFont(&Font24);
 8001a10:	4826      	ldr	r0, [pc, #152]	; (8001aac <ui_date_time_set_config+0x108>)
 8001a12:	f001 fca1 	bl	8003358 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->time.min);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	789b      	ldrb	r3, [r3, #2]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4923      	ldr	r1, [pc, #140]	; (8001ab0 <ui_date_time_set_config+0x10c>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 ff94 	bl	8006950 <siprintf>
            BSP_LCD_DisplayStringAt(menu->time.min.x,menu->time.min.y,buff, LEFT_MODE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	8998      	ldrh	r0, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	89d9      	ldrh	r1, [r3, #14]
 8001a30:	f107 0208 	add.w	r2, r7, #8
 8001a34:	2303      	movs	r3, #3
 8001a36:	f001 fce5 	bl	8003404 <BSP_LCD_DisplayStringAt>
    } break;
 8001a3a:	e02c      	b.n	8001a96 <ui_date_time_set_config+0xf2>
    case DATE_TIME_CNF_DAY: {
            BSP_LCD_SetFont(&Font16);
 8001a3c:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <ui_date_time_set_config+0x110>)
 8001a3e:	f001 fc8b 	bl	8003358 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->date.day);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4918      	ldr	r1, [pc, #96]	; (8001ab0 <ui_date_time_set_config+0x10c>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 ff7e 	bl	8006950 <siprintf>
            BSP_LCD_DisplayStringAt(menu->date.day.x,menu->date.day.y,buff, LEFT_MODE); 
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	8b18      	ldrh	r0, [r3, #24]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	8b59      	ldrh	r1, [r3, #26]
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	2303      	movs	r3, #3
 8001a62:	f001 fccf 	bl	8003404 <BSP_LCD_DisplayStringAt>
    } break;
 8001a66:	e016      	b.n	8001a96 <ui_date_time_set_config+0xf2>
    case DATE_TIME_CNF_MONTH: {
            BSP_LCD_SetFont(&Font16);
 8001a68:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <ui_date_time_set_config+0x110>)
 8001a6a:	f001 fc75 	bl	8003358 <BSP_LCD_SetFont>
            sprintf(buff, "%.2d", conf->date.month);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <ui_date_time_set_config+0x10c>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 ff68 	bl	8006950 <siprintf>
            BSP_LCD_DisplayStringAt(menu->date.month.x,menu->date.month.y,buff, LEFT_MODE); 
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8a98      	ldrh	r0, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	8ad9      	ldrh	r1, [r3, #22]
 8001a88:	f107 0208 	add.w	r2, r7, #8
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f001 fcb9 	bl	8003404 <BSP_LCD_DisplayStringAt>
    } break;
 8001a92:	e000      	b.n	8001a96 <ui_date_time_set_config+0xf2>
    default:
        break;
 8001a94:	bf00      	nop
    }

    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a96:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <ui_date_time_set_config+0x114>)
 8001a98:	f001 fc5e 	bl	8003358 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f001 fc3b 	bl	8003318 <BSP_LCD_SetTextColor>
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	08007818 	.word	0x08007818
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000018 	.word	0x20000018

08001abc <ui_drawers_clean>:


/////////////////////////////////// Drawers Related Functions /////////////////////////////////////////////

static void ui_drawers_clean(ui_drawers_t *drawers)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    ui_win_show(&drawers->form.main_frame, LCD_DEFAULT_TEXTCOLOR, true);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff feb8 	bl	8001842 <ui_win_show>

    for (uint8_t i = 0; i < DRAWERn; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e031      	b.n	8001b3c <ui_drawers_clean+0x80>
    {
        drawers->form.single_frame.x = drawers->form.main_frame.x + drawer_label[i].x;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	891a      	ldrh	r2, [r3, #8]
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	491b      	ldr	r1, [pc, #108]	; (8001b4c <ui_drawers_clean+0x90>)
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	821a      	strh	r2, [r3, #16]
        drawers->form.single_frame.y = drawers->form.main_frame.y + drawer_label[i].y;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	895a      	ldrh	r2, [r3, #10]
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	4915      	ldr	r1, [pc, #84]	; (8001b4c <ui_drawers_clean+0x90>)
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	88db      	ldrh	r3, [r3, #6]
 8001afc:	4413      	add	r3, r2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	825a      	strh	r2, [r3, #18]
        ui_win_show(&drawers->form.single_frame, LCD_DEFAULT_TEXTCOLOR, true);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3310      	adds	r3, #16
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fe98 	bl	8001842 <ui_win_show>
        BSP_LCD_SetFont(&DRAWER_SELECTION_FONT);
 8001b12:	480f      	ldr	r0, [pc, #60]	; (8001b50 <ui_drawers_clean+0x94>)
 8001b14:	f001 fc20 	bl	8003358 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(drawers->form.single_frame.x + 15, drawers->form.single_frame.y + 4, drawer_label[i].name, LEFT_MODE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	8a1b      	ldrh	r3, [r3, #16]
 8001b1c:	330f      	adds	r3, #15
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	8a5b      	ldrh	r3, [r3, #18]
 8001b24:	3304      	adds	r3, #4
 8001b26:	b299      	uxth	r1, r3
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <ui_drawers_clean+0x90>)
 8001b2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b30:	2303      	movs	r3, #3
 8001b32:	f001 fc67 	bl	8003404 <BSP_LCD_DisplayStringAt>
    for (uint8_t i = 0; i < DRAWERn; i++)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d9ca      	bls.n	8001ad8 <ui_drawers_clean+0x1c>
    }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0800e180 	.word	0x0800e180
 8001b50:	20000008 	.word	0x20000008

08001b54 <ui_drawers_init>:

void ui_drawers_init(ui_drawers_t *drawers)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    drawers->win.main.x = 15;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	220f      	movs	r2, #15
 8001b60:	801a      	strh	r2, [r3, #0]
    drawers->win.main.y = 10;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220a      	movs	r2, #10
 8001b66:	805a      	strh	r2, [r3, #2]
    drawers->win.main.h = 81;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2251      	movs	r2, #81	; 0x51
 8001b6c:	80da      	strh	r2, [r3, #6]
    drawers->win.main.w = 132;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2284      	movs	r2, #132	; 0x84
 8001b72:	809a      	strh	r2, [r3, #4]

    drawers->form.main_frame.x = drawers->win.main.x + 4;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	811a      	strh	r2, [r3, #8]
    drawers->form.main_frame.y = drawers->win.main.y + 4;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	885b      	ldrh	r3, [r3, #2]
 8001b84:	3304      	adds	r3, #4
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	815a      	strh	r2, [r3, #10]
    drawers->form.main_frame.h = drawers->win.main.h - 8;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	88db      	ldrh	r3, [r3, #6]
 8001b90:	3b08      	subs	r3, #8
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	81da      	strh	r2, [r3, #14]
    drawers->form.main_frame.w = drawers->win.main.w - 8;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	889b      	ldrh	r3, [r3, #4]
 8001b9c:	3b08      	subs	r3, #8
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	819a      	strh	r2, [r3, #12]

    drawers->form.single_frame.w = 50;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2232      	movs	r2, #50	; 0x32
 8001ba8:	829a      	strh	r2, [r3, #20]
    drawers->form.single_frame.h = 25;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2219      	movs	r2, #25
 8001bae:	82da      	strh	r2, [r3, #22]

    ui_drawers_clean(drawers);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff83 	bl	8001abc <ui_drawers_clean>
    // ui_win_show(&drawers->win.main, DRAWER_SELECTION_COLOR, true);
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <ui_battery_init>:



/////////////////////////////////// Battery Related Functions /////////////////////////////////////////////
void ui_battery_init(ui_battery_t *batt)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    batt->win.main.x = 366;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001bce:	801a      	strh	r2, [r3, #0]
    batt->win.main.y = 10;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	220a      	movs	r2, #10
 8001bd4:	805a      	strh	r2, [r3, #2]
    batt->win.main.h = 81;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2251      	movs	r2, #81	; 0x51
 8001bda:	80da      	strh	r2, [r3, #6]
    batt->win.main.w = 96;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2260      	movs	r2, #96	; 0x60
 8001be0:	809a      	strh	r2, [r3, #4]

    batt->icon.icon_batt.ptr = &battery_icon;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a31      	ldr	r2, [pc, #196]	; (8001cac <ui_battery_init+0xec>)
 8001be6:	615a      	str	r2, [r3, #20]
    batt->icon.icon_batt.x = batt->win.main.x + 4;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	3304      	adds	r3, #4
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	821a      	strh	r2, [r3, #16]
    batt->icon.icon_batt.y = batt->win.main.y + 16;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	885b      	ldrh	r3, [r3, #2]
 8001bf8:	3310      	adds	r3, #16
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	825a      	strh	r2, [r3, #18]

    batt->icon.icon_error.ptr = &batt_error_icon;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <ui_battery_init+0xf0>)
 8001c04:	61da      	str	r2, [r3, #28]
    batt->icon.icon_error.x = batt->icon.icon_batt.x + 16;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8a1b      	ldrh	r3, [r3, #16]
 8001c0a:	3310      	adds	r3, #16
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	831a      	strh	r2, [r3, #24]
    batt->icon.icon_error.y = batt->icon.icon_batt.y + 16;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	8a5b      	ldrh	r3, [r3, #18]
 8001c16:	3310      	adds	r3, #16
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	835a      	strh	r2, [r3, #26]

    batt->icon.icon_warn.ptr = &batt_warning_icon;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <ui_battery_init+0xf4>)
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
    batt->icon.icon_warn.x = batt->icon.icon_batt.x + 16;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8a1b      	ldrh	r3, [r3, #16]
 8001c28:	3310      	adds	r3, #16
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	841a      	strh	r2, [r3, #32]
    batt->icon.icon_warn.y = batt->icon.icon_batt.y + 16;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8a5b      	ldrh	r3, [r3, #18]
 8001c34:	3310      	adds	r3, #16
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	845a      	strh	r2, [r3, #34]	; 0x22

    batt->form.charge.x = batt->icon.icon_batt.x + 17;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8a1b      	ldrh	r3, [r3, #16]
 8001c40:	3311      	adds	r3, #17
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	811a      	strh	r2, [r3, #8]
    batt->form.charge.y = batt->icon.icon_batt.y + 8;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	8a5b      	ldrh	r3, [r3, #18]
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	815a      	strh	r2, [r3, #10]
    batt->form.charge.h = batt->icon.icon_batt.ptr->infoHeader.biHeight - 16;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b10      	subs	r3, #16
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	81da      	strh	r2, [r3, #14]
    batt->form.charge.w = batt->icon.icon_batt.ptr->infoHeader.biWidth - 24;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b18      	subs	r3, #24
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	819a      	strh	r2, [r3, #12]

    batt->text.charge.font = &Font20;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <ui_battery_init+0xf8>)
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    batt->text.charge.x = batt->form.charge.x + 15;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	891b      	ldrh	r3, [r3, #8]
 8001c82:	330f      	adds	r3, #15
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
    batt->text.charge.y = batt->form.charge.y + 10;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	895b      	ldrh	r3, [r3, #10]
 8001c8e:	330a      	adds	r3, #10
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a

    ui_win_show(&batt->win.main, LCD_DEFAULT_TEXTCOLOR, true);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fdd0 	bl	8001842 <ui_win_show>

}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	0800bd08 	.word	0x0800bd08
 8001cb0:	0800b150 	.word	0x0800b150
 8001cb4:	0800b988 	.word	0x0800b988
 8001cb8:	20000008 	.word	0x20000008

08001cbc <ui_battery_show>:

void ui_battery_show(ui_battery_t *batt, bool show)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
    if(show == true)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <ui_battery_show+0x26>
    {
        BSP_LCD_DrawBitmap(batt->icon.icon_batt.x, batt->icon.icon_batt.y, (uint8_t*)batt->icon.icon_batt.ptr);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8a18      	ldrh	r0, [r3, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	8a59      	ldrh	r1, [r3, #18]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f001 fce8 	bl	80036b0 <BSP_LCD_DrawBitmap>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_FillRect(batt->win.main.x, batt->win.main.y, batt->win.main.w, batt->win.main.h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 8001ce0:	e010      	b.n	8001d04 <ui_battery_show+0x48>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8001ce2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ce6:	f001 fb17 	bl	8003318 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->win.main.x, batt->win.main.y, batt->win.main.w, batt->win.main.h);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	8818      	ldrh	r0, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8859      	ldrh	r1, [r3, #2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	889a      	ldrh	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	88db      	ldrh	r3, [r3, #6]
 8001cfa:	f001 fd33 	bl	8003764 <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f001 fb0a 	bl	8003318 <BSP_LCD_SetTextColor>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <ui_battery_charge>:
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}

void ui_battery_charge(ui_battery_t *batt, uint8_t batt_level, bool show)
{
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	70bb      	strb	r3, [r7, #2]
    if (show)
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d069      	beq.n	8001df6 <ui_battery_charge+0xea>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8001d22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d26:	f001 faf7 	bl	8003318 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, batt->form.charge.w, batt->form.charge.h);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	8918      	ldrh	r0, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8959      	ldrh	r1, [r3, #10]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	899a      	ldrh	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	89db      	ldrh	r3, [r3, #14]
 8001d3a:	f001 fd13 	bl	8003764 <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f001 faea 	bl	8003318 <BSP_LCD_SetTextColor>

        float width = batt->form.charge.w*(batt_level/100.0);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	899b      	ldrh	r3, [r3, #12]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb51 	bl	80003f0 <__aeabi_i2d>
 8001d4e:	4604      	mov	r4, r0
 8001d50:	460d      	mov	r5, r1
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb4b 	bl	80003f0 <__aeabi_i2d>
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <ui_battery_charge+0x114>)
 8001d60:	f7fe fcda 	bl	8000718 <__aeabi_ddiv>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fbaa 	bl	80004c4 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fdb6 	bl	80008e8 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	617b      	str	r3, [r7, #20]

        BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001d80:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d84:	f001 fac8 	bl	8003318 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, (int)width, batt->form.charge.h);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	891c      	ldrh	r4, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	895d      	ldrh	r5, [r3, #10]
 8001d90:	6978      	ldr	r0, [r7, #20]
 8001d92:	f7fe fdf9 	bl	8000988 <__aeabi_f2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	89db      	ldrh	r3, [r3, #14]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4620      	mov	r0, r4
 8001da2:	f001 fcdf 	bl	8003764 <BSP_LCD_FillRect>
        BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001da6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001daa:	f001 fac5 	bl	8003338 <BSP_LCD_SetBackColor>

        uint8_t buff[5] = {0};
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	2300      	movs	r3, #0
 8001db4:	743b      	strb	r3, [r7, #16]
        sprintf(buff, "%d%%", batt_level);
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4919      	ldr	r1, [pc, #100]	; (8001e24 <ui_battery_charge+0x118>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fdc6 	bl	8006950 <siprintf>

        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f001 faa7 	bl	8003318 <BSP_LCD_SetTextColor>
        BSP_LCD_SetFont(batt->text.charge.font);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fac2 	bl	8003358 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(batt->text.charge.x, batt->text.charge.y, buff ,LEFT_MODE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	2303      	movs	r3, #3
 8001de2:	f001 fb0f 	bl	8003404 <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001de6:	4810      	ldr	r0, [pc, #64]	; (8001e28 <ui_battery_charge+0x11c>)
 8001de8:	f001 fab6 	bl	8003358 <BSP_LCD_SetFont>
        BSP_LCD_SetBackColor(LCD_DEFAULT_BACKCOLOR);
 8001dec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001df0:	f001 faa2 	bl	8003338 <BSP_LCD_SetBackColor>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, batt->form.charge.w, batt->form.charge.h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 8001df4:	e010      	b.n	8001e18 <ui_battery_charge+0x10c>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 8001df6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dfa:	f001 fa8d 	bl	8003318 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(batt->form.charge.x, batt->form.charge.y, batt->form.charge.w, batt->form.charge.h);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	8918      	ldrh	r0, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8959      	ldrh	r1, [r3, #10]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	899a      	ldrh	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	89db      	ldrh	r3, [r3, #14]
 8001e0e:	f001 fca9 	bl	8003764 <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f001 fa80 	bl	8003318 <BSP_LCD_SetTextColor>
}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e20:	40590000 	.word	0x40590000
 8001e24:	0800784c 	.word	0x0800784c
 8001e28:	20000018 	.word	0x20000018

08001e2c <ui_fsm_get>:


////////////////////////////// Public function declaration //////////////////////////////////////

ui_handle_t ui_fsm_get(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
    return &ui_fsm;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <ui_fsm_get+0x10>)
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200002fc 	.word	0x200002fc

08001e40 <ui_fsm_init>:

void ui_fsm_init(ui_handle_t handle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    // ui_battery_init(&ui_battery);
    // ui_drawers_init(&ui_drawers);
	main_menu_enter_seq(handle);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f84b 	bl	8001ee4 <main_menu_enter_seq>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <ui_fsm_run>:

void ui_fsm_run(ui_handle_t handle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d810      	bhi.n	8001e8c <ui_fsm_run+0x34>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <ui_fsm_run+0x18>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e85 	.word	0x08001e85
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001e8d 	.word	0x08001e8d
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001e8d 	.word	0x08001e8d
    {
        case ST_UI_MAIN_MENU:  main_menu_on_react(handle); break;
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f885 	bl	8001f94 <main_menu_on_react>
 8001e8a:	e000      	b.n	8001e8e <ui_fsm_run+0x36>
        case ST_UI_DATE_TIME_CONFIG: break;
        case ST_UI_PET_CALL_CONFIG: break;
        case ST_UI_FEEDER_CONFIG: break;
        case ST_UI_OPEN_DRAWER: break;
    default:
        break;
 8001e8c:	bf00      	nop
    }

}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <fsm_set_next_state>:

static void fsm_set_next_state(ui_handle_t handle, ui_state_t next_st)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
    handle->state = next_st;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	701a      	strb	r2, [r3, #0]
    handle->event.btn = EVT_EXT_BTN_INVALID;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	709a      	strb	r2, [r3, #2]
    handle->event.internal = EVT_INT_UI_INVALID;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	70da      	strb	r2, [r3, #3]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <ui_fsm_set_ext_event>:
		time_event++;
	}
}

void ui_fsm_set_ext_event(ui_handle_t handle, event_t *event)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
    if(event->header.fsm_src == BTN_FSM)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d103      	bne.n	8001eda <ui_fsm_set_ext_event+0x1a>
    {
        ui_fsm_dbg("btn event detected\r\n");
        handle->event.btn = event->header.name;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	709a      	strb	r2, [r3, #2]
    }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <main_menu_enter_seq>:


/////////////////////////////////// Main Menu State  ///////////////////////////////////////////

static void main_menu_enter_seq(ui_handle_t handle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ main menu ]");
    fsm_set_next_state(handle, ST_UI_MAIN_MENU);
 8001eec:	2101      	movs	r1, #1
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffd2 	bl	8001e98 <fsm_set_next_state>
    entry_action_main_menu(handle);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f805 	bl	8001f04 <entry_action_main_menu>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <entry_action_main_menu>:

static void entry_action_main_menu(ui_handle_t handle)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    /*1. draw battery */
    /*1. put icons in the main screen with the updated values */
    /*2. put cursor in the first navigation item */
    /*3. start timer to update gui */
    ui_battery_init(&ui_battery);
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <entry_action_main_menu+0x84>)
 8001f0e:	f7ff fe57 	bl	8001bc0 <ui_battery_init>
    ui_battery_show(&ui_battery, true);
 8001f12:	2101      	movs	r1, #1
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <entry_action_main_menu+0x84>)
 8001f16:	f7ff fed1 	bl	8001cbc <ui_battery_show>
    ui_battery_charge(&ui_battery, 99, true);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2163      	movs	r1, #99	; 0x63
 8001f1e:	481a      	ldr	r0, [pc, #104]	; (8001f88 <entry_action_main_menu+0x84>)
 8001f20:	f7ff fef4 	bl	8001d0c <ui_battery_charge>
    ui_drawers_init(&ui_drawers);
 8001f24:	4819      	ldr	r0, [pc, #100]	; (8001f8c <entry_action_main_menu+0x88>)
 8001f26:	f7ff fe15 	bl	8001b54 <ui_drawers_init>
    // ui_feeder_menu_init(&ui_feeder_menu);
    ui_date_time_init(&ui_date_time_menu);
 8001f2a:	4819      	ldr	r0, [pc, #100]	; (8001f90 <entry_action_main_menu+0x8c>)
 8001f2c:	f7ff fcbc 	bl	80018a8 <ui_date_time_init>
    HAL_Delay(2000);
 8001f30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f34:	f002 fb3c 	bl	80045b0 <HAL_Delay>
    ui_feeder_menu_set_config(&ui_feeder_menu, &config);
    HAL_Delay(1000);
#endif 

    date_time_config_t config;
    config.item = DATE_TIME_CNF_HOUR;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	723b      	strb	r3, [r7, #8]
    config.select = UI_ITEM_SELECT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	733b      	strb	r3, [r7, #12]
    config.time.hour = 5;
 8001f40:	2305      	movs	r3, #5
 8001f42:	727b      	strb	r3, [r7, #9]
    ui_date_time_set_config(&ui_date_time_menu, &config);
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4811      	ldr	r0, [pc, #68]	; (8001f90 <entry_action_main_menu+0x8c>)
 8001f4c:	f7ff fd2a 	bl	80019a4 <ui_date_time_set_config>
    HAL_Delay(1000);
 8001f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f54:	f002 fb2c 	bl	80045b0 <HAL_Delay>

    config.select = UI_ITEM_DESELECT;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	733b      	strb	r3, [r7, #12]
    ui_date_time_set_config(&ui_date_time_menu, &config);
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4619      	mov	r1, r3
 8001f62:	480b      	ldr	r0, [pc, #44]	; (8001f90 <entry_action_main_menu+0x8c>)
 8001f64:	f7ff fd1e 	bl	80019a4 <ui_date_time_set_config>
    HAL_Delay(1000);
 8001f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6c:	f002 fb20 	bl	80045b0 <HAL_Delay>



    time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff faf1 	bl	8001560 <time_event_start>
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000298 	.word	0x20000298
 8001f8c:	200002c8 	.word	0x200002c8
 8001f90:	200002e0 	.word	0x200002e0

08001f94 <main_menu_on_react>:

static void main_menu_on_react(ui_handle_t handle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    /*navigation key update item selection*/
    switch (handle->event.btn)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	789b      	ldrb	r3, [r3, #2]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d814      	bhi.n	8001fd0 <main_menu_on_react+0x3c>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <main_menu_on_react+0x18>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fd1 	.word	0x08001fd1
 8001fb0:	08001fd1 	.word	0x08001fd1
 8001fb4:	08001fd1 	.word	0x08001fd1
 8001fb8:	08001fd1 	.word	0x08001fd1
 8001fbc:	08001fd1 	.word	0x08001fd1
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fd1 	.word	0x08001fd1
 8001fc8:	08001fd1 	.word	0x08001fd1
 8001fcc:	08001fd1 	.word	0x08001fd1
        case EVT_EXT_BTN_UP_AND_ENTER_PRESSED:    break;
        case EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED:  break;
        case EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED:  break;
        case EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED: break;  
    default:
        break;
 8001fd0:	bf00      	nop
    }

    if(time_event_is_raised(&handle->event.time.update_gui)== true)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb14 	bl	8001604 <time_event_is_raised>
    {
        /*Update GUI*/
    }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d034      	beq.n	800205e <HAL_GPIO_EXTI_Callback+0x7a>
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	dc40      	bgt.n	800207a <HAL_GPIO_EXTI_Callback+0x96>
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d022      	beq.n	8002042 <HAL_GPIO_EXTI_Callback+0x5e>
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	dc3c      	bgt.n	800207a <HAL_GPIO_EXTI_Callback+0x96>
 8002000:	2b01      	cmp	r3, #1
 8002002:	d002      	beq.n	800200a <HAL_GPIO_EXTI_Callback+0x26>
 8002004:	2b10      	cmp	r3, #16
 8002006:	d00e      	beq.n	8002026 <HAL_GPIO_EXTI_Callback+0x42>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
    }
    break;

    default:
        break;
 8002008:	e037      	b.n	800207a <HAL_GPIO_EXTI_Callback+0x96>
        if (!time_event_is_active(&navigation_btn.enter.debounce))
 800200a:	4822      	ldr	r0, [pc, #136]	; (8002094 <HAL_GPIO_EXTI_Callback+0xb0>)
 800200c:	f7ff face 	bl	80015ac <time_event_is_active>
 8002010:	4603      	mov	r3, r0
 8002012:	f083 0301 	eor.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d030      	beq.n	800207e <HAL_GPIO_EXTI_Callback+0x9a>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 800201c:	2132      	movs	r1, #50	; 0x32
 800201e:	481d      	ldr	r0, [pc, #116]	; (8002094 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002020:	f7ff fa9e 	bl	8001560 <time_event_start>
    break;
 8002024:	e02b      	b.n	800207e <HAL_GPIO_EXTI_Callback+0x9a>
        if (!time_event_is_active(&navigation_btn.up.debounce))
 8002026:	481c      	ldr	r0, [pc, #112]	; (8002098 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002028:	f7ff fac0 	bl	80015ac <time_event_is_active>
 800202c:	4603      	mov	r3, r0
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d024      	beq.n	8002082 <HAL_GPIO_EXTI_Callback+0x9e>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8002038:	2132      	movs	r1, #50	; 0x32
 800203a:	4817      	ldr	r0, [pc, #92]	; (8002098 <HAL_GPIO_EXTI_Callback+0xb4>)
 800203c:	f7ff fa90 	bl	8001560 <time_event_start>
    break;
 8002040:	e01f      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x9e>
        if (!time_event_is_active(&navigation_btn.left.debounce))
 8002042:	4816      	ldr	r0, [pc, #88]	; (800209c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002044:	f7ff fab2 	bl	80015ac <time_event_is_active>
 8002048:	4603      	mov	r3, r0
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d018      	beq.n	8002086 <HAL_GPIO_EXTI_Callback+0xa2>
            time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 8002054:	2132      	movs	r1, #50	; 0x32
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002058:	f7ff fa82 	bl	8001560 <time_event_start>
    break;
 800205c:	e013      	b.n	8002086 <HAL_GPIO_EXTI_Callback+0xa2>
        if (!time_event_is_active(&navigation_btn.right.debounce))
 800205e:	4810      	ldr	r0, [pc, #64]	; (80020a0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002060:	f7ff faa4 	bl	80015ac <time_event_is_active>
 8002064:	4603      	mov	r3, r0
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <HAL_GPIO_EXTI_Callback+0xa6>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 8002070:	2132      	movs	r1, #50	; 0x32
 8002072:	480b      	ldr	r0, [pc, #44]	; (80020a0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002074:	f7ff fa74 	bl	8001560 <time_event_start>
    break;
 8002078:	e007      	b.n	800208a <HAL_GPIO_EXTI_Callback+0xa6>
        break;
 800207a:	bf00      	nop
 800207c:	e006      	b.n	800208c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 800207e:	bf00      	nop
 8002080:	e004      	b.n	800208c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 800208a:	bf00      	nop
    }

}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000164 	.word	0x20000164
 8002098:	20000124 	.word	0x20000124
 800209c:	20000144 	.word	0x20000144
 80020a0:	20000154 	.word	0x20000154

080020a4 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 80020a8:	2001      	movs	r0, #1
 80020aa:	f002 ffd3 	bl	8005054 <HAL_GPIO_EXTI_IRQHandler>
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 80020b6:	2010      	movs	r0, #16
 80020b8:	f002 ffcc 	bl	8005054 <HAL_GPIO_EXTI_IRQHandler>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5)
 80020c4:	2020      	movs	r0, #32
 80020c6:	f002 ffc5 	bl	8005054 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 80020ca:	2080      	movs	r0, #128	; 0x80
 80020cc:	f002 ffc2 	bl	8005054 <HAL_GPIO_EXTI_IRQHandler>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b094      	sub	sp, #80	; 0x50
 80020d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020de:	2228      	movs	r2, #40	; 0x28
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 ffc4 	bl	8006070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002104:	2301      	movs	r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002112:	2301      	movs	r3, #1
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002116:	2302      	movs	r3, #2
 8002118:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800211a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002120:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002124:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212a:	4618      	mov	r0, r3
 800212c:	f003 f8ee 	bl	800530c <HAL_RCC_OscConfig>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0x66>
  {
	Error_Handler();
 8002136:	f000 fa61 	bl	80025fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213a:	230f      	movs	r3, #15
 800213c:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213e:	2302      	movs	r3, #2
 8002140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800214a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2102      	movs	r1, #2
 8002156:	4618      	mov	r0, r3
 8002158:	f003 fb5a 	bl	8005810 <HAL_RCC_ClockConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SystemClock_Config+0x92>
  {
	Error_Handler();
 8002162:	f000 fa4b 	bl	80025fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002166:	2302      	movs	r3, #2
 8002168:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800216a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fcd0 	bl	8005b18 <HAL_RCCEx_PeriphCLKConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0xae>
  {
	Error_Handler();
 800217e:	f000 fa3d 	bl	80025fc <Error_Handler>
  }
}
 8002182:	bf00      	nop
 8002184:	3750      	adds	r7, #80	; 0x50
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_ADC1_Init+0x74>)
 800219e:	4a19      	ldr	r2, [pc, #100]	; (8002204 <MX_ADC1_Init+0x78>)
 80021a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <MX_ADC1_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_ADC1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_ADC1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <MX_ADC1_Init+0x74>)
 80021b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80021ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <MX_ADC1_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_ADC1_Init+0x74>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <MX_ADC1_Init+0x74>)
 80021ca:	f002 fa15 	bl	80045f8 <HAL_ADC_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80021d4:	f000 fa12 	bl	80025fc <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 80021d8:	230a      	movs	r3, #10
 80021da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021dc:	2301      	movs	r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_ADC1_Init+0x74>)
 80021ea:	f002 fadd 	bl	80047a8 <HAL_ADC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80021f4:	f000 fa02 	bl	80025fc <Error_Handler>
  }
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000030c 	.word	0x2000030c
 8002204:	40012400 	.word	0x40012400

08002208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_I2C1_Init+0x50>)
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <MX_I2C1_Init+0x54>)
 8002210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_I2C1_Init+0x50>)
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_I2C1_Init+0x58>)
 8002216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_I2C1_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_I2C1_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_I2C1_Init+0x50>)
 8002226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800222a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_I2C1_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_I2C1_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_I2C1_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_I2C1_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_I2C1_Init+0x50>)
 8002246:	f002 ff1d 	bl	8005084 <HAL_I2C_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002250:	f000 f9d4 	bl	80025fc <Error_Handler>
  }
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000033c 	.word	0x2000033c
 800225c:	40005400 	.word	0x40005400
 8002260:	000186a0 	.word	0x000186a0

08002264 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_SPI2_Init+0x64>)
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <MX_SPI2_Init+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002274:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_SPI2_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_SPI2_Init+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002294:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_SPI2_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022b0:	220a      	movs	r2, #10
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022b6:	f003 fce5 	bl	8005c84 <HAL_SPI_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022c0:	f000 f99c 	bl	80025fc <Error_Handler>
  }
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000390 	.word	0x20000390
 80022cc:	40003800 	.word	0x40003800

080022d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d6:	463b      	mov	r3, r7
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 80022de:	4b18      	ldr	r3, [pc, #96]	; (8002340 <MX_TIM1_Init+0x70>)
 80022e0:	4a18      	ldr	r2, [pc, #96]	; (8002344 <MX_TIM1_Init+0x74>)
 80022e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <MX_TIM1_Init+0x70>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <MX_TIM1_Init+0x70>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <MX_TIM1_Init+0x70>)
 80022f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <MX_TIM1_Init+0x70>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <MX_TIM1_Init+0x70>)
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <MX_TIM1_Init+0x70>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800230a:	2108      	movs	r1, #8
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <MX_TIM1_Init+0x70>)
 800230e:	f003 fd3d 	bl	8005d8c <HAL_TIM_OnePulse_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8002318:	f000 f970 	bl	80025fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002324:	463b      	mov	r3, r7
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <MX_TIM1_Init+0x70>)
 800232a:	f003 fde1 	bl	8005ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002334:	f000 f962 	bl	80025fc <Error_Handler>
  }


}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000470 	.word	0x20000470
 8002344:	40012c00 	.word	0x40012c00

08002348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MX_DMA_Init+0x48>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <MX_DMA_Init+0x48>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6153      	str	r3, [r2, #20]
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <MX_DMA_Init+0x48>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	200e      	movs	r0, #14
 800236c:	f002 fc2d 	bl	8004bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002370:	200e      	movs	r0, #14
 8002372:	f002 fc46 	bl	8004c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	200f      	movs	r0, #15
 800237c:	f002 fc25 	bl	8004bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002380:	200f      	movs	r0, #15
 8002382:	f002 fc3e 	bl	8004c02 <HAL_NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000

08002394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a8:	4b6e      	ldr	r3, [pc, #440]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a6d      	ldr	r2, [pc, #436]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023ae:	f043 0310 	orr.w	r3, r3, #16
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c0:	4b68      	ldr	r3, [pc, #416]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a67      	ldr	r2, [pc, #412]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023c6:	f043 0320 	orr.w	r3, r3, #32
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b65      	ldr	r3, [pc, #404]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b62      	ldr	r3, [pc, #392]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a61      	ldr	r2, [pc, #388]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b5f      	ldr	r3, [pc, #380]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a5b      	ldr	r2, [pc, #364]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <MX_GPIO_Init+0x1d0>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	2102      	movs	r1, #2
 800240c:	4856      	ldr	r0, [pc, #344]	; (8002568 <MX_GPIO_Init+0x1d4>)
 800240e:	f002 fe08 	bl	8005022 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8002412:	2200      	movs	r2, #0
 8002414:	f640 715f 	movw	r1, #3935	; 0xf5f
 8002418:	4854      	ldr	r0, [pc, #336]	; (800256c <MX_GPIO_Init+0x1d8>)
 800241a:	f002 fe02 	bl	8005022 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002424:	4852      	ldr	r0, [pc, #328]	; (8002570 <MX_GPIO_Init+0x1dc>)
 8002426:	f002 fdfc 	bl	8005022 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 800242a:	2302      	movs	r3, #2
 800242c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2302      	movs	r3, #2
 8002438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	4619      	mov	r1, r3
 8002440:	4849      	ldr	r0, [pc, #292]	; (8002568 <MX_GPIO_Init+0x1d4>)
 8002442:	f002 fc53 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 8002446:	f241 338c 	movw	r3, #5004	; 0x138c
 800244a:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	4619      	mov	r1, r3
 800245a:	4843      	ldr	r0, [pc, #268]	; (8002568 <MX_GPIO_Init+0x1d4>)
 800245c:	f002 fc46 	bl	8004cec <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8002460:	f640 735f 	movw	r3, #3935	; 0xf5f
 8002464:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002466:	2301      	movs	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2302      	movs	r3, #2
 8002470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4619      	mov	r1, r3
 8002478:	483c      	ldr	r0, [pc, #240]	; (800256c <MX_GPIO_Init+0x1d8>)
 800247a:	f002 fc37 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 800247e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4619      	mov	r1, r3
 8002492:	4836      	ldr	r0, [pc, #216]	; (800256c <MX_GPIO_Init+0x1d8>)
 8002494:	f002 fc2a 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8002498:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800249c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	482f      	ldr	r0, [pc, #188]	; (8002570 <MX_GPIO_Init+0x1dc>)
 80024b2:	f002 fc1b 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 80024b6:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80024ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <MX_GPIO_Init+0x1e0>)
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4619      	mov	r1, r3
 80024ca:	4827      	ldr	r0, [pc, #156]	; (8002568 <MX_GPIO_Init+0x1d4>)
 80024cc:	f002 fc0e 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 80024d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <MX_GPIO_Init+0x1e0>)
 80024d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	4619      	mov	r1, r3
 80024e4:	4821      	ldr	r0, [pc, #132]	; (800256c <MX_GPIO_Init+0x1d8>)
 80024e6:	f002 fc01 	bl	8004cec <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 80024ea:	2330      	movs	r3, #48	; 0x30
 80024ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <MX_GPIO_Init+0x1e4>)
 80024f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4619      	mov	r1, r3
 80024fc:	481a      	ldr	r0, [pc, #104]	; (8002568 <MX_GPIO_Init+0x1d4>)
 80024fe:	f002 fbf5 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin =  DOWN_Pin;
 8002502:	2320      	movs	r3, #32
 8002504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4619      	mov	r1, r3
 8002514:	4814      	ldr	r0, [pc, #80]	; (8002568 <MX_GPIO_Init+0x1d4>)
 8002516:	f002 fbe9 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 800251a:	23a0      	movs	r3, #160	; 0xa0
 800251c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <MX_GPIO_Init+0x1e4>)
 8002520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4619      	mov	r1, r3
 800252c:	480f      	ldr	r0, [pc, #60]	; (800256c <MX_GPIO_Init+0x1d8>)
 800252e:	f002 fbdd 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8002532:	2301      	movs	r3, #1
 8002534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <MX_GPIO_Init+0x1e4>)
 8002538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	4619      	mov	r1, r3
 8002544:	480a      	ldr	r0, [pc, #40]	; (8002570 <MX_GPIO_Init+0x1dc>)
 8002546:	f002 fbd1 	bl	8004cec <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 800254a:	2006      	movs	r0, #6
 800254c:	f002 fb59 	bl	8004c02 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, right -> A7
 8002550:	2017      	movs	r0, #23
 8002552:	f002 fb56 	bl	8004c02 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 8002556:	200a      	movs	r0, #10
 8002558:	f002 fb53 	bl	8004c02 <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	40011000 	.word	0x40011000
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	10110000 	.word	0x10110000
 8002578:	10210000 	.word	0x10210000

0800257c <init_peripherals>:

void init_peripherals(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002580:	f001 ffb4 	bl	80044ec <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002584:	f7ff fda6 	bl	80020d4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002588:	f7ff ff04 	bl	8002394 <MX_GPIO_Init>
  MX_ADC1_Init();
 800258c:	f7ff fdfe 	bl	800218c <MX_ADC1_Init>
  MX_SPI2_Init();
 8002590:	f7ff fe68 	bl	8002264 <MX_SPI2_Init>
  MX_DMA_Init();
 8002594:	f7ff fed8 	bl	8002348 <MX_DMA_Init>
  MX_TIM1_Init();
 8002598:	f7ff fe9a 	bl	80022d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 800259c:	f7ff fe34 	bl	8002208 <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 80025a0:	f7fe fd3c 	bl	800101c <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 80025a4:	f000 fe7c 	bl	80032a0 <BSP_LCD_Init>
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  init_peripherals();
 80025b2:	f7ff ffe3 	bl	800257c <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 80025b6:	480e      	ldr	r0, [pc, #56]	; (80025f0 <main+0x44>)
 80025b8:	f7fe fa0c 	bl	80009d4 <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 80025bc:	f7ff f864 	bl	8001688 <event_manager_fsm_get>
 80025c0:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff f892 	bl	80016ec <event_manager_fsm_init>

  /*Init UI */
  ui_handle_t ui_fsm = ui_fsm_get();
 80025c8:	f7ff fc30 	bl	8001e2c <ui_fsm_get>
 80025cc:	6038      	str	r0, [r7, #0]
  ui_fsm_init(ui_fsm);
 80025ce:	6838      	ldr	r0, [r7, #0]
 80025d0:	f7ff fc36 	bl	8001e40 <ui_fsm_init>

  printf("Pet Feeder V%s\r\n", FW_VERSION);
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <main+0x48>)
 80025d6:	4808      	ldr	r0, [pc, #32]	; (80025f8 <main+0x4c>)
 80025d8:	f004 f91c 	bl	8006814 <iprintf>

  /* Infinite loop */
  while (1)
  {
    ui_fsm_run(ui_fsm);
 80025dc:	6838      	ldr	r0, [r7, #0]
 80025de:	f7ff fc3b 	bl	8001e58 <ui_fsm_run>
    event_manager_fsm_run(evm_fsm);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff f86b 	bl	80016be <event_manager_fsm_run>
    time_events_poll_update();
 80025e8:	f7ff f83c 	bl	8001664 <time_events_poll_update>
    ui_fsm_run(ui_fsm);
 80025ec:	e7f6      	b.n	80025dc <main+0x30>
 80025ee:	bf00      	nop
 80025f0:	2000011c 	.word	0x2000011c
 80025f4:	08007880 	.word	0x08007880
 80025f8:	08007890 	.word	0x08007890

080025fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002600:	b672      	cpsid	i
}
 8002602:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002604:	e7fe      	b.n	8002604 <Error_Handler+0x8>
	...

08002608 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_MspInit+0x5c>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a14      	ldr	r2, [pc, #80]	; (8002664 <HAL_MspInit+0x5c>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_MspInit+0x5c>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <HAL_MspInit+0x5c>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_MspInit+0x5c>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	61d3      	str	r3, [r2, #28]
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_MspInit+0x5c>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_MspInit+0x60>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_MspInit+0x60>)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6053      	str	r3, [r2, #4]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000

0800266c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_ADC_MspInit+0x6c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d121      	bne.n	80026d0 <HAL_ADC_MspInit+0x64>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_ADC_MspInit+0x70>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_ADC_MspInit+0x70>)
 8002692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_ADC_MspInit+0x70>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_ADC_MspInit+0x70>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_ADC_MspInit+0x70>)
 80026aa:	f043 0310 	orr.w	r3, r3, #16
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_ADC_MspInit+0x70>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 80026bc:	2301      	movs	r3, #1
 80026be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c0:	2303      	movs	r3, #3
 80026c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4619      	mov	r1, r3
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <HAL_ADC_MspInit+0x74>)
 80026cc:	f002 fb0e 	bl	8004cec <HAL_GPIO_Init>
  }

}
 80026d0:	bf00      	nop
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40012400 	.word	0x40012400
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40011000 	.word	0x40011000

080026e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_I2C_MspInit+0x70>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d123      	bne.n	800274c <HAL_I2C_MspInit+0x68>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_I2C_MspInit+0x74>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_I2C_MspInit+0x74>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_I2C_MspInit+0x74>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002720:	2312      	movs	r3, #18
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	4619      	mov	r1, r3
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <HAL_I2C_MspInit+0x78>)
 8002730:	f002 fadc 	bl	8004cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_I2C_MspInit+0x74>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_I2C_MspInit+0x74>)
 800273a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800273e:	61d3      	str	r3, [r2, #28]
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_I2C_MspInit+0x74>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]

  }

}
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40005400 	.word	0x40005400
 8002758:	40021000 	.word	0x40021000
 800275c:	40010c00 	.word	0x40010c00

08002760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_SPI_MspInit+0x124>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d17d      	bne.n	800287c <HAL_SPI_MspInit+0x11c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002780:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_SPI_MspInit+0x128>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4a40      	ldr	r2, [pc, #256]	; (8002888 <HAL_SPI_MspInit+0x128>)
 8002786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278a:	61d3      	str	r3, [r2, #28]
 800278c:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <HAL_SPI_MspInit+0x128>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_SPI_MspInit+0x128>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <HAL_SPI_MspInit+0x128>)
 800279e:	f043 0308 	orr.w	r3, r3, #8
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_SPI_MspInit+0x128>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80027b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	4619      	mov	r1, r3
 80027c4:	4831      	ldr	r0, [pc, #196]	; (800288c <HAL_SPI_MspInit+0x12c>)
 80027c6:	f002 fa91 	bl	8004cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80027ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	4619      	mov	r1, r3
 80027de:	482b      	ldr	r0, [pc, #172]	; (800288c <HAL_SPI_MspInit+0x12c>)
 80027e0:	f002 fa84 	bl	8004cec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_SPI_MspInit+0x130>)
 80027e6:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_SPI_MspInit+0x134>)
 80027e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ea:	4b29      	ldr	r3, [pc, #164]	; (8002890 <HAL_SPI_MspInit+0x130>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_SPI_MspInit+0x130>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_SPI_MspInit+0x130>)
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_SPI_MspInit+0x130>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_SPI_MspInit+0x130>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_SPI_MspInit+0x130>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_SPI_MspInit+0x130>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002814:	481e      	ldr	r0, [pc, #120]	; (8002890 <HAL_SPI_MspInit+0x130>)
 8002816:	f002 fa0f 	bl	8004c38 <HAL_DMA_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002820:	f7ff feec 	bl	80025fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_SPI_MspInit+0x130>)
 8002828:	64da      	str	r2, [r3, #76]	; 0x4c
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_SPI_MspInit+0x130>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_SPI_MspInit+0x13c>)
 8002834:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002838:	2210      	movs	r2, #16
 800283a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <HAL_SPI_MspInit+0x138>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_SPI_MspInit+0x138>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_SPI_MspInit+0x138>)
 800285c:	2200      	movs	r2, #0
 800285e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002860:	480d      	ldr	r0, [pc, #52]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002862:	f002 f9e9 	bl	8004c38 <HAL_DMA_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 800286c:	f7ff fec6 	bl	80025fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002874:	649a      	str	r2, [r3, #72]	; 0x48
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_SPI_MspInit+0x138>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6253      	str	r3, [r2, #36]	; 0x24


  }

}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40003800 	.word	0x40003800
 8002888:	40021000 	.word	0x40021000
 800288c:	40010c00 	.word	0x40010c00
 8002890:	200003e8 	.word	0x200003e8
 8002894:	40020044 	.word	0x40020044
 8002898:	2000042c 	.word	0x2000042c
 800289c:	40020058 	.word	0x40020058

080028a0 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_TIM_OnePulse_MspInit+0x34>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10b      	bne.n	80028ca <HAL_TIM_OnePulse_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_TIM_OnePulse_MspInit+0x38>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_TIM_OnePulse_MspInit+0x38>)
 80028b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028bc:	6193      	str	r3, [r2, #24]
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_TIM_OnePulse_MspInit+0x38>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
  }

}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40021000 	.word	0x40021000

080028dc <NMI_Handler>:
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
 80028e0:	e7fe      	b.n	80028e0 <NMI_Handler+0x4>

080028e2 <HardFault_Handler>:
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	e7fe      	b.n	80028e6 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	e7fe      	b.n	80028ec <MemManage_Handler+0x4>

080028ee <BusFault_Handler>:
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	e7fe      	b.n	80028f2 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	e7fe      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fa <SVC_Handler>:
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <DebugMon_Handler>:
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <SysTick_Handler>:
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
 8002922:	f7fe fe97 	bl	8001654 <HAL_SYSTICK_Callback>
 8002926:	f001 fe27 	bl	8004578 <HAL_IncTick>
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}

0800292e <_getpid>:
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
 8002932:	2301      	movs	r3, #1
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <_kill>:
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	f003 fb4f 	bl	8005fe8 <__errno>
 800294a:	4603      	mov	r3, r0
 800294c:	2216      	movs	r2, #22
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_exit>:
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffe7 	bl	800293c <_kill>
 800296e:	e7fe      	b.n	800296e <_exit+0x12>

08002970 <_read>:
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00a      	b.n	8002998 <_read+0x28>
 8002982:	f3af 8000 	nop.w
 8002986:	4601      	mov	r1, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60ba      	str	r2, [r7, #8]
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	dbf0      	blt.n	8002982 <_read+0x12>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_close>:
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <_fstat>:
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	2300      	movs	r3, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <_isatty>:
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	2301      	movs	r3, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <_lseek>:
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	2300      	movs	r3, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
	...

08002a0c <_sbrk>:
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <_sbrk+0x5c>)
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <_sbrk+0x60>)
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <_sbrk+0x64>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <_sbrk+0x22>
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <_sbrk+0x64>)
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <_sbrk+0x68>)
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d207      	bcs.n	8002a4c <_sbrk+0x40>
 8002a3c:	f003 fad4 	bl	8005fe8 <__errno>
 8002a40:	4603      	mov	r3, r0
 8002a42:	220c      	movs	r2, #12
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	e009      	b.n	8002a60 <_sbrk+0x54>
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <_sbrk+0x64>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <_sbrk+0x64>)
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20005000 	.word	0x20005000
 8002a6c:	00000400 	.word	0x00000400
 8002a70:	200004b8 	.word	0x200004b8
 8002a74:	20000960 	.word	0x20000960

08002a78 <SystemInit>:
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <Reset_Handler>:
 8002a84:	480c      	ldr	r0, [pc, #48]	; (8002ab8 <LoopFillZerobss+0x12>)
 8002a86:	490d      	ldr	r1, [pc, #52]	; (8002abc <LoopFillZerobss+0x16>)
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <LoopFillZerobss+0x1a>)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e002      	b.n	8002a94 <LoopCopyDataInit>

08002a8e <CopyDataInit>:
 8002a8e:	58d4      	ldr	r4, [r2, r3]
 8002a90:	50c4      	str	r4, [r0, r3]
 8002a92:	3304      	adds	r3, #4

08002a94 <LoopCopyDataInit>:
 8002a94:	18c4      	adds	r4, r0, r3
 8002a96:	428c      	cmp	r4, r1
 8002a98:	d3f9      	bcc.n	8002a8e <CopyDataInit>
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <LoopFillZerobss+0x1e>)
 8002a9c:	4c0a      	ldr	r4, [pc, #40]	; (8002ac8 <LoopFillZerobss+0x22>)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e001      	b.n	8002aa6 <LoopFillZerobss>

08002aa2 <FillZerobss>:
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	3204      	adds	r2, #4

08002aa6 <LoopFillZerobss>:
 8002aa6:	42a2      	cmp	r2, r4
 8002aa8:	d3fb      	bcc.n	8002aa2 <FillZerobss>
 8002aaa:	f7ff ffe5 	bl	8002a78 <SystemInit>
 8002aae:	f003 fab3 	bl	8006018 <__libc_init_array>
 8002ab2:	f7ff fd7b 	bl	80025ac <main>
 8002ab6:	4770      	bx	lr
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	200000fc 	.word	0x200000fc
 8002ac0:	0800e294 	.word	0x0800e294
 8002ac4:	20000100 	.word	0x20000100
 8002ac8:	2000095c 	.word	0x2000095c

08002acc <ADC1_2_IRQHandler>:
 8002acc:	e7fe      	b.n	8002acc <ADC1_2_IRQHandler>
	...

08002ad0 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <ili9488_Init+0x114>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d115      	bne.n	8002b0c <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8002ae0:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <ili9488_Init+0x114>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <ili9488_Init+0x114>)
 8002aec:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8002aee:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <ili9488_Init+0x114>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <ili9488_Init+0x2e>
      LCD_IO_Init();
 8002afa:	f001 fb75 	bl	80041e8 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <ili9488_Init+0x114>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <ili9488_Init+0x114>)
 8002b0a:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8002b0c:	2069      	movs	r0, #105	; 0x69
 8002b0e:	f001 fb49 	bl	80041a4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f001 fbfc 	bl	8004310 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8002b18:	2005      	movs	r0, #5
 8002b1a:	f001 fb43 	bl	80041a4 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8002b1e:	220f      	movs	r2, #15
 8002b20:	4931      	ldr	r1, [pc, #196]	; (8002be8 <ili9488_Init+0x118>)
 8002b22:	20e0      	movs	r0, #224	; 0xe0
 8002b24:	f001 fc52 	bl	80043cc <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8002b28:	220f      	movs	r2, #15
 8002b2a:	4930      	ldr	r1, [pc, #192]	; (8002bec <ili9488_Init+0x11c>)
 8002b2c:	20e1      	movs	r0, #225	; 0xe1
 8002b2e:	f001 fc4d 	bl	80043cc <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8002b32:	2202      	movs	r2, #2
 8002b34:	492e      	ldr	r1, [pc, #184]	; (8002bf0 <ili9488_Init+0x120>)
 8002b36:	20c0      	movs	r0, #192	; 0xc0
 8002b38:	f001 fc48 	bl	80043cc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002b3c:	2005      	movs	r0, #5
 8002b3e:	f001 fb31 	bl	80041a4 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8002b42:	20c1      	movs	r0, #193	; 0xc1
 8002b44:	f001 fbe4 	bl	8004310 <LCD_IO_WriteCmd8>
 8002b48:	2041      	movs	r0, #65	; 0x41
 8002b4a:	f001 fbfd 	bl	8004348 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8002b4e:	2005      	movs	r0, #5
 8002b50:	f001 fb28 	bl	80041a4 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8002b54:	2203      	movs	r2, #3
 8002b56:	4927      	ldr	r1, [pc, #156]	; (8002bf4 <ili9488_Init+0x124>)
 8002b58:	20c5      	movs	r0, #197	; 0xc5
 8002b5a:	f001 fc37 	bl	80043cc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002b5e:	2005      	movs	r0, #5
 8002b60:	f001 fb20 	bl	80041a4 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8002b64:	203a      	movs	r0, #58	; 0x3a
 8002b66:	f001 fbd3 	bl	8004310 <LCD_IO_WriteCmd8>
 8002b6a:	2066      	movs	r0, #102	; 0x66
 8002b6c:	f001 fbec 	bl	8004348 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 8002b70:	20b0      	movs	r0, #176	; 0xb0
 8002b72:	f001 fbcd 	bl	8004310 <LCD_IO_WriteCmd8>
 8002b76:	2080      	movs	r0, #128	; 0x80
 8002b78:	f001 fbe6 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8002b7c:	20b1      	movs	r0, #177	; 0xb1
 8002b7e:	f001 fbc7 	bl	8004310 <LCD_IO_WriteCmd8>
 8002b82:	20a0      	movs	r0, #160	; 0xa0
 8002b84:	f001 fbe0 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8002b88:	20b4      	movs	r0, #180	; 0xb4
 8002b8a:	f001 fbc1 	bl	8004310 <LCD_IO_WriteCmd8>
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f001 fbda 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8002b94:	2202      	movs	r2, #2
 8002b96:	4918      	ldr	r1, [pc, #96]	; (8002bf8 <ili9488_Init+0x128>)
 8002b98:	20b6      	movs	r0, #182	; 0xb6
 8002b9a:	f001 fc17 	bl	80043cc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8002b9e:	20e9      	movs	r0, #233	; 0xe9
 8002ba0:	f001 fbb6 	bl	8004310 <LCD_IO_WriteCmd8>
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f001 fbcf 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8002baa:	2204      	movs	r2, #4
 8002bac:	4913      	ldr	r1, [pc, #76]	; (8002bfc <ili9488_Init+0x12c>)
 8002bae:	20f7      	movs	r0, #247	; 0xf7
 8002bb0:	f001 fc0c 	bl	80043cc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002bb4:	2005      	movs	r0, #5
 8002bb6:	f001 faf5 	bl	80041a4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8002bba:	2011      	movs	r0, #17
 8002bbc:	f001 fba8 	bl	8004310 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8002bc0:	2078      	movs	r0, #120	; 0x78
 8002bc2:	f001 faef 	bl	80041a4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8002bc6:	2029      	movs	r0, #41	; 0x29
 8002bc8:	f001 fba2 	bl	8004310 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8002bcc:	2005      	movs	r0, #5
 8002bce:	f001 fae9 	bl	80041a4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8002bd2:	2036      	movs	r0, #54	; 0x36
 8002bd4:	f001 fb9c 	bl	8004310 <LCD_IO_WriteCmd8>
 8002bd8:	20e8      	movs	r0, #232	; 0xe8
 8002bda:	f001 fbb5 	bl	8004348 <LCD_IO_WriteData8>
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200004bc 	.word	0x200004bc
 8002be8:	080078a4 	.word	0x080078a4
 8002bec:	080078b4 	.word	0x080078b4
 8002bf0:	080078c4 	.word	0x080078c4
 8002bf4:	080078c8 	.word	0x080078c8
 8002bf8:	080078cc 	.word	0x080078cc
 8002bfc:	080078d0 	.word	0x080078d0

08002c00 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8002c04:	2011      	movs	r0, #17
 8002c06:	f001 fb83 	bl	8004310 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f001 fad6 	bl	80041bc <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8002c18:	2010      	movs	r0, #16
 8002c1a:	f001 fb79 	bl	8004310 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f001 facc 	bl	80041bc <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8002c2c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8002c3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <ili9488_ReadID+0x40>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8002c5a:	f7ff ff39 	bl	8002ad0 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8002c5e:	1d39      	adds	r1, r7, #4
 8002c60:	2300      	movs	r3, #0
 8002c62:	2203      	movs	r2, #3
 8002c64:	2004      	movs	r0, #4
 8002c66:	f001 fbf5 	bl	8004454 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a06      	ldr	r2, [pc, #24]	; (8002c8c <ili9488_ReadID+0x44>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d102      	bne.n	8002c7e <ili9488_ReadID+0x36>
    return 0x9488;
 8002c78:	f249 4388 	movw	r3, #38024	; 0x9488
 8002c7c:	e000      	b.n	8002c80 <ili9488_ReadID+0x38>
  return 0;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200004bc 	.word	0x200004bc
 8002c8c:	00668054 	.word	0x00668054

08002c90 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	460a      	mov	r2, r1
 8002c9a:	80fb      	strh	r3, [r7, #6]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002ca0:	202a      	movs	r0, #42	; 0x2a
 8002ca2:	f001 fb35 	bl	8004310 <LCD_IO_WriteCmd8>
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 fb4a 	bl	8004348 <LCD_IO_WriteData8>
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fb45 	bl	8004348 <LCD_IO_WriteData8>
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fb3e 	bl	8004348 <LCD_IO_WriteData8>
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fb39 	bl	8004348 <LCD_IO_WriteData8>
 8002cd6:	202b      	movs	r0, #43	; 0x2b
 8002cd8:	f001 fb1a 	bl	8004310 <LCD_IO_WriteCmd8>
 8002cdc:	88bb      	ldrh	r3, [r7, #4]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 fb2f 	bl	8004348 <LCD_IO_WriteData8>
 8002cea:	88bb      	ldrh	r3, [r7, #4]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fb2a 	bl	8004348 <LCD_IO_WriteData8>
 8002cf4:	88bb      	ldrh	r3, [r7, #4]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 fb23 	bl	8004348 <LCD_IO_WriteData8>
 8002d02:	88bb      	ldrh	r3, [r7, #4]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fb1e 	bl	8004348 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	121b      	asrs	r3, r3, #8
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f023 0307 	bic.w	r3, r3, #7
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fb0c 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	10db      	asrs	r3, r3, #3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 fb03 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fafd 	bl	8004348 <LCD_IO_WriteData8>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	80fb      	strh	r3, [r7, #6]
 8002d60:	460b      	mov	r3, r1
 8002d62:	80bb      	strh	r3, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002d68:	202a      	movs	r0, #42	; 0x2a
 8002d6a:	f001 fad1 	bl	8004310 <LCD_IO_WriteCmd8>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fae6 	bl	8004348 <LCD_IO_WriteData8>
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fae1 	bl	8004348 <LCD_IO_WriteData8>
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 fada 	bl	8004348 <LCD_IO_WriteData8>
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fad5 	bl	8004348 <LCD_IO_WriteData8>
 8002d9e:	202b      	movs	r0, #43	; 0x2b
 8002da0:	f001 fab6 	bl	8004310 <LCD_IO_WriteCmd8>
 8002da4:	88bb      	ldrh	r3, [r7, #4]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 facb 	bl	8004348 <LCD_IO_WriteData8>
 8002db2:	88bb      	ldrh	r3, [r7, #4]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 fac6 	bl	8004348 <LCD_IO_WriteData8>
 8002dbc:	88bb      	ldrh	r3, [r7, #4]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 fabf 	bl	8004348 <LCD_IO_WriteData8>
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 faba 	bl	8004348 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002dd4:	202c      	movs	r0, #44	; 0x2c
 8002dd6:	f001 fa9b 	bl	8004310 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff99 	bl	8002d14 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	460a      	mov	r2, r1
 8002df4:	80fb      	strh	r3, [r7, #6]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002dfa:	202a      	movs	r0, #42	; 0x2a
 8002dfc:	f001 fa88 	bl	8004310 <LCD_IO_WriteCmd8>
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fa9d 	bl	8004348 <LCD_IO_WriteData8>
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 fa98 	bl	8004348 <LCD_IO_WriteData8>
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fa91 	bl	8004348 <LCD_IO_WriteData8>
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fa8c 	bl	8004348 <LCD_IO_WriteData8>
 8002e30:	202b      	movs	r0, #43	; 0x2b
 8002e32:	f001 fa6d 	bl	8004310 <LCD_IO_WriteCmd8>
 8002e36:	88bb      	ldrh	r3, [r7, #4]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fa82 	bl	8004348 <LCD_IO_WriteData8>
 8002e44:	88bb      	ldrh	r3, [r7, #4]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 fa7d 	bl	8004348 <LCD_IO_WriteData8>
 8002e4e:	88bb      	ldrh	r3, [r7, #4]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 fa76 	bl	8004348 <LCD_IO_WriteData8>
 8002e5c:	88bb      	ldrh	r3, [r7, #4]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fa71 	bl	8004348 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8002e66:	f107 010e 	add.w	r1, r7, #14
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	202e      	movs	r0, #46	; 0x2e
 8002e70:	f001 fb16 	bl	80044a0 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8002e74:	89fb      	ldrh	r3, [r7, #14]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4604      	mov	r4, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	80fb      	strh	r3, [r7, #6]
 8002e92:	4603      	mov	r3, r0
 8002e94:	80bb      	strh	r3, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	807b      	strh	r3, [r7, #2]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <ili9488_SetDisplayWindow+0xc8>)
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	8013      	strh	r3, [r2, #0]
 8002ea4:	88ba      	ldrh	r2, [r7, #4]
 8002ea6:	883b      	ldrh	r3, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <ili9488_SetDisplayWindow+0xcc>)
 8002eb2:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8002eb4:	202a      	movs	r0, #42	; 0x2a
 8002eb6:	f001 fa2b 	bl	8004310 <LCD_IO_WriteCmd8>
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fa40 	bl	8004348 <LCD_IO_WriteData8>
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fa3b 	bl	8004348 <LCD_IO_WriteData8>
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	121b      	asrs	r3, r3, #8
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fa32 	bl	8004348 <LCD_IO_WriteData8>
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 fa27 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8002efa:	202b      	movs	r0, #43	; 0x2b
 8002efc:	f001 fa08 	bl	8004310 <LCD_IO_WriteCmd8>
 8002f00:	88bb      	ldrh	r3, [r7, #4]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fa1d 	bl	8004348 <LCD_IO_WriteData8>
 8002f0e:	88bb      	ldrh	r3, [r7, #4]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 fa18 	bl	8004348 <LCD_IO_WriteData8>
 8002f18:	88ba      	ldrh	r2, [r7, #4]
 8002f1a:	883b      	ldrh	r3, [r7, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	121b      	asrs	r3, r3, #8
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 fa0f 	bl	8004348 <LCD_IO_WriteData8>
 8002f2a:	88bb      	ldrh	r3, [r7, #4]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	883b      	ldrh	r3, [r7, #0]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 fa04 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	200004be 	.word	0x200004be
 8002f4c:	200004c0 	.word	0x200004c0

08002f50 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	4604      	mov	r4, r0
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4623      	mov	r3, r4
 8002f60:	80fb      	strh	r3, [r7, #6]
 8002f62:	4603      	mov	r3, r0
 8002f64:	80bb      	strh	r3, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	807b      	strh	r3, [r7, #2]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 8002f6e:	883a      	ldrh	r2, [r7, #0]
 8002f70:	8879      	ldrh	r1, [r7, #2]
 8002f72:	88b8      	ldrh	r0, [r7, #4]
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f000 f820 	bl	8002fbe <ili9488_FillRect>
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd90      	pop	{r4, r7, pc}

08002f86 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f86:	b590      	push	{r4, r7, lr}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af02      	add	r7, sp, #8
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	4608      	mov	r0, r1
 8002f90:	4611      	mov	r1, r2
 8002f92:	461a      	mov	r2, r3
 8002f94:	4623      	mov	r3, r4
 8002f96:	80fb      	strh	r3, [r7, #6]
 8002f98:	4603      	mov	r3, r0
 8002f9a:	80bb      	strh	r3, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8002fa4:	883a      	ldrh	r2, [r7, #0]
 8002fa6:	8879      	ldrh	r1, [r7, #2]
 8002fa8:	88b8      	ldrh	r0, [r7, #4]
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f000 f804 	bl	8002fbe <ili9488_FillRect>
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}

08002fbe <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002fbe:	b590      	push	{r4, r7, lr}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	4608      	mov	r0, r1
 8002fc8:	4611      	mov	r1, r2
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4623      	mov	r3, r4
 8002fce:	80fb      	strh	r3, [r7, #6]
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	80bb      	strh	r3, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002fdc:	883b      	ldrh	r3, [r7, #0]
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	88b9      	ldrh	r1, [r7, #4]
 8002fe2:	88f8      	ldrh	r0, [r7, #6]
 8002fe4:	f7ff ff4c 	bl	8002e80 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002fe8:	202c      	movs	r0, #44	; 0x2c
 8002fea:	f001 f991 	bl	8004310 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	883a      	ldrh	r2, [r7, #0]
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 8002ff8:	e003      	b.n	8003002 <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 8002ffa:	8c3b      	ldrh	r3, [r7, #32]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fe89 	bl	8002d14 <ili9488_write16to24>
  while(XYsize--)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e5a      	subs	r2, r3, #1
 8003006:	60fa      	str	r2, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f6      	bne.n	8002ffa <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bd90      	pop	{r4, r7, pc}
	...

08003018 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	603a      	str	r2, [r7, #0]
 8003022:	80fb      	strh	r3, [r7, #6]
 8003024:	460b      	mov	r3, r1
 8003026:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3316      	adds	r3, #22
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b29a      	uxth	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	3317      	adds	r3, #23
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	b29b      	uxth	r3, r3
 8003044:	4413      	add	r3, r2
 8003046:	b29a      	uxth	r2, r3
 8003048:	88bb      	ldrh	r3, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	3302      	adds	r3, #2
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	3304      	adds	r3, #4
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	330a      	adds	r3, #10
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	461a      	mov	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 800309c:	2036      	movs	r0, #54	; 0x36
 800309e:	f001 f937 	bl	8004310 <LCD_IO_WriteCmd8>
 80030a2:	20a8      	movs	r0, #168	; 0xa8
 80030a4:	f001 f950 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 80030a8:	202b      	movs	r0, #43	; 0x2b
 80030aa:	f001 f931 	bl	8004310 <LCD_IO_WriteCmd8>
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <ili9488_DrawBitmap+0x118>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80030b6:	3301      	adds	r3, #1
 80030b8:	121b      	asrs	r3, r3, #8
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 f943 	bl	8004348 <LCD_IO_WriteData8>
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <ili9488_DrawBitmap+0x118>)
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f93a 	bl	8004348 <LCD_IO_WriteData8>
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <ili9488_DrawBitmap+0x11c>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80030dc:	3301      	adds	r3, #1
 80030de:	121b      	asrs	r3, r3, #8
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f930 	bl	8004348 <LCD_IO_WriteData8>
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <ili9488_DrawBitmap+0x11c>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f001 f927 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80030fa:	202c      	movs	r0, #44	; 0x2c
 80030fc:	f001 f908 	bl	8004310 <LCD_IO_WriteCmd8>
  while(size--)
 8003100:	e007      	b.n	8003112 <ili9488_DrawBitmap+0xfa>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fe04 	bl	8002d14 <ili9488_write16to24>
    pbmp+= 2;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	3302      	adds	r3, #2
 8003110:	603b      	str	r3, [r7, #0]
  while(size--)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e5a      	subs	r2, r3, #1
 8003116:	60fa      	str	r2, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f2      	bne.n	8003102 <ili9488_DrawBitmap+0xea>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 800311c:	2036      	movs	r0, #54	; 0x36
 800311e:	f001 f8f7 	bl	8004310 <LCD_IO_WriteCmd8>
 8003122:	20e8      	movs	r0, #232	; 0xe8
 8003124:	f001 f910 	bl	8004348 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	200004c0 	.word	0x200004c0
 8003134:	200004be 	.word	0x200004be

08003138 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4623      	mov	r3, r4
 8003148:	80fb      	strh	r3, [r7, #6]
 800314a:	4603      	mov	r3, r0
 800314c:	80bb      	strh	r3, [r7, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	807b      	strh	r3, [r7, #2]
 8003152:	4613      	mov	r3, r2
 8003154:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	883a      	ldrh	r2, [r7, #0]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8003160:	883b      	ldrh	r3, [r7, #0]
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	88b9      	ldrh	r1, [r7, #4]
 8003166:	88f8      	ldrh	r0, [r7, #6]
 8003168:	f7ff fe8a 	bl	8002e80 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800316c:	202c      	movs	r0, #44	; 0x2c
 800316e:	f001 f8cf 	bl	8004310 <LCD_IO_WriteCmd8>
  while(size--)
 8003172:	e007      	b.n	8003184 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fdcb 	bl	8002d14 <ili9488_write16to24>
    pdata++;
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	3302      	adds	r3, #2
 8003182:	623b      	str	r3, [r7, #32]
  while(size--)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e5a      	subs	r2, r3, #1
 8003188:	60fa      	str	r2, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f2      	bne.n	8003174 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	4604      	mov	r4, r0
 80031a0:	4608      	mov	r0, r1
 80031a2:	4611      	mov	r1, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	4623      	mov	r3, r4
 80031a8:	80fb      	strh	r3, [r7, #6]
 80031aa:	4603      	mov	r3, r0
 80031ac:	80bb      	strh	r3, [r7, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	807b      	strh	r3, [r7, #2]
 80031b2:	4613      	mov	r3, r2
 80031b4:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	883a      	ldrh	r2, [r7, #0]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80031c4:	883b      	ldrh	r3, [r7, #0]
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	88b9      	ldrh	r1, [r7, #4]
 80031ca:	88f8      	ldrh	r0, [r7, #6]
 80031cc:	f7ff fe58 	bl	8002e80 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 80031d0:	2301      	movs	r3, #1
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	6a39      	ldr	r1, [r7, #32]
 80031d6:	202e      	movs	r0, #46	; 0x2e
 80031d8:	f001 f962 	bl	80044a0 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}

080031e4 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
 80031ee:	460b      	mov	r3, r1
 80031f0:	80bb      	strh	r3, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 80031f6:	4b28      	ldr	r3, [pc, #160]	; (8003298 <ili9488_Scroll+0xb4>)
 80031f8:	88db      	ldrh	r3, [r3, #6]
 80031fa:	88ba      	ldrh	r2, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d104      	bne.n	800320a <ili9488_Scroll+0x26>
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <ili9488_Scroll+0xb4>)
 8003202:	885b      	ldrh	r3, [r3, #2]
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	429a      	cmp	r2, r3
 8003208:	d013      	beq.n	8003232 <ili9488_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 800320a:	4a23      	ldr	r2, [pc, #140]	; (8003298 <ili9488_Scroll+0xb4>)
 800320c:	88bb      	ldrh	r3, [r7, #4]
 800320e:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8003210:	4a21      	ldr	r2, [pc, #132]	; (8003298 <ili9488_Scroll+0xb4>)
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8003216:	88ba      	ldrh	r2, [r7, #4]
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	4413      	add	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8003222:	b29a      	uxth	r2, r3
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <ili9488_Scroll+0xb4>)
 8003226:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8003228:	2203      	movs	r2, #3
 800322a:	491c      	ldr	r1, [pc, #112]	; (800329c <ili9488_Scroll+0xb8>)
 800322c:	2033      	movs	r0, #51	; 0x33
 800322e:	f001 f8ed 	bl	800440c <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8003232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <ili9488_Scroll+0xb4>)
 8003238:	8892      	ldrh	r2, [r2, #4]
 800323a:	fb93 f1f2 	sdiv	r1, r3, r2
 800323e:	fb01 f202 	mul.w	r2, r1, r2
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8003246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324a:	2b00      	cmp	r3, #0
 800324c:	da0a      	bge.n	8003264 <ili9488_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <ili9488_Scroll+0xb4>)
 8003250:	889a      	ldrh	r2, [r3, #4]
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	4413      	add	r3, r2
 8003256:	b29a      	uxth	r2, r3
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <ili9488_Scroll+0xb4>)
 800325a:	885b      	ldrh	r3, [r3, #2]
 800325c:	4413      	add	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	80fb      	strh	r3, [r7, #6]
 8003262:	e005      	b.n	8003270 <ili9488_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <ili9488_Scroll+0xb4>)
 8003266:	885a      	ldrh	r2, [r3, #2]
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	4413      	add	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8003270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003274:	4a08      	ldr	r2, [pc, #32]	; (8003298 <ili9488_Scroll+0xb4>)
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	4293      	cmp	r3, r2
 800327a:	d009      	beq.n	8003290 <ili9488_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <ili9488_Scroll+0xb4>)
 8003280:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <ili9488_Scroll+0xb4>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	4619      	mov	r1, r3
 800328a:	2037      	movs	r0, #55	; 0x37
 800328c:	f001 f878 	bl	8004380 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	200004c4 	.word	0x200004c4
 800329c:	200004c6 	.word	0x200004c6

080032a0 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <BSP_LCD_Init+0x3c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <BSP_LCD_Init+0x40>)
 80032b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b8:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <BSP_LCD_Init+0x40>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <BSP_LCD_Init+0x40>)
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <BSP_LCD_Init+0x44>)
 80032c4:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 80032c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032ca:	f000 f853 	bl	8003374 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80032d2:	79fb      	ldrb	r3, [r7, #7]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	2000008c 	.word	0x2000008c
 80032e0:	200004cc 	.word	0x200004cc
 80032e4:	20000018 	.word	0x20000018

080032e8 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <BSP_LCD_GetXSize+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	4798      	blx	r3
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000008c 	.word	0x2000008c

08003300 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <BSP_LCD_GetYSize+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	4798      	blx	r3
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000008c 	.word	0x2000008c

08003318 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <BSP_LCD_SetTextColor+0x1c>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	200004cc 	.word	0x200004cc

08003338 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4a03      	ldr	r2, [pc, #12]	; (8003354 <BSP_LCD_SetBackColor+0x1c>)
 8003346:	6053      	str	r3, [r2, #4]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200004cc 	.word	0x200004cc

08003358 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <BSP_LCD_SetFont+0x18>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6093      	str	r3, [r2, #8]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	200004cc 	.word	0x200004cc

08003374 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af02      	add	r7, sp, #8
 800337a:	4603      	mov	r3, r0
 800337c:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <BSP_LCD_Clear+0x38>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003384:	f7ff ffb0 	bl	80032e8 <BSP_LCD_GetXSize>
 8003388:	4603      	mov	r3, r0
 800338a:	461d      	mov	r5, r3
 800338c:	f7ff ffb8 	bl	8003300 <BSP_LCD_GetYSize>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	462a      	mov	r2, r5
 800339c:	2100      	movs	r1, #0
 800339e:	2000      	movs	r0, #0
 80033a0:	47a0      	blx	r4
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bdb0      	pop	{r4, r5, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2000008c 	.word	0x2000008c

080033b0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
 80033ba:	460b      	mov	r3, r1
 80033bc:	80bb      	strh	r3, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <BSP_LCD_DisplayChar+0x50>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <BSP_LCD_DisplayChar+0x50>)
 80033ce:	6889      	ldr	r1, [r1, #8]
 80033d0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80033d2:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <BSP_LCD_DisplayChar+0x50>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	889b      	ldrh	r3, [r3, #4]
 80033dc:	3307      	adds	r3, #7
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da00      	bge.n	80033e4 <BSP_LCD_DisplayChar+0x34>
 80033e2:	3307      	adds	r3, #7
 80033e4:	10db      	asrs	r3, r3, #3
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80033ea:	441a      	add	r2, r3
 80033ec:	88b9      	ldrh	r1, [r7, #4]
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f9db 	bl	80037ac <DrawChar>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200004cc 	.word	0x200004cc

08003404 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60ba      	str	r2, [r7, #8]
 800340c:	461a      	mov	r2, r3
 800340e:	4603      	mov	r3, r0
 8003410:	81fb      	strh	r3, [r7, #14]
 8003412:	460b      	mov	r3, r1
 8003414:	81bb      	strh	r3, [r7, #12]
 8003416:	4613      	mov	r3, r2
 8003418:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800341a:	2301      	movs	r3, #1
 800341c:	83fb      	strh	r3, [r7, #30]
 800341e:	2300      	movs	r3, #0
 8003420:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800342e:	e002      	b.n	8003436 <BSP_LCD_DisplayStringAt+0x32>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	3301      	adds	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	617a      	str	r2, [r7, #20]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f6      	bne.n	8003430 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8003442:	f7ff ff51 	bl	80032e8 <BSP_LCD_GetXSize>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <BSP_LCD_DisplayStringAt+0x11c>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	889b      	ldrh	r3, [r3, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	b29b      	uxth	r3, r3
 8003456:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d014      	beq.n	8003488 <BSP_LCD_DisplayStringAt+0x84>
 800345e:	2b03      	cmp	r3, #3
 8003460:	dc23      	bgt.n	80034aa <BSP_LCD_DisplayStringAt+0xa6>
 8003462:	2b01      	cmp	r3, #1
 8003464:	d002      	beq.n	800346c <BSP_LCD_DisplayStringAt+0x68>
 8003466:	2b02      	cmp	r3, #2
 8003468:	d011      	beq.n	800348e <BSP_LCD_DisplayStringAt+0x8a>
 800346a:	e01e      	b.n	80034aa <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	4a2b      	ldr	r2, [pc, #172]	; (8003520 <BSP_LCD_DisplayStringAt+0x11c>)
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	8892      	ldrh	r2, [r2, #4]
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	89fb      	ldrh	r3, [r7, #14]
 8003482:	4413      	add	r3, r2
 8003484:	83fb      	strh	r3, [r7, #30]
      break;
 8003486:	e013      	b.n	80034b0 <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003488:	89fb      	ldrh	r3, [r7, #14]
 800348a:	83fb      	strh	r3, [r7, #30]
      break;
 800348c:	e010      	b.n	80034b0 <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	b29b      	uxth	r3, r3
 8003496:	4a22      	ldr	r2, [pc, #136]	; (8003520 <BSP_LCD_DisplayStringAt+0x11c>)
 8003498:	6892      	ldr	r2, [r2, #8]
 800349a:	8892      	ldrh	r2, [r2, #4]
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	89fb      	ldrh	r3, [r7, #14]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	83fb      	strh	r3, [r7, #30]
      break;
 80034a8:	e002      	b.n	80034b0 <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	83fb      	strh	r3, [r7, #30]
      break;
 80034ae:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80034b0:	e012      	b.n	80034d8 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	89b9      	ldrh	r1, [r7, #12]
 80034b8:	8bfb      	ldrh	r3, [r7, #30]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ff78 	bl	80033b0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <BSP_LCD_DisplayStringAt+0x11c>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	889a      	ldrh	r2, [r3, #4]
 80034c6:	8bfb      	ldrh	r3, [r7, #30]
 80034c8:	4413      	add	r3, r2
 80034ca:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
    i++;
 80034d2:	8bbb      	ldrh	r3, [r7, #28]
 80034d4:	3301      	adds	r3, #1
 80034d6:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2dc      	uxtb	r4, r3
 80034e6:	f7ff feff 	bl	80032e8 <BSP_LCD_GetXSize>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4619      	mov	r1, r3
 80034ee:	8bbb      	ldrh	r3, [r7, #28]
 80034f0:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <BSP_LCD_DisplayStringAt+0x11c>)
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	8892      	ldrh	r2, [r2, #4]
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	1acb      	subs	r3, r1, r3
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <BSP_LCD_DisplayStringAt+0x11c>)
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	8892      	ldrh	r2, [r2, #4]
 8003504:	4293      	cmp	r3, r2
 8003506:	bfac      	ite	ge
 8003508:	2301      	movge	r3, #1
 800350a:	2300      	movlt	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4023      	ands	r3, r4
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1cd      	bne.n	80034b2 <BSP_LCD_DisplayStringAt+0xae>
  }
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	3724      	adds	r7, #36	; 0x24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	200004cc 	.word	0x200004cc

08003524 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
 800352e:	460b      	mov	r3, r1
 8003530:	80bb      	strh	r3, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <BSP_LCD_DrawPixel+0x34>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d006      	beq.n	800354e <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <BSP_LCD_DrawPixel+0x34>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	88b9      	ldrh	r1, [r7, #4]
 800354a:	88f8      	ldrh	r0, [r7, #6]
 800354c:	4798      	blx	r3
  }
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	2000008c 	.word	0x2000008c

0800355c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
 8003566:	460b      	mov	r3, r1
 8003568:	80bb      	strh	r3, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <BSP_LCD_DrawHLine+0x6c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <BSP_LCD_DrawHLine+0x6c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6a1c      	ldr	r4, [r3, #32]
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <BSP_LCD_DrawHLine+0x70>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	b298      	uxth	r0, r3
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	88ba      	ldrh	r2, [r7, #4]
 800358c:	88f9      	ldrh	r1, [r7, #6]
 800358e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003590:	e015      	b.n	80035be <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e00e      	b.n	80035b6 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	b29a      	uxth	r2, r3
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	4413      	add	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <BSP_LCD_DrawHLine+0x70>)
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	b292      	uxth	r2, r2
 80035a8:	88b9      	ldrh	r1, [r7, #4]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ffba 	bl	8003524 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	887b      	ldrh	r3, [r7, #2]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d3ec      	bcc.n	8003598 <BSP_LCD_DrawHLine+0x3c>
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000008c 	.word	0x2000008c
 80035cc:	200004cc 	.word	0x200004cc

080035d0 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	80fb      	strh	r3, [r7, #6]
 80035da:	460b      	mov	r3, r1
 80035dc:	80bb      	strh	r3, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <BSP_LCD_DrawVLine+0x6c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <BSP_LCD_DrawVLine+0x6c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <BSP_LCD_DrawVLine+0x70>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b298      	uxth	r0, r3
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	88ba      	ldrh	r2, [r7, #4]
 8003600:	88f9      	ldrh	r1, [r7, #6]
 8003602:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8003604:	e015      	b.n	8003632 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	e00e      	b.n	800362a <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	b29a      	uxth	r2, r3
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	b299      	uxth	r1, r3
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <BSP_LCD_DrawVLine+0x70>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	b29a      	uxth	r2, r3
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ff80 	bl	8003524 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	429a      	cmp	r2, r3
 8003630:	d3ec      	bcc.n	800360c <BSP_LCD_DrawVLine+0x3c>
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}
 800363a:	bf00      	nop
 800363c:	2000008c 	.word	0x2000008c
 8003640:	200004cc 	.word	0x200004cc

08003644 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4604      	mov	r4, r0
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4623      	mov	r3, r4
 8003654:	80fb      	strh	r3, [r7, #6]
 8003656:	4603      	mov	r3, r0
 8003658:	80bb      	strh	r3, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	807b      	strh	r3, [r7, #2]
 800365e:	4613      	mov	r3, r2
 8003660:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	88b9      	ldrh	r1, [r7, #4]
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff77 	bl	800355c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 800366e:	88ba      	ldrh	r2, [r7, #4]
 8003670:	883b      	ldrh	r3, [r7, #0]
 8003672:	4413      	add	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b299      	uxth	r1, r3
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff6c 	bl	800355c <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003684:	883a      	ldrh	r2, [r7, #0]
 8003686:	88b9      	ldrh	r1, [r7, #4]
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ffa0 	bl	80035d0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 8003690:	88fa      	ldrh	r2, [r7, #6]
 8003692:	887b      	ldrh	r3, [r7, #2]
 8003694:	4413      	add	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	883a      	ldrh	r2, [r7, #0]
 800369e:	88b9      	ldrh	r1, [r7, #4]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff95 	bl	80035d0 <BSP_LCD_DrawVLine>
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}
	...

080036b0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	603a      	str	r2, [r7, #0]
 80036ba:	80fb      	strh	r3, [r7, #6]
 80036bc:	460b      	mov	r3, r1
 80036be:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	3312      	adds	r3, #18
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	3313      	adds	r3, #19
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	441a      	add	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	3314      	adds	r3, #20
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	441a      	add	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	3315      	adds	r3, #21
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	4413      	add	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	3316      	adds	r3, #22
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	3317      	adds	r3, #23
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	441a      	add	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	3318      	adds	r3, #24
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	441a      	add	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	3319      	adds	r3, #25
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	061b      	lsls	r3, r3, #24
 8003714:	4413      	add	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	b29b      	uxth	r3, r3
 8003720:	88b9      	ldrh	r1, [r7, #4]
 8003722:	88f8      	ldrh	r0, [r7, #6]
 8003724:	f000 f934 	bl	8003990 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <BSP_LCD_DrawBitmap+0xb0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <BSP_LCD_DrawBitmap+0xb0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	88b9      	ldrh	r1, [r7, #4]
 800373a:	88f8      	ldrh	r0, [r7, #6]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003740:	f7ff fdd2 	bl	80032e8 <BSP_LCD_GetXSize>
 8003744:	4603      	mov	r3, r0
 8003746:	461c      	mov	r4, r3
 8003748:	f7ff fdda 	bl	8003300 <BSP_LCD_GetYSize>
 800374c:	4603      	mov	r3, r0
 800374e:	4622      	mov	r2, r4
 8003750:	2100      	movs	r1, #0
 8003752:	2000      	movs	r0, #0
 8003754:	f000 f91c 	bl	8003990 <SetDisplayWindow>
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}
 8003760:	2000008c 	.word	0x2000008c

08003764 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003764:	b5b0      	push	{r4, r5, r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af02      	add	r7, sp, #8
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	4623      	mov	r3, r4
 8003774:	80fb      	strh	r3, [r7, #6]
 8003776:	4603      	mov	r3, r0
 8003778:	80bb      	strh	r3, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	807b      	strh	r3, [r7, #2]
 800377e:	4613      	mov	r3, r2
 8003780:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <BSP_LCD_FillRect+0x40>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <BSP_LCD_FillRect+0x44>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	883d      	ldrh	r5, [r7, #0]
 8003790:	887a      	ldrh	r2, [r7, #2]
 8003792:	88b9      	ldrh	r1, [r7, #4]
 8003794:	88f8      	ldrh	r0, [r7, #6]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	462b      	mov	r3, r5
 800379a:	47a0      	blx	r4
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}
 80037a4:	2000008c 	.word	0x2000008c
 80037a8:	200004cc 	.word	0x200004cc

080037ac <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	603a      	str	r2, [r7, #0]
 80037b6:	80fb      	strh	r3, [r7, #6]
 80037b8:	460b      	mov	r3, r1
 80037ba:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	2300      	movs	r3, #0
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	82fb      	strh	r3, [r7, #22]
 80037cc:	2300      	movs	r3, #0
 80037ce:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 80037dc:	4b63      	ldr	r3, [pc, #396]	; (800396c <DrawChar+0x1c0>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	88db      	ldrh	r3, [r3, #6]
 80037e2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80037e4:	4b61      	ldr	r3, [pc, #388]	; (800396c <DrawChar+0x1c0>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	889b      	ldrh	r3, [r3, #4]
 80037ea:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80037ec:	8afb      	ldrh	r3, [r7, #22]
 80037ee:	8aba      	ldrh	r2, [r7, #20]
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	331b      	adds	r3, #27
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <DrawChar+0x1c4>)
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8003802:	8afb      	ldrh	r3, [r7, #22]
 8003804:	8aba      	ldrh	r2, [r7, #20]
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	331b      	adds	r3, #27
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	141a      	asrs	r2, r3, #16
 8003810:	4b58      	ldr	r3, [pc, #352]	; (8003974 <DrawChar+0x1c8>)
 8003812:	b292      	uxth	r2, r2
 8003814:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <DrawChar+0x1cc>)
 8003818:	2236      	movs	r2, #54	; 0x36
 800381a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <DrawChar+0x1d0>)
 800381e:	8abb      	ldrh	r3, [r7, #20]
 8003820:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8003822:	8abb      	ldrh	r3, [r7, #20]
 8003824:	141a      	asrs	r2, r3, #16
 8003826:	4b56      	ldr	r3, [pc, #344]	; (8003980 <DrawChar+0x1d4>)
 8003828:	b292      	uxth	r2, r2
 800382a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 800382c:	4a55      	ldr	r2, [pc, #340]	; (8003984 <DrawChar+0x1d8>)
 800382e:	8afb      	ldrh	r3, [r7, #22]
 8003830:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	141a      	asrs	r2, r3, #16
 8003836:	4b54      	ldr	r3, [pc, #336]	; (8003988 <DrawChar+0x1dc>)
 8003838:	b292      	uxth	r2, r2
 800383a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 800383c:	8abb      	ldrh	r3, [r7, #20]
 800383e:	3307      	adds	r3, #7
 8003840:	2b00      	cmp	r3, #0
 8003842:	da00      	bge.n	8003846 <DrawChar+0x9a>
 8003844:	3307      	adds	r3, #7
 8003846:	10db      	asrs	r3, r3, #3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	b2da      	uxtb	r2, r3
 800384e:	8abb      	ldrh	r3, [r7, #20]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8003856:	2300      	movs	r3, #0
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	e078      	b.n	800394e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800385c:	8abb      	ldrh	r3, [r7, #20]
 800385e:	3307      	adds	r3, #7
 8003860:	2b00      	cmp	r3, #0
 8003862:	da00      	bge.n	8003866 <DrawChar+0xba>
 8003864:	3307      	adds	r3, #7
 8003866:	10db      	asrs	r3, r3, #3
 8003868:	461a      	mov	r2, r3
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	4413      	add	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8003876:	8abb      	ldrh	r3, [r7, #20]
 8003878:	3b11      	subs	r3, #17
 800387a:	2b07      	cmp	r3, #7
 800387c:	d80c      	bhi.n	8003898 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	041a      	lsls	r2, r3, #16
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	4313      	orrs	r3, r2
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	3202      	adds	r2, #2
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	4313      	orrs	r3, r2
 8003896:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8003898:	8abb      	ldrh	r3, [r7, #20]
 800389a:	3b09      	subs	r3, #9
 800389c:	2b07      	cmp	r3, #7
 800389e:	d807      	bhi.n	80038b0 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	3201      	adds	r2, #1
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 80038b0:	8abb      	ldrh	r3, [r7, #20]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	2b07      	cmp	r3, #7
 80038b6:	d802      	bhi.n	80038be <DrawChar+0x112>
    {
      line =  pchar[0];
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 80038be:	2300      	movs	r3, #0
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	e03d      	b.n	8003940 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 80038c4:	8afa      	ldrh	r2, [r7, #22]
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	8aba      	ldrh	r2, [r7, #20]
 80038ce:	fb03 f202 	mul.w	r2, r3, r2
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	4413      	add	r3, r2
 80038d6:	331b      	adds	r3, #27
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 80038dc:	8aba      	ldrh	r2, [r7, #20]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	1ad2      	subs	r2, r2, r3
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	4413      	add	r3, r2
 80038e6:	3b01      	subs	r3, #1
 80038e8:	2201      	movs	r2, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d010      	beq.n	800391a <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <DrawChar+0x1c0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	b2d9      	uxtb	r1, r3
 80038fe:	4a23      	ldr	r2, [pc, #140]	; (800398c <DrawChar+0x1e0>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	460a      	mov	r2, r1
 8003906:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <DrawChar+0x1c0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0a1a      	lsrs	r2, r3, #8
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	3301      	adds	r3, #1
 8003912:	b2d1      	uxtb	r1, r2
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <DrawChar+0x1e0>)
 8003916:	54d1      	strb	r1, [r2, r3]
 8003918:	e00f      	b.n	800393a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <DrawChar+0x1c0>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b2d9      	uxtb	r1, r3
 8003920:	4a1a      	ldr	r2, [pc, #104]	; (800398c <DrawChar+0x1e0>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	4413      	add	r3, r2
 8003926:	460a      	mov	r2, r1
 8003928:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <DrawChar+0x1c0>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0a1a      	lsrs	r2, r3, #8
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	3301      	adds	r3, #1
 8003934:	b2d1      	uxtb	r1, r2
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <DrawChar+0x1e0>)
 8003938:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	3301      	adds	r3, #1
 800393e:	623b      	str	r3, [r7, #32]
 8003940:	8abb      	ldrh	r3, [r7, #20]
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	429a      	cmp	r2, r3
 8003946:	d3bd      	bcc.n	80038c4 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	3301      	adds	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
 800394e:	8afb      	ldrh	r3, [r7, #22]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	429a      	cmp	r2, r3
 8003954:	d382      	bcc.n	800385c <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8003956:	88b9      	ldrh	r1, [r7, #4]
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	4a0c      	ldr	r2, [pc, #48]	; (800398c <DrawChar+0x1e0>)
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fea7 	bl	80036b0 <BSP_LCD_DrawBitmap>
}
 8003962:	bf00      	nop
 8003964:	3728      	adds	r7, #40	; 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200004cc 	.word	0x200004cc
 8003970:	200004da 	.word	0x200004da
 8003974:	200004dc 	.word	0x200004dc
 8003978:	200004e2 	.word	0x200004e2
 800397c:	200004ea 	.word	0x200004ea
 8003980:	200004ec 	.word	0x200004ec
 8003984:	200004ee 	.word	0x200004ee
 8003988:	200004f0 	.word	0x200004f0
 800398c:	200004d8 	.word	0x200004d8

08003990 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	80fb      	strh	r3, [r7, #6]
 80039a2:	4603      	mov	r3, r0
 80039a4:	80bb      	strh	r3, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	807b      	strh	r3, [r7, #2]
 80039aa:	4613      	mov	r3, r2
 80039ac:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <SetDisplayWindow+0x40>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <SetDisplayWindow+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69dc      	ldr	r4, [r3, #28]
 80039be:	883b      	ldrh	r3, [r7, #0]
 80039c0:	887a      	ldrh	r2, [r7, #2]
 80039c2:	88b9      	ldrh	r1, [r7, #4]
 80039c4:	88f8      	ldrh	r0, [r7, #6]
 80039c6:	47a0      	blx	r4
  }  
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	2000008c 	.word	0x2000008c

080039d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4906      	ldr	r1, [pc, #24]	; (8003a08 <__NVIC_EnableIRQ+0x34>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	e000e100 	.word	0xe000e100

08003a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db0a      	blt.n	8003a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	490c      	ldr	r1, [pc, #48]	; (8003a58 <__NVIC_SetPriority+0x4c>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a34:	e00a      	b.n	8003a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4908      	ldr	r1, [pc, #32]	; (8003a5c <__NVIC_SetPriority+0x50>)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3b04      	subs	r3, #4
 8003a44:	0112      	lsls	r2, r2, #4
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	440b      	add	r3, r1
 8003a4a:	761a      	strb	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000e100 	.word	0xe000e100
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <LcdDirRead+0x70>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <LcdDirRead+0x70>)
 8003a72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a76:	6013      	str	r3, [r2, #0]
  while(d--)
 8003a78:	e008      	b.n	8003a8c <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <LcdDirRead+0x74>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8003a80:	2000      	movs	r0, #0
 8003a82:	f000 fb7f 	bl	8004184 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 8003a86:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <LcdDirRead+0x74>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
  while(d--)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1e5a      	subs	r2, r3, #1
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f1      	bne.n	8003a7a <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <LcdDirRead+0x70>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ad0 <LcdDirRead+0x70>)
 8003aa0:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8003aa4:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003aa6:	e002      	b.n	8003aae <LcdDirRead+0x4e>
    d = SPIX->DR;
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <LcdDirRead+0x78>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <LcdDirRead+0x7c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f8      	bne.n	8003aa8 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <LcdDirRead+0x78>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8003abe:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <LcdDirRead+0x78>)
 8003ac0:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 8003ac4:	6013      	str	r3, [r2, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40010c04 	.word	0x40010c04
 8003ad4:	422181b4 	.word	0x422181b4
 8003ad8:	40003800 	.word	0x40003800
 8003adc:	42070100 	.word	0x42070100

08003ae0 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <LcdDirWrite+0x5c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <LcdDirWrite+0x5c>)
 8003aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af0:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003af2:	e002      	b.n	8003afa <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <LcdDirWrite+0x5c>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <LcdDirWrite+0x60>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f8      	bne.n	8003af4 <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <LcdDirWrite+0x5c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8003b0a:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <LcdDirWrite+0x5c>)
 8003b0c:	f043 0308 	orr.w	r3, r3, #8
 8003b10:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f000 fb36 	bl	8004184 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003b18:	e002      	b.n	8003b20 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <LcdDirWrite+0x5c>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <LcdDirWrite+0x60>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f8      	bne.n	8003b1a <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <LcdDirWrite+0x5c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <LcdDirWrite+0x5c>)
 8003b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b32:	6013      	str	r3, [r2, #0]
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40003800 	.word	0x40003800
 8003b40:	42070100 	.word	0x42070100

08003b44 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <LcdWrite8+0x2c>)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003b54:	2002      	movs	r0, #2
 8003b56:	f000 fb15 	bl	8004184 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003b5a:	bf00      	nop
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <LcdWrite8+0x30>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1fb      	bne.n	8003b5c <LcdWrite8+0x18>
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40003800 	.word	0x40003800
 8003b74:	4207011c 	.word	0x4207011c

08003b78 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <LcdCmdWrite8+0x34>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <LcdCmdWrite8+0x38>)
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003b8e:	2002      	movs	r0, #2
 8003b90:	f000 faf8 	bl	8004184 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003b94:	bf00      	nop
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <LcdCmdWrite8+0x3c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1fb      	bne.n	8003b96 <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8003b9e:	4b03      	ldr	r3, [pc, #12]	; (8003bac <LcdCmdWrite8+0x34>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	422181ac 	.word	0x422181ac
 8003bb0:	40003800 	.word	0x40003800
 8003bb4:	4207011c 	.word	0x4207011c

08003bb8 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8003bbc:	bf00      	nop
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <WaitForDmaEnd+0x18>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1fb      	bne.n	8003bbe <WaitForDmaEnd+0x6>
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20000840 	.word	0x20000840

08003bd4 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <DMA1_Channel5_IRQHandler+0x64>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d023      	beq.n	8003c2c <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <DMA1_Channel5_IRQHandler+0x64>)
 8003be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bea:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <DMA1_Channel5_IRQHandler+0x68>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8003bf2:	bf00      	nop
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <DMA1_Channel5_IRQHandler+0x68>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f9      	bne.n	8003bf4 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <DMA1_Channel5_IRQHandler+0x6c>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003c06:	bf00      	nop
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <DMA1_Channel5_IRQHandler+0x70>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1fb      	bne.n	8003c08 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8003c10:	2003      	movs	r0, #3
 8003c12:	f000 fab7 	bl	8004184 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <DMA1_Channel5_IRQHandler+0x74>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <DMA1_Channel5_IRQHandler+0x78>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <DMA1_Channel5_IRQHandler+0x74>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8003c2a:	e003      	b.n	8003c34 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003c2c:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <DMA1_Channel5_IRQHandler+0x64>)
 8003c2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c32:	605a      	str	r2, [r3, #4]
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	42070084 	.word	0x42070084
 8003c44:	4207011c 	.word	0x4207011c
 8003c48:	20000840 	.word	0x20000840
 8003c4c:	422181b0 	.word	0x422181b0

08003c50 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003c5c:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <LCD_IO_WriteMultiData+0x74>)
 8003c5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c62:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <LCD_IO_WriteMultiData+0x78>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <LCD_IO_WriteMultiData+0x78>)
 8003c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6e:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8003c76:	bf00      	nop
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f9      	bne.n	8003c78 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8003c84:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003c8c:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <LCD_IO_WriteMultiData+0x80>)
 8003c8e:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8003c90:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8003c96:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <LCD_IO_WriteMultiData+0x84>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <LCD_IO_WriteMultiData+0x78>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <LCD_IO_WriteMultiData+0x78>)
 8003ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cac:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <LCD_IO_WriteMultiData+0x7c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6013      	str	r3, [r2, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40020000 	.word	0x40020000
 8003cc8:	40003800 	.word	0x40003800
 8003ccc:	40020058 	.word	0x40020058
 8003cd0:	4000380c 	.word	0x4000380c
 8003cd4:	42070084 	.word	0x42070084

08003cd8 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <LCD_IO_WriteMultiData8+0x98>)
 8003cf0:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <LCD_IO_WriteMultiData8+0x98>)
 8003cf4:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8003cf6:	f241 0312 	movw	r3, #4114	; 0x1012
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e030      	b.n	8003d60 <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8003cfe:	f241 0392 	movw	r3, #4242	; 0x1092
 8003d02:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8003d04:	e02c      	b.n	8003d60 <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d80f      	bhi.n	8003d30 <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <LCD_IO_WriteMultiData8+0x9c>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff ff98 	bl	8003c50 <LCD_IO_WriteMultiData>
      Size = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01a      	beq.n	8003d60 <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8003d2a:	f7ff ff45 	bl	8003bb8 <WaitForDmaEnd>
 8003d2e:	e017      	b.n	8003d60 <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <LCD_IO_WriteMultiData8+0x9c>)
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff ff87 	bl	8003c50 <LCD_IO_WriteMultiData>
      if(dinc)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003d4e:	33fe      	adds	r3, #254	; 0xfe
 8003d50:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003d58:	3bfe      	subs	r3, #254	; 0xfe
 8003d5a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003d5c:	f7ff ff2c 	bl	8003bb8 <WaitForDmaEnd>
  while(Size)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cf      	bne.n	8003d06 <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000844 	.word	0x20000844
 8003d74:	20000840 	.word	0x20000840

08003d78 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <LCD_IO_WriteMultiData16+0xdc>)
 8003d90:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 8003d92:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <LCD_IO_WriteMultiData16+0xdc>)
 8003d94:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8003d96:	f241 5312 	movw	r3, #5394	; 0x1512
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e051      	b.n	8003e42 <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8003d9e:	f241 5392 	movw	r3, #5522	; 0x1592
 8003da2:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8003da4:	e04d      	b.n	8003e42 <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d80f      	bhi.n	8003dd0 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <LCD_IO_WriteMultiData16+0xe0>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ff48 	bl	8003c50 <LCD_IO_WriteMultiData>
      Size = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d03b      	beq.n	8003e42 <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 8003dca:	f7ff fef5 	bl	8003bb8 <WaitForDmaEnd>
 8003dce:	e038      	b.n	8003e42 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <LCD_IO_WriteMultiData16+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d81b      	bhi.n	8003e10 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <LCD_IO_WriteMultiData16+0xe0>)
 8003dda:	2202      	movs	r2, #2
 8003ddc:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003de4:	3bfe      	subs	r3, #254	; 0xfe
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4619      	mov	r1, r3
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff ff30 	bl	8003c50 <LCD_IO_WriteMultiData>
      if(dinc)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <LCD_IO_WriteMultiData16+0xe8>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8003e04:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003e08:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003e0a:	f7ff fed5 	bl	8003bb8 <WaitForDmaEnd>
 8003e0e:	e018      	b.n	8003e42 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <LCD_IO_WriteMultiData16+0xe0>)
 8003e12:	2202      	movs	r2, #2
 8003e14:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff ff17 	bl	8003c50 <LCD_IO_WriteMultiData>
      if(dinc)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003e2e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003e32:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003e3a:	3bfe      	subs	r3, #254	; 0xfe
 8003e3c:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003e3e:	f7ff febb 	bl	8003bb8 <WaitForDmaEnd>
  while(Size)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ae      	bne.n	8003da6 <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000846 	.word	0x20000846
 8003e58:	20000840 	.word	0x20000840
 8003e5c:	0001fffb 	.word	0x0001fffb
 8003e60:	7fff0002 	.word	0x7fff0002

08003e64 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <DMA1_Channel4_IRQHandler+0x98>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d03a      	beq.n	8003eec <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <DMA1_Channel4_IRQHandler+0x98>)
 8003e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e7c:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <DMA1_Channel4_IRQHandler+0x9c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003e84:	e002      	b.n	8003e8c <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 8003e86:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <DMA1_Channel4_IRQHandler+0xa0>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <DMA1_Channel4_IRQHandler+0xa4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f8      	bne.n	8003e86 <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <DMA1_Channel4_IRQHandler+0xa8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e9c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <DMA1_Channel4_IRQHandler+0xa8>)
 8003ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea6:	f043 0318 	orr.w	r3, r3, #24
 8003eaa:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8003eac:	2001      	movs	r0, #1
 8003eae:	f000 f969 	bl	8004184 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003eb2:	e003      	b.n	8003ebc <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 8003eb4:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <DMA1_Channel4_IRQHandler+0xa8>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <DMA1_Channel4_IRQHandler+0xa4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f7      	bne.n	8003eb4 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <DMA1_Channel4_IRQHandler+0xa8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <DMA1_Channel4_IRQHandler+0xa8>)
 8003eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ece:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <DMA1_Channel4_IRQHandler+0xac>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8003ed6:	bf00      	nop
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <DMA1_Channel4_IRQHandler+0xac>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f9      	bne.n	8003ed8 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <DMA1_Channel4_IRQHandler+0xb0>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8003eea:	e003      	b.n	8003ef4 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <DMA1_Channel4_IRQHandler+0x98>)
 8003eee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ef2:	605a      	str	r2, [r3, #4]
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40020000 	.word	0x40020000
 8003f00:	42070080 	.word	0x42070080
 8003f04:	4000380c 	.word	0x4000380c
 8003f08:	42070100 	.word	0x42070100
 8003f0c:	40003800 	.word	0x40003800
 8003f10:	40020044 	.word	0x40020044
 8003f14:	20000840 	.word	0x20000840

08003f18 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <LCD_IO_ReadMultiData+0x5c>)
 8003f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f2a:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8003f32:	bf00      	nop
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f9      	bne.n	8003f34 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f48:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <LCD_IO_ReadMultiData+0x64>)
 8003f4a:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <LCD_IO_ReadMultiData+0x60>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <LCD_IO_ReadMultiData+0x68>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40020044 	.word	0x40020044
 8003f7c:	4000380c 	.word	0x4000380c
 8003f80:	42070080 	.word	0x42070080

08003f84 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8003f8e:	f241 0382 	movw	r3, #4226	; 0x1082
 8003f92:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8003f94:	e024      	b.n	8003fe0 <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d913      	bls.n	8003fc8 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003fa0:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <LCD_IO_ReadMultiData8+0x74>)
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ffb3 	bl	8003f18 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003fb8:	3bfe      	subs	r3, #254	; 0xfe
 8003fba:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003fc2:	33fe      	adds	r3, #254	; 0xfe
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	e009      	b.n	8003fdc <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <LCD_IO_ReadMultiData8+0x74>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ffa0 	bl	8003f18 <LCD_IO_ReadMultiData>
      Size = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8003fdc:	f7ff fdec 	bl	8003bb8 <WaitForDmaEnd>
  while(Size)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1d7      	bne.n	8003f96 <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <LCD_IO_ReadMultiData8+0x78>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8003fec:	f7ff fd78 	bl	8003ae0 <LcdDirWrite>
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000840 	.word	0x20000840
 8003ffc:	422181b0 	.word	0x422181b0

08004000 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8004012:	4b54      	ldr	r3, [pc, #336]	; (8004164 <LCD_IO_ReadMultiData16to24+0x164>)
 8004014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004018:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 800401a:	4b53      	ldr	r3, [pc, #332]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004020:	bf00      	nop
 8004022:	4b51      	ldr	r3, [pc, #324]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f9      	bne.n	8004022 <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 800402e:	4b4e      	ldr	r3, [pc, #312]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 8004030:	4a4e      	ldr	r2, [pc, #312]	; (800416c <LCD_IO_ReadMultiData16to24+0x16c>)
 8004032:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8004034:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 8004036:	4a4e      	ldr	r2, [pc, #312]	; (8004170 <LCD_IO_ReadMultiData16to24+0x170>)
 8004038:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 800403a:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 800403c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004040:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8004042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004046:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8004048:	4b47      	ldr	r3, [pc, #284]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 800404a:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 800404e:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8004050:	4b45      	ldr	r3, [pc, #276]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a44      	ldr	r2, [pc, #272]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 800405c:	4b45      	ldr	r3, [pc, #276]	; (8004174 <LCD_IO_ReadMultiData16to24+0x174>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
  while(Size)
 8004062:	e044      	b.n	80040ee <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8004064:	4b40      	ldr	r3, [pc, #256]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	429a      	cmp	r2, r3
 800406c:	d03f      	beq.n	80040ee <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b01      	subs	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 800407a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800407e:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	1c53      	adds	r3, r2, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1c59      	adds	r1, r3, #1
 8004090:	6139      	str	r1, [r7, #16]
 8004092:	4936      	ldr	r1, [pc, #216]	; (800416c <LCD_IO_ReadMultiData16to24+0x16c>)
 8004094:	5c8a      	ldrb	r2, [r1, r2]
 8004096:	3318      	adds	r3, #24
 8004098:	443b      	add	r3, r7
 800409a:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2bff      	cmp	r3, #255	; 0xff
 80040a2:	d901      	bls.n	80040a8 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d11f      	bne.n	80040ee <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
        Size--;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 80040b8:	7a3b      	ldrb	r3, [r7, #8]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	b21b      	sxth	r3, r3
 80040be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	b21a      	sxth	r2, r3
 80040c8:	7a7b      	ldrb	r3, [r7, #9]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80040d2:	b21b      	sxth	r3, r3
 80040d4:	4313      	orrs	r3, r2
 80040d6:	b21a      	sxth	r2, r3
 80040d8:	7abb      	ldrb	r3, [r7, #10]
 80040da:	08db      	lsrs	r3, r3, #3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	b21b      	sxth	r3, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b219      	sxth	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	b28a      	uxth	r2, r1
 80040ec:	801a      	strh	r2, [r3, #0]
  while(Size)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1b7      	bne.n	8004064 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <LCD_IO_ReadMultiData16to24+0x174>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80040fa:	e003      	b.n	8004104 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 80040fc:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <LCD_IO_ReadMultiData16to24+0x178>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <LCD_IO_ReadMultiData16to24+0x17c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f7      	bne.n	80040fc <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <LCD_IO_ReadMultiData16to24+0x178>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004114:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <LCD_IO_ReadMultiData16to24+0x178>)
 800411a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411e:	f043 0308 	orr.w	r3, r3, #8
 8004122:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8004124:	2001      	movs	r0, #1
 8004126:	f000 f82d 	bl	8004184 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800412a:	e003      	b.n	8004134 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <LCD_IO_ReadMultiData16to24+0x178>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <LCD_IO_ReadMultiData16to24+0x17c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f7      	bne.n	800412c <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004142:	bf00      	nop
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <LCD_IO_ReadMultiData16to24+0x168>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <LCD_IO_ReadMultiData16to24+0x180>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8004156:	f7ff fcc3 	bl	8003ae0 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40020000 	.word	0x40020000
 8004168:	40020044 	.word	0x40020044
 800416c:	20000848 	.word	0x20000848
 8004170:	4000380c 	.word	0x4000380c
 8004174:	42070080 	.word	0x42070080
 8004178:	40003800 	.word	0x40003800
 800417c:	42070100 	.word	0x42070100
 8004180:	422181b0 	.word	0x422181b0

08004184 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  while(c--);
 800418c:	bf00      	nop
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1fa      	bne.n	800418e <LCD_IO_Delay+0xa>
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f9ff 	bl	80045b0 <HAL_Delay>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <LCD_IO_Bl_OnOff+0x28>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80041d2:	e002      	b.n	80041da <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <LCD_IO_Bl_OnOff+0x28>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	42220198 	.word	0x42220198

080041e8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80041ec:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <LCD_IO_Init+0x104>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	4a3e      	ldr	r2, [pc, #248]	; (80042ec <LCD_IO_Init+0x104>)
 80041f2:	f043 0318 	orr.w	r3, r3, #24
 80041f6:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 80041f8:	4b3c      	ldr	r3, [pc, #240]	; (80042ec <LCD_IO_Init+0x104>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	4a3b      	ldr	r2, [pc, #236]	; (80042ec <LCD_IO_Init+0x104>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <LCD_IO_Init+0x108>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800420c:	4a38      	ldr	r2, [pc, #224]	; (80042f0 <LCD_IO_Init+0x108>)
 800420e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004212:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8004214:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <LCD_IO_Init+0x10c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800421c:	4a35      	ldr	r2, [pc, #212]	; (80042f4 <LCD_IO_Init+0x10c>)
 800421e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004222:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8004224:	2001      	movs	r0, #1
 8004226:	f7ff ffc9 	bl	80041bc <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 800422a:	4b31      	ldr	r3, [pc, #196]	; (80042f0 <LCD_IO_Init+0x108>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004232:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <LCD_IO_Init+0x108>)
 8004234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004238:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 800423a:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <LCD_IO_Init+0x110>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8004240:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <LCD_IO_Init+0x114>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8004246:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <LCD_IO_Init+0x118>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <LCD_IO_Init+0x108>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <LCD_IO_Init+0x108>)
 8004256:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800425a:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 800425c:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <LCD_IO_Init+0x108>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <LCD_IO_Init+0x108>)
 8004266:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800426a:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <LCD_IO_Init+0x11c>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <LCD_IO_Init+0x120>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <LCD_IO_Init+0x108>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <LCD_IO_Init+0x108>)
 8004282:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8004286:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <LCD_IO_Init+0x108>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <LCD_IO_Init+0x108>)
 8004292:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8004296:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8004298:	4b1c      	ldr	r3, [pc, #112]	; (800430c <LCD_IO_Init+0x124>)
 800429a:	f240 324f 	movw	r2, #847	; 0x34f
 800429e:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <LCD_IO_Init+0x124>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <LCD_IO_Init+0x124>)
 80042a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042aa:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80042ac:	200a      	movs	r0, #10
 80042ae:	f7ff ff79 	bl	80041a4 <LCD_Delay>
  LCD_RST_ON;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <LCD_IO_Init+0x110>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80042b8:	200a      	movs	r0, #10
 80042ba:	f7ff ff73 	bl	80041a4 <LCD_Delay>
  LCD_RST_OFF;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <LCD_IO_Init+0x110>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80042c4:	200a      	movs	r0, #10
 80042c6:	f7ff ff6d 	bl	80041a4 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 80042ca:	210f      	movs	r1, #15
 80042cc:	200f      	movs	r0, #15
 80042ce:	f7ff fb9d 	bl	8003a0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 80042d2:	200f      	movs	r0, #15
 80042d4:	f7ff fb7e 	bl	80039d4 <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 80042d8:	210f      	movs	r1, #15
 80042da:	200e      	movs	r0, #14
 80042dc:	f7ff fb96 	bl	8003a0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 80042e0:	200e      	movs	r0, #14
 80042e2:	f7ff fb77 	bl	80039d4 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40010c04 	.word	0x40010c04
 80042f4:	40011000 	.word	0x40011000
 80042f8:	422181a8 	.word	0x422181a8
 80042fc:	422181ac 	.word	0x422181ac
 8004300:	422181b0 	.word	0x422181b0
 8004304:	422181b4 	.word	0x422181b4
 8004308:	424203b8 	.word	0x424203b8
 800430c:	40003800 	.word	0x40003800

08004310 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 800431a:	f7ff fc4d 	bl	8003bb8 <WaitForDmaEnd>
  LcdSpiMode8();
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <LCD_IO_WriteCmd8+0x30>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <LCD_IO_WriteCmd8+0x34>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fc23 	bl	8003b78 <LcdCmdWrite8>
  LCD_CS_OFF;
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <LCD_IO_WriteCmd8+0x34>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	4207002c 	.word	0x4207002c
 8004344:	422181b0 	.word	0x422181b0

08004348 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8004352:	f7ff fc31 	bl	8003bb8 <WaitForDmaEnd>
  LcdSpiMode8();
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <LCD_IO_WriteData8+0x30>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <LCD_IO_WriteData8+0x34>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fbed 	bl	8003b44 <LcdWrite8>
  LCD_CS_OFF;
 800436a:	4b04      	ldr	r3, [pc, #16]	; (800437c <LCD_IO_WriteData8+0x34>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	4207002c 	.word	0x4207002c
 800437c:	422181b0 	.word	0x422181b0

08004380 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	603a      	str	r2, [r7, #0]
 800438a:	71fb      	strb	r3, [r7, #7]
 800438c:	460b      	mov	r3, r1
 800438e:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8004390:	f7ff fc12 	bl	8003bb8 <WaitForDmaEnd>
  LcdSpiMode8();
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <LCD_IO_WriteCmd8DataFill16+0x48>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fbe8 	bl	8003b78 <LcdCmdWrite8>
  LcdSpiMode16();
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	2200      	movs	r2, #0
 80043b2:	6839      	ldr	r1, [r7, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fcdf 	bl	8003d78 <LCD_IO_WriteMultiData16>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	4207002c 	.word	0x4207002c
 80043c8:	422181b0 	.word	0x422181b0

080043cc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80043da:	f7ff fbed 	bl	8003bb8 <WaitForDmaEnd>
  LcdSpiMode8();
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fbc3 	bl	8003b78 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80043f2:	2201      	movs	r2, #1
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	68b8      	ldr	r0, [r7, #8]
 80043f8:	f7ff fc6e 	bl	8003cd8 <LCD_IO_WriteMultiData8>
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	4207002c 	.word	0x4207002c
 8004408:	422181b0 	.word	0x422181b0

0800440c <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800441a:	f7ff fbcd 	bl	8003bb8 <WaitForDmaEnd>
  LcdSpiMode8();
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fba3 	bl	8003b78 <LcdCmdWrite8>
  LcdSpiMode16();
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8004438:	2201      	movs	r2, #1
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	68b8      	ldr	r0, [r7, #8]
 800443e:	f7ff fc9b 	bl	8003d78 <LCD_IO_WriteMultiData16>
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	4207002c 	.word	0x4207002c
 8004450:	422181b0 	.word	0x422181b0

08004454 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8004464:	f7ff fba8 	bl	8003bb8 <WaitForDmaEnd>
  LcdSpiMode8();
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fb7e 	bl	8003b78 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8004482:	6838      	ldr	r0, [r7, #0]
 8004484:	f7ff faec 	bl	8003a60 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f7ff fd7a 	bl	8003f84 <LCD_IO_ReadMultiData8>
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	4207002c 	.word	0x4207002c
 800449c:	422181b0 	.word	0x422181b0

080044a0 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4603      	mov	r3, r0
 80044ae:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80044b0:	f7ff fb82 	bl	8003bb8 <WaitForDmaEnd>
  LcdSpiMode8();
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fb58 	bl	8003b78 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 80044ce:	6838      	ldr	r0, [r7, #0]
 80044d0:	f7ff fac6 	bl	8003a60 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	68b8      	ldr	r0, [r7, #8]
 80044d8:	f7ff fd92 	bl	8004000 <LCD_IO_ReadMultiData16to24>
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	4207002c 	.word	0x4207002c
 80044e8:	422181b0 	.word	0x422181b0

080044ec <HAL_Init>:
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <HAL_Init+0x28>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <HAL_Init+0x28>)
 80044f6:	f043 0310 	orr.w	r3, r3, #16
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	2003      	movs	r0, #3
 80044fe:	f000 fb59 	bl	8004bb4 <HAL_NVIC_SetPriorityGrouping>
 8004502:	200f      	movs	r0, #15
 8004504:	f000 f808 	bl	8004518 <HAL_InitTick>
 8004508:	f7fe f87e 	bl	8002608 <HAL_MspInit>
 800450c:	2300      	movs	r3, #0
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40022000 	.word	0x40022000

08004518 <HAL_InitTick>:
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_InitTick+0x54>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_InitTick+0x58>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4619      	mov	r1, r3
 800452a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800452e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fb71 	bl	8004c1e <HAL_SYSTICK_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_InitTick+0x2e>
 8004542:	2301      	movs	r3, #1
 8004544:	e00e      	b.n	8004564 <HAL_InitTick+0x4c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b0f      	cmp	r3, #15
 800454a:	d80a      	bhi.n	8004562 <HAL_InitTick+0x4a>
 800454c:	2200      	movs	r2, #0
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	f000 fb39 	bl	8004bca <HAL_NVIC_SetPriority>
 8004558:	4a06      	ldr	r2, [pc, #24]	; (8004574 <HAL_InitTick+0x5c>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_InitTick+0x4c>
 8004562:	2301      	movs	r3, #1
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000044 	.word	0x20000044
 8004570:	20000094 	.word	0x20000094
 8004574:	20000090 	.word	0x20000090

08004578 <HAL_IncTick>:
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_IncTick+0x1c>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_IncTick+0x20>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4413      	add	r3, r2
 8004588:	4a03      	ldr	r2, [pc, #12]	; (8004598 <HAL_IncTick+0x20>)
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	20000094 	.word	0x20000094
 8004598:	20000948 	.word	0x20000948

0800459c <HAL_GetTick>:
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4b02      	ldr	r3, [pc, #8]	; (80045ac <HAL_GetTick+0x10>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	20000948 	.word	0x20000948

080045b0 <HAL_Delay>:
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	f7ff fff0 	bl	800459c <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d005      	beq.n	80045d6 <HAL_Delay+0x26>
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_Delay+0x44>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	bf00      	nop
 80045d8:	f7ff ffe0 	bl	800459c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d8f7      	bhi.n	80045d8 <HAL_Delay+0x28>
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000094 	.word	0x20000094

080045f8 <HAL_ADC_Init>:
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	2300      	movs	r3, #0
 8004602:	75fb      	strb	r3, [r7, #23]
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_ADC_Init+0x22>
 8004616:	2301      	movs	r3, #1
 8004618:	e0be      	b.n	8004798 <HAL_ADC_Init+0x1a0>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <HAL_ADC_Init+0x44>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	62da      	str	r2, [r3, #44]	; 0x2c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe f818 	bl	800266c <HAL_ADC_MspInit>
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f9ab 	bl	8004998 <ADC_ConversionStop_Disable>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 8099 	bne.w	8004786 <HAL_ADC_Init+0x18e>
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 8095 	bne.w	8004786 <HAL_ADC_Init+0x18e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	f043 0202 	orr.w	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	; 0x28
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7b1b      	ldrb	r3, [r3, #12]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4313      	orrs	r3, r2
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	4313      	orrs	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d003      	beq.n	800469a <HAL_ADC_Init+0xa2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d102      	bne.n	80046a0 <HAL_ADC_Init+0xa8>
 800469a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800469e:	e000      	b.n	80046a2 <HAL_ADC_Init+0xaa>
 80046a0:	2300      	movs	r3, #0
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7d1b      	ldrb	r3, [r3, #20]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d119      	bne.n	80046e4 <HAL_ADC_Init+0xec>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7b1b      	ldrb	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_ADC_Init+0xd4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	3b01      	subs	r3, #1
 80046be:	035a      	lsls	r2, r3, #13
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	e00b      	b.n	80046e4 <HAL_ADC_Init+0xec>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f043 0201 	orr.w	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_ADC_Init+0x1a8>)
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	430b      	orrs	r3, r1
 800470a:	6093      	str	r3, [r2, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004714:	d003      	beq.n	800471e <HAL_ADC_Init+0x126>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d104      	bne.n	8004728 <HAL_ADC_Init+0x130>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	3b01      	subs	r3, #1
 8004724:	051b      	lsls	r3, r3, #20
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	430a      	orrs	r2, r1
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <HAL_ADC_Init+0x1ac>)
 8004744:	4013      	ands	r3, r2
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d10b      	bne.n	8004764 <HAL_ADC_Init+0x16c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	62da      	str	r2, [r3, #44]	; 0x2c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	629a      	str	r2, [r3, #40]	; 0x28
 8004762:	e018      	b.n	8004796 <HAL_ADC_Init+0x19e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	f023 0312 	bic.w	r3, r3, #18
 800476c:	f043 0210 	orr.w	r2, r3, #16
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	f043 0201 	orr.w	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004780:	2301      	movs	r3, #1
 8004782:	75fb      	strb	r3, [r7, #23]
 8004784:	e007      	b.n	8004796 <HAL_ADC_Init+0x19e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f043 0210 	orr.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	629a      	str	r2, [r3, #40]	; 0x28
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	ffe1f7fd 	.word	0xffe1f7fd
 80047a4:	ff1f0efe 	.word	0xff1f0efe

080047a8 <HAL_ADC_ConfigChannel>:
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x20>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e0dc      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1da>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d81c      	bhi.n	8004812 <HAL_ADC_ConfigChannel+0x6a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	3b05      	subs	r3, #5
 80047ea:	221f      	movs	r2, #31
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	4019      	ands	r1, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	3b05      	subs	r3, #5
 8004804:	fa00 f203 	lsl.w	r2, r0, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	635a      	str	r2, [r3, #52]	; 0x34
 8004810:	e03c      	b.n	800488c <HAL_ADC_ConfigChannel+0xe4>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d81c      	bhi.n	8004854 <HAL_ADC_ConfigChannel+0xac>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	3b23      	subs	r3, #35	; 0x23
 800482c:	221f      	movs	r2, #31
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	4019      	ands	r1, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	3b23      	subs	r3, #35	; 0x23
 8004846:	fa00 f203 	lsl.w	r2, r0, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
 8004852:	e01b      	b.n	800488c <HAL_ADC_ConfigChannel+0xe4>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	3b41      	subs	r3, #65	; 0x41
 8004866:	221f      	movs	r2, #31
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	4019      	ands	r1, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	3b41      	subs	r3, #65	; 0x41
 8004880:	fa00 f203 	lsl.w	r2, r0, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b09      	cmp	r3, #9
 8004892:	d91c      	bls.n	80048ce <HAL_ADC_ConfigChannel+0x126>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68d9      	ldr	r1, [r3, #12]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	3b1e      	subs	r3, #30
 80048a6:	2207      	movs	r2, #7
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	4019      	ands	r1, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6898      	ldr	r0, [r3, #8]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	3b1e      	subs	r3, #30
 80048c0:	fa00 f203 	lsl.w	r2, r0, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e019      	b.n	8004902 <HAL_ADC_ConfigChannel+0x15a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6919      	ldr	r1, [r3, #16]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4413      	add	r3, r2
 80048de:	2207      	movs	r2, #7
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	4019      	ands	r1, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6898      	ldr	r0, [r3, #8]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	fa00 f203 	lsl.w	r2, r0, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	611a      	str	r2, [r3, #16]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b10      	cmp	r3, #16
 8004908:	d003      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x16a>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b11      	cmp	r3, #17
 8004910:	d132      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x1d0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_ADC_ConfigChannel+0x1e4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d125      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x1c0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d126      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x1d0>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b10      	cmp	r3, #16
 8004940:	d11a      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x1d0>
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <HAL_ADC_ConfigChannel+0x1e8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a13      	ldr	r2, [pc, #76]	; (8004994 <HAL_ADC_ConfigChannel+0x1ec>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	0c9a      	lsrs	r2, r3, #18
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	e002      	b.n	8004960 <HAL_ADC_ConfigChannel+0x1b8>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3b01      	subs	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f9      	bne.n	800495a <HAL_ADC_ConfigChannel+0x1b2>
 8004966:	e007      	b.n	8004978 <HAL_ADC_ConfigChannel+0x1d0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	40012400 	.word	0x40012400
 8004990:	20000044 	.word	0x20000044
 8004994:	431bde83 	.word	0x431bde83

08004998 <ADC_ConversionStop_Disable>:
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d12e      	bne.n	8004a10 <ADC_ConversionStop_Disable+0x78>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	609a      	str	r2, [r3, #8]
 80049c2:	f7ff fdeb 	bl	800459c <HAL_GetTick>
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	e01b      	b.n	8004a02 <ADC_ConversionStop_Disable+0x6a>
 80049ca:	f7ff fde7 	bl	800459c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d914      	bls.n	8004a02 <ADC_ConversionStop_Disable+0x6a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10d      	bne.n	8004a02 <ADC_ConversionStop_Disable+0x6a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	f043 0210 	orr.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80049fe:	2301      	movs	r3, #1
 8004a00:	e007      	b.n	8004a12 <ADC_ConversionStop_Disable+0x7a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d0dc      	beq.n	80049ca <ADC_ConversionStop_Disable+0x32>
 8004a10:	2300      	movs	r3, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <__NVIC_SetPriorityGrouping>:
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	021a      	lsls	r2, r3, #8
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	60d3      	str	r3, [r2, #12]
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <__NVIC_GetPriorityGrouping>:
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <__NVIC_GetPriorityGrouping+0x18>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_EnableIRQ>:
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db0b      	blt.n	8004aaa <__NVIC_EnableIRQ+0x2a>
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	4906      	ldr	r1, [pc, #24]	; (8004ab4 <__NVIC_EnableIRQ+0x34>)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	.word	0xe000e100

08004ab8 <__NVIC_SetPriority>:
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	6039      	str	r1, [r7, #0]
 8004ac2:	71fb      	strb	r3, [r7, #7]
 8004ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	db0a      	blt.n	8004ae2 <__NVIC_SetPriority+0x2a>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	490c      	ldr	r1, [pc, #48]	; (8004b04 <__NVIC_SetPriority+0x4c>)
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	0112      	lsls	r2, r2, #4
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	440b      	add	r3, r1
 8004adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004ae0:	e00a      	b.n	8004af8 <__NVIC_SetPriority+0x40>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4908      	ldr	r1, [pc, #32]	; (8004b08 <__NVIC_SetPriority+0x50>)
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	3b04      	subs	r3, #4
 8004af0:	0112      	lsls	r2, r2, #4
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	440b      	add	r3, r1
 8004af6:	761a      	strb	r2, [r3, #24]
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000e100 	.word	0xe000e100
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <NVIC_EncodePriority>:
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f1c3 0307 	rsb	r3, r3, #7
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	bf28      	it	cs
 8004b2a:	2304      	movcs	r3, #4
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3304      	adds	r3, #4
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d902      	bls.n	8004b3c <NVIC_EncodePriority+0x30>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3b03      	subs	r3, #3
 8004b3a:	e000      	b.n	8004b3e <NVIC_EncodePriority+0x32>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	401a      	ands	r2, r3
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	409a      	lsls	r2, r3
 8004b54:	f04f 31ff 	mov.w	r1, #4294967295
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5e:	43d9      	mvns	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	400b      	ands	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	3724      	adds	r7, #36	; 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <SysTick_Config>:
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b80:	d301      	bcc.n	8004b86 <SysTick_Config+0x16>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e00f      	b.n	8004ba6 <SysTick_Config+0x36>
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <SysTick_Config+0x40>)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	6053      	str	r3, [r2, #4]
 8004b8e:	210f      	movs	r1, #15
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	f7ff ff90 	bl	8004ab8 <__NVIC_SetPriority>
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <SysTick_Config+0x40>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <SysTick_Config+0x40>)
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	e000e010 	.word	0xe000e010

08004bb4 <HAL_NVIC_SetPriorityGrouping>:
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff2d 	bl	8004a1c <__NVIC_SetPriorityGrouping>
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_NVIC_SetPriority>:
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	f7ff ff42 	bl	8004a64 <__NVIC_GetPriorityGrouping>
 8004be0:	6178      	str	r0, [r7, #20]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	6978      	ldr	r0, [r7, #20]
 8004be8:	f7ff ff90 	bl	8004b0c <NVIC_EncodePriority>
 8004bec:	4602      	mov	r2, r0
 8004bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff5f 	bl	8004ab8 <__NVIC_SetPriority>
 8004bfa:	bf00      	nop
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_NVIC_EnableIRQ>:
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	4603      	mov	r3, r0
 8004c0a:	71fb      	strb	r3, [r7, #7]
 8004c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ff35 	bl	8004a80 <__NVIC_EnableIRQ>
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_SYSTICK_Config>:
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff ffa2 	bl	8004b70 <SysTick_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <HAL_DMA_Init>:
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_DMA_Init+0x16>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e043      	b.n	8004cd6 <HAL_DMA_Init+0x9e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <HAL_DMA_Init+0xa8>)
 8004c56:	4413      	add	r3, r2
 8004c58:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <HAL_DMA_Init+0xac>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	009a      	lsls	r2, r3, #2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <HAL_DMA_Init+0xb0>)
 8004c6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2020 	strb.w	r2, [r3, #32]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	bffdfff8 	.word	0xbffdfff8
 8004ce4:	cccccccd 	.word	0xcccccccd
 8004ce8:	40020000 	.word	0x40020000

08004cec <HAL_GPIO_Init>:
 8004cec:	b480      	push	{r7}
 8004cee:	b08b      	sub	sp, #44	; 0x2c
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	e169      	b.n	8004fd4 <HAL_GPIO_Init+0x2e8>
 8004d00:	2201      	movs	r2, #1
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 8158 	bne.w	8004fce <HAL_GPIO_Init+0x2e2>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4a9a      	ldr	r2, [pc, #616]	; (8004f8c <HAL_GPIO_Init+0x2a0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d05e      	beq.n	8004de6 <HAL_GPIO_Init+0xfa>
 8004d28:	4a98      	ldr	r2, [pc, #608]	; (8004f8c <HAL_GPIO_Init+0x2a0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d875      	bhi.n	8004e1a <HAL_GPIO_Init+0x12e>
 8004d2e:	4a98      	ldr	r2, [pc, #608]	; (8004f90 <HAL_GPIO_Init+0x2a4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d058      	beq.n	8004de6 <HAL_GPIO_Init+0xfa>
 8004d34:	4a96      	ldr	r2, [pc, #600]	; (8004f90 <HAL_GPIO_Init+0x2a4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d86f      	bhi.n	8004e1a <HAL_GPIO_Init+0x12e>
 8004d3a:	4a96      	ldr	r2, [pc, #600]	; (8004f94 <HAL_GPIO_Init+0x2a8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d052      	beq.n	8004de6 <HAL_GPIO_Init+0xfa>
 8004d40:	4a94      	ldr	r2, [pc, #592]	; (8004f94 <HAL_GPIO_Init+0x2a8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d869      	bhi.n	8004e1a <HAL_GPIO_Init+0x12e>
 8004d46:	4a94      	ldr	r2, [pc, #592]	; (8004f98 <HAL_GPIO_Init+0x2ac>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d04c      	beq.n	8004de6 <HAL_GPIO_Init+0xfa>
 8004d4c:	4a92      	ldr	r2, [pc, #584]	; (8004f98 <HAL_GPIO_Init+0x2ac>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d863      	bhi.n	8004e1a <HAL_GPIO_Init+0x12e>
 8004d52:	4a92      	ldr	r2, [pc, #584]	; (8004f9c <HAL_GPIO_Init+0x2b0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d046      	beq.n	8004de6 <HAL_GPIO_Init+0xfa>
 8004d58:	4a90      	ldr	r2, [pc, #576]	; (8004f9c <HAL_GPIO_Init+0x2b0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d85d      	bhi.n	8004e1a <HAL_GPIO_Init+0x12e>
 8004d5e:	2b12      	cmp	r3, #18
 8004d60:	d82a      	bhi.n	8004db8 <HAL_GPIO_Init+0xcc>
 8004d62:	2b12      	cmp	r3, #18
 8004d64:	d859      	bhi.n	8004e1a <HAL_GPIO_Init+0x12e>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_GPIO_Init+0x80>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004de7 	.word	0x08004de7
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	08004dd3 	.word	0x08004dd3
 8004d78:	08004e15 	.word	0x08004e15
 8004d7c:	08004e1b 	.word	0x08004e1b
 8004d80:	08004e1b 	.word	0x08004e1b
 8004d84:	08004e1b 	.word	0x08004e1b
 8004d88:	08004e1b 	.word	0x08004e1b
 8004d8c:	08004e1b 	.word	0x08004e1b
 8004d90:	08004e1b 	.word	0x08004e1b
 8004d94:	08004e1b 	.word	0x08004e1b
 8004d98:	08004e1b 	.word	0x08004e1b
 8004d9c:	08004e1b 	.word	0x08004e1b
 8004da0:	08004e1b 	.word	0x08004e1b
 8004da4:	08004e1b 	.word	0x08004e1b
 8004da8:	08004e1b 	.word	0x08004e1b
 8004dac:	08004e1b 	.word	0x08004e1b
 8004db0:	08004dc9 	.word	0x08004dc9
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	4a79      	ldr	r2, [pc, #484]	; (8004fa0 <HAL_GPIO_Init+0x2b4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_GPIO_Init+0xfa>
 8004dbe:	e02c      	b.n	8004e1a <HAL_GPIO_Init+0x12e>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	e029      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	623b      	str	r3, [r7, #32]
 8004dd0:	e024      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	623b      	str	r3, [r7, #32]
 8004dda:	e01f      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	330c      	adds	r3, #12
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	e01a      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_GPIO_Init+0x108>
 8004dee:	2304      	movs	r3, #4
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	e013      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d105      	bne.n	8004e08 <HAL_GPIO_Init+0x11c>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	611a      	str	r2, [r3, #16]
 8004e06:	e009      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	615a      	str	r2, [r3, #20]
 8004e12:	e003      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004e14:	2300      	movs	r3, #0
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	e000      	b.n	8004e1c <HAL_GPIO_Init+0x130>
 8004e1a:	bf00      	nop
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2bff      	cmp	r3, #255	; 0xff
 8004e20:	d801      	bhi.n	8004e26 <HAL_GPIO_Init+0x13a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	e001      	b.n	8004e2a <HAL_GPIO_Init+0x13e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2bff      	cmp	r3, #255	; 0xff
 8004e30:	d802      	bhi.n	8004e38 <HAL_GPIO_Init+0x14c>
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	e002      	b.n	8004e3e <HAL_GPIO_Init+0x152>
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	3b08      	subs	r3, #8
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	210f      	movs	r1, #15
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	401a      	ands	r2, r3
 8004e50:	6a39      	ldr	r1, [r7, #32]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80b1 	beq.w	8004fce <HAL_GPIO_Init+0x2e2>
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	; (8004fa4 <HAL_GPIO_Init+0x2b8>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4a4c      	ldr	r2, [pc, #304]	; (8004fa4 <HAL_GPIO_Init+0x2b8>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6193      	str	r3, [r2, #24]
 8004e78:	4b4a      	ldr	r3, [pc, #296]	; (8004fa4 <HAL_GPIO_Init+0x2b8>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a48      	ldr	r2, [pc, #288]	; (8004fa8 <HAL_GPIO_Init+0x2bc>)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	220f      	movs	r2, #15
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a40      	ldr	r2, [pc, #256]	; (8004fac <HAL_GPIO_Init+0x2c0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <HAL_GPIO_Init+0x1ec>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3f      	ldr	r2, [pc, #252]	; (8004fb0 <HAL_GPIO_Init+0x2c4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_GPIO_Init+0x1e8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a3e      	ldr	r2, [pc, #248]	; (8004fb4 <HAL_GPIO_Init+0x2c8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <HAL_GPIO_Init+0x1e4>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <HAL_GPIO_Init+0x2cc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <HAL_GPIO_Init+0x1e0>
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e006      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	e004      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e002      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	f002 0203 	and.w	r2, r2, #3
 8004ee0:	0092      	lsls	r2, r2, #2
 8004ee2:	4093      	lsls	r3, r2
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	492f      	ldr	r1, [pc, #188]	; (8004fa8 <HAL_GPIO_Init+0x2bc>)
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d006      	beq.n	8004f12 <HAL_GPIO_Init+0x226>
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	492c      	ldr	r1, [pc, #176]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
 8004f10:	e006      	b.n	8004f20 <HAL_GPIO_Init+0x234>
 8004f12:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	4928      	ldr	r1, [pc, #160]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d006      	beq.n	8004f3a <HAL_GPIO_Init+0x24e>
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4922      	ldr	r1, [pc, #136]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	e006      	b.n	8004f48 <HAL_GPIO_Init+0x25c>
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	491e      	ldr	r1, [pc, #120]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d006      	beq.n	8004f62 <HAL_GPIO_Init+0x276>
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	4918      	ldr	r1, [pc, #96]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]
 8004f60:	e006      	b.n	8004f70 <HAL_GPIO_Init+0x284>
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	4914      	ldr	r1, [pc, #80]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d021      	beq.n	8004fc0 <HAL_GPIO_Init+0x2d4>
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	490e      	ldr	r1, [pc, #56]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60cb      	str	r3, [r1, #12]
 8004f88:	e021      	b.n	8004fce <HAL_GPIO_Init+0x2e2>
 8004f8a:	bf00      	nop
 8004f8c:	10320000 	.word	0x10320000
 8004f90:	10310000 	.word	0x10310000
 8004f94:	10220000 	.word	0x10220000
 8004f98:	10210000 	.word	0x10210000
 8004f9c:	10120000 	.word	0x10120000
 8004fa0:	10110000 	.word	0x10110000
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40010800 	.word	0x40010800
 8004fb0:	40010c00 	.word	0x40010c00
 8004fb4:	40011000 	.word	0x40011000
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_GPIO_Init+0x304>)
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	4909      	ldr	r1, [pc, #36]	; (8004ff0 <HAL_GPIO_Init+0x304>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f47f ae8e 	bne.w	8004d00 <HAL_GPIO_Init+0x14>
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	372c      	adds	r7, #44	; 0x2c
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <HAL_GPIO_ReadPin>:
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_GPIO_ReadPin+0x1e>
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	e001      	b.n	8005016 <HAL_GPIO_ReadPin+0x22>
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <HAL_GPIO_WritePin>:
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	807b      	strh	r3, [r7, #2]
 800502e:	4613      	mov	r3, r2
 8005030:	707b      	strb	r3, [r7, #1]
 8005032:	787b      	ldrb	r3, [r7, #1]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_WritePin+0x1e>
 8005038:	887a      	ldrh	r2, [r7, #2]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	e003      	b.n	8005048 <HAL_GPIO_WritePin+0x26>
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	041a      	lsls	r2, r3, #16
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	611a      	str	r2, [r3, #16]
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
	...

08005054 <HAL_GPIO_EXTI_IRQHandler>:
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800506a:	4a05      	ldr	r2, [pc, #20]	; (8005080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	6153      	str	r3, [r2, #20]
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fc ffb6 	bl	8001fe4 <HAL_GPIO_EXTI_Callback>
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40010400 	.word	0x40010400

08005084 <HAL_I2C_Init>:
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_I2C_Init+0x12>
 8005092:	2301      	movs	r3, #1
 8005094:	e12b      	b.n	80052ee <HAL_I2C_Init+0x26a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_I2C_Init+0x2c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fd fb1a 	bl	80026e4 <HAL_I2C_MspInit>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	; 0x24
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f000 fce4 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4a81      	ldr	r2, [pc, #516]	; (80052f8 <HAL_I2C_Init+0x274>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d807      	bhi.n	8005108 <HAL_I2C_Init+0x84>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a80      	ldr	r2, [pc, #512]	; (80052fc <HAL_I2C_Init+0x278>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bf94      	ite	ls
 8005100:	2301      	movls	r3, #1
 8005102:	2300      	movhi	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e006      	b.n	8005116 <HAL_I2C_Init+0x92>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a7d      	ldr	r2, [pc, #500]	; (8005300 <HAL_I2C_Init+0x27c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	bf94      	ite	ls
 8005110:	2301      	movls	r3, #1
 8005112:	2300      	movhi	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Init+0x9a>
 800511a:	2301      	movs	r3, #1
 800511c:	e0e7      	b.n	80052ee <HAL_I2C_Init+0x26a>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a78      	ldr	r2, [pc, #480]	; (8005304 <HAL_I2C_Init+0x280>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	0c9b      	lsrs	r3, r3, #18
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a6a      	ldr	r2, [pc, #424]	; (80052f8 <HAL_I2C_Init+0x274>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d802      	bhi.n	8005158 <HAL_I2C_Init+0xd4>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3301      	adds	r3, #1
 8005156:	e009      	b.n	800516c <HAL_I2C_Init+0xe8>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	4a69      	ldr	r2, [pc, #420]	; (8005308 <HAL_I2C_Init+0x284>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	099b      	lsrs	r3, r3, #6
 800516a:	3301      	adds	r3, #1
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	430b      	orrs	r3, r1
 8005172:	6213      	str	r3, [r2, #32]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800517e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	495c      	ldr	r1, [pc, #368]	; (80052f8 <HAL_I2C_Init+0x274>)
 8005188:	428b      	cmp	r3, r1
 800518a:	d819      	bhi.n	80051c0 <HAL_I2C_Init+0x13c>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1e59      	subs	r1, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fbb1 f3f3 	udiv	r3, r1, r3
 800519a:	1c59      	adds	r1, r3, #1
 800519c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051a0:	400b      	ands	r3, r1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_I2C_Init+0x138>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1e59      	subs	r1, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b4:	3301      	adds	r3, #1
 80051b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ba:	e051      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 80051bc:	2304      	movs	r3, #4
 80051be:	e04f      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d111      	bne.n	80051ec <HAL_I2C_Init+0x168>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1e58      	subs	r0, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6859      	ldr	r1, [r3, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	440b      	add	r3, r1
 80051d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051da:	3301      	adds	r3, #1
 80051dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e012      	b.n	8005212 <HAL_I2C_Init+0x18e>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1e58      	subs	r0, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6859      	ldr	r1, [r3, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	0099      	lsls	r1, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005202:	3301      	adds	r3, #1
 8005204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005208:	2b00      	cmp	r3, #0
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Init+0x196>
 8005216:	2301      	movs	r3, #1
 8005218:	e022      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <HAL_I2C_Init+0x1bc>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1e58      	subs	r0, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6859      	ldr	r1, [r3, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	440b      	add	r3, r1
 8005230:	fbb0 f3f3 	udiv	r3, r0, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523e:	e00f      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1e58      	subs	r0, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6859      	ldr	r1, [r3, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	0099      	lsls	r1, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	fbb0 f3f3 	udiv	r3, r0, r3
 8005256:	3301      	adds	r3, #1
 8005258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	6809      	ldr	r1, [r1, #0]
 8005264:	4313      	orrs	r3, r2
 8005266:	61cb      	str	r3, [r1, #28]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800528e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6911      	ldr	r1, [r2, #16]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	4311      	orrs	r1, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6093      	str	r3, [r2, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	2300      	movs	r3, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	000186a0 	.word	0x000186a0
 80052fc:	001e847f 	.word	0x001e847f
 8005300:	003d08ff 	.word	0x003d08ff
 8005304:	431bde83 	.word	0x431bde83
 8005308:	10624dd3 	.word	0x10624dd3

0800530c <HAL_RCC_OscConfig>:
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x12>
 800531a:	2301      	movs	r3, #1
 800531c:	e272      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8087 	beq.w	800543a <HAL_RCC_OscConfig+0x12e>
 800532c:	4b92      	ldr	r3, [pc, #584]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 030c 	and.w	r3, r3, #12
 8005334:	2b04      	cmp	r3, #4
 8005336:	d00c      	beq.n	8005352 <HAL_RCC_OscConfig+0x46>
 8005338:	4b8f      	ldr	r3, [pc, #572]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b08      	cmp	r3, #8
 8005342:	d112      	bne.n	800536a <HAL_RCC_OscConfig+0x5e>
 8005344:	4b8c      	ldr	r3, [pc, #560]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d10b      	bne.n	800536a <HAL_RCC_OscConfig+0x5e>
 8005352:	4b89      	ldr	r3, [pc, #548]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d06c      	beq.n	8005438 <HAL_RCC_OscConfig+0x12c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d168      	bne.n	8005438 <HAL_RCC_OscConfig+0x12c>
 8005366:	2301      	movs	r3, #1
 8005368:	e24c      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005372:	d106      	bne.n	8005382 <HAL_RCC_OscConfig+0x76>
 8005374:	4b80      	ldr	r3, [pc, #512]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a7f      	ldr	r2, [pc, #508]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 800537a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e02e      	b.n	80053e0 <HAL_RCC_OscConfig+0xd4>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x98>
 800538a:	4b7b      	ldr	r3, [pc, #492]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7a      	ldr	r2, [pc, #488]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4b78      	ldr	r3, [pc, #480]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a77      	ldr	r2, [pc, #476]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 800539c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e01d      	b.n	80053e0 <HAL_RCC_OscConfig+0xd4>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0xbc>
 80053ae:	4b72      	ldr	r3, [pc, #456]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a71      	ldr	r2, [pc, #452]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b6f      	ldr	r3, [pc, #444]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a6e      	ldr	r2, [pc, #440]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e00b      	b.n	80053e0 <HAL_RCC_OscConfig+0xd4>
 80053c8:	4b6b      	ldr	r3, [pc, #428]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a6a      	ldr	r2, [pc, #424]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	4b68      	ldr	r3, [pc, #416]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a67      	ldr	r2, [pc, #412]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80053da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d013      	beq.n	8005410 <HAL_RCC_OscConfig+0x104>
 80053e8:	f7ff f8d8 	bl	800459c <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0xf6>
 80053f0:	f7ff f8d4 	bl	800459c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	; 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0xf6>
 80053fe:	2303      	movs	r3, #3
 8005400:	e200      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005402:	4b5d      	ldr	r3, [pc, #372]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0xe4>
 800540e:	e014      	b.n	800543a <HAL_RCC_OscConfig+0x12e>
 8005410:	f7ff f8c4 	bl	800459c <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x11e>
 8005418:	f7ff f8c0 	bl	800459c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	; 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x11e>
 8005426:	2303      	movs	r3, #3
 8005428:	e1ec      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 800542a:	4b53      	ldr	r3, [pc, #332]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x10c>
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x12e>
 8005438:	bf00      	nop
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d063      	beq.n	800550e <HAL_RCC_OscConfig+0x202>
 8005446:	4b4c      	ldr	r3, [pc, #304]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HAL_RCC_OscConfig+0x15e>
 8005452:	4b49      	ldr	r3, [pc, #292]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b08      	cmp	r3, #8
 800545c:	d11c      	bne.n	8005498 <HAL_RCC_OscConfig+0x18c>
 800545e:	4b46      	ldr	r3, [pc, #280]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d116      	bne.n	8005498 <HAL_RCC_OscConfig+0x18c>
 800546a:	4b43      	ldr	r3, [pc, #268]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_RCC_OscConfig+0x176>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d001      	beq.n	8005482 <HAL_RCC_OscConfig+0x176>
 800547e:	2301      	movs	r3, #1
 8005480:	e1c0      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005482:	4b3d      	ldr	r3, [pc, #244]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4939      	ldr	r1, [pc, #228]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]
 8005496:	e03a      	b.n	800550e <HAL_RCC_OscConfig+0x202>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d020      	beq.n	80054e2 <HAL_RCC_OscConfig+0x1d6>
 80054a0:	4b36      	ldr	r3, [pc, #216]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f7ff f879 	bl	800459c <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x1b4>
 80054ae:	f7ff f875 	bl	800459c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x1b4>
 80054bc:	2303      	movs	r3, #3
 80054be:	e1a1      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 80054c0:	4b2d      	ldr	r3, [pc, #180]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x1a2>
 80054cc:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4927      	ldr	r1, [pc, #156]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
 80054e0:	e015      	b.n	800550e <HAL_RCC_OscConfig+0x202>
 80054e2:	4b26      	ldr	r3, [pc, #152]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	f7ff f858 	bl	800459c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x1f6>
 80054f0:	f7ff f854 	bl	800459c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x1f6>
 80054fe:	2303      	movs	r3, #3
 8005500:	e180      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x1e4>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d03a      	beq.n	8005590 <HAL_RCC_OscConfig+0x284>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d019      	beq.n	8005556 <HAL_RCC_OscConfig+0x24a>
 8005522:	4b17      	ldr	r3, [pc, #92]	; (8005580 <HAL_RCC_OscConfig+0x274>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f7ff f838 	bl	800459c <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x236>
 8005530:	f7ff f834 	bl	800459c <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x236>
 800553e:	2303      	movs	r3, #3
 8005540:	e160      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <HAL_RCC_OscConfig+0x26c>)
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0x224>
 800554e:	2001      	movs	r0, #1
 8005550:	f000 fac4 	bl	8005adc <RCC_Delay>
 8005554:	e01c      	b.n	8005590 <HAL_RCC_OscConfig+0x284>
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_RCC_OscConfig+0x274>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f7ff f81e 	bl	800459c <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]
 8005562:	e00f      	b.n	8005584 <HAL_RCC_OscConfig+0x278>
 8005564:	f7ff f81a 	bl	800459c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d908      	bls.n	8005584 <HAL_RCC_OscConfig+0x278>
 8005572:	2303      	movs	r3, #3
 8005574:	e146      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	42420000 	.word	0x42420000
 8005580:	42420480 	.word	0x42420480
 8005584:	4b92      	ldr	r3, [pc, #584]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e9      	bne.n	8005564 <HAL_RCC_OscConfig+0x258>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80a6 	beq.w	80056ea <HAL_RCC_OscConfig+0x3de>
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
 80055a2:	4b8b      	ldr	r3, [pc, #556]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10d      	bne.n	80055ca <HAL_RCC_OscConfig+0x2be>
 80055ae:	4b88      	ldr	r3, [pc, #544]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	4a87      	ldr	r2, [pc, #540]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80055b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b8:	61d3      	str	r3, [r2, #28]
 80055ba:	4b85      	ldr	r3, [pc, #532]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2301      	movs	r3, #1
 80055c8:	75fb      	strb	r3, [r7, #23]
 80055ca:	4b82      	ldr	r3, [pc, #520]	; (80057d4 <HAL_RCC_OscConfig+0x4c8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d118      	bne.n	8005608 <HAL_RCC_OscConfig+0x2fc>
 80055d6:	4b7f      	ldr	r3, [pc, #508]	; (80057d4 <HAL_RCC_OscConfig+0x4c8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a7e      	ldr	r2, [pc, #504]	; (80057d4 <HAL_RCC_OscConfig+0x4c8>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	f7fe ffdb 	bl	800459c <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x2f0>
 80055ea:	f7fe ffd7 	bl	800459c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b64      	cmp	r3, #100	; 0x64
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x2f0>
 80055f8:	2303      	movs	r3, #3
 80055fa:	e103      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 80055fc:	4b75      	ldr	r3, [pc, #468]	; (80057d4 <HAL_RCC_OscConfig+0x4c8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x2de>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d106      	bne.n	800561e <HAL_RCC_OscConfig+0x312>
 8005610:	4b6f      	ldr	r3, [pc, #444]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	4a6e      	ldr	r2, [pc, #440]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6213      	str	r3, [r2, #32]
 800561c:	e02d      	b.n	800567a <HAL_RCC_OscConfig+0x36e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10c      	bne.n	8005640 <HAL_RCC_OscConfig+0x334>
 8005626:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a69      	ldr	r2, [pc, #420]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	6213      	str	r3, [r2, #32]
 8005632:	4b67      	ldr	r3, [pc, #412]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4a66      	ldr	r2, [pc, #408]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005638:	f023 0304 	bic.w	r3, r3, #4
 800563c:	6213      	str	r3, [r2, #32]
 800563e:	e01c      	b.n	800567a <HAL_RCC_OscConfig+0x36e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b05      	cmp	r3, #5
 8005646:	d10c      	bne.n	8005662 <HAL_RCC_OscConfig+0x356>
 8005648:	4b61      	ldr	r3, [pc, #388]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	4a60      	ldr	r2, [pc, #384]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 800564e:	f043 0304 	orr.w	r3, r3, #4
 8005652:	6213      	str	r3, [r2, #32]
 8005654:	4b5e      	ldr	r3, [pc, #376]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4a5d      	ldr	r2, [pc, #372]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6213      	str	r3, [r2, #32]
 8005660:	e00b      	b.n	800567a <HAL_RCC_OscConfig+0x36e>
 8005662:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4a5a      	ldr	r2, [pc, #360]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	6213      	str	r3, [r2, #32]
 800566e:	4b58      	ldr	r3, [pc, #352]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4a57      	ldr	r2, [pc, #348]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	f023 0304 	bic.w	r3, r3, #4
 8005678:	6213      	str	r3, [r2, #32]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d015      	beq.n	80056ae <HAL_RCC_OscConfig+0x3a2>
 8005682:	f7fe ff8b 	bl	800459c <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]
 8005688:	e00a      	b.n	80056a0 <HAL_RCC_OscConfig+0x394>
 800568a:	f7fe ff87 	bl	800459c <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f241 3288 	movw	r2, #5000	; 0x1388
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x394>
 800569c:	2303      	movs	r3, #3
 800569e:	e0b1      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 80056a0:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ee      	beq.n	800568a <HAL_RCC_OscConfig+0x37e>
 80056ac:	e014      	b.n	80056d8 <HAL_RCC_OscConfig+0x3cc>
 80056ae:	f7fe ff75 	bl	800459c <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]
 80056b4:	e00a      	b.n	80056cc <HAL_RCC_OscConfig+0x3c0>
 80056b6:	f7fe ff71 	bl	800459c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x3c0>
 80056c8:	2303      	movs	r3, #3
 80056ca:	e09b      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 80056cc:	4b40      	ldr	r3, [pc, #256]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ee      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3aa>
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <HAL_RCC_OscConfig+0x3de>
 80056de:	4b3c      	ldr	r3, [pc, #240]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	4a3b      	ldr	r2, [pc, #236]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80056e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e8:	61d3      	str	r3, [r2, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8087 	beq.w	8005802 <HAL_RCC_OscConfig+0x4f6>
 80056f4:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d061      	beq.n	80057c4 <HAL_RCC_OscConfig+0x4b8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d146      	bne.n	8005796 <HAL_RCC_OscConfig+0x48a>
 8005708:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <HAL_RCC_OscConfig+0x4cc>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f7fe ff45 	bl	800459c <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x41c>
 8005716:	f7fe ff41 	bl	800459c <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x41c>
 8005724:	2303      	movs	r3, #3
 8005726:	e06d      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005728:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f0      	bne.n	8005716 <HAL_RCC_OscConfig+0x40a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573c:	d108      	bne.n	8005750 <HAL_RCC_OscConfig+0x444>
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4921      	ldr	r1, [pc, #132]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 800574c:	4313      	orrs	r3, r2
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a19      	ldr	r1, [r3, #32]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	430b      	orrs	r3, r1
 8005762:	491b      	ldr	r1, [pc, #108]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 8005764:	4313      	orrs	r3, r2
 8005766:	604b      	str	r3, [r1, #4]
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <HAL_RCC_OscConfig+0x4cc>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f7fe ff15 	bl	800459c <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x47c>
 8005776:	f7fe ff11 	bl	800459c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x47c>
 8005784:	2303      	movs	r3, #3
 8005786:	e03d      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f0      	beq.n	8005776 <HAL_RCC_OscConfig+0x46a>
 8005794:	e035      	b.n	8005802 <HAL_RCC_OscConfig+0x4f6>
 8005796:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <HAL_RCC_OscConfig+0x4cc>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f7fe fefe 	bl	800459c <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x4aa>
 80057a4:	f7fe fefa 	bl	800459c <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x4aa>
 80057b2:	2303      	movs	r3, #3
 80057b4:	e026      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_RCC_OscConfig+0x4c4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x498>
 80057c2:	e01e      	b.n	8005802 <HAL_RCC_OscConfig+0x4f6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d107      	bne.n	80057dc <HAL_RCC_OscConfig+0x4d0>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e019      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40007000 	.word	0x40007000
 80057d8:	42420060 	.word	0x42420060
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_OscConfig+0x500>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d106      	bne.n	80057fe <HAL_RCC_OscConfig+0x4f2>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x4f6>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <HAL_RCC_OscConfig+0x4f8>
 8005802:	2300      	movs	r3, #0
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40021000 	.word	0x40021000

08005810 <HAL_RCC_ClockConfig>:
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
 8005820:	2301      	movs	r3, #1
 8005822:	e0d0      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1b6>
 8005824:	4b6a      	ldr	r3, [pc, #424]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d910      	bls.n	8005854 <HAL_RCC_ClockConfig+0x44>
 8005832:	4b67      	ldr	r3, [pc, #412]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 0207 	bic.w	r2, r3, #7
 800583a:	4965      	ldr	r1, [pc, #404]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]
 8005842:	4b63      	ldr	r3, [pc, #396]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x44>
 8005850:	2301      	movs	r3, #1
 8005852:	e0b8      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1b6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d020      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x92>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x68>
 800586c:	4b59      	ldr	r3, [pc, #356]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4a58      	ldr	r2, [pc, #352]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005876:	6053      	str	r3, [r2, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x80>
 8005884:	4b53      	ldr	r3, [pc, #332]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a52      	ldr	r2, [pc, #328]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800588e:	6053      	str	r3, [r2, #4]
 8005890:	4b50      	ldr	r3, [pc, #320]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	494d      	ldr	r1, [pc, #308]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	604b      	str	r3, [r1, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d040      	beq.n	8005930 <HAL_RCC_ClockConfig+0x120>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d107      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xb6>
 80058b6:	4b47      	ldr	r3, [pc, #284]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d115      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e07f      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1b6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xce>
 80058ce:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
 80058da:	2301      	movs	r3, #1
 80058dc:	e073      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1b6>
 80058de:	4b3d      	ldr	r3, [pc, #244]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e06b      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1b6>
 80058ee:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4936      	ldr	r1, [pc, #216]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
 8005900:	f7fe fe4c 	bl	800459c <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	e00a      	b.n	800591e <HAL_RCC_ClockConfig+0x10e>
 8005908:	f7fe fe48 	bl	800459c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x10e>
 800591a:	2303      	movs	r3, #3
 800591c:	e053      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1b6>
 800591e:	4b2d      	ldr	r3, [pc, #180]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 020c 	and.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	429a      	cmp	r2, r3
 800592e:	d1eb      	bne.n	8005908 <HAL_RCC_ClockConfig+0xf8>
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d210      	bcs.n	8005960 <HAL_RCC_ClockConfig+0x150>
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 0207 	bic.w	r2, r3, #7
 8005946:	4922      	ldr	r1, [pc, #136]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_ClockConfig+0x150>
 800595c:	2301      	movs	r3, #1
 800595e:	e032      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1b6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_RCC_ClockConfig+0x16e>
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4916      	ldr	r1, [pc, #88]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 800597a:	4313      	orrs	r3, r2
 800597c:	604b      	str	r3, [r1, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_RCC_ClockConfig+0x18e>
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	490e      	ldr	r1, [pc, #56]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 800599a:	4313      	orrs	r3, r2
 800599c:	604b      	str	r3, [r1, #4]
 800599e:	f000 f821 	bl	80059e4 <HAL_RCC_GetSysClockFreq>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	490a      	ldr	r1, [pc, #40]	; (80059d8 <HAL_RCC_ClockConfig+0x1c8>)
 80059b0:	5ccb      	ldrb	r3, [r1, r3]
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	4a09      	ldr	r2, [pc, #36]	; (80059dc <HAL_RCC_ClockConfig+0x1cc>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_RCC_ClockConfig+0x1d0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fdaa 	bl	8004518 <HAL_InitTick>
 80059c4:	2300      	movs	r3, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40022000 	.word	0x40022000
 80059d4:	40021000 	.word	0x40021000
 80059d8:	0800e1a0 	.word	0x0800e1a0
 80059dc:	20000044 	.word	0x20000044
 80059e0:	20000090 	.word	0x20000090

080059e4 <HAL_RCC_GetSysClockFreq>:
 80059e4:	b490      	push	{r4, r7}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xac>)
 80059ec:	1d3c      	adds	r4, r7, #4
 80059ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80059f4:	f240 2301 	movw	r3, #513	; 0x201
 80059f8:	803b      	strh	r3, [r7, #0]
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	2300      	movs	r3, #0
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d002      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x40>
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d003      	beq.n	8005a2a <HAL_RCC_GetSysClockFreq+0x46>
 8005a22:	e02b      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x98>
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	e02b      	b.n	8005a82 <HAL_RCC_GetSysClockFreq+0x9e>
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	0c9b      	lsrs	r3, r3, #18
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	3328      	adds	r3, #40	; 0x28
 8005a34:	443b      	add	r3, r7
 8005a36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d012      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x88>
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	0c5b      	lsrs	r3, r3, #17
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	3328      	adds	r3, #40	; 0x28
 8005a52:	443b      	add	r3, r7
 8005a54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a5e:	fb03 f202 	mul.w	r2, r3, r2
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	e004      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x92>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	e002      	b.n	8005a82 <HAL_RCC_GetSysClockFreq+0x9e>
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	bf00      	nop
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	4618      	mov	r0, r3
 8005a86:	3728      	adds	r7, #40	; 0x28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc90      	pop	{r4, r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	080078d8 	.word	0x080078d8
 8005a94:	40021000 	.word	0x40021000
 8005a98:	007a1200 	.word	0x007a1200
 8005a9c:	003d0900 	.word	0x003d0900

08005aa0 <HAL_RCC_GetHCLKFreq>:
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	4b02      	ldr	r3, [pc, #8]	; (8005ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	20000044 	.word	0x20000044

08005ab4 <HAL_RCC_GetPCLK1Freq>:
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	f7ff fff2 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 8005abc:	4602      	mov	r2, r0
 8005abe:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	4903      	ldr	r1, [pc, #12]	; (8005ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aca:	5ccb      	ldrb	r3, [r1, r3]
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	0800e1b0 	.word	0x0800e1b0

08005adc <RCC_Delay>:
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <RCC_Delay+0x34>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <RCC_Delay+0x38>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0a5b      	lsrs	r3, r3, #9
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	bf00      	nop
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	60fa      	str	r2, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f9      	bne.n	8005af8 <RCC_Delay+0x1c>
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	20000044 	.word	0x20000044
 8005b14:	10624dd3 	.word	0x10624dd3

08005b18 <HAL_RCCEx_PeriphCLKConfig>:
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d07d      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8005b34:	2300      	movs	r3, #0
 8005b36:	75fb      	strb	r3, [r7, #23]
 8005b38:	4b4f      	ldr	r3, [pc, #316]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10d      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8005b44:	4b4c      	ldr	r3, [pc, #304]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4a4b      	ldr	r2, [pc, #300]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	61d3      	str	r3, [r2, #28]
 8005b50:	4b49      	ldr	r3, [pc, #292]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	75fb      	strb	r3, [r7, #23]
 8005b60:	4b46      	ldr	r3, [pc, #280]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d118      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8005b6c:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a42      	ldr	r2, [pc, #264]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	f7fe fd10 	bl	800459c <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]
 8005b7e:	e008      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b80:	f7fe fd0c 	bl	800459c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e06d      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005b92:	4b3a      	ldr	r3, [pc, #232]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005b9e:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d02e      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d027      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005bbc:	4b2e      	ldr	r3, [pc, #184]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	4b2e      	ldr	r3, [pc, #184]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	4b2c      	ldr	r3, [pc, #176]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	4a29      	ldr	r2, [pc, #164]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6213      	str	r3, [r2, #32]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d014      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005be2:	f7fe fcdb 	bl	800459c <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]
 8005be8:	e00a      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005bea:	f7fe fcd7 	bl	800459c <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e036      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005c00:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ee      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4917      	ldr	r1, [pc, #92]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	620b      	str	r3, [r1, #32]
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d105      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	4a13      	ldr	r2, [pc, #76]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	61d3      	str	r3, [r2, #28]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	490b      	ldr	r1, [pc, #44]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	604b      	str	r3, [r1, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	4904      	ldr	r1, [pc, #16]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	604b      	str	r3, [r1, #4]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	42420440 	.word	0x42420440

08005c84 <HAL_SPI_Init>:
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_SPI_Init+0x12>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e076      	b.n	8005d84 <HAL_SPI_Init+0x100>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d108      	bne.n	8005cb0 <HAL_SPI_Init+0x2c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ca6:	d009      	beq.n	8005cbc <HAL_SPI_Init+0x38>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	61da      	str	r2, [r3, #28]
 8005cae:	e005      	b.n	8005cbc <HAL_SPI_Init+0x38>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	611a      	str	r2, [r3, #16]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	629a      	str	r2, [r3, #40]	; 0x28
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_SPI_Init+0x58>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fc fd42 	bl	8002760 <HAL_SPI_MspInit>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	ea42 0103 	orr.w	r1, r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	0c1a      	lsrs	r2, r3, #16
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f002 0204 	and.w	r2, r2, #4
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69da      	ldr	r2, [r3, #28]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d72:	61da      	str	r2, [r3, #28]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005d82:	2300      	movs	r3, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_OnePulse_Init>:
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIM_OnePulse_Init+0x14>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e041      	b.n	8005e24 <HAL_TIM_OnePulse_Init+0x98>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <HAL_TIM_OnePulse_Init+0x2e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fc fd73 	bl	80028a0 <HAL_TIM_OnePulse_MspInit>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f000 f82d 	bl	8005e2c <TIM_Base_SetConfig>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0208 	bic.w	r2, r2, #8
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6819      	ldr	r1, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e22:	2300      	movs	r3, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <TIM_Base_SetConfig>:
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <TIM_Base_SetConfig+0xb8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <TIM_Base_SetConfig+0x30>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d007      	beq.n	8005e5c <TIM_Base_SetConfig+0x30>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <TIM_Base_SetConfig+0xbc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_Base_SetConfig+0x30>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a25      	ldr	r2, [pc, #148]	; (8005eec <TIM_Base_SetConfig+0xc0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d108      	bne.n	8005e6e <TIM_Base_SetConfig+0x42>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <TIM_Base_SetConfig+0xb8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_Base_SetConfig+0x62>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7c:	d007      	beq.n	8005e8e <TIM_Base_SetConfig+0x62>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <TIM_Base_SetConfig+0xbc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_Base_SetConfig+0x62>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a18      	ldr	r2, [pc, #96]	; (8005eec <TIM_Base_SetConfig+0xc0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d108      	bne.n	8005ea0 <TIM_Base_SetConfig+0x74>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a07      	ldr	r2, [pc, #28]	; (8005ee4 <TIM_Base_SetConfig+0xb8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d103      	bne.n	8005ed4 <TIM_Base_SetConfig+0xa8>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800

08005ef0 <HAL_TIMEx_MasterConfigSynchronization>:
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e046      	b.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a16      	ldr	r2, [pc, #88]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00e      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f54:	d009      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d10c      	bne.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	609a      	str	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f94:	2300      	movs	r3, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800

08005fac <__assert_func>:
 8005fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fae:	4614      	mov	r4, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <__assert_func+0x2c>)
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68d8      	ldr	r0, [r3, #12]
 8005fba:	b14c      	cbz	r4, 8005fd0 <__assert_func+0x24>
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <__assert_func+0x30>)
 8005fbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fc2:	9100      	str	r1, [sp, #0]
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	4906      	ldr	r1, [pc, #24]	; (8005fe0 <__assert_func+0x34>)
 8005fc8:	f000 f814 	bl	8005ff4 <fiprintf>
 8005fcc:	f000 fda0 	bl	8006b10 <abort>
 8005fd0:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <__assert_func+0x38>)
 8005fd2:	461c      	mov	r4, r3
 8005fd4:	e7f3      	b.n	8005fbe <__assert_func+0x12>
 8005fd6:	bf00      	nop
 8005fd8:	20000098 	.word	0x20000098
 8005fdc:	0800e1b8 	.word	0x0800e1b8
 8005fe0:	0800e1c5 	.word	0x0800e1c5
 8005fe4:	0800e1f3 	.word	0x0800e1f3

08005fe8 <__errno>:
 8005fe8:	4b01      	ldr	r3, [pc, #4]	; (8005ff0 <__errno+0x8>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000098 	.word	0x20000098

08005ff4 <fiprintf>:
 8005ff4:	b40e      	push	{r1, r2, r3}
 8005ff6:	b503      	push	{r0, r1, lr}
 8005ff8:	4601      	mov	r1, r0
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	4805      	ldr	r0, [pc, #20]	; (8006014 <fiprintf+0x20>)
 8005ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006002:	6800      	ldr	r0, [r0, #0]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f000 f93f 	bl	8006288 <_vfiprintf_r>
 800600a:	b002      	add	sp, #8
 800600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006010:	b003      	add	sp, #12
 8006012:	4770      	bx	lr
 8006014:	20000098 	.word	0x20000098

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	2600      	movs	r6, #0
 800601c:	4d0c      	ldr	r5, [pc, #48]	; (8006050 <__libc_init_array+0x38>)
 800601e:	4c0d      	ldr	r4, [pc, #52]	; (8006054 <__libc_init_array+0x3c>)
 8006020:	1b64      	subs	r4, r4, r5
 8006022:	10a4      	asrs	r4, r4, #2
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	f001 fa5a 	bl	80074e0 <_init>
 800602c:	2600      	movs	r6, #0
 800602e:	4d0a      	ldr	r5, [pc, #40]	; (8006058 <__libc_init_array+0x40>)
 8006030:	4c0a      	ldr	r4, [pc, #40]	; (800605c <__libc_init_array+0x44>)
 8006032:	1b64      	subs	r4, r4, r5
 8006034:	10a4      	asrs	r4, r4, #2
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	f855 3b04 	ldr.w	r3, [r5], #4
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	0800e28c 	.word	0x0800e28c
 8006054:	0800e28c 	.word	0x0800e28c
 8006058:	0800e28c 	.word	0x0800e28c
 800605c:	0800e290 	.word	0x0800e290

08006060 <malloc>:
 8006060:	4b02      	ldr	r3, [pc, #8]	; (800606c <malloc+0xc>)
 8006062:	4601      	mov	r1, r0
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f000 b873 	b.w	8006150 <_malloc_r>
 800606a:	bf00      	nop
 800606c:	20000098 	.word	0x20000098

08006070 <memset>:
 8006070:	4603      	mov	r3, r0
 8006072:	4402      	add	r2, r0
 8006074:	4293      	cmp	r3, r2
 8006076:	d100      	bne.n	800607a <memset+0xa>
 8006078:	4770      	bx	lr
 800607a:	f803 1b01 	strb.w	r1, [r3], #1
 800607e:	e7f9      	b.n	8006074 <memset+0x4>

08006080 <_free_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4605      	mov	r5, r0
 8006084:	2900      	cmp	r1, #0
 8006086:	d040      	beq.n	800610a <_free_r+0x8a>
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f0c      	subs	r4, r1, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfb8      	it	lt
 8006092:	18e4      	addlt	r4, r4, r3
 8006094:	f000 ff96 	bl	8006fc4 <__malloc_lock>
 8006098:	4a1c      	ldr	r2, [pc, #112]	; (800610c <_free_r+0x8c>)
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	b933      	cbnz	r3, 80060ac <_free_r+0x2c>
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6014      	str	r4, [r2, #0]
 80060a2:	4628      	mov	r0, r5
 80060a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a8:	f000 bf92 	b.w	8006fd0 <__malloc_unlock>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d908      	bls.n	80060c2 <_free_r+0x42>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	1821      	adds	r1, r4, r0
 80060b4:	428b      	cmp	r3, r1
 80060b6:	bf01      	itttt	eq
 80060b8:	6819      	ldreq	r1, [r3, #0]
 80060ba:	685b      	ldreq	r3, [r3, #4]
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	e7ed      	b.n	800609e <_free_r+0x1e>
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b10b      	cbz	r3, 80060cc <_free_r+0x4c>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d9fa      	bls.n	80060c2 <_free_r+0x42>
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	1850      	adds	r0, r2, r1
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d10b      	bne.n	80060ec <_free_r+0x6c>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4401      	add	r1, r0
 80060d8:	1850      	adds	r0, r2, r1
 80060da:	4283      	cmp	r3, r0
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	d1e0      	bne.n	80060a2 <_free_r+0x22>
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4401      	add	r1, r0
 80060e6:	6011      	str	r1, [r2, #0]
 80060e8:	6053      	str	r3, [r2, #4]
 80060ea:	e7da      	b.n	80060a2 <_free_r+0x22>
 80060ec:	d902      	bls.n	80060f4 <_free_r+0x74>
 80060ee:	230c      	movs	r3, #12
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	e7d6      	b.n	80060a2 <_free_r+0x22>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	1821      	adds	r1, r4, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf01      	itttt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	1809      	addeq	r1, r1, r0
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	6054      	str	r4, [r2, #4]
 8006108:	e7cb      	b.n	80060a2 <_free_r+0x22>
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	2000094c 	.word	0x2000094c

08006110 <sbrk_aligned>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4e0e      	ldr	r6, [pc, #56]	; (800614c <sbrk_aligned+0x3c>)
 8006114:	460c      	mov	r4, r1
 8006116:	6831      	ldr	r1, [r6, #0]
 8006118:	4605      	mov	r5, r0
 800611a:	b911      	cbnz	r1, 8006122 <sbrk_aligned+0x12>
 800611c:	f000 fc08 	bl	8006930 <_sbrk_r>
 8006120:	6030      	str	r0, [r6, #0]
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f000 fc03 	bl	8006930 <_sbrk_r>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d00a      	beq.n	8006144 <sbrk_aligned+0x34>
 800612e:	1cc4      	adds	r4, r0, #3
 8006130:	f024 0403 	bic.w	r4, r4, #3
 8006134:	42a0      	cmp	r0, r4
 8006136:	d007      	beq.n	8006148 <sbrk_aligned+0x38>
 8006138:	1a21      	subs	r1, r4, r0
 800613a:	4628      	mov	r0, r5
 800613c:	f000 fbf8 	bl	8006930 <_sbrk_r>
 8006140:	3001      	adds	r0, #1
 8006142:	d101      	bne.n	8006148 <sbrk_aligned+0x38>
 8006144:	f04f 34ff 	mov.w	r4, #4294967295
 8006148:	4620      	mov	r0, r4
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	20000950 	.word	0x20000950

08006150 <_malloc_r>:
 8006150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	1ccd      	adds	r5, r1, #3
 8006156:	f025 0503 	bic.w	r5, r5, #3
 800615a:	3508      	adds	r5, #8
 800615c:	2d0c      	cmp	r5, #12
 800615e:	bf38      	it	cc
 8006160:	250c      	movcc	r5, #12
 8006162:	2d00      	cmp	r5, #0
 8006164:	4607      	mov	r7, r0
 8006166:	db01      	blt.n	800616c <_malloc_r+0x1c>
 8006168:	42a9      	cmp	r1, r5
 800616a:	d905      	bls.n	8006178 <_malloc_r+0x28>
 800616c:	230c      	movs	r3, #12
 800616e:	2600      	movs	r6, #0
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4630      	mov	r0, r6
 8006174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006178:	4e2e      	ldr	r6, [pc, #184]	; (8006234 <_malloc_r+0xe4>)
 800617a:	f000 ff23 	bl	8006fc4 <__malloc_lock>
 800617e:	6833      	ldr	r3, [r6, #0]
 8006180:	461c      	mov	r4, r3
 8006182:	bb34      	cbnz	r4, 80061d2 <_malloc_r+0x82>
 8006184:	4629      	mov	r1, r5
 8006186:	4638      	mov	r0, r7
 8006188:	f7ff ffc2 	bl	8006110 <sbrk_aligned>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	4604      	mov	r4, r0
 8006190:	d14d      	bne.n	800622e <_malloc_r+0xde>
 8006192:	6834      	ldr	r4, [r6, #0]
 8006194:	4626      	mov	r6, r4
 8006196:	2e00      	cmp	r6, #0
 8006198:	d140      	bne.n	800621c <_malloc_r+0xcc>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	4631      	mov	r1, r6
 800619e:	4638      	mov	r0, r7
 80061a0:	eb04 0803 	add.w	r8, r4, r3
 80061a4:	f000 fbc4 	bl	8006930 <_sbrk_r>
 80061a8:	4580      	cmp	r8, r0
 80061aa:	d13a      	bne.n	8006222 <_malloc_r+0xd2>
 80061ac:	6821      	ldr	r1, [r4, #0]
 80061ae:	3503      	adds	r5, #3
 80061b0:	1a6d      	subs	r5, r5, r1
 80061b2:	f025 0503 	bic.w	r5, r5, #3
 80061b6:	3508      	adds	r5, #8
 80061b8:	2d0c      	cmp	r5, #12
 80061ba:	bf38      	it	cc
 80061bc:	250c      	movcc	r5, #12
 80061be:	4638      	mov	r0, r7
 80061c0:	4629      	mov	r1, r5
 80061c2:	f7ff ffa5 	bl	8006110 <sbrk_aligned>
 80061c6:	3001      	adds	r0, #1
 80061c8:	d02b      	beq.n	8006222 <_malloc_r+0xd2>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	442b      	add	r3, r5
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	e00e      	b.n	80061f0 <_malloc_r+0xa0>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	1b52      	subs	r2, r2, r5
 80061d6:	d41e      	bmi.n	8006216 <_malloc_r+0xc6>
 80061d8:	2a0b      	cmp	r2, #11
 80061da:	d916      	bls.n	800620a <_malloc_r+0xba>
 80061dc:	1961      	adds	r1, r4, r5
 80061de:	42a3      	cmp	r3, r4
 80061e0:	6025      	str	r5, [r4, #0]
 80061e2:	bf18      	it	ne
 80061e4:	6059      	strne	r1, [r3, #4]
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	bf08      	it	eq
 80061ea:	6031      	streq	r1, [r6, #0]
 80061ec:	5162      	str	r2, [r4, r5]
 80061ee:	604b      	str	r3, [r1, #4]
 80061f0:	4638      	mov	r0, r7
 80061f2:	f104 060b 	add.w	r6, r4, #11
 80061f6:	f000 feeb 	bl	8006fd0 <__malloc_unlock>
 80061fa:	f026 0607 	bic.w	r6, r6, #7
 80061fe:	1d23      	adds	r3, r4, #4
 8006200:	1af2      	subs	r2, r6, r3
 8006202:	d0b6      	beq.n	8006172 <_malloc_r+0x22>
 8006204:	1b9b      	subs	r3, r3, r6
 8006206:	50a3      	str	r3, [r4, r2]
 8006208:	e7b3      	b.n	8006172 <_malloc_r+0x22>
 800620a:	6862      	ldr	r2, [r4, #4]
 800620c:	42a3      	cmp	r3, r4
 800620e:	bf0c      	ite	eq
 8006210:	6032      	streq	r2, [r6, #0]
 8006212:	605a      	strne	r2, [r3, #4]
 8006214:	e7ec      	b.n	80061f0 <_malloc_r+0xa0>
 8006216:	4623      	mov	r3, r4
 8006218:	6864      	ldr	r4, [r4, #4]
 800621a:	e7b2      	b.n	8006182 <_malloc_r+0x32>
 800621c:	4634      	mov	r4, r6
 800621e:	6876      	ldr	r6, [r6, #4]
 8006220:	e7b9      	b.n	8006196 <_malloc_r+0x46>
 8006222:	230c      	movs	r3, #12
 8006224:	4638      	mov	r0, r7
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	f000 fed2 	bl	8006fd0 <__malloc_unlock>
 800622c:	e7a1      	b.n	8006172 <_malloc_r+0x22>
 800622e:	6025      	str	r5, [r4, #0]
 8006230:	e7de      	b.n	80061f0 <_malloc_r+0xa0>
 8006232:	bf00      	nop
 8006234:	2000094c 	.word	0x2000094c

08006238 <__sfputc_r>:
 8006238:	6893      	ldr	r3, [r2, #8]
 800623a:	b410      	push	{r4}
 800623c:	3b01      	subs	r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	6093      	str	r3, [r2, #8]
 8006242:	da07      	bge.n	8006254 <__sfputc_r+0x1c>
 8006244:	6994      	ldr	r4, [r2, #24]
 8006246:	42a3      	cmp	r3, r4
 8006248:	db01      	blt.n	800624e <__sfputc_r+0x16>
 800624a:	290a      	cmp	r1, #10
 800624c:	d102      	bne.n	8006254 <__sfputc_r+0x1c>
 800624e:	bc10      	pop	{r4}
 8006250:	f000 bb9e 	b.w	8006990 <__swbuf_r>
 8006254:	6813      	ldr	r3, [r2, #0]
 8006256:	1c58      	adds	r0, r3, #1
 8006258:	6010      	str	r0, [r2, #0]
 800625a:	7019      	strb	r1, [r3, #0]
 800625c:	4608      	mov	r0, r1
 800625e:	bc10      	pop	{r4}
 8006260:	4770      	bx	lr

08006262 <__sfputs_r>:
 8006262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006264:	4606      	mov	r6, r0
 8006266:	460f      	mov	r7, r1
 8006268:	4614      	mov	r4, r2
 800626a:	18d5      	adds	r5, r2, r3
 800626c:	42ac      	cmp	r4, r5
 800626e:	d101      	bne.n	8006274 <__sfputs_r+0x12>
 8006270:	2000      	movs	r0, #0
 8006272:	e007      	b.n	8006284 <__sfputs_r+0x22>
 8006274:	463a      	mov	r2, r7
 8006276:	4630      	mov	r0, r6
 8006278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627c:	f7ff ffdc 	bl	8006238 <__sfputc_r>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d1f3      	bne.n	800626c <__sfputs_r+0xa>
 8006284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006288 <_vfiprintf_r>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	460d      	mov	r5, r1
 800628e:	4614      	mov	r4, r2
 8006290:	4698      	mov	r8, r3
 8006292:	4606      	mov	r6, r0
 8006294:	b09d      	sub	sp, #116	; 0x74
 8006296:	b118      	cbz	r0, 80062a0 <_vfiprintf_r+0x18>
 8006298:	6983      	ldr	r3, [r0, #24]
 800629a:	b90b      	cbnz	r3, 80062a0 <_vfiprintf_r+0x18>
 800629c:	f000 fd56 	bl	8006d4c <__sinit>
 80062a0:	4b89      	ldr	r3, [pc, #548]	; (80064c8 <_vfiprintf_r+0x240>)
 80062a2:	429d      	cmp	r5, r3
 80062a4:	d11b      	bne.n	80062de <_vfiprintf_r+0x56>
 80062a6:	6875      	ldr	r5, [r6, #4]
 80062a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062aa:	07d9      	lsls	r1, r3, #31
 80062ac:	d405      	bmi.n	80062ba <_vfiprintf_r+0x32>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	059a      	lsls	r2, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_vfiprintf_r+0x32>
 80062b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062b6:	f000 fde7 	bl	8006e88 <__retarget_lock_acquire_recursive>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	071b      	lsls	r3, r3, #28
 80062be:	d501      	bpl.n	80062c4 <_vfiprintf_r+0x3c>
 80062c0:	692b      	ldr	r3, [r5, #16]
 80062c2:	b9eb      	cbnz	r3, 8006300 <_vfiprintf_r+0x78>
 80062c4:	4629      	mov	r1, r5
 80062c6:	4630      	mov	r0, r6
 80062c8:	f000 fbb4 	bl	8006a34 <__swsetup_r>
 80062cc:	b1c0      	cbz	r0, 8006300 <_vfiprintf_r+0x78>
 80062ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d0:	07dc      	lsls	r4, r3, #31
 80062d2:	d50e      	bpl.n	80062f2 <_vfiprintf_r+0x6a>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	b01d      	add	sp, #116	; 0x74
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062de:	4b7b      	ldr	r3, [pc, #492]	; (80064cc <_vfiprintf_r+0x244>)
 80062e0:	429d      	cmp	r5, r3
 80062e2:	d101      	bne.n	80062e8 <_vfiprintf_r+0x60>
 80062e4:	68b5      	ldr	r5, [r6, #8]
 80062e6:	e7df      	b.n	80062a8 <_vfiprintf_r+0x20>
 80062e8:	4b79      	ldr	r3, [pc, #484]	; (80064d0 <_vfiprintf_r+0x248>)
 80062ea:	429d      	cmp	r5, r3
 80062ec:	bf08      	it	eq
 80062ee:	68f5      	ldreq	r5, [r6, #12]
 80062f0:	e7da      	b.n	80062a8 <_vfiprintf_r+0x20>
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	0598      	lsls	r0, r3, #22
 80062f6:	d4ed      	bmi.n	80062d4 <_vfiprintf_r+0x4c>
 80062f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062fa:	f000 fdc6 	bl	8006e8a <__retarget_lock_release_recursive>
 80062fe:	e7e9      	b.n	80062d4 <_vfiprintf_r+0x4c>
 8006300:	2300      	movs	r3, #0
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	2320      	movs	r3, #32
 8006306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800630a:	2330      	movs	r3, #48	; 0x30
 800630c:	f04f 0901 	mov.w	r9, #1
 8006310:	f8cd 800c 	str.w	r8, [sp, #12]
 8006314:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80064d4 <_vfiprintf_r+0x24c>
 8006318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800631c:	4623      	mov	r3, r4
 800631e:	469a      	mov	sl, r3
 8006320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006324:	b10a      	cbz	r2, 800632a <_vfiprintf_r+0xa2>
 8006326:	2a25      	cmp	r2, #37	; 0x25
 8006328:	d1f9      	bne.n	800631e <_vfiprintf_r+0x96>
 800632a:	ebba 0b04 	subs.w	fp, sl, r4
 800632e:	d00b      	beq.n	8006348 <_vfiprintf_r+0xc0>
 8006330:	465b      	mov	r3, fp
 8006332:	4622      	mov	r2, r4
 8006334:	4629      	mov	r1, r5
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff ff93 	bl	8006262 <__sfputs_r>
 800633c:	3001      	adds	r0, #1
 800633e:	f000 80aa 	beq.w	8006496 <_vfiprintf_r+0x20e>
 8006342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006344:	445a      	add	r2, fp
 8006346:	9209      	str	r2, [sp, #36]	; 0x24
 8006348:	f89a 3000 	ldrb.w	r3, [sl]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80a2 	beq.w	8006496 <_vfiprintf_r+0x20e>
 8006352:	2300      	movs	r3, #0
 8006354:	f04f 32ff 	mov.w	r2, #4294967295
 8006358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800635c:	f10a 0a01 	add.w	sl, sl, #1
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006368:	931a      	str	r3, [sp, #104]	; 0x68
 800636a:	4654      	mov	r4, sl
 800636c:	2205      	movs	r2, #5
 800636e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006372:	4858      	ldr	r0, [pc, #352]	; (80064d4 <_vfiprintf_r+0x24c>)
 8006374:	f000 fdf0 	bl	8006f58 <memchr>
 8006378:	9a04      	ldr	r2, [sp, #16]
 800637a:	b9d8      	cbnz	r0, 80063b4 <_vfiprintf_r+0x12c>
 800637c:	06d1      	lsls	r1, r2, #27
 800637e:	bf44      	itt	mi
 8006380:	2320      	movmi	r3, #32
 8006382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006386:	0713      	lsls	r3, r2, #28
 8006388:	bf44      	itt	mi
 800638a:	232b      	movmi	r3, #43	; 0x2b
 800638c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006390:	f89a 3000 	ldrb.w	r3, [sl]
 8006394:	2b2a      	cmp	r3, #42	; 0x2a
 8006396:	d015      	beq.n	80063c4 <_vfiprintf_r+0x13c>
 8006398:	4654      	mov	r4, sl
 800639a:	2000      	movs	r0, #0
 800639c:	f04f 0c0a 	mov.w	ip, #10
 80063a0:	9a07      	ldr	r2, [sp, #28]
 80063a2:	4621      	mov	r1, r4
 80063a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a8:	3b30      	subs	r3, #48	; 0x30
 80063aa:	2b09      	cmp	r3, #9
 80063ac:	d94e      	bls.n	800644c <_vfiprintf_r+0x1c4>
 80063ae:	b1b0      	cbz	r0, 80063de <_vfiprintf_r+0x156>
 80063b0:	9207      	str	r2, [sp, #28]
 80063b2:	e014      	b.n	80063de <_vfiprintf_r+0x156>
 80063b4:	eba0 0308 	sub.w	r3, r0, r8
 80063b8:	fa09 f303 	lsl.w	r3, r9, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	46a2      	mov	sl, r4
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	e7d2      	b.n	800636a <_vfiprintf_r+0xe2>
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	1d19      	adds	r1, r3, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	9103      	str	r1, [sp, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bfbb      	ittet	lt
 80063d0:	425b      	neglt	r3, r3
 80063d2:	f042 0202 	orrlt.w	r2, r2, #2
 80063d6:	9307      	strge	r3, [sp, #28]
 80063d8:	9307      	strlt	r3, [sp, #28]
 80063da:	bfb8      	it	lt
 80063dc:	9204      	strlt	r2, [sp, #16]
 80063de:	7823      	ldrb	r3, [r4, #0]
 80063e0:	2b2e      	cmp	r3, #46	; 0x2e
 80063e2:	d10c      	bne.n	80063fe <_vfiprintf_r+0x176>
 80063e4:	7863      	ldrb	r3, [r4, #1]
 80063e6:	2b2a      	cmp	r3, #42	; 0x2a
 80063e8:	d135      	bne.n	8006456 <_vfiprintf_r+0x1ce>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	3402      	adds	r4, #2
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9203      	str	r2, [sp, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfb8      	it	lt
 80063f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063fc:	9305      	str	r3, [sp, #20]
 80063fe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80064d8 <_vfiprintf_r+0x250>
 8006402:	2203      	movs	r2, #3
 8006404:	4650      	mov	r0, sl
 8006406:	7821      	ldrb	r1, [r4, #0]
 8006408:	f000 fda6 	bl	8006f58 <memchr>
 800640c:	b140      	cbz	r0, 8006420 <_vfiprintf_r+0x198>
 800640e:	2340      	movs	r3, #64	; 0x40
 8006410:	eba0 000a 	sub.w	r0, r0, sl
 8006414:	fa03 f000 	lsl.w	r0, r3, r0
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	3401      	adds	r4, #1
 800641c:	4303      	orrs	r3, r0
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006424:	2206      	movs	r2, #6
 8006426:	482d      	ldr	r0, [pc, #180]	; (80064dc <_vfiprintf_r+0x254>)
 8006428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800642c:	f000 fd94 	bl	8006f58 <memchr>
 8006430:	2800      	cmp	r0, #0
 8006432:	d03f      	beq.n	80064b4 <_vfiprintf_r+0x22c>
 8006434:	4b2a      	ldr	r3, [pc, #168]	; (80064e0 <_vfiprintf_r+0x258>)
 8006436:	bb1b      	cbnz	r3, 8006480 <_vfiprintf_r+0x1f8>
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	3307      	adds	r3, #7
 800643c:	f023 0307 	bic.w	r3, r3, #7
 8006440:	3308      	adds	r3, #8
 8006442:	9303      	str	r3, [sp, #12]
 8006444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006446:	443b      	add	r3, r7
 8006448:	9309      	str	r3, [sp, #36]	; 0x24
 800644a:	e767      	b.n	800631c <_vfiprintf_r+0x94>
 800644c:	460c      	mov	r4, r1
 800644e:	2001      	movs	r0, #1
 8006450:	fb0c 3202 	mla	r2, ip, r2, r3
 8006454:	e7a5      	b.n	80063a2 <_vfiprintf_r+0x11a>
 8006456:	2300      	movs	r3, #0
 8006458:	f04f 0c0a 	mov.w	ip, #10
 800645c:	4619      	mov	r1, r3
 800645e:	3401      	adds	r4, #1
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	4620      	mov	r0, r4
 8006464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006468:	3a30      	subs	r2, #48	; 0x30
 800646a:	2a09      	cmp	r2, #9
 800646c:	d903      	bls.n	8006476 <_vfiprintf_r+0x1ee>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0c5      	beq.n	80063fe <_vfiprintf_r+0x176>
 8006472:	9105      	str	r1, [sp, #20]
 8006474:	e7c3      	b.n	80063fe <_vfiprintf_r+0x176>
 8006476:	4604      	mov	r4, r0
 8006478:	2301      	movs	r3, #1
 800647a:	fb0c 2101 	mla	r1, ip, r1, r2
 800647e:	e7f0      	b.n	8006462 <_vfiprintf_r+0x1da>
 8006480:	ab03      	add	r3, sp, #12
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	462a      	mov	r2, r5
 8006486:	4630      	mov	r0, r6
 8006488:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <_vfiprintf_r+0x25c>)
 800648a:	a904      	add	r1, sp, #16
 800648c:	f3af 8000 	nop.w
 8006490:	4607      	mov	r7, r0
 8006492:	1c78      	adds	r0, r7, #1
 8006494:	d1d6      	bne.n	8006444 <_vfiprintf_r+0x1bc>
 8006496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006498:	07d9      	lsls	r1, r3, #31
 800649a:	d405      	bmi.n	80064a8 <_vfiprintf_r+0x220>
 800649c:	89ab      	ldrh	r3, [r5, #12]
 800649e:	059a      	lsls	r2, r3, #22
 80064a0:	d402      	bmi.n	80064a8 <_vfiprintf_r+0x220>
 80064a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064a4:	f000 fcf1 	bl	8006e8a <__retarget_lock_release_recursive>
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	065b      	lsls	r3, r3, #25
 80064ac:	f53f af12 	bmi.w	80062d4 <_vfiprintf_r+0x4c>
 80064b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b2:	e711      	b.n	80062d8 <_vfiprintf_r+0x50>
 80064b4:	ab03      	add	r3, sp, #12
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	462a      	mov	r2, r5
 80064ba:	4630      	mov	r0, r6
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <_vfiprintf_r+0x25c>)
 80064be:	a904      	add	r1, sp, #16
 80064c0:	f000 f882 	bl	80065c8 <_printf_i>
 80064c4:	e7e4      	b.n	8006490 <_vfiprintf_r+0x208>
 80064c6:	bf00      	nop
 80064c8:	0800e24c 	.word	0x0800e24c
 80064cc:	0800e26c 	.word	0x0800e26c
 80064d0:	0800e22c 	.word	0x0800e22c
 80064d4:	0800e1f8 	.word	0x0800e1f8
 80064d8:	0800e1fe 	.word	0x0800e1fe
 80064dc:	0800e202 	.word	0x0800e202
 80064e0:	00000000 	.word	0x00000000
 80064e4:	08006263 	.word	0x08006263

080064e8 <_printf_common>:
 80064e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	4616      	mov	r6, r2
 80064ee:	4699      	mov	r9, r3
 80064f0:	688a      	ldr	r2, [r1, #8]
 80064f2:	690b      	ldr	r3, [r1, #16]
 80064f4:	4607      	mov	r7, r0
 80064f6:	4293      	cmp	r3, r2
 80064f8:	bfb8      	it	lt
 80064fa:	4613      	movlt	r3, r2
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006502:	460c      	mov	r4, r1
 8006504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006508:	b10a      	cbz	r2, 800650e <_printf_common+0x26>
 800650a:	3301      	adds	r3, #1
 800650c:	6033      	str	r3, [r6, #0]
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	0699      	lsls	r1, r3, #26
 8006512:	bf42      	ittt	mi
 8006514:	6833      	ldrmi	r3, [r6, #0]
 8006516:	3302      	addmi	r3, #2
 8006518:	6033      	strmi	r3, [r6, #0]
 800651a:	6825      	ldr	r5, [r4, #0]
 800651c:	f015 0506 	ands.w	r5, r5, #6
 8006520:	d106      	bne.n	8006530 <_printf_common+0x48>
 8006522:	f104 0a19 	add.w	sl, r4, #25
 8006526:	68e3      	ldr	r3, [r4, #12]
 8006528:	6832      	ldr	r2, [r6, #0]
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	42ab      	cmp	r3, r5
 800652e:	dc28      	bgt.n	8006582 <_printf_common+0x9a>
 8006530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006534:	1e13      	subs	r3, r2, #0
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	bf18      	it	ne
 800653a:	2301      	movne	r3, #1
 800653c:	0692      	lsls	r2, r2, #26
 800653e:	d42d      	bmi.n	800659c <_printf_common+0xb4>
 8006540:	4649      	mov	r1, r9
 8006542:	4638      	mov	r0, r7
 8006544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006548:	47c0      	blx	r8
 800654a:	3001      	adds	r0, #1
 800654c:	d020      	beq.n	8006590 <_printf_common+0xa8>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	68e5      	ldr	r5, [r4, #12]
 8006552:	f003 0306 	and.w	r3, r3, #6
 8006556:	2b04      	cmp	r3, #4
 8006558:	bf18      	it	ne
 800655a:	2500      	movne	r5, #0
 800655c:	6832      	ldr	r2, [r6, #0]
 800655e:	f04f 0600 	mov.w	r6, #0
 8006562:	68a3      	ldr	r3, [r4, #8]
 8006564:	bf08      	it	eq
 8006566:	1aad      	subeq	r5, r5, r2
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	bf08      	it	eq
 800656c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006570:	4293      	cmp	r3, r2
 8006572:	bfc4      	itt	gt
 8006574:	1a9b      	subgt	r3, r3, r2
 8006576:	18ed      	addgt	r5, r5, r3
 8006578:	341a      	adds	r4, #26
 800657a:	42b5      	cmp	r5, r6
 800657c:	d11a      	bne.n	80065b4 <_printf_common+0xcc>
 800657e:	2000      	movs	r0, #0
 8006580:	e008      	b.n	8006594 <_printf_common+0xac>
 8006582:	2301      	movs	r3, #1
 8006584:	4652      	mov	r2, sl
 8006586:	4649      	mov	r1, r9
 8006588:	4638      	mov	r0, r7
 800658a:	47c0      	blx	r8
 800658c:	3001      	adds	r0, #1
 800658e:	d103      	bne.n	8006598 <_printf_common+0xb0>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006598:	3501      	adds	r5, #1
 800659a:	e7c4      	b.n	8006526 <_printf_common+0x3e>
 800659c:	2030      	movs	r0, #48	; 0x30
 800659e:	18e1      	adds	r1, r4, r3
 80065a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065aa:	4422      	add	r2, r4
 80065ac:	3302      	adds	r3, #2
 80065ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065b2:	e7c5      	b.n	8006540 <_printf_common+0x58>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4622      	mov	r2, r4
 80065b8:	4649      	mov	r1, r9
 80065ba:	4638      	mov	r0, r7
 80065bc:	47c0      	blx	r8
 80065be:	3001      	adds	r0, #1
 80065c0:	d0e6      	beq.n	8006590 <_printf_common+0xa8>
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7d9      	b.n	800657a <_printf_common+0x92>
	...

080065c8 <_printf_i>:
 80065c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	7e0f      	ldrb	r7, [r1, #24]
 80065ce:	4691      	mov	r9, r2
 80065d0:	2f78      	cmp	r7, #120	; 0x78
 80065d2:	4680      	mov	r8, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	469a      	mov	sl, r3
 80065d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065de:	d807      	bhi.n	80065f0 <_printf_i+0x28>
 80065e0:	2f62      	cmp	r7, #98	; 0x62
 80065e2:	d80a      	bhi.n	80065fa <_printf_i+0x32>
 80065e4:	2f00      	cmp	r7, #0
 80065e6:	f000 80d9 	beq.w	800679c <_printf_i+0x1d4>
 80065ea:	2f58      	cmp	r7, #88	; 0x58
 80065ec:	f000 80a4 	beq.w	8006738 <_printf_i+0x170>
 80065f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065f8:	e03a      	b.n	8006670 <_printf_i+0xa8>
 80065fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065fe:	2b15      	cmp	r3, #21
 8006600:	d8f6      	bhi.n	80065f0 <_printf_i+0x28>
 8006602:	a101      	add	r1, pc, #4	; (adr r1, 8006608 <_printf_i+0x40>)
 8006604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006608:	08006661 	.word	0x08006661
 800660c:	08006675 	.word	0x08006675
 8006610:	080065f1 	.word	0x080065f1
 8006614:	080065f1 	.word	0x080065f1
 8006618:	080065f1 	.word	0x080065f1
 800661c:	080065f1 	.word	0x080065f1
 8006620:	08006675 	.word	0x08006675
 8006624:	080065f1 	.word	0x080065f1
 8006628:	080065f1 	.word	0x080065f1
 800662c:	080065f1 	.word	0x080065f1
 8006630:	080065f1 	.word	0x080065f1
 8006634:	08006783 	.word	0x08006783
 8006638:	080066a5 	.word	0x080066a5
 800663c:	08006765 	.word	0x08006765
 8006640:	080065f1 	.word	0x080065f1
 8006644:	080065f1 	.word	0x080065f1
 8006648:	080067a5 	.word	0x080067a5
 800664c:	080065f1 	.word	0x080065f1
 8006650:	080066a5 	.word	0x080066a5
 8006654:	080065f1 	.word	0x080065f1
 8006658:	080065f1 	.word	0x080065f1
 800665c:	0800676d 	.word	0x0800676d
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	1d1a      	adds	r2, r3, #4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	602a      	str	r2, [r5, #0]
 8006668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800666c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006670:	2301      	movs	r3, #1
 8006672:	e0a4      	b.n	80067be <_printf_i+0x1f6>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	6829      	ldr	r1, [r5, #0]
 8006678:	0606      	lsls	r6, r0, #24
 800667a:	f101 0304 	add.w	r3, r1, #4
 800667e:	d50a      	bpl.n	8006696 <_printf_i+0xce>
 8006680:	680e      	ldr	r6, [r1, #0]
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	2e00      	cmp	r6, #0
 8006686:	da03      	bge.n	8006690 <_printf_i+0xc8>
 8006688:	232d      	movs	r3, #45	; 0x2d
 800668a:	4276      	negs	r6, r6
 800668c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006690:	230a      	movs	r3, #10
 8006692:	485e      	ldr	r0, [pc, #376]	; (800680c <_printf_i+0x244>)
 8006694:	e019      	b.n	80066ca <_printf_i+0x102>
 8006696:	680e      	ldr	r6, [r1, #0]
 8006698:	f010 0f40 	tst.w	r0, #64	; 0x40
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	bf18      	it	ne
 80066a0:	b236      	sxthne	r6, r6
 80066a2:	e7ef      	b.n	8006684 <_printf_i+0xbc>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	1d19      	adds	r1, r3, #4
 80066aa:	6029      	str	r1, [r5, #0]
 80066ac:	0601      	lsls	r1, r0, #24
 80066ae:	d501      	bpl.n	80066b4 <_printf_i+0xec>
 80066b0:	681e      	ldr	r6, [r3, #0]
 80066b2:	e002      	b.n	80066ba <_printf_i+0xf2>
 80066b4:	0646      	lsls	r6, r0, #25
 80066b6:	d5fb      	bpl.n	80066b0 <_printf_i+0xe8>
 80066b8:	881e      	ldrh	r6, [r3, #0]
 80066ba:	2f6f      	cmp	r7, #111	; 0x6f
 80066bc:	bf0c      	ite	eq
 80066be:	2308      	moveq	r3, #8
 80066c0:	230a      	movne	r3, #10
 80066c2:	4852      	ldr	r0, [pc, #328]	; (800680c <_printf_i+0x244>)
 80066c4:	2100      	movs	r1, #0
 80066c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ca:	6865      	ldr	r5, [r4, #4]
 80066cc:	2d00      	cmp	r5, #0
 80066ce:	bfa8      	it	ge
 80066d0:	6821      	ldrge	r1, [r4, #0]
 80066d2:	60a5      	str	r5, [r4, #8]
 80066d4:	bfa4      	itt	ge
 80066d6:	f021 0104 	bicge.w	r1, r1, #4
 80066da:	6021      	strge	r1, [r4, #0]
 80066dc:	b90e      	cbnz	r6, 80066e2 <_printf_i+0x11a>
 80066de:	2d00      	cmp	r5, #0
 80066e0:	d04d      	beq.n	800677e <_printf_i+0x1b6>
 80066e2:	4615      	mov	r5, r2
 80066e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80066e8:	fb03 6711 	mls	r7, r3, r1, r6
 80066ec:	5dc7      	ldrb	r7, [r0, r7]
 80066ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066f2:	4637      	mov	r7, r6
 80066f4:	42bb      	cmp	r3, r7
 80066f6:	460e      	mov	r6, r1
 80066f8:	d9f4      	bls.n	80066e4 <_printf_i+0x11c>
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d10b      	bne.n	8006716 <_printf_i+0x14e>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	07de      	lsls	r6, r3, #31
 8006702:	d508      	bpl.n	8006716 <_printf_i+0x14e>
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	6861      	ldr	r1, [r4, #4]
 8006708:	4299      	cmp	r1, r3
 800670a:	bfde      	ittt	le
 800670c:	2330      	movle	r3, #48	; 0x30
 800670e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006712:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006716:	1b52      	subs	r2, r2, r5
 8006718:	6122      	str	r2, [r4, #16]
 800671a:	464b      	mov	r3, r9
 800671c:	4621      	mov	r1, r4
 800671e:	4640      	mov	r0, r8
 8006720:	f8cd a000 	str.w	sl, [sp]
 8006724:	aa03      	add	r2, sp, #12
 8006726:	f7ff fedf 	bl	80064e8 <_printf_common>
 800672a:	3001      	adds	r0, #1
 800672c:	d14c      	bne.n	80067c8 <_printf_i+0x200>
 800672e:	f04f 30ff 	mov.w	r0, #4294967295
 8006732:	b004      	add	sp, #16
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	4834      	ldr	r0, [pc, #208]	; (800680c <_printf_i+0x244>)
 800673a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800673e:	6829      	ldr	r1, [r5, #0]
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	f851 6b04 	ldr.w	r6, [r1], #4
 8006746:	6029      	str	r1, [r5, #0]
 8006748:	061d      	lsls	r5, r3, #24
 800674a:	d514      	bpl.n	8006776 <_printf_i+0x1ae>
 800674c:	07df      	lsls	r7, r3, #31
 800674e:	bf44      	itt	mi
 8006750:	f043 0320 	orrmi.w	r3, r3, #32
 8006754:	6023      	strmi	r3, [r4, #0]
 8006756:	b91e      	cbnz	r6, 8006760 <_printf_i+0x198>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	f023 0320 	bic.w	r3, r3, #32
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	2310      	movs	r3, #16
 8006762:	e7af      	b.n	80066c4 <_printf_i+0xfc>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	f043 0320 	orr.w	r3, r3, #32
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	2378      	movs	r3, #120	; 0x78
 800676e:	4828      	ldr	r0, [pc, #160]	; (8006810 <_printf_i+0x248>)
 8006770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006774:	e7e3      	b.n	800673e <_printf_i+0x176>
 8006776:	0659      	lsls	r1, r3, #25
 8006778:	bf48      	it	mi
 800677a:	b2b6      	uxthmi	r6, r6
 800677c:	e7e6      	b.n	800674c <_printf_i+0x184>
 800677e:	4615      	mov	r5, r2
 8006780:	e7bb      	b.n	80066fa <_printf_i+0x132>
 8006782:	682b      	ldr	r3, [r5, #0]
 8006784:	6826      	ldr	r6, [r4, #0]
 8006786:	1d18      	adds	r0, r3, #4
 8006788:	6961      	ldr	r1, [r4, #20]
 800678a:	6028      	str	r0, [r5, #0]
 800678c:	0635      	lsls	r5, r6, #24
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	d501      	bpl.n	8006796 <_printf_i+0x1ce>
 8006792:	6019      	str	r1, [r3, #0]
 8006794:	e002      	b.n	800679c <_printf_i+0x1d4>
 8006796:	0670      	lsls	r0, r6, #25
 8006798:	d5fb      	bpl.n	8006792 <_printf_i+0x1ca>
 800679a:	8019      	strh	r1, [r3, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	4615      	mov	r5, r2
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	e7ba      	b.n	800671a <_printf_i+0x152>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	2100      	movs	r1, #0
 80067a8:	1d1a      	adds	r2, r3, #4
 80067aa:	602a      	str	r2, [r5, #0]
 80067ac:	681d      	ldr	r5, [r3, #0]
 80067ae:	6862      	ldr	r2, [r4, #4]
 80067b0:	4628      	mov	r0, r5
 80067b2:	f000 fbd1 	bl	8006f58 <memchr>
 80067b6:	b108      	cbz	r0, 80067bc <_printf_i+0x1f4>
 80067b8:	1b40      	subs	r0, r0, r5
 80067ba:	6060      	str	r0, [r4, #4]
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	2300      	movs	r3, #0
 80067c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c6:	e7a8      	b.n	800671a <_printf_i+0x152>
 80067c8:	462a      	mov	r2, r5
 80067ca:	4649      	mov	r1, r9
 80067cc:	4640      	mov	r0, r8
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	47d0      	blx	sl
 80067d2:	3001      	adds	r0, #1
 80067d4:	d0ab      	beq.n	800672e <_printf_i+0x166>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	079b      	lsls	r3, r3, #30
 80067da:	d413      	bmi.n	8006804 <_printf_i+0x23c>
 80067dc:	68e0      	ldr	r0, [r4, #12]
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	4298      	cmp	r0, r3
 80067e2:	bfb8      	it	lt
 80067e4:	4618      	movlt	r0, r3
 80067e6:	e7a4      	b.n	8006732 <_printf_i+0x16a>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4632      	mov	r2, r6
 80067ec:	4649      	mov	r1, r9
 80067ee:	4640      	mov	r0, r8
 80067f0:	47d0      	blx	sl
 80067f2:	3001      	adds	r0, #1
 80067f4:	d09b      	beq.n	800672e <_printf_i+0x166>
 80067f6:	3501      	adds	r5, #1
 80067f8:	68e3      	ldr	r3, [r4, #12]
 80067fa:	9903      	ldr	r1, [sp, #12]
 80067fc:	1a5b      	subs	r3, r3, r1
 80067fe:	42ab      	cmp	r3, r5
 8006800:	dcf2      	bgt.n	80067e8 <_printf_i+0x220>
 8006802:	e7eb      	b.n	80067dc <_printf_i+0x214>
 8006804:	2500      	movs	r5, #0
 8006806:	f104 0619 	add.w	r6, r4, #25
 800680a:	e7f5      	b.n	80067f8 <_printf_i+0x230>
 800680c:	0800e209 	.word	0x0800e209
 8006810:	0800e21a 	.word	0x0800e21a

08006814 <iprintf>:
 8006814:	b40f      	push	{r0, r1, r2, r3}
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <iprintf+0x2c>)
 8006818:	b513      	push	{r0, r1, r4, lr}
 800681a:	681c      	ldr	r4, [r3, #0]
 800681c:	b124      	cbz	r4, 8006828 <iprintf+0x14>
 800681e:	69a3      	ldr	r3, [r4, #24]
 8006820:	b913      	cbnz	r3, 8006828 <iprintf+0x14>
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fa92 	bl	8006d4c <__sinit>
 8006828:	ab05      	add	r3, sp, #20
 800682a:	4620      	mov	r0, r4
 800682c:	9a04      	ldr	r2, [sp, #16]
 800682e:	68a1      	ldr	r1, [r4, #8]
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	f7ff fd29 	bl	8006288 <_vfiprintf_r>
 8006836:	b002      	add	sp, #8
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	b004      	add	sp, #16
 800683e:	4770      	bx	lr
 8006840:	20000098 	.word	0x20000098

08006844 <_puts_r>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	4605      	mov	r5, r0
 800684a:	b118      	cbz	r0, 8006854 <_puts_r+0x10>
 800684c:	6983      	ldr	r3, [r0, #24]
 800684e:	b90b      	cbnz	r3, 8006854 <_puts_r+0x10>
 8006850:	f000 fa7c 	bl	8006d4c <__sinit>
 8006854:	69ab      	ldr	r3, [r5, #24]
 8006856:	68ac      	ldr	r4, [r5, #8]
 8006858:	b913      	cbnz	r3, 8006860 <_puts_r+0x1c>
 800685a:	4628      	mov	r0, r5
 800685c:	f000 fa76 	bl	8006d4c <__sinit>
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <_puts_r+0xd0>)
 8006862:	429c      	cmp	r4, r3
 8006864:	d120      	bne.n	80068a8 <_puts_r+0x64>
 8006866:	686c      	ldr	r4, [r5, #4]
 8006868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d405      	bmi.n	800687a <_puts_r+0x36>
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	0598      	lsls	r0, r3, #22
 8006872:	d402      	bmi.n	800687a <_puts_r+0x36>
 8006874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006876:	f000 fb07 	bl	8006e88 <__retarget_lock_acquire_recursive>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	0719      	lsls	r1, r3, #28
 800687e:	d51d      	bpl.n	80068bc <_puts_r+0x78>
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	b1db      	cbz	r3, 80068bc <_puts_r+0x78>
 8006884:	3e01      	subs	r6, #1
 8006886:	68a3      	ldr	r3, [r4, #8]
 8006888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800688c:	3b01      	subs	r3, #1
 800688e:	60a3      	str	r3, [r4, #8]
 8006890:	bb39      	cbnz	r1, 80068e2 <_puts_r+0x9e>
 8006892:	2b00      	cmp	r3, #0
 8006894:	da38      	bge.n	8006908 <_puts_r+0xc4>
 8006896:	4622      	mov	r2, r4
 8006898:	210a      	movs	r1, #10
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f878 	bl	8006990 <__swbuf_r>
 80068a0:	3001      	adds	r0, #1
 80068a2:	d011      	beq.n	80068c8 <_puts_r+0x84>
 80068a4:	250a      	movs	r5, #10
 80068a6:	e011      	b.n	80068cc <_puts_r+0x88>
 80068a8:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <_puts_r+0xd4>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d101      	bne.n	80068b2 <_puts_r+0x6e>
 80068ae:	68ac      	ldr	r4, [r5, #8]
 80068b0:	e7da      	b.n	8006868 <_puts_r+0x24>
 80068b2:	4b1a      	ldr	r3, [pc, #104]	; (800691c <_puts_r+0xd8>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	bf08      	it	eq
 80068b8:	68ec      	ldreq	r4, [r5, #12]
 80068ba:	e7d5      	b.n	8006868 <_puts_r+0x24>
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f8b8 	bl	8006a34 <__swsetup_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d0dd      	beq.n	8006884 <_puts_r+0x40>
 80068c8:	f04f 35ff 	mov.w	r5, #4294967295
 80068cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ce:	07da      	lsls	r2, r3, #31
 80068d0:	d405      	bmi.n	80068de <_puts_r+0x9a>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	d402      	bmi.n	80068de <_puts_r+0x9a>
 80068d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068da:	f000 fad6 	bl	8006e8a <__retarget_lock_release_recursive>
 80068de:	4628      	mov	r0, r5
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da04      	bge.n	80068f0 <_puts_r+0xac>
 80068e6:	69a2      	ldr	r2, [r4, #24]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	dc06      	bgt.n	80068fa <_puts_r+0xb6>
 80068ec:	290a      	cmp	r1, #10
 80068ee:	d004      	beq.n	80068fa <_puts_r+0xb6>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	6022      	str	r2, [r4, #0]
 80068f6:	7019      	strb	r1, [r3, #0]
 80068f8:	e7c5      	b.n	8006886 <_puts_r+0x42>
 80068fa:	4622      	mov	r2, r4
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 f847 	bl	8006990 <__swbuf_r>
 8006902:	3001      	adds	r0, #1
 8006904:	d1bf      	bne.n	8006886 <_puts_r+0x42>
 8006906:	e7df      	b.n	80068c8 <_puts_r+0x84>
 8006908:	250a      	movs	r5, #10
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	6022      	str	r2, [r4, #0]
 8006910:	701d      	strb	r5, [r3, #0]
 8006912:	e7db      	b.n	80068cc <_puts_r+0x88>
 8006914:	0800e24c 	.word	0x0800e24c
 8006918:	0800e26c 	.word	0x0800e26c
 800691c:	0800e22c 	.word	0x0800e22c

08006920 <puts>:
 8006920:	4b02      	ldr	r3, [pc, #8]	; (800692c <puts+0xc>)
 8006922:	4601      	mov	r1, r0
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f7ff bf8d 	b.w	8006844 <_puts_r>
 800692a:	bf00      	nop
 800692c:	20000098 	.word	0x20000098

08006930 <_sbrk_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	2300      	movs	r3, #0
 8006934:	4d05      	ldr	r5, [pc, #20]	; (800694c <_sbrk_r+0x1c>)
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fc f866 	bl	8002a0c <_sbrk>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_sbrk_r+0x1a>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_sbrk_r+0x1a>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000958 	.word	0x20000958

08006950 <siprintf>:
 8006950:	b40e      	push	{r1, r2, r3}
 8006952:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006956:	b500      	push	{lr}
 8006958:	b09c      	sub	sp, #112	; 0x70
 800695a:	ab1d      	add	r3, sp, #116	; 0x74
 800695c:	9002      	str	r0, [sp, #8]
 800695e:	9006      	str	r0, [sp, #24]
 8006960:	9107      	str	r1, [sp, #28]
 8006962:	9104      	str	r1, [sp, #16]
 8006964:	4808      	ldr	r0, [pc, #32]	; (8006988 <siprintf+0x38>)
 8006966:	4909      	ldr	r1, [pc, #36]	; (800698c <siprintf+0x3c>)
 8006968:	f853 2b04 	ldr.w	r2, [r3], #4
 800696c:	9105      	str	r1, [sp, #20]
 800696e:	6800      	ldr	r0, [r0, #0]
 8006970:	a902      	add	r1, sp, #8
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	f000 fbbc 	bl	80070f0 <_svfiprintf_r>
 8006978:	2200      	movs	r2, #0
 800697a:	9b02      	ldr	r3, [sp, #8]
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	b01c      	add	sp, #112	; 0x70
 8006980:	f85d eb04 	ldr.w	lr, [sp], #4
 8006984:	b003      	add	sp, #12
 8006986:	4770      	bx	lr
 8006988:	20000098 	.word	0x20000098
 800698c:	ffff0208 	.word	0xffff0208

08006990 <__swbuf_r>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	460e      	mov	r6, r1
 8006994:	4614      	mov	r4, r2
 8006996:	4605      	mov	r5, r0
 8006998:	b118      	cbz	r0, 80069a2 <__swbuf_r+0x12>
 800699a:	6983      	ldr	r3, [r0, #24]
 800699c:	b90b      	cbnz	r3, 80069a2 <__swbuf_r+0x12>
 800699e:	f000 f9d5 	bl	8006d4c <__sinit>
 80069a2:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <__swbuf_r+0x98>)
 80069a4:	429c      	cmp	r4, r3
 80069a6:	d12b      	bne.n	8006a00 <__swbuf_r+0x70>
 80069a8:	686c      	ldr	r4, [r5, #4]
 80069aa:	69a3      	ldr	r3, [r4, #24]
 80069ac:	60a3      	str	r3, [r4, #8]
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	071a      	lsls	r2, r3, #28
 80069b2:	d52f      	bpl.n	8006a14 <__swbuf_r+0x84>
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	b36b      	cbz	r3, 8006a14 <__swbuf_r+0x84>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	6820      	ldr	r0, [r4, #0]
 80069bc:	b2f6      	uxtb	r6, r6
 80069be:	1ac0      	subs	r0, r0, r3
 80069c0:	6963      	ldr	r3, [r4, #20]
 80069c2:	4637      	mov	r7, r6
 80069c4:	4283      	cmp	r3, r0
 80069c6:	dc04      	bgt.n	80069d2 <__swbuf_r+0x42>
 80069c8:	4621      	mov	r1, r4
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 f92a 	bl	8006c24 <_fflush_r>
 80069d0:	bb30      	cbnz	r0, 8006a20 <__swbuf_r+0x90>
 80069d2:	68a3      	ldr	r3, [r4, #8]
 80069d4:	3001      	adds	r0, #1
 80069d6:	3b01      	subs	r3, #1
 80069d8:	60a3      	str	r3, [r4, #8]
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	701e      	strb	r6, [r3, #0]
 80069e2:	6963      	ldr	r3, [r4, #20]
 80069e4:	4283      	cmp	r3, r0
 80069e6:	d004      	beq.n	80069f2 <__swbuf_r+0x62>
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	07db      	lsls	r3, r3, #31
 80069ec:	d506      	bpl.n	80069fc <__swbuf_r+0x6c>
 80069ee:	2e0a      	cmp	r6, #10
 80069f0:	d104      	bne.n	80069fc <__swbuf_r+0x6c>
 80069f2:	4621      	mov	r1, r4
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 f915 	bl	8006c24 <_fflush_r>
 80069fa:	b988      	cbnz	r0, 8006a20 <__swbuf_r+0x90>
 80069fc:	4638      	mov	r0, r7
 80069fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <__swbuf_r+0x9c>)
 8006a02:	429c      	cmp	r4, r3
 8006a04:	d101      	bne.n	8006a0a <__swbuf_r+0x7a>
 8006a06:	68ac      	ldr	r4, [r5, #8]
 8006a08:	e7cf      	b.n	80069aa <__swbuf_r+0x1a>
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <__swbuf_r+0xa0>)
 8006a0c:	429c      	cmp	r4, r3
 8006a0e:	bf08      	it	eq
 8006a10:	68ec      	ldreq	r4, [r5, #12]
 8006a12:	e7ca      	b.n	80069aa <__swbuf_r+0x1a>
 8006a14:	4621      	mov	r1, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 f80c 	bl	8006a34 <__swsetup_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d0cb      	beq.n	80069b8 <__swbuf_r+0x28>
 8006a20:	f04f 37ff 	mov.w	r7, #4294967295
 8006a24:	e7ea      	b.n	80069fc <__swbuf_r+0x6c>
 8006a26:	bf00      	nop
 8006a28:	0800e24c 	.word	0x0800e24c
 8006a2c:	0800e26c 	.word	0x0800e26c
 8006a30:	0800e22c 	.word	0x0800e22c

08006a34 <__swsetup_r>:
 8006a34:	4b32      	ldr	r3, [pc, #200]	; (8006b00 <__swsetup_r+0xcc>)
 8006a36:	b570      	push	{r4, r5, r6, lr}
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	b125      	cbz	r5, 8006a4a <__swsetup_r+0x16>
 8006a40:	69ab      	ldr	r3, [r5, #24]
 8006a42:	b913      	cbnz	r3, 8006a4a <__swsetup_r+0x16>
 8006a44:	4628      	mov	r0, r5
 8006a46:	f000 f981 	bl	8006d4c <__sinit>
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <__swsetup_r+0xd0>)
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	d10f      	bne.n	8006a70 <__swsetup_r+0x3c>
 8006a50:	686c      	ldr	r4, [r5, #4]
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a58:	0719      	lsls	r1, r3, #28
 8006a5a:	d42c      	bmi.n	8006ab6 <__swsetup_r+0x82>
 8006a5c:	06dd      	lsls	r5, r3, #27
 8006a5e:	d411      	bmi.n	8006a84 <__swsetup_r+0x50>
 8006a60:	2309      	movs	r3, #9
 8006a62:	6033      	str	r3, [r6, #0]
 8006a64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	e03e      	b.n	8006aee <__swsetup_r+0xba>
 8006a70:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <__swsetup_r+0xd4>)
 8006a72:	429c      	cmp	r4, r3
 8006a74:	d101      	bne.n	8006a7a <__swsetup_r+0x46>
 8006a76:	68ac      	ldr	r4, [r5, #8]
 8006a78:	e7eb      	b.n	8006a52 <__swsetup_r+0x1e>
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <__swsetup_r+0xd8>)
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	bf08      	it	eq
 8006a80:	68ec      	ldreq	r4, [r5, #12]
 8006a82:	e7e6      	b.n	8006a52 <__swsetup_r+0x1e>
 8006a84:	0758      	lsls	r0, r3, #29
 8006a86:	d512      	bpl.n	8006aae <__swsetup_r+0x7a>
 8006a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a8a:	b141      	cbz	r1, 8006a9e <__swsetup_r+0x6a>
 8006a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a90:	4299      	cmp	r1, r3
 8006a92:	d002      	beq.n	8006a9a <__swsetup_r+0x66>
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff faf3 	bl	8006080 <_free_r>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aa4:	81a3      	strh	r3, [r4, #12]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	f043 0308 	orr.w	r3, r3, #8
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	b94b      	cbnz	r3, 8006ace <__swsetup_r+0x9a>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac4:	d003      	beq.n	8006ace <__swsetup_r+0x9a>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 fa05 	bl	8006ed8 <__smakebuf_r>
 8006ace:	89a0      	ldrh	r0, [r4, #12]
 8006ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad4:	f010 0301 	ands.w	r3, r0, #1
 8006ad8:	d00a      	beq.n	8006af0 <__swsetup_r+0xbc>
 8006ada:	2300      	movs	r3, #0
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	6963      	ldr	r3, [r4, #20]
 8006ae0:	425b      	negs	r3, r3
 8006ae2:	61a3      	str	r3, [r4, #24]
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	b943      	cbnz	r3, 8006afa <__swsetup_r+0xc6>
 8006ae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aec:	d1ba      	bne.n	8006a64 <__swsetup_r+0x30>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	0781      	lsls	r1, r0, #30
 8006af2:	bf58      	it	pl
 8006af4:	6963      	ldrpl	r3, [r4, #20]
 8006af6:	60a3      	str	r3, [r4, #8]
 8006af8:	e7f4      	b.n	8006ae4 <__swsetup_r+0xb0>
 8006afa:	2000      	movs	r0, #0
 8006afc:	e7f7      	b.n	8006aee <__swsetup_r+0xba>
 8006afe:	bf00      	nop
 8006b00:	20000098 	.word	0x20000098
 8006b04:	0800e24c 	.word	0x0800e24c
 8006b08:	0800e26c 	.word	0x0800e26c
 8006b0c:	0800e22c 	.word	0x0800e22c

08006b10 <abort>:
 8006b10:	2006      	movs	r0, #6
 8006b12:	b508      	push	{r3, lr}
 8006b14:	f000 fc14 	bl	8007340 <raise>
 8006b18:	2001      	movs	r0, #1
 8006b1a:	f7fb ff1f 	bl	800295c <_exit>
	...

08006b20 <__sflush_r>:
 8006b20:	898a      	ldrh	r2, [r1, #12]
 8006b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b24:	4605      	mov	r5, r0
 8006b26:	0710      	lsls	r0, r2, #28
 8006b28:	460c      	mov	r4, r1
 8006b2a:	d457      	bmi.n	8006bdc <__sflush_r+0xbc>
 8006b2c:	684b      	ldr	r3, [r1, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dc04      	bgt.n	8006b3c <__sflush_r+0x1c>
 8006b32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	dc01      	bgt.n	8006b3c <__sflush_r+0x1c>
 8006b38:	2000      	movs	r0, #0
 8006b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d0fa      	beq.n	8006b38 <__sflush_r+0x18>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b48:	682f      	ldr	r7, [r5, #0]
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	d032      	beq.n	8006bb4 <__sflush_r+0x94>
 8006b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	075a      	lsls	r2, r3, #29
 8006b54:	d505      	bpl.n	8006b62 <__sflush_r+0x42>
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	1ac0      	subs	r0, r0, r3
 8006b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b5c:	b10b      	cbz	r3, 8006b62 <__sflush_r+0x42>
 8006b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b60:	1ac0      	subs	r0, r0, r3
 8006b62:	2300      	movs	r3, #0
 8006b64:	4602      	mov	r2, r0
 8006b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b68:	4628      	mov	r0, r5
 8006b6a:	6a21      	ldr	r1, [r4, #32]
 8006b6c:	47b0      	blx	r6
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	d106      	bne.n	8006b82 <__sflush_r+0x62>
 8006b74:	6829      	ldr	r1, [r5, #0]
 8006b76:	291d      	cmp	r1, #29
 8006b78:	d82c      	bhi.n	8006bd4 <__sflush_r+0xb4>
 8006b7a:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <__sflush_r+0x100>)
 8006b7c:	40ca      	lsrs	r2, r1
 8006b7e:	07d6      	lsls	r6, r2, #31
 8006b80:	d528      	bpl.n	8006bd4 <__sflush_r+0xb4>
 8006b82:	2200      	movs	r2, #0
 8006b84:	6062      	str	r2, [r4, #4]
 8006b86:	6922      	ldr	r2, [r4, #16]
 8006b88:	04d9      	lsls	r1, r3, #19
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	d504      	bpl.n	8006b98 <__sflush_r+0x78>
 8006b8e:	1c42      	adds	r2, r0, #1
 8006b90:	d101      	bne.n	8006b96 <__sflush_r+0x76>
 8006b92:	682b      	ldr	r3, [r5, #0]
 8006b94:	b903      	cbnz	r3, 8006b98 <__sflush_r+0x78>
 8006b96:	6560      	str	r0, [r4, #84]	; 0x54
 8006b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b9a:	602f      	str	r7, [r5, #0]
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	d0cb      	beq.n	8006b38 <__sflush_r+0x18>
 8006ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	d002      	beq.n	8006bae <__sflush_r+0x8e>
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f7ff fa69 	bl	8006080 <_free_r>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8006bb2:	e7c2      	b.n	8006b3a <__sflush_r+0x1a>
 8006bb4:	6a21      	ldr	r1, [r4, #32]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b0      	blx	r6
 8006bbc:	1c41      	adds	r1, r0, #1
 8006bbe:	d1c7      	bne.n	8006b50 <__sflush_r+0x30>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0c4      	beq.n	8006b50 <__sflush_r+0x30>
 8006bc6:	2b1d      	cmp	r3, #29
 8006bc8:	d001      	beq.n	8006bce <__sflush_r+0xae>
 8006bca:	2b16      	cmp	r3, #22
 8006bcc:	d101      	bne.n	8006bd2 <__sflush_r+0xb2>
 8006bce:	602f      	str	r7, [r5, #0]
 8006bd0:	e7b2      	b.n	8006b38 <__sflush_r+0x18>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	e7ae      	b.n	8006b3a <__sflush_r+0x1a>
 8006bdc:	690f      	ldr	r7, [r1, #16]
 8006bde:	2f00      	cmp	r7, #0
 8006be0:	d0aa      	beq.n	8006b38 <__sflush_r+0x18>
 8006be2:	0793      	lsls	r3, r2, #30
 8006be4:	bf18      	it	ne
 8006be6:	2300      	movne	r3, #0
 8006be8:	680e      	ldr	r6, [r1, #0]
 8006bea:	bf08      	it	eq
 8006bec:	694b      	ldreq	r3, [r1, #20]
 8006bee:	1bf6      	subs	r6, r6, r7
 8006bf0:	600f      	str	r7, [r1, #0]
 8006bf2:	608b      	str	r3, [r1, #8]
 8006bf4:	2e00      	cmp	r6, #0
 8006bf6:	dd9f      	ble.n	8006b38 <__sflush_r+0x18>
 8006bf8:	4633      	mov	r3, r6
 8006bfa:	463a      	mov	r2, r7
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	6a21      	ldr	r1, [r4, #32]
 8006c00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c04:	47e0      	blx	ip
 8006c06:	2800      	cmp	r0, #0
 8006c08:	dc06      	bgt.n	8006c18 <__sflush_r+0xf8>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	e790      	b.n	8006b3a <__sflush_r+0x1a>
 8006c18:	4407      	add	r7, r0
 8006c1a:	1a36      	subs	r6, r6, r0
 8006c1c:	e7ea      	b.n	8006bf4 <__sflush_r+0xd4>
 8006c1e:	bf00      	nop
 8006c20:	20400001 	.word	0x20400001

08006c24 <_fflush_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	690b      	ldr	r3, [r1, #16]
 8006c28:	4605      	mov	r5, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	b913      	cbnz	r3, 8006c34 <_fflush_r+0x10>
 8006c2e:	2500      	movs	r5, #0
 8006c30:	4628      	mov	r0, r5
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	b118      	cbz	r0, 8006c3e <_fflush_r+0x1a>
 8006c36:	6983      	ldr	r3, [r0, #24]
 8006c38:	b90b      	cbnz	r3, 8006c3e <_fflush_r+0x1a>
 8006c3a:	f000 f887 	bl	8006d4c <__sinit>
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <_fflush_r+0x6c>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	d11b      	bne.n	8006c7c <_fflush_r+0x58>
 8006c44:	686c      	ldr	r4, [r5, #4]
 8006c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0ef      	beq.n	8006c2e <_fflush_r+0xa>
 8006c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c50:	07d0      	lsls	r0, r2, #31
 8006c52:	d404      	bmi.n	8006c5e <_fflush_r+0x3a>
 8006c54:	0599      	lsls	r1, r3, #22
 8006c56:	d402      	bmi.n	8006c5e <_fflush_r+0x3a>
 8006c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c5a:	f000 f915 	bl	8006e88 <__retarget_lock_acquire_recursive>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	4621      	mov	r1, r4
 8006c62:	f7ff ff5d 	bl	8006b20 <__sflush_r>
 8006c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c68:	4605      	mov	r5, r0
 8006c6a:	07da      	lsls	r2, r3, #31
 8006c6c:	d4e0      	bmi.n	8006c30 <_fflush_r+0xc>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	059b      	lsls	r3, r3, #22
 8006c72:	d4dd      	bmi.n	8006c30 <_fflush_r+0xc>
 8006c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c76:	f000 f908 	bl	8006e8a <__retarget_lock_release_recursive>
 8006c7a:	e7d9      	b.n	8006c30 <_fflush_r+0xc>
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <_fflush_r+0x70>)
 8006c7e:	429c      	cmp	r4, r3
 8006c80:	d101      	bne.n	8006c86 <_fflush_r+0x62>
 8006c82:	68ac      	ldr	r4, [r5, #8]
 8006c84:	e7df      	b.n	8006c46 <_fflush_r+0x22>
 8006c86:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <_fflush_r+0x74>)
 8006c88:	429c      	cmp	r4, r3
 8006c8a:	bf08      	it	eq
 8006c8c:	68ec      	ldreq	r4, [r5, #12]
 8006c8e:	e7da      	b.n	8006c46 <_fflush_r+0x22>
 8006c90:	0800e24c 	.word	0x0800e24c
 8006c94:	0800e26c 	.word	0x0800e26c
 8006c98:	0800e22c 	.word	0x0800e22c

08006c9c <std>:
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006caa:	6083      	str	r3, [r0, #8]
 8006cac:	8181      	strh	r1, [r0, #12]
 8006cae:	6643      	str	r3, [r0, #100]	; 0x64
 8006cb0:	81c2      	strh	r2, [r0, #14]
 8006cb2:	6183      	str	r3, [r0, #24]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	305c      	adds	r0, #92	; 0x5c
 8006cba:	f7ff f9d9 	bl	8006070 <memset>
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <std+0x38>)
 8006cc0:	6224      	str	r4, [r4, #32]
 8006cc2:	6263      	str	r3, [r4, #36]	; 0x24
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <std+0x3c>)
 8006cc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <std+0x40>)
 8006cca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ccc:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <std+0x44>)
 8006cce:	6323      	str	r3, [r4, #48]	; 0x30
 8006cd0:	bd10      	pop	{r4, pc}
 8006cd2:	bf00      	nop
 8006cd4:	08007379 	.word	0x08007379
 8006cd8:	0800739b 	.word	0x0800739b
 8006cdc:	080073d3 	.word	0x080073d3
 8006ce0:	080073f7 	.word	0x080073f7

08006ce4 <_cleanup_r>:
 8006ce4:	4901      	ldr	r1, [pc, #4]	; (8006cec <_cleanup_r+0x8>)
 8006ce6:	f000 b8af 	b.w	8006e48 <_fwalk_reent>
 8006cea:	bf00      	nop
 8006cec:	08006c25 	.word	0x08006c25

08006cf0 <__sfmoreglue>:
 8006cf0:	2268      	movs	r2, #104	; 0x68
 8006cf2:	b570      	push	{r4, r5, r6, lr}
 8006cf4:	1e4d      	subs	r5, r1, #1
 8006cf6:	4355      	muls	r5, r2
 8006cf8:	460e      	mov	r6, r1
 8006cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cfe:	f7ff fa27 	bl	8006150 <_malloc_r>
 8006d02:	4604      	mov	r4, r0
 8006d04:	b140      	cbz	r0, 8006d18 <__sfmoreglue+0x28>
 8006d06:	2100      	movs	r1, #0
 8006d08:	e9c0 1600 	strd	r1, r6, [r0]
 8006d0c:	300c      	adds	r0, #12
 8006d0e:	60a0      	str	r0, [r4, #8]
 8006d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d14:	f7ff f9ac 	bl	8006070 <memset>
 8006d18:	4620      	mov	r0, r4
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}

08006d1c <__sfp_lock_acquire>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__sfp_lock_acquire+0x8>)
 8006d1e:	f000 b8b3 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 8006d22:	bf00      	nop
 8006d24:	20000955 	.word	0x20000955

08006d28 <__sfp_lock_release>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__sfp_lock_release+0x8>)
 8006d2a:	f000 b8ae 	b.w	8006e8a <__retarget_lock_release_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20000955 	.word	0x20000955

08006d34 <__sinit_lock_acquire>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__sinit_lock_acquire+0x8>)
 8006d36:	f000 b8a7 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000956 	.word	0x20000956

08006d40 <__sinit_lock_release>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__sinit_lock_release+0x8>)
 8006d42:	f000 b8a2 	b.w	8006e8a <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	20000956 	.word	0x20000956

08006d4c <__sinit>:
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	4604      	mov	r4, r0
 8006d50:	f7ff fff0 	bl	8006d34 <__sinit_lock_acquire>
 8006d54:	69a3      	ldr	r3, [r4, #24]
 8006d56:	b11b      	cbz	r3, 8006d60 <__sinit+0x14>
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f7ff bff0 	b.w	8006d40 <__sinit_lock_release>
 8006d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d64:	6523      	str	r3, [r4, #80]	; 0x50
 8006d66:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <__sinit+0x68>)
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <__sinit+0x6c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	bf08      	it	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	4620      	mov	r0, r4
 8006d76:	bf08      	it	eq
 8006d78:	61a3      	streq	r3, [r4, #24]
 8006d7a:	f000 f81f 	bl	8006dbc <__sfp>
 8006d7e:	6060      	str	r0, [r4, #4]
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 f81b 	bl	8006dbc <__sfp>
 8006d86:	60a0      	str	r0, [r4, #8]
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 f817 	bl	8006dbc <__sfp>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2104      	movs	r1, #4
 8006d92:	60e0      	str	r0, [r4, #12]
 8006d94:	6860      	ldr	r0, [r4, #4]
 8006d96:	f7ff ff81 	bl	8006c9c <std>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	2109      	movs	r1, #9
 8006d9e:	68a0      	ldr	r0, [r4, #8]
 8006da0:	f7ff ff7c 	bl	8006c9c <std>
 8006da4:	2202      	movs	r2, #2
 8006da6:	2112      	movs	r1, #18
 8006da8:	68e0      	ldr	r0, [r4, #12]
 8006daa:	f7ff ff77 	bl	8006c9c <std>
 8006dae:	2301      	movs	r3, #1
 8006db0:	61a3      	str	r3, [r4, #24]
 8006db2:	e7d1      	b.n	8006d58 <__sinit+0xc>
 8006db4:	0800e1f4 	.word	0x0800e1f4
 8006db8:	08006ce5 	.word	0x08006ce5

08006dbc <__sfp>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	f7ff ffac 	bl	8006d1c <__sfp_lock_acquire>
 8006dc4:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <__sfp+0x84>)
 8006dc6:	681e      	ldr	r6, [r3, #0]
 8006dc8:	69b3      	ldr	r3, [r6, #24]
 8006dca:	b913      	cbnz	r3, 8006dd2 <__sfp+0x16>
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f7ff ffbd 	bl	8006d4c <__sinit>
 8006dd2:	3648      	adds	r6, #72	; 0x48
 8006dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	d503      	bpl.n	8006de4 <__sfp+0x28>
 8006ddc:	6833      	ldr	r3, [r6, #0]
 8006dde:	b30b      	cbz	r3, 8006e24 <__sfp+0x68>
 8006de0:	6836      	ldr	r6, [r6, #0]
 8006de2:	e7f7      	b.n	8006dd4 <__sfp+0x18>
 8006de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006de8:	b9d5      	cbnz	r5, 8006e20 <__sfp+0x64>
 8006dea:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <__sfp+0x88>)
 8006dec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006df0:	60e3      	str	r3, [r4, #12]
 8006df2:	6665      	str	r5, [r4, #100]	; 0x64
 8006df4:	f000 f847 	bl	8006e86 <__retarget_lock_init_recursive>
 8006df8:	f7ff ff96 	bl	8006d28 <__sfp_lock_release>
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	4629      	mov	r1, r5
 8006e00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e08:	6025      	str	r5, [r4, #0]
 8006e0a:	61a5      	str	r5, [r4, #24]
 8006e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e10:	f7ff f92e 	bl	8006070 <memset>
 8006e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e20:	3468      	adds	r4, #104	; 0x68
 8006e22:	e7d9      	b.n	8006dd8 <__sfp+0x1c>
 8006e24:	2104      	movs	r1, #4
 8006e26:	4638      	mov	r0, r7
 8006e28:	f7ff ff62 	bl	8006cf0 <__sfmoreglue>
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	6030      	str	r0, [r6, #0]
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d1d5      	bne.n	8006de0 <__sfp+0x24>
 8006e34:	f7ff ff78 	bl	8006d28 <__sfp_lock_release>
 8006e38:	230c      	movs	r3, #12
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	e7ee      	b.n	8006e1c <__sfp+0x60>
 8006e3e:	bf00      	nop
 8006e40:	0800e1f4 	.word	0x0800e1f4
 8006e44:	ffff0001 	.word	0xffff0001

08006e48 <_fwalk_reent>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	4688      	mov	r8, r1
 8006e50:	2700      	movs	r7, #0
 8006e52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e5e:	d505      	bpl.n	8006e6c <_fwalk_reent+0x24>
 8006e60:	6824      	ldr	r4, [r4, #0]
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	d1f7      	bne.n	8006e56 <_fwalk_reent+0xe>
 8006e66:	4638      	mov	r0, r7
 8006e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6c:	89ab      	ldrh	r3, [r5, #12]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d907      	bls.n	8006e82 <_fwalk_reent+0x3a>
 8006e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e76:	3301      	adds	r3, #1
 8006e78:	d003      	beq.n	8006e82 <_fwalk_reent+0x3a>
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	47c0      	blx	r8
 8006e80:	4307      	orrs	r7, r0
 8006e82:	3568      	adds	r5, #104	; 0x68
 8006e84:	e7e9      	b.n	8006e5a <_fwalk_reent+0x12>

08006e86 <__retarget_lock_init_recursive>:
 8006e86:	4770      	bx	lr

08006e88 <__retarget_lock_acquire_recursive>:
 8006e88:	4770      	bx	lr

08006e8a <__retarget_lock_release_recursive>:
 8006e8a:	4770      	bx	lr

08006e8c <__swhatbuf_r>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	460e      	mov	r6, r1
 8006e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e94:	4614      	mov	r4, r2
 8006e96:	2900      	cmp	r1, #0
 8006e98:	461d      	mov	r5, r3
 8006e9a:	b096      	sub	sp, #88	; 0x58
 8006e9c:	da08      	bge.n	8006eb0 <__swhatbuf_r+0x24>
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ea4:	602a      	str	r2, [r5, #0]
 8006ea6:	061a      	lsls	r2, r3, #24
 8006ea8:	d410      	bmi.n	8006ecc <__swhatbuf_r+0x40>
 8006eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eae:	e00e      	b.n	8006ece <__swhatbuf_r+0x42>
 8006eb0:	466a      	mov	r2, sp
 8006eb2:	f000 fac7 	bl	8007444 <_fstat_r>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	dbf1      	blt.n	8006e9e <__swhatbuf_r+0x12>
 8006eba:	9a01      	ldr	r2, [sp, #4]
 8006ebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ec4:	425a      	negs	r2, r3
 8006ec6:	415a      	adcs	r2, r3
 8006ec8:	602a      	str	r2, [r5, #0]
 8006eca:	e7ee      	b.n	8006eaa <__swhatbuf_r+0x1e>
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	2000      	movs	r0, #0
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	b016      	add	sp, #88	; 0x58
 8006ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ed8 <__smakebuf_r>:
 8006ed8:	898b      	ldrh	r3, [r1, #12]
 8006eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006edc:	079d      	lsls	r5, r3, #30
 8006ede:	4606      	mov	r6, r0
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	d507      	bpl.n	8006ef4 <__smakebuf_r+0x1c>
 8006ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	6123      	str	r3, [r4, #16]
 8006eec:	2301      	movs	r3, #1
 8006eee:	6163      	str	r3, [r4, #20]
 8006ef0:	b002      	add	sp, #8
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	466a      	mov	r2, sp
 8006ef6:	ab01      	add	r3, sp, #4
 8006ef8:	f7ff ffc8 	bl	8006e8c <__swhatbuf_r>
 8006efc:	9900      	ldr	r1, [sp, #0]
 8006efe:	4605      	mov	r5, r0
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff f925 	bl	8006150 <_malloc_r>
 8006f06:	b948      	cbnz	r0, 8006f1c <__smakebuf_r+0x44>
 8006f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0c:	059a      	lsls	r2, r3, #22
 8006f0e:	d4ef      	bmi.n	8006ef0 <__smakebuf_r+0x18>
 8006f10:	f023 0303 	bic.w	r3, r3, #3
 8006f14:	f043 0302 	orr.w	r3, r3, #2
 8006f18:	81a3      	strh	r3, [r4, #12]
 8006f1a:	e7e3      	b.n	8006ee4 <__smakebuf_r+0xc>
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <__smakebuf_r+0x7c>)
 8006f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	6020      	str	r0, [r4, #0]
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	9b00      	ldr	r3, [sp, #0]
 8006f2c:	6120      	str	r0, [r4, #16]
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	9b01      	ldr	r3, [sp, #4]
 8006f32:	b15b      	cbz	r3, 8006f4c <__smakebuf_r+0x74>
 8006f34:	4630      	mov	r0, r6
 8006f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3a:	f000 fa95 	bl	8007468 <_isatty_r>
 8006f3e:	b128      	cbz	r0, 8006f4c <__smakebuf_r+0x74>
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f023 0303 	bic.w	r3, r3, #3
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	89a0      	ldrh	r0, [r4, #12]
 8006f4e:	4305      	orrs	r5, r0
 8006f50:	81a5      	strh	r5, [r4, #12]
 8006f52:	e7cd      	b.n	8006ef0 <__smakebuf_r+0x18>
 8006f54:	08006ce5 	.word	0x08006ce5

08006f58 <memchr>:
 8006f58:	4603      	mov	r3, r0
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	b2c9      	uxtb	r1, r1
 8006f5e:	4402      	add	r2, r0
 8006f60:	4293      	cmp	r3, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	d101      	bne.n	8006f6a <memchr+0x12>
 8006f66:	2000      	movs	r0, #0
 8006f68:	e003      	b.n	8006f72 <memchr+0x1a>
 8006f6a:	7804      	ldrb	r4, [r0, #0]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	428c      	cmp	r4, r1
 8006f70:	d1f6      	bne.n	8006f60 <memchr+0x8>
 8006f72:	bd10      	pop	{r4, pc}

08006f74 <memcpy>:
 8006f74:	440a      	add	r2, r1
 8006f76:	4291      	cmp	r1, r2
 8006f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f7c:	d100      	bne.n	8006f80 <memcpy+0xc>
 8006f7e:	4770      	bx	lr
 8006f80:	b510      	push	{r4, lr}
 8006f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f8c:	d1f9      	bne.n	8006f82 <memcpy+0xe>
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <memmove>:
 8006f90:	4288      	cmp	r0, r1
 8006f92:	b510      	push	{r4, lr}
 8006f94:	eb01 0402 	add.w	r4, r1, r2
 8006f98:	d902      	bls.n	8006fa0 <memmove+0x10>
 8006f9a:	4284      	cmp	r4, r0
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	d807      	bhi.n	8006fb0 <memmove+0x20>
 8006fa0:	1e43      	subs	r3, r0, #1
 8006fa2:	42a1      	cmp	r1, r4
 8006fa4:	d008      	beq.n	8006fb8 <memmove+0x28>
 8006fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fae:	e7f8      	b.n	8006fa2 <memmove+0x12>
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	4402      	add	r2, r0
 8006fb4:	428a      	cmp	r2, r1
 8006fb6:	d100      	bne.n	8006fba <memmove+0x2a>
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fc2:	e7f7      	b.n	8006fb4 <memmove+0x24>

08006fc4 <__malloc_lock>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__malloc_lock+0x8>)
 8006fc6:	f7ff bf5f 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 8006fca:	bf00      	nop
 8006fcc:	20000954 	.word	0x20000954

08006fd0 <__malloc_unlock>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__malloc_unlock+0x8>)
 8006fd2:	f7ff bf5a 	b.w	8006e8a <__retarget_lock_release_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	20000954 	.word	0x20000954

08006fdc <_realloc_r>:
 8006fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	b921      	cbnz	r1, 8006ff2 <_realloc_r+0x16>
 8006fe8:	4611      	mov	r1, r2
 8006fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fee:	f7ff b8af 	b.w	8006150 <_malloc_r>
 8006ff2:	b92a      	cbnz	r2, 8007000 <_realloc_r+0x24>
 8006ff4:	f7ff f844 	bl	8006080 <_free_r>
 8006ff8:	4625      	mov	r5, r4
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007000:	f000 fa54 	bl	80074ac <_malloc_usable_size_r>
 8007004:	4284      	cmp	r4, r0
 8007006:	4607      	mov	r7, r0
 8007008:	d802      	bhi.n	8007010 <_realloc_r+0x34>
 800700a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800700e:	d812      	bhi.n	8007036 <_realloc_r+0x5a>
 8007010:	4621      	mov	r1, r4
 8007012:	4640      	mov	r0, r8
 8007014:	f7ff f89c 	bl	8006150 <_malloc_r>
 8007018:	4605      	mov	r5, r0
 800701a:	2800      	cmp	r0, #0
 800701c:	d0ed      	beq.n	8006ffa <_realloc_r+0x1e>
 800701e:	42bc      	cmp	r4, r7
 8007020:	4622      	mov	r2, r4
 8007022:	4631      	mov	r1, r6
 8007024:	bf28      	it	cs
 8007026:	463a      	movcs	r2, r7
 8007028:	f7ff ffa4 	bl	8006f74 <memcpy>
 800702c:	4631      	mov	r1, r6
 800702e:	4640      	mov	r0, r8
 8007030:	f7ff f826 	bl	8006080 <_free_r>
 8007034:	e7e1      	b.n	8006ffa <_realloc_r+0x1e>
 8007036:	4635      	mov	r5, r6
 8007038:	e7df      	b.n	8006ffa <_realloc_r+0x1e>

0800703a <__ssputs_r>:
 800703a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800703e:	688e      	ldr	r6, [r1, #8]
 8007040:	4682      	mov	sl, r0
 8007042:	429e      	cmp	r6, r3
 8007044:	460c      	mov	r4, r1
 8007046:	4690      	mov	r8, r2
 8007048:	461f      	mov	r7, r3
 800704a:	d838      	bhi.n	80070be <__ssputs_r+0x84>
 800704c:	898a      	ldrh	r2, [r1, #12]
 800704e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007052:	d032      	beq.n	80070ba <__ssputs_r+0x80>
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	6909      	ldr	r1, [r1, #16]
 8007058:	3301      	adds	r3, #1
 800705a:	eba5 0901 	sub.w	r9, r5, r1
 800705e:	6965      	ldr	r5, [r4, #20]
 8007060:	444b      	add	r3, r9
 8007062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007066:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800706a:	106d      	asrs	r5, r5, #1
 800706c:	429d      	cmp	r5, r3
 800706e:	bf38      	it	cc
 8007070:	461d      	movcc	r5, r3
 8007072:	0553      	lsls	r3, r2, #21
 8007074:	d531      	bpl.n	80070da <__ssputs_r+0xa0>
 8007076:	4629      	mov	r1, r5
 8007078:	f7ff f86a 	bl	8006150 <_malloc_r>
 800707c:	4606      	mov	r6, r0
 800707e:	b950      	cbnz	r0, 8007096 <__ssputs_r+0x5c>
 8007080:	230c      	movs	r3, #12
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	f8ca 3000 	str.w	r3, [sl]
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007096:	464a      	mov	r2, r9
 8007098:	6921      	ldr	r1, [r4, #16]
 800709a:	f7ff ff6b 	bl	8006f74 <memcpy>
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	6126      	str	r6, [r4, #16]
 80070ac:	444e      	add	r6, r9
 80070ae:	6026      	str	r6, [r4, #0]
 80070b0:	463e      	mov	r6, r7
 80070b2:	6165      	str	r5, [r4, #20]
 80070b4:	eba5 0509 	sub.w	r5, r5, r9
 80070b8:	60a5      	str	r5, [r4, #8]
 80070ba:	42be      	cmp	r6, r7
 80070bc:	d900      	bls.n	80070c0 <__ssputs_r+0x86>
 80070be:	463e      	mov	r6, r7
 80070c0:	4632      	mov	r2, r6
 80070c2:	4641      	mov	r1, r8
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	f7ff ff63 	bl	8006f90 <memmove>
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	2000      	movs	r0, #0
 80070ce:	1b9b      	subs	r3, r3, r6
 80070d0:	60a3      	str	r3, [r4, #8]
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	4433      	add	r3, r6
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	e7db      	b.n	8007092 <__ssputs_r+0x58>
 80070da:	462a      	mov	r2, r5
 80070dc:	f7ff ff7e 	bl	8006fdc <_realloc_r>
 80070e0:	4606      	mov	r6, r0
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d1e1      	bne.n	80070aa <__ssputs_r+0x70>
 80070e6:	4650      	mov	r0, sl
 80070e8:	6921      	ldr	r1, [r4, #16]
 80070ea:	f7fe ffc9 	bl	8006080 <_free_r>
 80070ee:	e7c7      	b.n	8007080 <__ssputs_r+0x46>

080070f0 <_svfiprintf_r>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	4698      	mov	r8, r3
 80070f6:	898b      	ldrh	r3, [r1, #12]
 80070f8:	4607      	mov	r7, r0
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	460d      	mov	r5, r1
 80070fe:	4614      	mov	r4, r2
 8007100:	b09d      	sub	sp, #116	; 0x74
 8007102:	d50e      	bpl.n	8007122 <_svfiprintf_r+0x32>
 8007104:	690b      	ldr	r3, [r1, #16]
 8007106:	b963      	cbnz	r3, 8007122 <_svfiprintf_r+0x32>
 8007108:	2140      	movs	r1, #64	; 0x40
 800710a:	f7ff f821 	bl	8006150 <_malloc_r>
 800710e:	6028      	str	r0, [r5, #0]
 8007110:	6128      	str	r0, [r5, #16]
 8007112:	b920      	cbnz	r0, 800711e <_svfiprintf_r+0x2e>
 8007114:	230c      	movs	r3, #12
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	e0d1      	b.n	80072c2 <_svfiprintf_r+0x1d2>
 800711e:	2340      	movs	r3, #64	; 0x40
 8007120:	616b      	str	r3, [r5, #20]
 8007122:	2300      	movs	r3, #0
 8007124:	9309      	str	r3, [sp, #36]	; 0x24
 8007126:	2320      	movs	r3, #32
 8007128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800712c:	2330      	movs	r3, #48	; 0x30
 800712e:	f04f 0901 	mov.w	r9, #1
 8007132:	f8cd 800c 	str.w	r8, [sp, #12]
 8007136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072dc <_svfiprintf_r+0x1ec>
 800713a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800713e:	4623      	mov	r3, r4
 8007140:	469a      	mov	sl, r3
 8007142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007146:	b10a      	cbz	r2, 800714c <_svfiprintf_r+0x5c>
 8007148:	2a25      	cmp	r2, #37	; 0x25
 800714a:	d1f9      	bne.n	8007140 <_svfiprintf_r+0x50>
 800714c:	ebba 0b04 	subs.w	fp, sl, r4
 8007150:	d00b      	beq.n	800716a <_svfiprintf_r+0x7a>
 8007152:	465b      	mov	r3, fp
 8007154:	4622      	mov	r2, r4
 8007156:	4629      	mov	r1, r5
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff ff6e 	bl	800703a <__ssputs_r>
 800715e:	3001      	adds	r0, #1
 8007160:	f000 80aa 	beq.w	80072b8 <_svfiprintf_r+0x1c8>
 8007164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007166:	445a      	add	r2, fp
 8007168:	9209      	str	r2, [sp, #36]	; 0x24
 800716a:	f89a 3000 	ldrb.w	r3, [sl]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80a2 	beq.w	80072b8 <_svfiprintf_r+0x1c8>
 8007174:	2300      	movs	r3, #0
 8007176:	f04f 32ff 	mov.w	r2, #4294967295
 800717a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800717e:	f10a 0a01 	add.w	sl, sl, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	9307      	str	r3, [sp, #28]
 8007186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800718a:	931a      	str	r3, [sp, #104]	; 0x68
 800718c:	4654      	mov	r4, sl
 800718e:	2205      	movs	r2, #5
 8007190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007194:	4851      	ldr	r0, [pc, #324]	; (80072dc <_svfiprintf_r+0x1ec>)
 8007196:	f7ff fedf 	bl	8006f58 <memchr>
 800719a:	9a04      	ldr	r2, [sp, #16]
 800719c:	b9d8      	cbnz	r0, 80071d6 <_svfiprintf_r+0xe6>
 800719e:	06d0      	lsls	r0, r2, #27
 80071a0:	bf44      	itt	mi
 80071a2:	2320      	movmi	r3, #32
 80071a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a8:	0711      	lsls	r1, r2, #28
 80071aa:	bf44      	itt	mi
 80071ac:	232b      	movmi	r3, #43	; 0x2b
 80071ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b2:	f89a 3000 	ldrb.w	r3, [sl]
 80071b6:	2b2a      	cmp	r3, #42	; 0x2a
 80071b8:	d015      	beq.n	80071e6 <_svfiprintf_r+0xf6>
 80071ba:	4654      	mov	r4, sl
 80071bc:	2000      	movs	r0, #0
 80071be:	f04f 0c0a 	mov.w	ip, #10
 80071c2:	9a07      	ldr	r2, [sp, #28]
 80071c4:	4621      	mov	r1, r4
 80071c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ca:	3b30      	subs	r3, #48	; 0x30
 80071cc:	2b09      	cmp	r3, #9
 80071ce:	d94e      	bls.n	800726e <_svfiprintf_r+0x17e>
 80071d0:	b1b0      	cbz	r0, 8007200 <_svfiprintf_r+0x110>
 80071d2:	9207      	str	r2, [sp, #28]
 80071d4:	e014      	b.n	8007200 <_svfiprintf_r+0x110>
 80071d6:	eba0 0308 	sub.w	r3, r0, r8
 80071da:	fa09 f303 	lsl.w	r3, r9, r3
 80071de:	4313      	orrs	r3, r2
 80071e0:	46a2      	mov	sl, r4
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	e7d2      	b.n	800718c <_svfiprintf_r+0x9c>
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	1d19      	adds	r1, r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	9103      	str	r1, [sp, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bfbb      	ittet	lt
 80071f2:	425b      	neglt	r3, r3
 80071f4:	f042 0202 	orrlt.w	r2, r2, #2
 80071f8:	9307      	strge	r3, [sp, #28]
 80071fa:	9307      	strlt	r3, [sp, #28]
 80071fc:	bfb8      	it	lt
 80071fe:	9204      	strlt	r2, [sp, #16]
 8007200:	7823      	ldrb	r3, [r4, #0]
 8007202:	2b2e      	cmp	r3, #46	; 0x2e
 8007204:	d10c      	bne.n	8007220 <_svfiprintf_r+0x130>
 8007206:	7863      	ldrb	r3, [r4, #1]
 8007208:	2b2a      	cmp	r3, #42	; 0x2a
 800720a:	d135      	bne.n	8007278 <_svfiprintf_r+0x188>
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	3402      	adds	r4, #2
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	9203      	str	r2, [sp, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	bfb8      	it	lt
 800721a:	f04f 33ff 	movlt.w	r3, #4294967295
 800721e:	9305      	str	r3, [sp, #20]
 8007220:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80072e0 <_svfiprintf_r+0x1f0>
 8007224:	2203      	movs	r2, #3
 8007226:	4650      	mov	r0, sl
 8007228:	7821      	ldrb	r1, [r4, #0]
 800722a:	f7ff fe95 	bl	8006f58 <memchr>
 800722e:	b140      	cbz	r0, 8007242 <_svfiprintf_r+0x152>
 8007230:	2340      	movs	r3, #64	; 0x40
 8007232:	eba0 000a 	sub.w	r0, r0, sl
 8007236:	fa03 f000 	lsl.w	r0, r3, r0
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	3401      	adds	r4, #1
 800723e:	4303      	orrs	r3, r0
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007246:	2206      	movs	r2, #6
 8007248:	4826      	ldr	r0, [pc, #152]	; (80072e4 <_svfiprintf_r+0x1f4>)
 800724a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724e:	f7ff fe83 	bl	8006f58 <memchr>
 8007252:	2800      	cmp	r0, #0
 8007254:	d038      	beq.n	80072c8 <_svfiprintf_r+0x1d8>
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <_svfiprintf_r+0x1f8>)
 8007258:	bb1b      	cbnz	r3, 80072a2 <_svfiprintf_r+0x1b2>
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	3307      	adds	r3, #7
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	3308      	adds	r3, #8
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	4433      	add	r3, r6
 800726a:	9309      	str	r3, [sp, #36]	; 0x24
 800726c:	e767      	b.n	800713e <_svfiprintf_r+0x4e>
 800726e:	460c      	mov	r4, r1
 8007270:	2001      	movs	r0, #1
 8007272:	fb0c 3202 	mla	r2, ip, r2, r3
 8007276:	e7a5      	b.n	80071c4 <_svfiprintf_r+0xd4>
 8007278:	2300      	movs	r3, #0
 800727a:	f04f 0c0a 	mov.w	ip, #10
 800727e:	4619      	mov	r1, r3
 8007280:	3401      	adds	r4, #1
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	4620      	mov	r0, r4
 8007286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728a:	3a30      	subs	r2, #48	; 0x30
 800728c:	2a09      	cmp	r2, #9
 800728e:	d903      	bls.n	8007298 <_svfiprintf_r+0x1a8>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0c5      	beq.n	8007220 <_svfiprintf_r+0x130>
 8007294:	9105      	str	r1, [sp, #20]
 8007296:	e7c3      	b.n	8007220 <_svfiprintf_r+0x130>
 8007298:	4604      	mov	r4, r0
 800729a:	2301      	movs	r3, #1
 800729c:	fb0c 2101 	mla	r1, ip, r1, r2
 80072a0:	e7f0      	b.n	8007284 <_svfiprintf_r+0x194>
 80072a2:	ab03      	add	r3, sp, #12
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	462a      	mov	r2, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	4b10      	ldr	r3, [pc, #64]	; (80072ec <_svfiprintf_r+0x1fc>)
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	f3af 8000 	nop.w
 80072b2:	1c42      	adds	r2, r0, #1
 80072b4:	4606      	mov	r6, r0
 80072b6:	d1d6      	bne.n	8007266 <_svfiprintf_r+0x176>
 80072b8:	89ab      	ldrh	r3, [r5, #12]
 80072ba:	065b      	lsls	r3, r3, #25
 80072bc:	f53f af2c 	bmi.w	8007118 <_svfiprintf_r+0x28>
 80072c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c2:	b01d      	add	sp, #116	; 0x74
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	ab03      	add	r3, sp, #12
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	462a      	mov	r2, r5
 80072ce:	4638      	mov	r0, r7
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <_svfiprintf_r+0x1fc>)
 80072d2:	a904      	add	r1, sp, #16
 80072d4:	f7ff f978 	bl	80065c8 <_printf_i>
 80072d8:	e7eb      	b.n	80072b2 <_svfiprintf_r+0x1c2>
 80072da:	bf00      	nop
 80072dc:	0800e1f8 	.word	0x0800e1f8
 80072e0:	0800e1fe 	.word	0x0800e1fe
 80072e4:	0800e202 	.word	0x0800e202
 80072e8:	00000000 	.word	0x00000000
 80072ec:	0800703b 	.word	0x0800703b

080072f0 <_raise_r>:
 80072f0:	291f      	cmp	r1, #31
 80072f2:	b538      	push	{r3, r4, r5, lr}
 80072f4:	4604      	mov	r4, r0
 80072f6:	460d      	mov	r5, r1
 80072f8:	d904      	bls.n	8007304 <_raise_r+0x14>
 80072fa:	2316      	movs	r3, #22
 80072fc:	6003      	str	r3, [r0, #0]
 80072fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007306:	b112      	cbz	r2, 800730e <_raise_r+0x1e>
 8007308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800730c:	b94b      	cbnz	r3, 8007322 <_raise_r+0x32>
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f830 	bl	8007374 <_getpid_r>
 8007314:	462a      	mov	r2, r5
 8007316:	4601      	mov	r1, r0
 8007318:	4620      	mov	r0, r4
 800731a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800731e:	f000 b817 	b.w	8007350 <_kill_r>
 8007322:	2b01      	cmp	r3, #1
 8007324:	d00a      	beq.n	800733c <_raise_r+0x4c>
 8007326:	1c59      	adds	r1, r3, #1
 8007328:	d103      	bne.n	8007332 <_raise_r+0x42>
 800732a:	2316      	movs	r3, #22
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	2001      	movs	r0, #1
 8007330:	e7e7      	b.n	8007302 <_raise_r+0x12>
 8007332:	2400      	movs	r4, #0
 8007334:	4628      	mov	r0, r5
 8007336:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800733a:	4798      	blx	r3
 800733c:	2000      	movs	r0, #0
 800733e:	e7e0      	b.n	8007302 <_raise_r+0x12>

08007340 <raise>:
 8007340:	4b02      	ldr	r3, [pc, #8]	; (800734c <raise+0xc>)
 8007342:	4601      	mov	r1, r0
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	f7ff bfd3 	b.w	80072f0 <_raise_r>
 800734a:	bf00      	nop
 800734c:	20000098 	.word	0x20000098

08007350 <_kill_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	2300      	movs	r3, #0
 8007354:	4d06      	ldr	r5, [pc, #24]	; (8007370 <_kill_r+0x20>)
 8007356:	4604      	mov	r4, r0
 8007358:	4608      	mov	r0, r1
 800735a:	4611      	mov	r1, r2
 800735c:	602b      	str	r3, [r5, #0]
 800735e:	f7fb faed 	bl	800293c <_kill>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d102      	bne.n	800736c <_kill_r+0x1c>
 8007366:	682b      	ldr	r3, [r5, #0]
 8007368:	b103      	cbz	r3, 800736c <_kill_r+0x1c>
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	bd38      	pop	{r3, r4, r5, pc}
 800736e:	bf00      	nop
 8007370:	20000958 	.word	0x20000958

08007374 <_getpid_r>:
 8007374:	f7fb badb 	b.w	800292e <_getpid>

08007378 <__sread>:
 8007378:	b510      	push	{r4, lr}
 800737a:	460c      	mov	r4, r1
 800737c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007380:	f000 f89c 	bl	80074bc <_read_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	bfab      	itete	ge
 8007388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800738a:	89a3      	ldrhlt	r3, [r4, #12]
 800738c:	181b      	addge	r3, r3, r0
 800738e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007392:	bfac      	ite	ge
 8007394:	6563      	strge	r3, [r4, #84]	; 0x54
 8007396:	81a3      	strhlt	r3, [r4, #12]
 8007398:	bd10      	pop	{r4, pc}

0800739a <__swrite>:
 800739a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739e:	461f      	mov	r7, r3
 80073a0:	898b      	ldrh	r3, [r1, #12]
 80073a2:	4605      	mov	r5, r0
 80073a4:	05db      	lsls	r3, r3, #23
 80073a6:	460c      	mov	r4, r1
 80073a8:	4616      	mov	r6, r2
 80073aa:	d505      	bpl.n	80073b8 <__swrite+0x1e>
 80073ac:	2302      	movs	r3, #2
 80073ae:	2200      	movs	r2, #0
 80073b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b4:	f000 f868 	bl	8007488 <_lseek_r>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	4632      	mov	r2, r6
 80073bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	4628      	mov	r0, r5
 80073c4:	463b      	mov	r3, r7
 80073c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	f000 b817 	b.w	8007400 <_write_r>

080073d2 <__sseek>:
 80073d2:	b510      	push	{r4, lr}
 80073d4:	460c      	mov	r4, r1
 80073d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073da:	f000 f855 	bl	8007488 <_lseek_r>
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	bf15      	itete	ne
 80073e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ee:	81a3      	strheq	r3, [r4, #12]
 80073f0:	bf18      	it	ne
 80073f2:	81a3      	strhne	r3, [r4, #12]
 80073f4:	bd10      	pop	{r4, pc}

080073f6 <__sclose>:
 80073f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fa:	f000 b813 	b.w	8007424 <_close_r>
	...

08007400 <_write_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	2200      	movs	r2, #0
 800740a:	4d05      	ldr	r5, [pc, #20]	; (8007420 <_write_r+0x20>)
 800740c:	602a      	str	r2, [r5, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	f7f9 fe37 	bl	8001082 <_write>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_write_r+0x1e>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_write_r+0x1e>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	20000958 	.word	0x20000958

08007424 <_close_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	2300      	movs	r3, #0
 8007428:	4d05      	ldr	r5, [pc, #20]	; (8007440 <_close_r+0x1c>)
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7fb fabb 	bl	80029aa <_close>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_close_r+0x1a>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_close_r+0x1a>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	20000958 	.word	0x20000958

08007444 <_fstat_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	2300      	movs	r3, #0
 8007448:	4d06      	ldr	r5, [pc, #24]	; (8007464 <_fstat_r+0x20>)
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	4611      	mov	r1, r2
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	f7fb fab5 	bl	80029c0 <_fstat>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d102      	bne.n	8007460 <_fstat_r+0x1c>
 800745a:	682b      	ldr	r3, [r5, #0]
 800745c:	b103      	cbz	r3, 8007460 <_fstat_r+0x1c>
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	bd38      	pop	{r3, r4, r5, pc}
 8007462:	bf00      	nop
 8007464:	20000958 	.word	0x20000958

08007468 <_isatty_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	2300      	movs	r3, #0
 800746c:	4d05      	ldr	r5, [pc, #20]	; (8007484 <_isatty_r+0x1c>)
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fb fab3 	bl	80029de <_isatty>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_isatty_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_isatty_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000958 	.word	0x20000958

08007488 <_lseek_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	2200      	movs	r2, #0
 8007492:	4d05      	ldr	r5, [pc, #20]	; (80074a8 <_lseek_r+0x20>)
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	f7fb faab 	bl	80029f2 <_lseek>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_lseek_r+0x1e>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_lseek_r+0x1e>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20000958 	.word	0x20000958

080074ac <_malloc_usable_size_r>:
 80074ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b0:	1f18      	subs	r0, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bfbc      	itt	lt
 80074b6:	580b      	ldrlt	r3, [r1, r0]
 80074b8:	18c0      	addlt	r0, r0, r3
 80074ba:	4770      	bx	lr

080074bc <_read_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	4d05      	ldr	r5, [pc, #20]	; (80074dc <_read_r+0x20>)
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f7fb fa50 	bl	8002970 <_read>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_read_r+0x1e>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_read_r+0x1e>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20000958 	.word	0x20000958

080074e0 <_init>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	bf00      	nop
 80074e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e6:	bc08      	pop	{r3}
 80074e8:	469e      	mov	lr, r3
 80074ea:	4770      	bx	lr

080074ec <_fini>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	bf00      	nop
 80074f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f2:	bc08      	pop	{r3}
 80074f4:	469e      	mov	lr, r3
 80074f6:	4770      	bx	lr
