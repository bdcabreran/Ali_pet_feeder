
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08003024  08003024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003278  08003278  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003278  08003278  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000090  08003310  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08003310  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010656  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b80  00000000  00000000  0003070f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00033290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  000344f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e2e  00000000  00000000  000355f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bb3  00000000  00000000  0004f41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e06  00000000  00000000  00064fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  000f8e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800300c 	.word	0x0800300c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800300c 	.word	0x0800300c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm_src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm_dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->evt);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->header.payload_len);

    if(evt->header.payload_len)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	78db      	ldrb	r3, [r3, #3]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d007      	beq.n	800017c <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->payload.buff, evt->header.payload_len);
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	1d19      	adds	r1, r3, #4
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	78db      	ldrb	r3, [r3, #3]
 8000174:	461a      	mov	r2, r3
 8000176:	2058      	movs	r0, #88	; 0x58
 8000178:	f000 f8be 	bl	80002f8 <print_buffer>
}
 800017c:	bf00      	nop
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	4613      	mov	r3, r2
 8000190:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4619      	mov	r1, r3
 8000196:	68b8      	ldr	r0, [r7, #8]
 8000198:	f000 f940 	bl	800041c <ring_buffer_init>
 800019c:	4602      	mov	r2, r0
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2200      	movs	r2, #0
 80001a6:	711a      	strb	r2, [r3, #4]
}
 80001a8:	bf00      	nop
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	791b      	ldrb	r3, [r3, #4]
}
 80001bc:	4618      	mov	r0, r3
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
	...

080001c8 <event_queue_read>:

    return write_st;
}

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 80001d6:	6878      	ldr	r0, [r7, #4]
 80001d8:	f7ff ffea 	bl	80001b0 <event_queue_get_pending>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d031      	beq.n	8000246 <event_queue_read+0x7e>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	6839      	ldr	r1, [r7, #0]
 80001e8:	2204      	movs	r2, #4
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f9b0 	bl	8000550 <ring_buffer_read>
 80001f0:	4603      	mov	r3, r0
 80001f2:	73fb      	strb	r3, [r7, #15]
        if (evt->header.payload_len)
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	78db      	ldrb	r3, [r3, #3]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00a      	beq.n	8000212 <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	1d19      	adds	r1, r3, #4
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	461a      	mov	r2, r3
 800020a:	f000 f9a1 	bl	8000550 <ring_buffer_read>
 800020e:	4603      	mov	r3, r0
 8000210:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 8000212:	7bfb      	ldrb	r3, [r7, #15]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d109      	bne.n	800022c <event_queue_read+0x64>
        {
            queue->pending_cnt--;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	791b      	ldrb	r3, [r3, #4]
 800021c:	3b01      	subs	r3, #1
 800021e:	b2da      	uxtb	r2, r3
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 8000224:	6838      	ldr	r0, [r7, #0]
 8000226:	f7ff ff99 	bl	800015c <event_print_info>
 800022a:	e00c      	b.n	8000246 <event_queue_read+0x7e>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <event_queue_read+0x88>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4618      	mov	r0, r3
 8000232:	f001 f86c 	bl	800130e <iprintf>
 8000236:	4807      	ldr	r0, [pc, #28]	; (8000254 <event_queue_read+0x8c>)
 8000238:	f001 f8b8 	bl	80013ac <puts>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <event_queue_read+0x88>)
 800023e:	69db      	ldr	r3, [r3, #28]
 8000240:	4618      	mov	r0, r3
 8000242:	f001 f864 	bl	800130e <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 8000246:	7bfb      	ldrb	r3, [r7, #15]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000000 	.word	0x20000000
 8000254:	08003044 	.word	0x08003044

08000258 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000260:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000264:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d013      	beq.n	8000298 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000270:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000274:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000278:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800027c:	2b00      	cmp	r3, #0
 800027e:	d00b      	beq.n	8000298 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000280:	e000      	b.n	8000284 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000282:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000284:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800028e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000298:	687b      	ldr	r3, [r7, #4]
}
 800029a:	4618      	mov	r0, r3
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	e009      	b.n	80002c8 <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	607a      	str	r2, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ffcb 	bl	8000258 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3301      	adds	r3, #1
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	dbf1      	blt.n	80002b4 <itm_write+0x10>
	}
	return len;
 80002d0:	683b      	ldr	r3, [r7, #0]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	b084      	sub	sp, #16
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 80002e6:	6879      	ldr	r1, [r7, #4]
 80002e8:	68b8      	ldr	r0, [r7, #8]
 80002ea:	f7ff ffdb 	bl	80002a4 <itm_write>
 80002ee:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 8000308:	481a      	ldr	r0, [pc, #104]	; (8000374 <print_buffer+0x7c>)
 800030a:	f001 f84f 	bl	80013ac <puts>
	for (size_t i = 0; i < len; i++)
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	e023      	b.n	800035c <print_buffer+0x64>
	{
		switch (format)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2b43      	cmp	r3, #67	; 0x43
 8000318:	d002      	beq.n	8000320 <print_buffer+0x28>
 800031a:	2b58      	cmp	r3, #88	; 0x58
 800031c:	d009      	beq.n	8000332 <print_buffer+0x3a>
 800031e:	e011      	b.n	8000344 <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	4413      	add	r3, r2
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4619      	mov	r1, r3
 800032a:	4813      	ldr	r0, [pc, #76]	; (8000378 <print_buffer+0x80>)
 800032c:	f000 ffef 	bl	800130e <iprintf>
 8000330:	e011      	b.n	8000356 <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	4413      	add	r3, r2
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	480f      	ldr	r0, [pc, #60]	; (800037c <print_buffer+0x84>)
 800033e:	f000 ffe6 	bl	800130e <iprintf>
 8000342:	e008      	b.n	8000356 <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	480b      	ldr	r0, [pc, #44]	; (800037c <print_buffer+0x84>)
 8000350:	f000 ffdd 	bl	800130e <iprintf>
 8000354:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	429a      	cmp	r2, r3
 8000362:	d3d7      	bcc.n	8000314 <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 8000364:	4806      	ldr	r0, [pc, #24]	; (8000380 <print_buffer+0x88>)
 8000366:	f001 f821 	bl	80013ac <puts>
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	080030c4 	.word	0x080030c4
 8000378:	080030d0 	.word	0x080030d0
 800037c:	080030d8 	.word	0x080030d8
 8000380:	080030e0 	.word	0x080030e0

08000384 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d105      	bne.n	800039e <tail_ptr_retreat+0x1a>
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <tail_ptr_retreat+0x40>)
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <tail_ptr_retreat+0x44>)
 8000396:	2139      	movs	r1, #57	; 0x39
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <tail_ptr_retreat+0x48>)
 800039a:	f002 fce1 	bl	8002d60 <__assert_func>

    rb->full = 0;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2200      	movs	r2, #0
 80003a2:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	3301      	adds	r3, #1
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	68d2      	ldr	r2, [r2, #12]
 80003ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80003b2:	fb01 f202 	mul.w	r2, r1, r2
 80003b6:	1a9a      	subs	r2, r3, r2
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	609a      	str	r2, [r3, #8]
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	080030e4 	.word	0x080030e4
 80003c8:	080031ac 	.word	0x080031ac
 80003cc:	080030e8 	.word	0x080030e8

080003d0 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    assert(rb);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d105      	bne.n	80003ea <is_ring_buffer_empty+0x1a>
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <is_ring_buffer_empty+0x40>)
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <is_ring_buffer_empty+0x44>)
 80003e2:	214e      	movs	r1, #78	; 0x4e
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <is_ring_buffer_empty+0x48>)
 80003e6:	f002 fcbb 	bl	8002d60 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	7c1b      	ldrb	r3, [r3, #16]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d107      	bne.n	8000402 <is_ring_buffer_empty+0x32>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <is_ring_buffer_empty+0x32>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <is_ring_buffer_empty+0x34>
 8000402:	2300      	movs	r3, #0
 8000404:	b2db      	uxtb	r3, r3
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	080030e4 	.word	0x080030e4
 8000414:	080031c0 	.word	0x080031c0
 8000418:	080030e8 	.word	0x080030e8

0800041c <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d002      	beq.n	8000432 <ring_buffer_init+0x16>
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d105      	bne.n	800043e <ring_buffer_init+0x22>
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <ring_buffer_init+0x74>)
 8000434:	4a17      	ldr	r2, [pc, #92]	; (8000494 <ring_buffer_init+0x78>)
 8000436:	2169      	movs	r1, #105	; 0x69
 8000438:	4817      	ldr	r0, [pc, #92]	; (8000498 <ring_buffer_init+0x7c>)
 800043a:	f002 fc91 	bl	8002d60 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 800043e:	2014      	movs	r0, #20
 8000440:	f002 fcd6 	bl	8002df0 <malloc>
 8000444:	4603      	mov	r3, r0
 8000446:	60fb      	str	r3, [r7, #12]
    assert(rb);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d105      	bne.n	800045a <ring_buffer_init+0x3e>
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ring_buffer_init+0x80>)
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <ring_buffer_init+0x78>)
 8000452:	216c      	movs	r1, #108	; 0x6c
 8000454:	4810      	ldr	r0, [pc, #64]	; (8000498 <ring_buffer_init+0x7c>)
 8000456:	f002 fc83 	bl	8002d60 <__assert_func>

    rb->buffer = buffer;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 8000466:	68f8      	ldr	r0, [r7, #12]
 8000468:	f000 f81c 	bl	80004a4 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	f7ff ffaf 	bl	80003d0 <is_ring_buffer_empty>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d105      	bne.n	8000484 <ring_buffer_init+0x68>
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <ring_buffer_init+0x84>)
 800047a:	4a06      	ldr	r2, [pc, #24]	; (8000494 <ring_buffer_init+0x78>)
 800047c:	2172      	movs	r1, #114	; 0x72
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <ring_buffer_init+0x7c>)
 8000480:	f002 fc6e 	bl	8002d60 <__assert_func>

    return rb;
 8000484:	68fb      	ldr	r3, [r7, #12]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	08003114 	.word	0x08003114
 8000494:	080031d8 	.word	0x080031d8
 8000498:	080030e8 	.word	0x080030e8
 800049c:	080030e4 	.word	0x080030e4
 80004a0:	08003124 	.word	0x08003124

080004a4 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    assert(rb);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d105      	bne.n	80004be <ring_buffer_reset+0x1a>
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <ring_buffer_reset+0x34>)
 80004b4:	4a09      	ldr	r2, [pc, #36]	; (80004dc <ring_buffer_reset+0x38>)
 80004b6:	2189      	movs	r1, #137	; 0x89
 80004b8:	4809      	ldr	r0, [pc, #36]	; (80004e0 <ring_buffer_reset+0x3c>)
 80004ba:	f002 fc51 	bl	8002d60 <__assert_func>
    rb->head = 0;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	741a      	strb	r2, [r3, #16]
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	080030e4 	.word	0x080030e4
 80004dc:	080031ec 	.word	0x080031ec
 80004e0:	080030e8 	.word	0x080030e8

080004e4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d006      	beq.n	8000502 <ring_buffer_get+0x1e>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d003      	beq.n	8000502 <ring_buffer_get+0x1e>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d105      	bne.n	800050e <ring_buffer_get+0x2a>
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <ring_buffer_get+0x60>)
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <ring_buffer_get+0x64>)
 8000506:	21da      	movs	r1, #218	; 0xda
 8000508:	4810      	ldr	r0, [pc, #64]	; (800054c <ring_buffer_get+0x68>)
 800050a:	f002 fc29 	bl	8002d60 <__assert_func>

    int r = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ff5c 	bl	80003d0 <is_ring_buffer_empty>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10c      	bne.n	8000538 <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	4413      	add	r3, r2
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ff28 	bl	8000384 <tail_ptr_retreat>

        r = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	b2db      	uxtb	r3, r3
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08003154 	.word	0x08003154
 8000548:	08003200 	.word	0x08003200
 800054c:	080030e8 	.word	0x080030e8

08000550 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d006      	beq.n	8000570 <ring_buffer_read+0x20>
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <ring_buffer_read+0x20>
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d106      	bne.n	800057e <ring_buffer_read+0x2e>
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <ring_buffer_read+0x64>)
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <ring_buffer_read+0x68>)
 8000574:	f240 1115 	movw	r1, #277	; 0x115
 8000578:	4810      	ldr	r0, [pc, #64]	; (80005bc <ring_buffer_read+0x6c>)
 800057a:	f002 fbf1 	bl	8002d60 <__assert_func>

    size_t data_counter = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 8000582:	e00d      	b.n	80005a0 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	617a      	str	r2, [r7, #20]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	4413      	add	r3, r2
 800058e:	4619      	mov	r1, r3
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f7ff ffa7 	bl	80004e4 <ring_buffer_get>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 800059c:	2303      	movs	r3, #3
 800059e:	e004      	b.n	80005aa <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d3ed      	bcc.n	8000584 <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	08003170 	.word	0x08003170
 80005b8:	08003210 	.word	0x08003210
 80005bc:	080030e8 	.word	0x080030e8

080005c0 <time_event_set_pending_update>:
{
    return time_event->raised;
}

void time_event_set_pending_update(bool status)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <time_event_set_pending_update+0x1c>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	7013      	strb	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000ac 	.word	0x200000ac

080005e0 <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
    return pending_time_update;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <time_event_get_pending_update+0x14>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000ac 	.word	0x200000ac

080005f8 <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 80005fc:	f7ff fff0 	bl	80005e0 <time_event_get_pending_update>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <time_events_poll_update+0x14>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ffda 	bl	80005c0 <time_event_set_pending_update>
    }
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <evt_mgmt_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

evt_mgmt_handle_t evt_mgmt_fsm_get(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
    return &evt_mgmt_fsm;
 8000614:	4b02      	ldr	r3, [pc, #8]	; (8000620 <evt_mgmt_fsm_get+0x10>)
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000178 	.word	0x20000178

08000624 <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(evt_mgmt_handle_t handle, evt_mgmt_state_t next_state)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	78fa      	ldrb	r2, [r7, #3]
 8000634:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	705a      	strb	r2, [r3, #1]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <evt_mgmt_fsm_run>:

void evt_mgmt_fsm_run(evt_mgmt_handle_t handle)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d002      	beq.n	800065c <evt_mgmt_fsm_run+0x16>
 8000656:	2b02      	cmp	r3, #2
 8000658:	d004      	beq.n	8000664 <evt_mgmt_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 800065a:	e007      	b.n	800066c <evt_mgmt_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f84d 	bl	80006fc <wait_event_on_react>
 8000662:	e003      	b.n	800066c <evt_mgmt_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f885 	bl	8000774 <notify_event_on_react>
 800066a:	bf00      	nop
    }
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <evt_mgmt_fsm_init>:

void evt_mgmt_fsm_init(evt_mgmt_handle_t handle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3358      	adds	r3, #88	; 0x58
 8000680:	22c8      	movs	r2, #200	; 0xc8
 8000682:	4905      	ldr	r1, [pc, #20]	; (8000698 <evt_mgmt_fsm_init+0x24>)
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fd7d 	bl	8000184 <event_queue_init>
    enter_seq_wait_event(handle);
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f806 	bl	800069c <enter_seq_wait_event>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000b0 	.word	0x200000b0

0800069c <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(evt_mgmt_handle_t handle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    evt_mgmt_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 80006a4:	2101      	movs	r1, #1
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ffbc 	bl	8000624 <fsm_set_next_state>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <exit_action_wait_event>:

static void exit_action_wait_event(evt_mgmt_handle_t handle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3304      	adds	r3, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4610      	mov	r0, r2
 80006ca:	f7ff fd7d 	bl	80001c8 <event_queue_read>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <during_action_wait_event>:

static void during_action_wait_event(evt_mgmt_handle_t handle)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3358      	adds	r3, #88	; 0x58
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fd64 	bl	80001b0 <event_queue_get_pending>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <during_action_wait_event+0x1e>
        handle->event.internal = EVT_UNREAD_EVENT;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	705a      	strb	r2, [r3, #1]
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <wait_event_on_react>:

static void wait_event_on_react(evt_mgmt_handle_t handle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_UNREAD_EVENT)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d106      	bne.n	800071e <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ffcf 	bl	80006b4 <exit_action_wait_event>
        enter_seq_notify_event(handle);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f810 	bl	800073c <enter_seq_notify_event>
 800071c:	e001      	b.n	8000722 <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d002      	beq.n	8000734 <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ffd1 	bl	80006d6 <during_action_wait_event>
    }
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <enter_seq_notify_event>:

static void enter_seq_notify_event(evt_mgmt_handle_t handle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    evt_mgmt_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 8000744:	2102      	movs	r1, #2
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff6c 	bl	8000624 <fsm_set_next_state>
    entry_action_notify_event(handle);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f804 	bl	800075a <entry_action_notify_event>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <entry_action_notify_event>:

static void entry_action_notify_event(evt_mgmt_handle_t handle)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
        temp_ctrl_fsm_write_evt(&temp_fsm, &handle->iface.event);
    break;
    */
    
    default:
        break;
 8000762:	bf00      	nop
    }

    handle->event.internal = EVT_NOTIFICATION_DONE;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2202      	movs	r2, #2
 8000768:	705a      	strb	r2, [r3, #1]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <notify_event_on_react>:

static void notify_event_on_react(evt_mgmt_handle_t handle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_NOTIFICATION_DONE)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	2b02      	cmp	r3, #2
 8000782:	d102      	bne.n	800078a <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff89 	bl	800069c <enter_seq_wait_event>
    }
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fe59 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f81b 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 f947 	bl	8000a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007a6:	f000 f867 	bl	8000878 <MX_ADC1_Init>
  MX_SPI2_Init();
 80007aa:	f000 f8d1 	bl	8000950 <MX_SPI2_Init>
  MX_I2C1_Init();
 80007ae:	f000 f8a1 	bl	80008f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007b2:	f000 f903 	bl	80009bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  evt_mgmt_handle_t evt_mgmt_fsm = evt_mgmt_fsm_get();
 80007b6:	f7ff ff2b 	bl	8000610 <evt_mgmt_fsm_get>
 80007ba:	6078      	str	r0, [r7, #4]
  evt_mgmt_fsm_init(evt_mgmt_fsm);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff59 	bl	8000674 <evt_mgmt_fsm_init>

  printf("Hello world");
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <main+0x40>)
 80007c4:	f000 fda3 	bl	800130e <iprintf>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    evt_mgmt_fsm_run(evt_mgmt_fsm);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff3c 	bl	8000646 <evt_mgmt_fsm_run>
    time_events_poll_update();
 80007ce:	f7ff ff13 	bl	80005f8 <time_events_poll_update>
    evt_mgmt_fsm_run(evt_mgmt_fsm);
 80007d2:	e7f9      	b.n	80007c8 <main+0x34>
 80007d4:	0800318c 	.word	0x0800318c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fb0a 	bl	8002e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fc4f 	bl	80020c0 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000828:	f000 f9ca 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f001 febc 	bl	80025c4 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000852:	f000 f9b5 	bl	8000bc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000856:	2302      	movs	r3, #2
 8000858:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f002 f833 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800086c:	f000 f9a8 	bl	8000bc0 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3750      	adds	r7, #80	; 0x50
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_ADC1_Init+0x74>)
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <MX_ADC1_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC1_Init+0x74>)
 80008a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_ADC1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x74>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC1_Init+0x74>)
 80008b6:	f000 fe2d 	bl	8001514 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f97e 	bl	8000bc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c4:	230a      	movs	r3, #10
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x74>)
 80008d6:	f000 fef5 	bl	80016c4 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008e0:	f000 f96e 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001d8 	.word	0x200001d8
 80008f0:	40012400 	.word	0x40012400

080008f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_I2C1_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x50>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_I2C1_Init+0x58>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_I2C1_Init+0x50>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_I2C1_Init+0x50>)
 8000932:	f001 fa81 	bl	8001e38 <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 f940 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000208 	.word	0x20000208
 8000948:	40005400 	.word	0x40005400
 800094c:	000186a0 	.word	0x000186a0

08000950 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_SPI2_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <MX_SPI2_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI2_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI2_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_SPI2_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI2_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI2_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI2_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI2_Init+0x64>)
 8000984:	2210      	movs	r2, #16
 8000986:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_SPI2_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI2_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_SPI2_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI2_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_SPI2_Init+0x64>)
 80009a2:	f002 f849 	bl	8002a38 <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 f908 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000025c 	.word	0x2000025c
 80009b8:	40003800 	.word	0x40003800

080009bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009cc:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <MX_TIM1_Init+0x74>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80009f6:	2108      	movs	r1, #8
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_TIM1_Init+0x70>)
 80009fa:	f002 f8a1 	bl	8002b40 <HAL_TIM_OnePulse_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8000a04:	f000 f8dc 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM1_Init+0x70>)
 8000a16:	f002 f945 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000a20:	f000 f8ce 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200002b4 	.word	0x200002b4
 8000a30:	40012c00 	.word	0x40012c00

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	4b58      	ldr	r3, [pc, #352]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a57      	ldr	r2, [pc, #348]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b55      	ldr	r3, [pc, #340]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a60:	4b52      	ldr	r3, [pc, #328]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a51      	ldr	r2, [pc, #324]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a66:	f043 0320 	orr.w	r3, r3, #32
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b49      	ldr	r3, [pc, #292]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b46      	ldr	r3, [pc, #280]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a45      	ldr	r2, [pc, #276]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b43      	ldr	r3, [pc, #268]	; (8000bac <MX_GPIO_Init+0x178>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0308 	and.w	r3, r3, #8
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4840      	ldr	r0, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x17c>)
 8000aae:	f001 f9ab 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f640 715f 	movw	r1, #3935	; 0xf5f
 8000ab8:	483e      	ldr	r0, [pc, #248]	; (8000bb4 <MX_GPIO_Init+0x180>)
 8000aba:	f001 f9a5 	bl	8001e08 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ac4:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <MX_GPIO_Init+0x184>)
 8000ac6:	f001 f99f 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8000aca:	2302      	movs	r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4833      	ldr	r0, [pc, #204]	; (8000bb0 <MX_GPIO_Init+0x17c>)
 8000ae2:	f001 f80d 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin UP_Pin DOWN_Pin
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin|UP_Pin|DOWN_Pin
 8000ae6:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8000aea:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	482d      	ldr	r0, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0x17c>)
 8000afc:	f001 f800 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8000b00:	f640 735f 	movw	r3, #3935	; 0xf5f
 8000b04:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <MX_GPIO_Init+0x180>)
 8000b1a:	f000 fff1 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin S4_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin|S4_Pin;
 8000b1e:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4820      	ldr	r0, [pc, #128]	; (8000bb4 <MX_GPIO_Init+0x180>)
 8000b34:	f000 ffe4 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_GPIO_Init+0x188>)
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <MX_GPIO_Init+0x184>)
 8000b4c:	f000 ffd8 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000b50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <MX_GPIO_Init+0x184>)
 8000b6a:	f000 ffc9 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 8000b6e:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_GPIO_Init+0x188>)
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <MX_GPIO_Init+0x17c>)
 8000b84:	f000 ffbc 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 8000b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_GPIO_Init+0x188>)
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_GPIO_Init+0x180>)
 8000b9e:	f000 ffaf 	bl	8001b00 <HAL_GPIO_Init>

}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	10110000 	.word	0x10110000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_MspInit+0x60>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_MspInit+0x60>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000

08000c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_ADC_MspInit+0x6c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d121      	bne.n	8000c94 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 8000c80:	2301      	movs	r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c84:	2303      	movs	r3, #3
 8000c86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_ADC_MspInit+0x74>)
 8000c90:	f000 ff36 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40012400 	.word	0x40012400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40011000 	.word	0x40011000

08000ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <HAL_I2C_MspInit+0x70>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d123      	bne.n	8000d10 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_I2C_MspInit+0x74>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <HAL_I2C_MspInit+0x74>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_I2C_MspInit+0x74>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <HAL_I2C_MspInit+0x78>)
 8000cf4:	f000 ff04 	bl	8001b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_I2C_MspInit+0x74>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_I2C_MspInit+0x74>)
 8000cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d02:	61d3      	str	r3, [r2, #28]
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_I2C_MspInit+0x74>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <HAL_SPI_MspInit+0x8c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d131      	bne.n	8000da8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_SPI_MspInit+0x90>)
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_SPI_MspInit+0x90>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4e:	61d3      	str	r3, [r2, #28]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_SPI_MspInit+0x90>)
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_SPI_MspInit+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <HAL_SPI_MspInit+0x90>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_SPI_MspInit+0x90>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8000d74:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <HAL_SPI_MspInit+0x94>)
 8000d8a:	f000 feb9 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8000d8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_SPI_MspInit+0x94>)
 8000da4:	f000 feac 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40003800 	.word	0x40003800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_TIM_OnePulse_MspInit+0x34>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10b      	bne.n	8000de6 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_TIM_OnePulse_MspInit+0x38>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_TIM_OnePulse_MspInit+0x38>)
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_TIM_OnePulse_MspInit+0x38>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 fb4d 	bl	80014dc <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <_kill>:

int _kill(int pid, int sig)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e5e:	f001 ff9d 	bl	8002d9c <__errno>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2216      	movs	r2, #22
 8000e66:	601a      	str	r2, [r3, #0]
	return -1;
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_exit>:

void _exit (int status)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ffe7 	bl	8000e54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e86:	e7fe      	b.n	8000e86 <_exit+0x12>

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f001 ff70 	bl	8002d9c <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20005000 	.word	0x20005000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	200002fc 	.word	0x200002fc
 8000ef0:	20000318 	.word	0x20000318

08000ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000f10:	e004      	b.n	8000f1c <ts_itoa+0x1c>
		div *= base;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d2f3      	bcs.n	8000f12 <ts_itoa+0x12>

	while (div != 0)
 8000f2a:	e029      	b.n	8000f80 <ts_itoa+0x80>
	{
		int num = d/div;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f3e:	fb01 f202 	mul.w	r2, r1, r2
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	2b09      	cmp	r3, #9
 8000f54:	dd0a      	ble.n	8000f6c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1c58      	adds	r0, r3, #1
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	6008      	str	r0, [r1, #0]
 8000f64:	3237      	adds	r2, #55	; 0x37
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e009      	b.n	8000f80 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	1c58      	adds	r0, r3, #1
 8000f76:	68f9      	ldr	r1, [r7, #12]
 8000f78:	6008      	str	r0, [r1, #0]
 8000f7a:	3230      	adds	r2, #48	; 0x30
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1d2      	bne.n	8000f2c <ts_itoa+0x2c>
	}
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000fa4:	e0bc      	b.n	8001120 <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b25      	cmp	r3, #37	; 0x25
 8000fac:	f040 80b0 	bne.w	8001110 <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b25      	cmp	r3, #37	; 0x25
 8000fbc:	f000 809e 	beq.w	80010fc <ts_formatstring+0x168>
 8000fc0:	2b25      	cmp	r3, #37	; 0x25
 8000fc2:	f2c0 80a1 	blt.w	8001108 <ts_formatstring+0x174>
 8000fc6:	2b78      	cmp	r3, #120	; 0x78
 8000fc8:	f300 809e 	bgt.w	8001108 <ts_formatstring+0x174>
 8000fcc:	2b58      	cmp	r3, #88	; 0x58
 8000fce:	f2c0 809b 	blt.w	8001108 <ts_formatstring+0x174>
 8000fd2:	3b58      	subs	r3, #88	; 0x58
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	f200 8097 	bhi.w	8001108 <ts_formatstring+0x174>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <ts_formatstring+0x4c>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	080010e5 	.word	0x080010e5
 8000fe4:	08001109 	.word	0x08001109
 8000fe8:	08001109 	.word	0x08001109
 8000fec:	08001109 	.word	0x08001109
 8000ff0:	08001109 	.word	0x08001109
 8000ff4:	08001109 	.word	0x08001109
 8000ff8:	08001109 	.word	0x08001109
 8000ffc:	08001109 	.word	0x08001109
 8001000:	08001109 	.word	0x08001109
 8001004:	08001109 	.word	0x08001109
 8001008:	08001109 	.word	0x08001109
 800100c:	08001065 	.word	0x08001065
 8001010:	08001079 	.word	0x08001079
 8001014:	08001109 	.word	0x08001109
 8001018:	08001109 	.word	0x08001109
 800101c:	08001109 	.word	0x08001109
 8001020:	08001109 	.word	0x08001109
 8001024:	08001079 	.word	0x08001079
 8001028:	08001109 	.word	0x08001109
 800102c:	08001109 	.word	0x08001109
 8001030:	08001109 	.word	0x08001109
 8001034:	08001109 	.word	0x08001109
 8001038:	08001109 	.word	0x08001109
 800103c:	08001109 	.word	0x08001109
 8001040:	08001109 	.word	0x08001109
 8001044:	08001109 	.word	0x08001109
 8001048:	08001109 	.word	0x08001109
 800104c:	080010a9 	.word	0x080010a9
 8001050:	08001109 	.word	0x08001109
 8001054:	080010cf 	.word	0x080010cf
 8001058:	08001109 	.word	0x08001109
 800105c:	08001109 	.word	0x08001109
 8001060:	080010e5 	.word	0x080010e5
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1d1a      	adds	r2, r3, #4
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60fa      	str	r2, [r7, #12]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
				break;
 8001076:	e047      	b.n	8001108 <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	1d1a      	adds	r2, r3, #4
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	2b00      	cmp	r3, #0
 8001086:	da07      	bge.n	8001098 <ts_formatstring+0x104>
					{
						val *= -1;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	425b      	negs	r3, r3
 800108c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60fa      	str	r2, [r7, #12]
 8001094:	222d      	movs	r2, #45	; 0x2d
 8001096:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001098:	69f9      	ldr	r1, [r7, #28]
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	220a      	movs	r2, #10
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff2d 	bl	8000f00 <ts_itoa>
				}
				break;
 80010a6:	e02f      	b.n	8001108 <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80010b2:	e007      	b.n	80010c4 <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	1c53      	adds	r3, r2, #1
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1c59      	adds	r1, r3, #1
 80010be:	60f9      	str	r1, [r7, #12]
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f3      	bne.n	80010b4 <ts_formatstring+0x120>
					}
				}
				break;
 80010cc:	e01c      	b.n	8001108 <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	6819      	ldr	r1, [r3, #0]
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	220a      	movs	r2, #10
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff0f 	bl	8000f00 <ts_itoa>
				break;
 80010e2:	e011      	b.n	8001108 <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	1d1a      	adds	r2, r3, #4
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2210      	movs	r2, #16
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff03 	bl	8000f00 <ts_itoa>
				break;
 80010fa:	e005      	b.n	8001108 <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60fa      	str	r2, [r7, #12]
 8001102:	2225      	movs	r2, #37	; 0x25
 8001104:	701a      	strb	r2, [r3, #0]
				  break;
 8001106:	bf00      	nop
			}
			fmt++;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	3301      	adds	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	e007      	b.n	8001120 <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	1c53      	adds	r3, r2, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1c59      	adds	r1, r3, #1
 800111a:	60f9      	str	r1, [r7, #12]
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f af3e 	bne.w	8000fa6 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	1ad3      	subs	r3, r2, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop

08001140 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	int length = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800114e:	e080      	b.n	8001252 <ts_formatlength+0x112>
	{
		if (*fmt == '%')
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b25      	cmp	r3, #37	; 0x25
 8001156:	d176      	bne.n	8001246 <ts_formatlength+0x106>
		{
			++fmt;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	3b58      	subs	r3, #88	; 0x58
 8001164:	2b20      	cmp	r3, #32
 8001166:	d86a      	bhi.n	800123e <ts_formatlength+0xfe>
 8001168:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <ts_formatlength+0x30>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001231 	.word	0x08001231
 8001174:	0800123f 	.word	0x0800123f
 8001178:	0800123f 	.word	0x0800123f
 800117c:	0800123f 	.word	0x0800123f
 8001180:	0800123f 	.word	0x0800123f
 8001184:	0800123f 	.word	0x0800123f
 8001188:	0800123f 	.word	0x0800123f
 800118c:	0800123f 	.word	0x0800123f
 8001190:	0800123f 	.word	0x0800123f
 8001194:	0800123f 	.word	0x0800123f
 8001198:	0800123f 	.word	0x0800123f
 800119c:	080011f5 	.word	0x080011f5
 80011a0:	08001203 	.word	0x08001203
 80011a4:	0800123f 	.word	0x0800123f
 80011a8:	0800123f 	.word	0x0800123f
 80011ac:	0800123f 	.word	0x0800123f
 80011b0:	0800123f 	.word	0x0800123f
 80011b4:	08001203 	.word	0x08001203
 80011b8:	0800123f 	.word	0x0800123f
 80011bc:	0800123f 	.word	0x0800123f
 80011c0:	0800123f 	.word	0x0800123f
 80011c4:	0800123f 	.word	0x0800123f
 80011c8:	0800123f 	.word	0x0800123f
 80011cc:	0800123f 	.word	0x0800123f
 80011d0:	0800123f 	.word	0x0800123f
 80011d4:	0800123f 	.word	0x0800123f
 80011d8:	0800123f 	.word	0x0800123f
 80011dc:	08001211 	.word	0x08001211
 80011e0:	0800123f 	.word	0x0800123f
 80011e4:	08001203 	.word	0x08001203
 80011e8:	0800123f 	.word	0x0800123f
 80011ec:	0800123f 	.word	0x0800123f
 80011f0:	08001231 	.word	0x08001231
			{
			  case 'c':
		  		  va_arg(va, int);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	3304      	adds	r3, #4
 80011f8:	603b      	str	r3, [r7, #0]
				  ++length;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
				  break;
 8001200:	e024      	b.n	800124c <ts_formatlength+0x10c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	330b      	adds	r3, #11
 8001206:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3304      	adds	r3, #4
 800120c:	603b      	str	r3, [r7, #0]
				  break;
 800120e:	e01d      	b.n	800124c <ts_formatlength+0x10c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	1d1a      	adds	r2, r3, #4
 8001214:	603a      	str	r2, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800121a:	e002      	b.n	8001222 <ts_formatlength+0xe2>
			  			  ++length;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	60ba      	str	r2, [r7, #8]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f6      	bne.n	800121c <ts_formatlength+0xdc>
			  	  }
				  break;
 800122e:	e00d      	b.n	800124c <ts_formatlength+0x10c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3304      	adds	r3, #4
 800123a:	603b      	str	r3, [r7, #0]
				  break;
 800123c:	e006      	b.n	800124c <ts_formatlength+0x10c>
			  default:
				  ++length;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
				  break;
 8001244:	e002      	b.n	800124c <ts_formatlength+0x10c>
			}
		}
		else
		{
			++length;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f47f af7a 	bne.w	8001150 <ts_formatlength+0x10>
	}
	return length;
 800125c:	68fb      	ldr	r3, [r7, #12]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 8001268:	b40e      	push	{r1, r2, r3}
 800126a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	int length = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 8001278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800127c:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001282:	f7ff ff5d 	bl	8001140 <ts_formatlength>
 8001286:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 8001288:	466b      	mov	r3, sp
 800128a:	461e      	mov	r6, r3
		char buf[length];
 800128c:	6979      	ldr	r1, [r7, #20]
 800128e:	1e4b      	subs	r3, r1, #1
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	460a      	mov	r2, r1
 8001294:	2300      	movs	r3, #0
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ae:	460a      	mov	r2, r1
 80012b0:	2300      	movs	r3, #0
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	00eb      	lsls	r3, r5, #3
 80012c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012c4:	00e2      	lsls	r2, r4, #3
 80012c6:	460b      	mov	r3, r1
 80012c8:	3307      	adds	r3, #7
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	ebad 0d03 	sub.w	sp, sp, r3
 80012d2:	466b      	mov	r3, sp
 80012d4:	3300      	adds	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 80012d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012dc:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff fe56 	bl	8000f94 <ts_formatstring>
 80012e8:	6178      	str	r0, [r7, #20]
		length = _write(stream->_file, buf, length);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe fff0 	bl	80002da <_write>
 80012fa:	6178      	str	r0, [r7, #20]
 80012fc:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80012fe:	697b      	ldr	r3, [r7, #20]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800130a:	b003      	add	sp, #12
 800130c:	4770      	bx	lr

0800130e <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800130e:	b40f      	push	{r0, r1, r2, r3}
 8001310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
	int length = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800131c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001320:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001326:	f7ff ff0b 	bl	8001140 <ts_formatlength>
 800132a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800132c:	466b      	mov	r3, sp
 800132e:	461e      	mov	r6, r3
		char buf[length];
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	1e4b      	subs	r3, r1, #1
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	460a      	mov	r2, r1
 8001338:	2300      	movs	r3, #0
 800133a:	4690      	mov	r8, r2
 800133c:	4699      	mov	r9, r3
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800134a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800134e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001352:	460a      	mov	r2, r1
 8001354:	2300      	movs	r3, #0
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	00eb      	lsls	r3, r5, #3
 8001364:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001368:	00e2      	lsls	r2, r4, #3
 800136a:	460b      	mov	r3, r1
 800136c:	3307      	adds	r3, #7
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	ebad 0d03 	sub.w	sp, sp, r3
 8001376:	466b      	mov	r3, sp
 8001378:	3300      	adds	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800137c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001380:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fe04 	bl	8000f94 <ts_formatstring>
 800138c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	2001      	movs	r0, #1
 8001394:	f7fe ffa1 	bl	80002da <_write>
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013a8:	b004      	add	sp, #16
 80013aa:	4770      	bx	lr

080013ac <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7fe fec9 	bl	800014c <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7fe ff87 	bl	80002da <_write>
 80013cc:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	490b      	ldr	r1, [pc, #44]	; (8001400 <puts+0x54>)
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7fe ff81 	bl	80002da <_write>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	3301      	adds	r3, #1
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d102      	bne.n	80013f0 <puts+0x44>
	{
		res = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e002      	b.n	80013f6 <puts+0x4a>
	}
	else
	{
		res = EOF;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	617b      	str	r3, [r7, #20]
	}

	return res;
 80013f6:	697b      	ldr	r3, [r7, #20]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	08003198 	.word	0x08003198

08001404 <Reset_Handler>:
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <LoopFillZerobss+0x12>)
 8001406:	490d      	ldr	r1, [pc, #52]	; (800143c <LoopFillZerobss+0x16>)
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <LoopFillZerobss+0x1a>)
 800140a:	2300      	movs	r3, #0
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:
 800140e:	58d4      	ldr	r4, [r2, r3]
 8001410:	50c4      	str	r4, [r0, r3]
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:
 8001414:	18c4      	adds	r4, r0, r3
 8001416:	428c      	cmp	r4, r1
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <LoopFillZerobss+0x1e>)
 800141c:	4c0a      	ldr	r4, [pc, #40]	; (8001448 <LoopFillZerobss+0x22>)
 800141e:	2300      	movs	r3, #0
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:
 8001426:	42a2      	cmp	r2, r4
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>
 800142a:	f7ff fd63 	bl	8000ef4 <SystemInit>
 800142e:	f001 fcbb 	bl	8002da8 <__libc_init_array>
 8001432:	f7ff f9af 	bl	8000794 <main>
 8001436:	4770      	bx	lr
 8001438:	20000000 	.word	0x20000000
 800143c:	20000090 	.word	0x20000090
 8001440:	08003280 	.word	0x08003280
 8001444:	20000090 	.word	0x20000090
 8001448:	20000314 	.word	0x20000314

0800144c <ADC1_2_IRQHandler>:
 800144c:	e7fe      	b.n	800144c <ADC1_2_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_Init+0x28>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_Init+0x28>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 fb19 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	200f      	movs	r0, #15
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff fbae 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40022000 	.word	0x40022000

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fb23 	bl	8001ae6 <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 faf9 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000020 	.word	0x20000020
 80014d4:	20000028 	.word	0x20000028
 80014d8:	20000024 	.word	0x20000024

080014dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_IncTick+0x1c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_IncTick+0x20>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_IncTick+0x20>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000028 	.word	0x20000028
 80014fc:	20000300 	.word	0x20000300

08001500 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <HAL_GetTick+0x10>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000300 	.word	0x20000300

08001514 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0be      	b.n	80016b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fb6c 	bl	8000c30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f9ab 	bl	80018b4 <ADC_ConversionStop_Disable>
 800155e:	4603      	mov	r3, r0
 8001560:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8099 	bne.w	80016a2 <HAL_ADC_Init+0x18e>
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 8095 	bne.w	80016a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001580:	f023 0302 	bic.w	r3, r3, #2
 8001584:	f043 0202 	orr.w	r2, r3, #2
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001594:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b1b      	ldrb	r3, [r3, #12]
 800159a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800159c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ac:	d003      	beq.n	80015b6 <HAL_ADC_Init+0xa2>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <HAL_ADC_Init+0xa8>
 80015b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ba:	e000      	b.n	80015be <HAL_ADC_Init+0xaa>
 80015bc:	2300      	movs	r3, #0
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7d1b      	ldrb	r3, [r3, #20]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d119      	bne.n	8001600 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7b1b      	ldrb	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d109      	bne.n	80015e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	3b01      	subs	r3, #1
 80015da:	035a      	lsls	r2, r3, #13
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	e00b      	b.n	8001600 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f043 0220 	orr.w	r2, r3, #32
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_ADC_Init+0x1a8>)
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	430b      	orrs	r3, r1
 8001626:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001630:	d003      	beq.n	800163a <HAL_ADC_Init+0x126>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d104      	bne.n	8001644 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	3b01      	subs	r3, #1
 8001640:	051b      	lsls	r3, r3, #20
 8001642:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	430a      	orrs	r2, r1
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_ADC_Init+0x1ac>)
 8001660:	4013      	ands	r3, r2
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	429a      	cmp	r2, r3
 8001666:	d10b      	bne.n	8001680 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f023 0303 	bic.w	r3, r3, #3
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800167e:	e018      	b.n	80016b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f023 0312 	bic.w	r3, r3, #18
 8001688:	f043 0210 	orr.w	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016a0:	e007      	b.n	80016b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f043 0210 	orr.w	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	ffe1f7fd 	.word	0xffe1f7fd
 80016c0:	ff1f0efe 	.word	0xff1f0efe

080016c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x20>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e0dc      	b.n	800189e <HAL_ADC_ConfigChannel+0x1da>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d81c      	bhi.n	800172e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b05      	subs	r3, #5
 8001706:	221f      	movs	r2, #31
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b05      	subs	r3, #5
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
 800172c:	e03c      	b.n	80017a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d81c      	bhi.n	8001770 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b23      	subs	r3, #35	; 0x23
 8001748:	221f      	movs	r2, #31
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	4019      	ands	r1, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b23      	subs	r3, #35	; 0x23
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
 800176e:	e01b      	b.n	80017a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	3b41      	subs	r3, #65	; 0x41
 8001782:	221f      	movs	r2, #31
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b41      	subs	r3, #65	; 0x41
 800179c:	fa00 f203 	lsl.w	r2, r0, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b09      	cmp	r3, #9
 80017ae:	d91c      	bls.n	80017ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68d9      	ldr	r1, [r3, #12]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	3b1e      	subs	r3, #30
 80017c2:	2207      	movs	r2, #7
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6898      	ldr	r0, [r3, #8]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	3b1e      	subs	r3, #30
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	e019      	b.n	800181e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6919      	ldr	r1, [r3, #16]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	2207      	movs	r2, #7
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	4019      	ands	r1, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6898      	ldr	r0, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	fa00 f203 	lsl.w	r2, r0, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d003      	beq.n	800182e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800182a:	2b11      	cmp	r3, #17
 800182c:	d132      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d125      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d126      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001854:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d11a      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	0c9a      	lsrs	r2, r3, #18
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001874:	e002      	b.n	800187c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x1b2>
 8001882:	e007      	b.n	8001894 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f043 0220 	orr.w	r2, r3, #32
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40012400 	.word	0x40012400
 80018ac:	20000020 	.word	0x20000020
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d12e      	bne.n	800192c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018de:	f7ff fe0f 	bl	8001500 <HAL_GetTick>
 80018e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e4:	e01b      	b.n	800191e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018e6:	f7ff fe0b 	bl	8001500 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d914      	bls.n	800191e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10d      	bne.n	800191e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e007      	b.n	800192e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d0dc      	beq.n	80018e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <__NVIC_SetPriorityGrouping>:
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_SetPriority>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Config>:
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff90 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff49 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff5e 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffb0 	bl	8001a54 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e169      	b.n	8001de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8158 	bne.w	8001de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a9a      	ldr	r2, [pc, #616]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a98      	ldr	r2, [pc, #608]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a98      	ldr	r2, [pc, #608]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a96      	ldr	r2, [pc, #600]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a96      	ldr	r2, [pc, #600]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a94      	ldr	r2, [pc, #592]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a94      	ldr	r2, [pc, #592]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a92      	ldr	r2, [pc, #584]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a90      	ldr	r2, [pc, #576]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	; 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80b1 	beq.w	8001de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a40      	ldr	r2, [pc, #256]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	; (8001dc4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	; (8001dc8 <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfe:	492f      	ldr	r1, [pc, #188]	; (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	492c      	ldr	r1, [pc, #176]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4928      	ldr	r1, [pc, #160]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4922      	ldr	r1, [pc, #136]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	491e      	ldr	r1, [pc, #120]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4918      	ldr	r1, [pc, #96]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
 8001d9c:	e021      	b.n	8001de2 <HAL_GPIO_Init+0x2e2>
 8001d9e:	bf00      	nop
 8001da0:	10320000 	.word	0x10320000
 8001da4:	10310000 	.word	0x10310000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae8e 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	; 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e12b      	b.n	80020a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe ff22 	bl	8000ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2224      	movs	r2, #36	; 0x24
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f000 fce4 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a81      	ldr	r2, [pc, #516]	; (80020ac <HAL_I2C_Init+0x274>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d807      	bhi.n	8001ebc <HAL_I2C_Init+0x84>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a80      	ldr	r2, [pc, #512]	; (80020b0 <HAL_I2C_Init+0x278>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bf94      	ite	ls
 8001eb4:	2301      	movls	r3, #1
 8001eb6:	2300      	movhi	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e006      	b.n	8001eca <HAL_I2C_Init+0x92>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a7d      	ldr	r2, [pc, #500]	; (80020b4 <HAL_I2C_Init+0x27c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0e7      	b.n	80020a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a78      	ldr	r2, [pc, #480]	; (80020b8 <HAL_I2C_Init+0x280>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a6a      	ldr	r2, [pc, #424]	; (80020ac <HAL_I2C_Init+0x274>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d802      	bhi.n	8001f0c <HAL_I2C_Init+0xd4>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	e009      	b.n	8001f20 <HAL_I2C_Init+0xe8>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_I2C_Init+0x284>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	099b      	lsrs	r3, r3, #6
 8001f1e:	3301      	adds	r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	495c      	ldr	r1, [pc, #368]	; (80020ac <HAL_I2C_Init+0x274>)
 8001f3c:	428b      	cmp	r3, r1
 8001f3e:	d819      	bhi.n	8001f74 <HAL_I2C_Init+0x13c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e59      	subs	r1, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f54:	400b      	ands	r3, r1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_I2C_Init+0x138>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e59      	subs	r1, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6e:	e051      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001f70:	2304      	movs	r3, #4
 8001f72:	e04f      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d111      	bne.n	8001fa0 <HAL_I2C_Init+0x168>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1e58      	subs	r0, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	440b      	add	r3, r1
 8001f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e012      	b.n	8001fc6 <HAL_I2C_Init+0x18e>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e58      	subs	r0, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	0099      	lsls	r1, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Init+0x196>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e022      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_I2C_Init+0x1bc>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1e58      	subs	r0, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	440b      	add	r3, r1
 8001fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff2:	e00f      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	0099      	lsls	r1, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	fbb0 f3f3 	udiv	r3, r0, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	6809      	ldr	r1, [r1, #0]
 8002018:	4313      	orrs	r3, r2
 800201a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6911      	ldr	r1, [r2, #16]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68d2      	ldr	r2, [r2, #12]
 800204e:	4311      	orrs	r1, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	430b      	orrs	r3, r1
 8002056:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	000186a0 	.word	0x000186a0
 80020b0:	001e847f 	.word	0x001e847f
 80020b4:	003d08ff 	.word	0x003d08ff
 80020b8:	431bde83 	.word	0x431bde83
 80020bc:	10624dd3 	.word	0x10624dd3

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e272      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8087 	beq.w	80021ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d00c      	beq.n	8002106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d112      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
 80020f8:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002106:	4b89      	ldr	r3, [pc, #548]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06c      	beq.n	80021ec <HAL_RCC_OscConfig+0x12c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d168      	bne.n	80021ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e24c      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x76>
 8002128:	4b80      	ldr	r3, [pc, #512]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7f      	ldr	r2, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e02e      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x98>
 800213e:	4b7b      	ldr	r3, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7a      	ldr	r2, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b78      	ldr	r3, [pc, #480]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a77      	ldr	r2, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0xbc>
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a71      	ldr	r2, [pc, #452]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 800217c:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a67      	ldr	r2, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff f9b0 	bl	8001500 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff f9ac 	bl	8001500 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e200      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe4>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f99c 	bl	8001500 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff f998 	bl	8001500 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1ec      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x10c>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fa:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1c0      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4939      	ldr	r1, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	e03a      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff f951 	bl	8001500 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff f94d 	bl	8001500 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e1a1      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff f930 	bl	8001500 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7ff f92c 	bl	8001500 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e180      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d03a      	beq.n	8002344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff f910 	bl	8001500 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff f90c 	bl	8001500 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e160      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f000 fac4 	bl	8002890 <RCC_Delay>
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7ff f8f6 	bl	8001500 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002316:	e00f      	b.n	8002338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff f8f2 	bl	8001500 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d908      	bls.n	8002338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e146      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	42420000 	.word	0x42420000
 8002334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e9      	bne.n	8002318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a6 	beq.w	800249e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a87      	ldr	r2, [pc, #540]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b85      	ldr	r3, [pc, #532]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b82      	ldr	r3, [pc, #520]	; (8002588 <HAL_RCC_OscConfig+0x4c8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x4c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a7e      	ldr	r2, [pc, #504]	; (8002588 <HAL_RCC_OscConfig+0x4c8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7ff f8b3 	bl	8001500 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7ff f8af 	bl	8001500 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e103      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b75      	ldr	r3, [pc, #468]	; (8002588 <HAL_RCC_OscConfig+0x4c8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x312>
 80023c4:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e02d      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x334>
 80023da:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a69      	ldr	r2, [pc, #420]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	4b67      	ldr	r3, [pc, #412]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a66      	ldr	r2, [pc, #408]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	e01c      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x356>
 80023fc:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a60      	ldr	r2, [pc, #384]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4b5e      	ldr	r3, [pc, #376]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a5d      	ldr	r2, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 8002416:	4b5b      	ldr	r3, [pc, #364]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a5a      	ldr	r2, [pc, #360]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a57      	ldr	r2, [pc, #348]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff f863 	bl	8001500 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff f85f 	bl	8001500 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0b1      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCC_OscConfig+0x37e>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7ff f84d 	bl	8001500 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff f849 	bl	8001500 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e09b      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	4b40      	ldr	r3, [pc, #256]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8087 	beq.w	80025b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d061      	beq.n	8002578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d146      	bne.n	800254a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCC_OscConfig+0x4cc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff f81d 	bl	8001500 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7ff f819 	bl	8001500 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e06d      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4921      	ldr	r1, [pc, #132]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a19      	ldr	r1, [r3, #32]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	430b      	orrs	r3, r1
 8002516:	491b      	ldr	r1, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x4cc>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe ffed 	bl	8001500 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe ffe9 	bl	8001500 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e03d      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x46a>
 8002548:	e035      	b.n	80025b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_RCC_OscConfig+0x4cc>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe ffd6 	bl	8001500 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe ffd2 	bl	8001500 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e026      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x498>
 8002576:	e01e      	b.n	80025b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e019      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x500>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0d0      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d910      	bls.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b67      	ldr	r3, [pc, #412]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4965      	ldr	r1, [pc, #404]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800262a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d040      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d115      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e073      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4936      	ldr	r1, [pc, #216]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7fe ff24 	bl	8001500 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7fe ff20 	bl	8001500 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e053      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d210      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4922      	ldr	r1, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f821 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1cc>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1d0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fe82 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
 800278c:	08003224 	.word	0x08003224
 8002790:	20000020 	.word	0x20000020
 8002794:	20000024 	.word	0x20000024

08002798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b490      	push	{r4, r7}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_GetSysClockFreq+0xac>)
 80027a0:	1d3c      	adds	r4, r7, #4
 80027a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a8:	f240 2301 	movw	r3, #513	; 0x201
 80027ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x40>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x46>
 80027d6:	e02b      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027da:	623b      	str	r3, [r7, #32]
      break;
 80027dc:	e02b      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	0c9b      	lsrs	r3, r3, #18
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3328      	adds	r3, #40	; 0x28
 80027e8:	443b      	add	r3, r7
 80027ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d012      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0c5b      	lsrs	r3, r3, #17
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	3328      	adds	r3, #40	; 0x28
 8002806:	443b      	add	r3, r7
 8002808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800280c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002812:	fb03 f202 	mul.w	r2, r3, r2
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	e004      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	623b      	str	r3, [r7, #32]
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002832:	623b      	str	r3, [r7, #32]
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6a3b      	ldr	r3, [r7, #32]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc90      	pop	{r4, r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	0800319c 	.word	0x0800319c
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200
 8002850:	003d0900 	.word	0x003d0900

08002854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b02      	ldr	r3, [pc, #8]	; (8002864 <HAL_RCC_GetHCLKFreq+0x10>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	20000020 	.word	0x20000020

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800286c:	f7ff fff2 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK1Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	08003234 	.word	0x08003234

08002890 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <RCC_Delay+0x34>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <RCC_Delay+0x38>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0a5b      	lsrs	r3, r3, #9
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028ac:	bf00      	nop
  }
  while (Delay --);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1e5a      	subs	r2, r3, #1
 80028b2:	60fa      	str	r2, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <RCC_Delay+0x1c>
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000020 	.word	0x20000020
 80028c8:	10624dd3 	.word	0x10624dd3

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d07d      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ec:	4b4f      	ldr	r3, [pc, #316]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10d      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b4c      	ldr	r3, [pc, #304]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	4a4b      	ldr	r2, [pc, #300]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002902:	61d3      	str	r3, [r2, #28]
 8002904:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d118      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002920:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a42      	ldr	r2, [pc, #264]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292c:	f7fe fde8 	bl	8001500 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	e008      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe fde4 	bl	8001500 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e06d      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002952:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d02e      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d027      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002970:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002978:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d014      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fdb3 	bl	8001500 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe fdaf 	bl	8001500 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e036      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ee      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4917      	ldr	r1, [pc, #92]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	490b      	ldr	r1, [pc, #44]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4904      	ldr	r1, [pc, #16]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
 8002a34:	42420440 	.word	0x42420440

08002a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e076      	b.n	8002b38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d108      	bne.n	8002a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5a:	d009      	beq.n	8002a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
 8002a62:	e005      	b.n	8002a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe f94a 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	ea42 0103 	orr.w	r1, r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	0c1a      	lsrs	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f002 0204 	and.w	r2, r2, #4
 8002b16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e041      	b.n	8002bd8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fe f927 	bl	8000dbc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 f82d 	bl	8002be0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0208 	bic.w	r2, r2, #8
 8002b94:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <TIM_Base_SetConfig+0xb8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00b      	beq.n	8002c10 <TIM_Base_SetConfig+0x30>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d007      	beq.n	8002c10 <TIM_Base_SetConfig+0x30>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <TIM_Base_SetConfig+0xbc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_Base_SetConfig+0x30>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <TIM_Base_SetConfig+0xc0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <TIM_Base_SetConfig+0xb8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00b      	beq.n	8002c42 <TIM_Base_SetConfig+0x62>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c30:	d007      	beq.n	8002c42 <TIM_Base_SetConfig+0x62>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <TIM_Base_SetConfig+0xbc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d003      	beq.n	8002c42 <TIM_Base_SetConfig+0x62>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <TIM_Base_SetConfig+0xc0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <TIM_Base_SetConfig+0xb8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e046      	b.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d009      	beq.n	8002d1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10c      	bne.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800

08002d60 <__assert_func>:
 8002d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002d62:	4614      	mov	r4, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <__assert_func+0x2c>)
 8002d68:	4605      	mov	r5, r0
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68d8      	ldr	r0, [r3, #12]
 8002d6e:	b14c      	cbz	r4, 8002d84 <__assert_func+0x24>
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <__assert_func+0x30>)
 8002d72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002d76:	9100      	str	r1, [sp, #0]
 8002d78:	462b      	mov	r3, r5
 8002d7a:	4906      	ldr	r1, [pc, #24]	; (8002d94 <__assert_func+0x34>)
 8002d7c:	f7fe fa74 	bl	8001268 <fiprintf>
 8002d80:	f000 f8ea 	bl	8002f58 <abort>
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__assert_func+0x38>)
 8002d86:	461c      	mov	r4, r3
 8002d88:	e7f3      	b.n	8002d72 <__assert_func+0x12>
 8002d8a:	bf00      	nop
 8002d8c:	2000002c 	.word	0x2000002c
 8002d90:	0800323c 	.word	0x0800323c
 8002d94:	08003249 	.word	0x08003249
 8002d98:	08003277 	.word	0x08003277

08002d9c <__errno>:
 8002d9c:	4b01      	ldr	r3, [pc, #4]	; (8002da4 <__errno+0x8>)
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	2000002c 	.word	0x2000002c

08002da8 <__libc_init_array>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	2600      	movs	r6, #0
 8002dac:	4d0c      	ldr	r5, [pc, #48]	; (8002de0 <__libc_init_array+0x38>)
 8002dae:	4c0d      	ldr	r4, [pc, #52]	; (8002de4 <__libc_init_array+0x3c>)
 8002db0:	1b64      	subs	r4, r4, r5
 8002db2:	10a4      	asrs	r4, r4, #2
 8002db4:	42a6      	cmp	r6, r4
 8002db6:	d109      	bne.n	8002dcc <__libc_init_array+0x24>
 8002db8:	f000 f928 	bl	800300c <_init>
 8002dbc:	2600      	movs	r6, #0
 8002dbe:	4d0a      	ldr	r5, [pc, #40]	; (8002de8 <__libc_init_array+0x40>)
 8002dc0:	4c0a      	ldr	r4, [pc, #40]	; (8002dec <__libc_init_array+0x44>)
 8002dc2:	1b64      	subs	r4, r4, r5
 8002dc4:	10a4      	asrs	r4, r4, #2
 8002dc6:	42a6      	cmp	r6, r4
 8002dc8:	d105      	bne.n	8002dd6 <__libc_init_array+0x2e>
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd0:	4798      	blx	r3
 8002dd2:	3601      	adds	r6, #1
 8002dd4:	e7ee      	b.n	8002db4 <__libc_init_array+0xc>
 8002dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dda:	4798      	blx	r3
 8002ddc:	3601      	adds	r6, #1
 8002dde:	e7f2      	b.n	8002dc6 <__libc_init_array+0x1e>
 8002de0:	08003278 	.word	0x08003278
 8002de4:	08003278 	.word	0x08003278
 8002de8:	08003278 	.word	0x08003278
 8002dec:	0800327c 	.word	0x0800327c

08002df0 <malloc>:
 8002df0:	4b02      	ldr	r3, [pc, #8]	; (8002dfc <malloc+0xc>)
 8002df2:	4601      	mov	r1, r0
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	f000 b82b 	b.w	8002e50 <_malloc_r>
 8002dfa:	bf00      	nop
 8002dfc:	2000002c 	.word	0x2000002c

08002e00 <memset>:
 8002e00:	4603      	mov	r3, r0
 8002e02:	4402      	add	r2, r0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d100      	bne.n	8002e0a <memset+0xa>
 8002e08:	4770      	bx	lr
 8002e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0e:	e7f9      	b.n	8002e04 <memset+0x4>

08002e10 <sbrk_aligned>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	4e0e      	ldr	r6, [pc, #56]	; (8002e4c <sbrk_aligned+0x3c>)
 8002e14:	460c      	mov	r4, r1
 8002e16:	6831      	ldr	r1, [r6, #0]
 8002e18:	4605      	mov	r5, r0
 8002e1a:	b911      	cbnz	r1, 8002e22 <sbrk_aligned+0x12>
 8002e1c:	f000 f88c 	bl	8002f38 <_sbrk_r>
 8002e20:	6030      	str	r0, [r6, #0]
 8002e22:	4621      	mov	r1, r4
 8002e24:	4628      	mov	r0, r5
 8002e26:	f000 f887 	bl	8002f38 <_sbrk_r>
 8002e2a:	1c43      	adds	r3, r0, #1
 8002e2c:	d00a      	beq.n	8002e44 <sbrk_aligned+0x34>
 8002e2e:	1cc4      	adds	r4, r0, #3
 8002e30:	f024 0403 	bic.w	r4, r4, #3
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d007      	beq.n	8002e48 <sbrk_aligned+0x38>
 8002e38:	1a21      	subs	r1, r4, r0
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 f87c 	bl	8002f38 <_sbrk_r>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d101      	bne.n	8002e48 <sbrk_aligned+0x38>
 8002e44:	f04f 34ff 	mov.w	r4, #4294967295
 8002e48:	4620      	mov	r0, r4
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	20000308 	.word	0x20000308

08002e50 <_malloc_r>:
 8002e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e54:	1ccd      	adds	r5, r1, #3
 8002e56:	f025 0503 	bic.w	r5, r5, #3
 8002e5a:	3508      	adds	r5, #8
 8002e5c:	2d0c      	cmp	r5, #12
 8002e5e:	bf38      	it	cc
 8002e60:	250c      	movcc	r5, #12
 8002e62:	2d00      	cmp	r5, #0
 8002e64:	4607      	mov	r7, r0
 8002e66:	db01      	blt.n	8002e6c <_malloc_r+0x1c>
 8002e68:	42a9      	cmp	r1, r5
 8002e6a:	d905      	bls.n	8002e78 <_malloc_r+0x28>
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	2600      	movs	r6, #0
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	4630      	mov	r0, r6
 8002e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e78:	4e2e      	ldr	r6, [pc, #184]	; (8002f34 <_malloc_r+0xe4>)
 8002e7a:	f000 f875 	bl	8002f68 <__malloc_lock>
 8002e7e:	6833      	ldr	r3, [r6, #0]
 8002e80:	461c      	mov	r4, r3
 8002e82:	bb34      	cbnz	r4, 8002ed2 <_malloc_r+0x82>
 8002e84:	4629      	mov	r1, r5
 8002e86:	4638      	mov	r0, r7
 8002e88:	f7ff ffc2 	bl	8002e10 <sbrk_aligned>
 8002e8c:	1c43      	adds	r3, r0, #1
 8002e8e:	4604      	mov	r4, r0
 8002e90:	d14d      	bne.n	8002f2e <_malloc_r+0xde>
 8002e92:	6834      	ldr	r4, [r6, #0]
 8002e94:	4626      	mov	r6, r4
 8002e96:	2e00      	cmp	r6, #0
 8002e98:	d140      	bne.n	8002f1c <_malloc_r+0xcc>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	4631      	mov	r1, r6
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	eb04 0803 	add.w	r8, r4, r3
 8002ea4:	f000 f848 	bl	8002f38 <_sbrk_r>
 8002ea8:	4580      	cmp	r8, r0
 8002eaa:	d13a      	bne.n	8002f22 <_malloc_r+0xd2>
 8002eac:	6821      	ldr	r1, [r4, #0]
 8002eae:	3503      	adds	r5, #3
 8002eb0:	1a6d      	subs	r5, r5, r1
 8002eb2:	f025 0503 	bic.w	r5, r5, #3
 8002eb6:	3508      	adds	r5, #8
 8002eb8:	2d0c      	cmp	r5, #12
 8002eba:	bf38      	it	cc
 8002ebc:	250c      	movcc	r5, #12
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7ff ffa5 	bl	8002e10 <sbrk_aligned>
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d02b      	beq.n	8002f22 <_malloc_r+0xd2>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	442b      	add	r3, r5
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	e00e      	b.n	8002ef0 <_malloc_r+0xa0>
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	1b52      	subs	r2, r2, r5
 8002ed6:	d41e      	bmi.n	8002f16 <_malloc_r+0xc6>
 8002ed8:	2a0b      	cmp	r2, #11
 8002eda:	d916      	bls.n	8002f0a <_malloc_r+0xba>
 8002edc:	1961      	adds	r1, r4, r5
 8002ede:	42a3      	cmp	r3, r4
 8002ee0:	6025      	str	r5, [r4, #0]
 8002ee2:	bf18      	it	ne
 8002ee4:	6059      	strne	r1, [r3, #4]
 8002ee6:	6863      	ldr	r3, [r4, #4]
 8002ee8:	bf08      	it	eq
 8002eea:	6031      	streq	r1, [r6, #0]
 8002eec:	5162      	str	r2, [r4, r5]
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	f104 060b 	add.w	r6, r4, #11
 8002ef6:	f000 f83d 	bl	8002f74 <__malloc_unlock>
 8002efa:	f026 0607 	bic.w	r6, r6, #7
 8002efe:	1d23      	adds	r3, r4, #4
 8002f00:	1af2      	subs	r2, r6, r3
 8002f02:	d0b6      	beq.n	8002e72 <_malloc_r+0x22>
 8002f04:	1b9b      	subs	r3, r3, r6
 8002f06:	50a3      	str	r3, [r4, r2]
 8002f08:	e7b3      	b.n	8002e72 <_malloc_r+0x22>
 8002f0a:	6862      	ldr	r2, [r4, #4]
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	bf0c      	ite	eq
 8002f10:	6032      	streq	r2, [r6, #0]
 8002f12:	605a      	strne	r2, [r3, #4]
 8002f14:	e7ec      	b.n	8002ef0 <_malloc_r+0xa0>
 8002f16:	4623      	mov	r3, r4
 8002f18:	6864      	ldr	r4, [r4, #4]
 8002f1a:	e7b2      	b.n	8002e82 <_malloc_r+0x32>
 8002f1c:	4634      	mov	r4, r6
 8002f1e:	6876      	ldr	r6, [r6, #4]
 8002f20:	e7b9      	b.n	8002e96 <_malloc_r+0x46>
 8002f22:	230c      	movs	r3, #12
 8002f24:	4638      	mov	r0, r7
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	f000 f824 	bl	8002f74 <__malloc_unlock>
 8002f2c:	e7a1      	b.n	8002e72 <_malloc_r+0x22>
 8002f2e:	6025      	str	r5, [r4, #0]
 8002f30:	e7de      	b.n	8002ef0 <_malloc_r+0xa0>
 8002f32:	bf00      	nop
 8002f34:	20000304 	.word	0x20000304

08002f38 <_sbrk_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	4d05      	ldr	r5, [pc, #20]	; (8002f54 <_sbrk_r+0x1c>)
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4608      	mov	r0, r1
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	f7fd ffa0 	bl	8000e88 <_sbrk>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d102      	bne.n	8002f52 <_sbrk_r+0x1a>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	b103      	cbz	r3, 8002f52 <_sbrk_r+0x1a>
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	2000030c 	.word	0x2000030c

08002f58 <abort>:
 8002f58:	2006      	movs	r0, #6
 8002f5a:	b508      	push	{r3, lr}
 8002f5c:	f000 f838 	bl	8002fd0 <raise>
 8002f60:	2001      	movs	r0, #1
 8002f62:	f7fd ff87 	bl	8000e74 <_exit>
	...

08002f68 <__malloc_lock>:
 8002f68:	4801      	ldr	r0, [pc, #4]	; (8002f70 <__malloc_lock+0x8>)
 8002f6a:	f000 b84d 	b.w	8003008 <__retarget_lock_acquire_recursive>
 8002f6e:	bf00      	nop
 8002f70:	20000310 	.word	0x20000310

08002f74 <__malloc_unlock>:
 8002f74:	4801      	ldr	r0, [pc, #4]	; (8002f7c <__malloc_unlock+0x8>)
 8002f76:	f000 b848 	b.w	800300a <__retarget_lock_release_recursive>
 8002f7a:	bf00      	nop
 8002f7c:	20000310 	.word	0x20000310

08002f80 <_raise_r>:
 8002f80:	291f      	cmp	r1, #31
 8002f82:	b538      	push	{r3, r4, r5, lr}
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
 8002f88:	d904      	bls.n	8002f94 <_raise_r+0x14>
 8002f8a:	2316      	movs	r3, #22
 8002f8c:	6003      	str	r3, [r0, #0]
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f96:	b112      	cbz	r2, 8002f9e <_raise_r+0x1e>
 8002f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002f9c:	b94b      	cbnz	r3, 8002fb2 <_raise_r+0x32>
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f830 	bl	8003004 <_getpid_r>
 8002fa4:	462a      	mov	r2, r5
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	4620      	mov	r0, r4
 8002faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fae:	f000 b817 	b.w	8002fe0 <_kill_r>
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d00a      	beq.n	8002fcc <_raise_r+0x4c>
 8002fb6:	1c59      	adds	r1, r3, #1
 8002fb8:	d103      	bne.n	8002fc2 <_raise_r+0x42>
 8002fba:	2316      	movs	r3, #22
 8002fbc:	6003      	str	r3, [r0, #0]
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	e7e7      	b.n	8002f92 <_raise_r+0x12>
 8002fc2:	2400      	movs	r4, #0
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002fca:	4798      	blx	r3
 8002fcc:	2000      	movs	r0, #0
 8002fce:	e7e0      	b.n	8002f92 <_raise_r+0x12>

08002fd0 <raise>:
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <raise+0xc>)
 8002fd2:	4601      	mov	r1, r0
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	f7ff bfd3 	b.w	8002f80 <_raise_r>
 8002fda:	bf00      	nop
 8002fdc:	2000002c 	.word	0x2000002c

08002fe0 <_kill_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	4d06      	ldr	r5, [pc, #24]	; (8003000 <_kill_r+0x20>)
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	f7fd ff31 	bl	8000e54 <_kill>
 8002ff2:	1c43      	adds	r3, r0, #1
 8002ff4:	d102      	bne.n	8002ffc <_kill_r+0x1c>
 8002ff6:	682b      	ldr	r3, [r5, #0]
 8002ff8:	b103      	cbz	r3, 8002ffc <_kill_r+0x1c>
 8002ffa:	6023      	str	r3, [r4, #0]
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
 8002ffe:	bf00      	nop
 8003000:	2000030c 	.word	0x2000030c

08003004 <_getpid_r>:
 8003004:	f7fd bf1f 	b.w	8000e46 <_getpid>

08003008 <__retarget_lock_acquire_recursive>:
 8003008:	4770      	bx	lr

0800300a <__retarget_lock_release_recursive>:
 800300a:	4770      	bx	lr

0800300c <_init>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr

08003018 <_fini>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr
