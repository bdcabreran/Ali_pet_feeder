
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008270  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000075e4  08008380  08008380  00018380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f964  0800f964  00020124  2**0
                  CONTENTS
  4 .ARM          00000000  0800f964  0800f964  00020124  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f964  0800f964  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f964  0800f964  0001f964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f968  0800f968  0001f968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800f96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  20000128  0800fa90  00020128  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  0800fa90  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cb1  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e2  00000000  00000000  00037dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  0003bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c051  00000000  00000000  0003d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001eceb  00000000  00000000  000598f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009740b  00000000  00000000  000785dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010f9e7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001688  00000000  00000000  0010fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007038  00000000  00000000  001110c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000128 	.word	0x20000128
 8000128:	00000000 	.word	0x00000000
 800012c:	08008364 	.word	0x08008364

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000012c 	.word	0x2000012c
 8000148:	08008364 	.word	0x08008364

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2iz>:
 8000988:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000990:	d30f      	bcc.n	80009b2 <__aeabi_f2iz+0x2a>
 8000992:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d90d      	bls.n	80009b8 <__aeabi_f2iz+0x30>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	bf18      	it	ne
 80009ae:	4240      	negne	r0, r0
 80009b0:	4770      	bx	lr
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	4770      	bx	lr
 80009b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009bc:	d101      	bne.n	80009c2 <__aeabi_f2iz+0x3a>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d105      	bne.n	80009ce <__aeabi_f2iz+0x46>
 80009c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009c6:	bf08      	it	eq
 80009c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <btn_debounce_init>:
#include "event_manager_fsm.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <btn_debounce_init+0x84>)
 80009e0:	611a      	str	r2, [r3, #16]
    btn->down.gpio.pin  = DOWN_Pin;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2220      	movs	r2, #32
 80009e6:	829a      	strh	r2, [r3, #20]
    btn->up.gpio.port = UP_GPIO_Port;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <btn_debounce_init+0x84>)
 80009ec:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2210      	movs	r2, #16
 80009f2:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <btn_debounce_init+0x88>)
 80009f8:	621a      	str	r2, [r3, #32]
    btn->left.gpio.pin = LEFT_Pin;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2220      	movs	r2, #32
 80009fe:	849a      	strh	r2, [r3, #36]	; 0x24
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <btn_debounce_init+0x88>)
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
    btn->right.gpio.pin = RIGHT_Pin;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	869a      	strh	r2, [r3, #52]	; 0x34
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <btn_debounce_init+0x8c>)
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40
    btn->enter.gpio.pin = ENTER_Pin;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e00d      	b.n	8000a44 <btn_debounce_init+0x70>
    {
        time_event_stop(&btn_ptr->debounce);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fdaf 	bl	8001590 <time_event_stop>
        btn_ptr->pressed = false;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2200      	movs	r2, #0
 8000a36:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	3301      	adds	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d3ed      	bcc.n	8000a28 <btn_debounce_init+0x54>
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <btn_key_enter_combination>:

static btn_ev_ext_t btn_key_enter_combination(navigation_btn_t *btn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    if (btn->down.pressed)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7f1b      	ldrb	r3, [r3, #28]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d022      	beq.n	8000aba <btn_key_enter_combination+0x56>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f005 f9f9 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d111      	bne.n	8000ab0 <btn_key_enter_combination+0x4c>
        {
            if(time_event_is_active(&btn->enter.debounce))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3348      	adds	r3, #72	; 0x48
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fd8f 	bl	80015b4 <time_event_is_active>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <btn_key_enter_combination+0x42>
                time_event_stop(&btn->enter.debounce);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3348      	adds	r3, #72	; 0x48
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fd75 	bl	8001590 <time_event_stop>

            printf("btn down + enter pressed\r\n");
 8000aa6:	4843      	ldr	r0, [pc, #268]	; (8000bb4 <btn_key_enter_combination+0x150>)
 8000aa8:	f006 fe7c 	bl	80077a4 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000aac:	2307      	movs	r3, #7
 8000aae:	e07c      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn down pressed\r\n");
 8000ab0:	4841      	ldr	r0, [pc, #260]	; (8000bb8 <btn_key_enter_combination+0x154>)
 8000ab2:	f006 fe77 	bl	80077a4 <puts>
            return EVT_EXT_BTN_DOWN_PRESSED;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e077      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->up.pressed)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7b1b      	ldrb	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d022      	beq.n	8000b08 <btn_key_enter_combination+0xa4>
    {
        if (HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000acc:	4619      	mov	r1, r3
 8000ace:	4610      	mov	r0, r2
 8000ad0:	f005 f9d2 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <btn_key_enter_combination+0x9a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3348      	adds	r3, #72	; 0x48
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd68 	bl	80015b4 <time_event_is_active>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d004      	beq.n	8000af4 <btn_key_enter_combination+0x90>
                time_event_stop(&btn->enter.debounce);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3348      	adds	r3, #72	; 0x48
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fd4e 	bl	8001590 <time_event_stop>

            printf("btn up + enter pressed\r\n");
 8000af4:	4831      	ldr	r0, [pc, #196]	; (8000bbc <btn_key_enter_combination+0x158>)
 8000af6:	f006 fe55 	bl	80077a4 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000afa:	2306      	movs	r3, #6
 8000afc:	e055      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn up pressed\r\n");
 8000afe:	4830      	ldr	r0, [pc, #192]	; (8000bc0 <btn_key_enter_combination+0x15c>)
 8000b00:	f006 fe50 	bl	80077a4 <puts>
            return EVT_EXT_BTN_UP_PRESSED;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e050      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->left.pressed)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d022      	beq.n	8000b58 <btn_key_enter_combination+0xf4>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4610      	mov	r0, r2
 8000b20:	f005 f9aa 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <btn_key_enter_combination+0xea>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3348      	adds	r3, #72	; 0x48
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fd40 	bl	80015b4 <time_event_is_active>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <btn_key_enter_combination+0xe0>
                time_event_stop(&btn->enter.debounce);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fd26 	bl	8001590 <time_event_stop>
            
            printf("btn left + enter pressed\r\n");
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <btn_key_enter_combination+0x160>)
 8000b46:	f006 fe2d 	bl	80077a4 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	e02d      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else 
        {
            printf("btn left pressed\r\n");
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <btn_key_enter_combination+0x164>)
 8000b50:	f006 fe28 	bl	80077a4 <puts>
            return EVT_EXT_BTN_LEFT_PRESSED;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e028      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->right.pressed)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d022      	beq.n	8000ba8 <btn_key_enter_combination+0x144>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f005 f982 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d111      	bne.n	8000b9e <btn_key_enter_combination+0x13a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3348      	adds	r3, #72	; 0x48
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fd18 	bl	80015b4 <time_event_is_active>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d004      	beq.n	8000b94 <btn_key_enter_combination+0x130>
                time_event_stop(&btn->enter.debounce);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3348      	adds	r3, #72	; 0x48
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fcfe 	bl	8001590 <time_event_stop>
            
            printf("btn right + enter pressed\r\n");
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <btn_key_enter_combination+0x168>)
 8000b96:	f006 fe05 	bl	80077a4 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	e005      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn right pressed\r\n");
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <btn_key_enter_combination+0x16c>)
 8000ba0:	f006 fe00 	bl	80077a4 <puts>
            return EVT_EXT_BTN_RIGHT_PRESSED;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e000      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    return EVT_EXT_BTN_INVALID;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08008380 	.word	0x08008380
 8000bb8:	0800839c 	.word	0x0800839c
 8000bbc:	080083b0 	.word	0x080083b0
 8000bc0:	080083c8 	.word	0x080083c8
 8000bc4:	080083d8 	.word	0x080083d8
 8000bc8:	080083f4 	.word	0x080083f4
 8000bcc:	08008408 	.word	0x08008408
 8000bd0:	08008424 	.word	0x08008424

08000bd4 <btn_enter_key_combination>:


static btn_ev_ext_t btn_enter_key_combination(navigation_btn_t *btn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    if (btn->enter.pressed)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d078      	beq.n	8000cd8 <btn_enter_key_combination+0x104>
    {
        if (HAL_GPIO_ReadPin(btn->down.gpio.port, btn->down.gpio.pin) == GPIO_PIN_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	8a9b      	ldrh	r3, [r3, #20]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	f005 f941 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <btn_enter_key_combination+0x4c>
        {
            if (time_event_is_active(&btn->down.debounce))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3318      	adds	r3, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fcd7 	bl	80015b4 <time_event_is_active>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d004      	beq.n	8000c16 <btn_enter_key_combination+0x42>
                time_event_stop(&btn->down.debounce);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fcbd 	bl	8001590 <time_event_stop>
            printf("btn enter + down pressed\r\n");
 8000c16:	4833      	ldr	r0, [pc, #204]	; (8000ce4 <btn_enter_key_combination+0x110>)
 8000c18:	f006 fdc4 	bl	80077a4 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	e05c      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->up.gpio.port, btn->up.gpio.pin) == GPIO_PIN_RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f005 f924 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d111      	bne.n	8000c5a <btn_enter_key_combination+0x86>
        {
            if (time_event_is_active(&btn->up.debounce))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcba 	bl	80015b4 <time_event_is_active>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <btn_enter_key_combination+0x7c>
                time_event_stop(&btn->up.debounce);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3308      	adds	r3, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fca0 	bl	8001590 <time_event_stop>
            printf("btn enter + up pressed\r\n");
 8000c50:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <btn_enter_key_combination+0x114>)
 8000c52:	f006 fda7 	bl	80077a4 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000c56:	2306      	movs	r3, #6
 8000c58:	e03f      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->left.gpio.port, btn->left.gpio.pin) == GPIO_PIN_RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f005 f907 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <btn_enter_key_combination+0xc0>
        {
            if (time_event_is_active(&btn->left.debounce))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3328      	adds	r3, #40	; 0x28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fc9d 	bl	80015b4 <time_event_is_active>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d004      	beq.n	8000c8a <btn_enter_key_combination+0xb6>
                time_event_stop(&btn->left.debounce);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3328      	adds	r3, #40	; 0x28
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fc83 	bl	8001590 <time_event_stop>
            printf("btn enter + left pressed\r\n");
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <btn_enter_key_combination+0x118>)
 8000c8c:	f006 fd8a 	bl	80077a4 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000c90:	2308      	movs	r3, #8
 8000c92:	e022      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->right.gpio.port, btn->right.gpio.pin) == GPIO_PIN_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f005 f8ea 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <btn_enter_key_combination+0xfa>
        {
            if (time_event_is_active(&btn->right.debounce))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3338      	adds	r3, #56	; 0x38
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc80 	bl	80015b4 <time_event_is_active>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <btn_enter_key_combination+0xf0>
                time_event_stop(&btn->right.debounce);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3338      	adds	r3, #56	; 0x38
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fc66 	bl	8001590 <time_event_stop>
            printf("btn enter + right pressed\r\n");
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <btn_enter_key_combination+0x11c>)
 8000cc6:	f006 fd6d 	bl	80077a4 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	e005      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
        else
        {
            printf("btn enter pressed\r\n");
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <btn_enter_key_combination+0x120>)
 8000cd0:	f006 fd68 	bl	80077a4 <puts>
            return EVT_EXT_BTN_ENTER_PRESSED;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e000      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
    }
    return EVT_EXT_BTN_INVALID;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08008438 	.word	0x08008438
 8000ce8:	08008454 	.word	0x08008454
 8000cec:	0800846c 	.word	0x0800846c
 8000cf0:	08008488 	.word	0x08008488
 8000cf4:	080084a4 	.word	0x080084a4

08000cf8 <poll_down_key_pressed>:

static void poll_down_key_pressed(navigation_btn_t *btn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    static GPIO_PinState pin_st = GPIO_PIN_SET;
    if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) != pin_st)
 8000d00:	2120      	movs	r1, #32
 8000d02:	4812      	ldr	r0, [pc, #72]	; (8000d4c <poll_down_key_pressed+0x54>)
 8000d04:	f005 f8b8 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <poll_down_key_pressed+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d016      	beq.n	8000d42 <poll_down_key_pressed+0x4a>
    {
        pin_st = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 8000d14:	2120      	movs	r1, #32
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <poll_down_key_pressed+0x54>)
 8000d18:	f005 f8ae 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <poll_down_key_pressed+0x58>)
 8000d22:	701a      	strb	r2, [r3, #0]
        if(!time_event_is_active(&btn->down.debounce))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3318      	adds	r3, #24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fc43 	bl	80015b4 <time_event_is_active>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <poll_down_key_pressed+0x4a>
            time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 8000d3a:	2132      	movs	r1, #50	; 0x32
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <poll_down_key_pressed+0x5c>)
 8000d3e:	f000 fc13 	bl	8001568 <time_event_start>
    }
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	20000020 	.word	0x20000020
 8000d54:	2000015c 	.word	0x2000015c

08000d58 <btn_debounce_run>:

void btn_debounce_run(navigation_btn_t *btn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b092      	sub	sp, #72	; 0x48
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    /*down button cannot be set IT mode, we have to do polling*/
    poll_down_key_pressed(btn);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ffc9 	bl	8000cf8 <poll_down_key_pressed>

    /*update debounce time for all buttons */
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000d66:	2305      	movs	r3, #5
 8000d68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    push_button_t *btn_ptr = &btn->up;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < btn_cnt; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
 8000d74:	e025      	b.n	8000dc2 <btn_debounce_run+0x6a>
    {
        time_event_update(&btn_ptr->debounce);
 8000d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d78:	3308      	adds	r3, #8
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fc25 	bl	80015ca <time_event_update>
        if(time_event_is_raised(&btn_ptr->debounce))
 8000d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d82:	3308      	adds	r3, #8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fc41 	bl	800160c <time_event_is_raised>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d012      	beq.n	8000db6 <btn_debounce_run+0x5e>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 8000d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d96:	889b      	ldrh	r3, [r3, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	f005 f86c 	bl	8005e78 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <btn_debounce_run+0x54>
                btn_ptr->pressed = true;
 8000da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da8:	2201      	movs	r2, #1
 8000daa:	731a      	strb	r2, [r3, #12]
            
            time_event_stop(&btn_ptr->debounce);
 8000dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dae:	3308      	adds	r3, #8
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fbed 	bl	8001590 <time_event_stop>
        }
        btn_ptr++;
 8000db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db8:	3310      	adds	r3, #16
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 8000dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d3d4      	bcc.n	8000d76 <btn_debounce_run+0x1e>
    }

    /*Notify events*/
    event_t event;
    event.info.name = EVT_EXT_BTN_INVALID;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	733b      	strb	r3, [r7, #12]
    event.info.fsm.src = BTN_FSM;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	737b      	strb	r3, [r7, #13]
    event.info.fsm.dst = UI_FSM;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]
    event.info.data_len = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

    event.info.name = btn_key_enter_combination(btn);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fe41 	bl	8000a64 <btn_key_enter_combination>
 8000de2:	4603      	mov	r3, r0
 8000de4:	733b      	strb	r3, [r7, #12]
    if(event.info.name != EVT_EXT_BTN_INVALID)
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <btn_debounce_run+0xa6>
        event_manager_write(event_manager_fsm_get(), &event);
 8000dec:	f000 fc6a 	bl	80016c4 <event_manager_fsm_get>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	4610      	mov	r0, r2
 8000dfa:	f000 fd39 	bl	8001870 <event_manager_write>

    event.info.name = btn_enter_key_combination(btn);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fee8 	bl	8000bd4 <btn_enter_key_combination>
 8000e04:	4603      	mov	r3, r0
 8000e06:	733b      	strb	r3, [r7, #12]
    if(event.info.name != EVT_EXT_BTN_INVALID)
 8000e08:	7b3b      	ldrb	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d008      	beq.n	8000e20 <btn_debounce_run+0xc8>
        event_manager_write(event_manager_fsm_get(), &event);
 8000e0e:	f000 fc59 	bl	80016c4 <event_manager_fsm_get>
 8000e12:	4602      	mov	r2, r0
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	f000 fd28 	bl	8001870 <event_manager_write>

    btn_ptr = &btn->up;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e28:	e008      	b.n	8000e3c <btn_debounce_run+0xe4>
    {
        btn_ptr->pressed = false;
 8000e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e32:	3310      	adds	r3, #16
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 8000e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e38:	3301      	adds	r3, #1
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3f1      	bcc.n	8000e2a <btn_debounce_run+0xd2>
    }
}
 8000e46:	bf00      	nop
 8000e48:	bf00      	nop
 8000e4a:	3748      	adds	r7, #72	; 0x48
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm.src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm.dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->name);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->info.data_len);

    if(evt->info.data_len)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->data.buff, evt->info.data_len);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1d19      	adds	r1, r3, #4
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	78db      	ldrb	r3, [r3, #3]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2058      	movs	r0, #88	; 0x58
 8000e6c:	f000 f91c 	bl	80010a8 <print_buffer>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	68b8      	ldr	r0, [r7, #8]
 8000e8c:	f000 f9de 	bl	800124c <ring_buffer_init>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	711a      	strb	r2, [r3, #4]
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <event_queue_write>:

uint8_t event_queue_write(event_queue_t *queue, event_t *evt)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t write_st = RING_BUFF_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
    evt_queue_dbg("writing event \r\n");
    event_print_info(evt);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffbf 	bl	8000e50 <event_print_info>

    write_st = ring_buffer_write(queue->rb, (uint8_t *)&evt, EVENT_HEADER_SIZE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	2204      	movs	r2, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 facc 	bl	8001478 <ring_buffer_write>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

    if (evt->info.data_len)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00a      	beq.n	8000f02 <event_queue_write+0x46>
        write_st = ring_buffer_write(queue->rb, (uint8_t *)evt->data.buff, evt->info.data_len);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	1d19      	adds	r1, r3, #4
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	78db      	ldrb	r3, [r3, #3]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f000 fabd 	bl	8001478 <ring_buffer_write>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

    if (write_st == RING_BUFF_OK)
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <event_queue_write+0x5a>
        queue->pending_cnt++;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	711a      	strb	r2, [r3, #4]
 8000f14:	e00c      	b.n	8000f30 <event_queue_write+0x74>
    else
        printf_dbg_error("could not write on evt queue\r\n");
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <event_queue_write+0x80>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 fbbc 	bl	8007698 <iprintf>
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <event_queue_write+0x84>)
 8000f22:	f006 fc3f 	bl	80077a4 <puts>
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <event_queue_write+0x80>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f006 fbb4 	bl	8007698 <iprintf>

    return write_st;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000024 	.word	0x20000024
 8000f40:	080084b8 	.word	0x080084b8

08000f44 <event_queue_read>:

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa6 	bl	8000ea4 <event_queue_get_pending>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d032      	beq.n	8000fc4 <event_queue_read+0x80>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt, EVENT_HEADER_SIZE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4639      	mov	r1, r7
 8000f64:	2204      	movs	r2, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fac6 	bl	80014f8 <ring_buffer_read>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
        if (evt->info.data_len)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00a      	beq.n	8000f8e <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->data.buff, evt->info.data_len);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	1d19      	adds	r1, r3, #4
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	461a      	mov	r2, r3
 8000f86:	f000 fab7 	bl	80014f8 <ring_buffer_read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10a      	bne.n	8000faa <event_queue_read+0x66>
        {
            queue->pending_cnt--;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	791b      	ldrb	r3, [r3, #4]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff54 	bl	8000e50 <event_print_info>
 8000fa8:	e00c      	b.n	8000fc4 <event_queue_read+0x80>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <event_queue_read+0x8c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 fb72 	bl	8007698 <iprintf>
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <event_queue_read+0x90>)
 8000fb6:	f006 fbf5 	bl	80077a4 <puts>
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <event_queue_read+0x8c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fb6a 	bl	8007698 <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000024 	.word	0x20000024
 8000fd4:	080084d8 	.word	0x080084d8

08000fd8 <ITM_SendChar>:
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <ITM_SendChar+0x40>
 8000ff0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00b      	beq.n	8001018 <ITM_SendChar+0x40>
 8001000:	e000      	b.n	8001004 <ITM_SendChar+0x2c>
 8001002:	bf00      	nop
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f9      	beq.n	8001002 <ITM_SendChar+0x2a>
 800100e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <itm_enable>:
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <itm_enable+0x2c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <itm_enable+0x2c>)
 800102e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001038:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800103c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	e000edfc 	.word	0xe000edfc

08001054 <itm_write>:
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e009      	b.n	8001078 <itm_write+0x24>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffb3 	bl	8000fd8 <ITM_SendChar>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3301      	adds	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <itm_write+0x10>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_write>:
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f7ff ffdb 	bl	8001054 <itm_write>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <print_buffer>:
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <print_buffer+0x7c>)
 80010ba:	f006 fb73 	bl	80077a4 <puts>
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e023      	b.n	800110c <print_buffer+0x64>
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b43      	cmp	r3, #67	; 0x43
 80010c8:	d002      	beq.n	80010d0 <print_buffer+0x28>
 80010ca:	2b58      	cmp	r3, #88	; 0x58
 80010cc:	d009      	beq.n	80010e2 <print_buffer+0x3a>
 80010ce:	e011      	b.n	80010f4 <print_buffer+0x4c>
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4813      	ldr	r0, [pc, #76]	; (8001128 <print_buffer+0x80>)
 80010dc:	f006 fadc 	bl	8007698 <iprintf>
 80010e0:	e011      	b.n	8001106 <print_buffer+0x5e>
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <print_buffer+0x84>)
 80010ee:	f006 fad3 	bl	8007698 <iprintf>
 80010f2:	e008      	b.n	8001106 <print_buffer+0x5e>
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <print_buffer+0x84>)
 8001100:	f006 faca 	bl	8007698 <iprintf>
 8001104:	bf00      	nop
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3d7      	bcc.n	80010c4 <print_buffer+0x1c>
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <print_buffer+0x88>)
 8001116:	f006 fb45 	bl	80077a4 <puts>
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	08008558 	.word	0x08008558
 8001128:	08008564 	.word	0x08008564
 800112c:	0800856c 	.word	0x0800856c
 8001130:	08008574 	.word	0x08008574

08001134 <head_ptr_advance>:
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <head_ptr_advance+0x1a>
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <head_ptr_advance+0x74>)
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <head_ptr_advance+0x78>)
 8001146:	2126      	movs	r1, #38	; 0x26
 8001148:	4819      	ldr	r0, [pc, #100]	; (80011b0 <head_ptr_advance+0x7c>)
 800114a:	f005 fe71 	bl	8006e30 <__assert_func>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7c1b      	ldrb	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <head_ptr_advance+0x3a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	3301      	adds	r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68d2      	ldr	r2, [r2, #12]
 8001160:	fbb3 f1f2 	udiv	r1, r3, r2
 8001164:	fb01 f202 	mul.w	r2, r1, r2
 8001168:	1a9a      	subs	r2, r3, r2
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68d2      	ldr	r2, [r2, #12]
 8001178:	fbb3 f1f2 	udiv	r1, r3, r2
 800117c:	fb01 f202 	mul.w	r2, r1, r2
 8001180:	1a9a      	subs	r2, r3, r2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	429a      	cmp	r2, r3
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	741a      	strb	r2, [r3, #16]
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08008578 	.word	0x08008578
 80011ac:	0800f750 	.word	0x0800f750
 80011b0:	0800857c 	.word	0x0800857c

080011b4 <tail_ptr_retreat>:
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <tail_ptr_retreat+0x1a>
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <tail_ptr_retreat+0x40>)
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <tail_ptr_retreat+0x44>)
 80011c6:	2139      	movs	r1, #57	; 0x39
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <tail_ptr_retreat+0x48>)
 80011ca:	f005 fe31 	bl	8006e30 <__assert_func>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	741a      	strb	r2, [r3, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68d2      	ldr	r2, [r2, #12]
 80011de:	fbb3 f1f2 	udiv	r1, r3, r2
 80011e2:	fb01 f202 	mul.w	r2, r1, r2
 80011e6:	1a9a      	subs	r2, r3, r2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	08008578 	.word	0x08008578
 80011f8:	0800f764 	.word	0x0800f764
 80011fc:	0800857c 	.word	0x0800857c

08001200 <is_ring_buffer_empty>:
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <is_ring_buffer_empty+0x1a>
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <is_ring_buffer_empty+0x40>)
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <is_ring_buffer_empty+0x44>)
 8001212:	214e      	movs	r1, #78	; 0x4e
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <is_ring_buffer_empty+0x48>)
 8001216:	f005 fe0b 	bl	8006e30 <__assert_func>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7c1b      	ldrb	r3, [r3, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <is_ring_buffer_empty+0x32>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d101      	bne.n	8001232 <is_ring_buffer_empty+0x32>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <is_ring_buffer_empty+0x34>
 8001232:	2300      	movs	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	08008578 	.word	0x08008578
 8001244:	0800f778 	.word	0x0800f778
 8001248:	0800857c 	.word	0x0800857c

0800124c <ring_buffer_init>:
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <ring_buffer_init+0x16>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d105      	bne.n	800126e <ring_buffer_init+0x22>
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <ring_buffer_init+0x74>)
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <ring_buffer_init+0x78>)
 8001266:	2169      	movs	r1, #105	; 0x69
 8001268:	4817      	ldr	r0, [pc, #92]	; (80012c8 <ring_buffer_init+0x7c>)
 800126a:	f005 fde1 	bl	8006e30 <__assert_func>
 800126e:	2014      	movs	r0, #20
 8001270:	f005 fe38 	bl	8006ee4 <malloc>
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <ring_buffer_init+0x3e>
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <ring_buffer_init+0x80>)
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <ring_buffer_init+0x78>)
 8001282:	216c      	movs	r1, #108	; 0x6c
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <ring_buffer_init+0x7c>)
 8001286:	f005 fdd3 	bl	8006e30 <__assert_func>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f81c 	bl	80012d4 <ring_buffer_reset>
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff ffaf 	bl	8001200 <is_ring_buffer_empty>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <ring_buffer_init+0x68>
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <ring_buffer_init+0x84>)
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <ring_buffer_init+0x78>)
 80012ac:	2172      	movs	r1, #114	; 0x72
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <ring_buffer_init+0x7c>)
 80012b0:	f005 fdbe 	bl	8006e30 <__assert_func>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	080085a8 	.word	0x080085a8
 80012c4:	0800f790 	.word	0x0800f790
 80012c8:	0800857c 	.word	0x0800857c
 80012cc:	08008578 	.word	0x08008578
 80012d0:	080085b8 	.word	0x080085b8

080012d4 <ring_buffer_reset>:
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <ring_buffer_reset+0x1a>
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <ring_buffer_reset+0x34>)
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <ring_buffer_reset+0x38>)
 80012e6:	2189      	movs	r1, #137	; 0x89
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <ring_buffer_reset+0x3c>)
 80012ea:	f005 fda1 	bl	8006e30 <__assert_func>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	741a      	strb	r2, [r3, #16]
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	08008578 	.word	0x08008578
 800130c:	0800f7a4 	.word	0x0800f7a4
 8001310:	0800857c 	.word	0x0800857c

08001314 <ring_buffer_get_data_len>:
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <ring_buffer_get_data_len+0x1a>
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <ring_buffer_get_data_len+0x60>)
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <ring_buffer_get_data_len+0x64>)
 8001326:	2197      	movs	r1, #151	; 0x97
 8001328:	4814      	ldr	r0, [pc, #80]	; (800137c <ring_buffer_get_data_len+0x68>)
 800132a:	f005 fd81 	bl	8006e30 <__assert_func>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7c1b      	ldrb	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d115      	bne.n	8001368 <ring_buffer_get_data_len+0x54>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	429a      	cmp	r2, r3
 8001346:	d306      	bcc.n	8001356 <ring_buffer_get_data_len+0x42>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e008      	b.n	8001368 <ring_buffer_get_data_len+0x54>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	441a      	add	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	08008578 	.word	0x08008578
 8001378:	0800f7b8 	.word	0x0800f7b8
 800137c:	0800857c 	.word	0x0800857c

08001380 <ring_buffer_get_free_space>:
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <ring_buffer_get_free_space+0x1a>
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <ring_buffer_get_free_space+0x30>)
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <ring_buffer_get_free_space+0x34>)
 8001392:	21be      	movs	r1, #190	; 0xbe
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <ring_buffer_get_free_space+0x38>)
 8001396:	f005 fd4b 	bl	8006e30 <__assert_func>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68dc      	ldr	r4, [r3, #12]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffb8 	bl	8001314 <ring_buffer_get_data_len>
 80013a4:	4603      	mov	r3, r0
 80013a6:	1ae3      	subs	r3, r4, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	08008578 	.word	0x08008578
 80013b4:	0800f7d4 	.word	0x0800f7d4
 80013b8:	0800857c 	.word	0x0800857c

080013bc <ring_buffer_put>:
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <ring_buffer_put+0x1a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <ring_buffer_put+0x26>
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <ring_buffer_put+0x44>)
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <ring_buffer_put+0x48>)
 80013da:	21ca      	movs	r1, #202	; 0xca
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <ring_buffer_put+0x4c>)
 80013de:	f005 fd27 	bl	8006e30 <__assert_func>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fe9f 	bl	8001134 <head_ptr_advance>
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	080085d4 	.word	0x080085d4
 8001404:	0800f7f0 	.word	0x0800f7f0
 8001408:	0800857c 	.word	0x0800857c

0800140c <ring_buffer_get>:
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <ring_buffer_get+0x1e>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <ring_buffer_get+0x1e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <ring_buffer_get+0x2a>
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <ring_buffer_get+0x60>)
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <ring_buffer_get+0x64>)
 800142e:	21da      	movs	r1, #218	; 0xda
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <ring_buffer_get+0x68>)
 8001432:	f005 fcfd 	bl	8006e30 <__assert_func>
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fee0 	bl	8001200 <is_ring_buffer_empty>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <ring_buffer_get+0x54>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4413      	add	r3, r2
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff feac 	bl	80011b4 <tail_ptr_retreat>
 800145c:	2301      	movs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	080085e8 	.word	0x080085e8
 8001470:	0800f800 	.word	0x0800f800
 8001474:	0800857c 	.word	0x0800857c

08001478 <ring_buffer_write>:
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <ring_buffer_write+0x1c>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <ring_buffer_write+0x28>
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <ring_buffer_write+0x74>)
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <ring_buffer_write+0x78>)
 8001498:	21f3      	movs	r1, #243	; 0xf3
 800149a:	4816      	ldr	r0, [pc, #88]	; (80014f4 <ring_buffer_write+0x7c>)
 800149c:	f005 fcc8 	bl	8006e30 <__assert_func>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	7c1b      	ldrb	r3, [r3, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <ring_buffer_write+0x34>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e01a      	b.n	80014e2 <ring_buffer_write+0x6a>
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff ff67 	bl	8001380 <ring_buffer_get_free_space>
 80014b2:	4602      	mov	r2, r0
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d201      	bcs.n	80014be <ring_buffer_write+0x46>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e011      	b.n	80014e2 <ring_buffer_write+0x6a>
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e009      	b.n	80014d8 <ring_buffer_write+0x60>
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	617a      	str	r2, [r7, #20]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff ff72 	bl	80013bc <ring_buffer_put>
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3f1      	bcc.n	80014c4 <ring_buffer_write+0x4c>
 80014e0:	2300      	movs	r3, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080085d4 	.word	0x080085d4
 80014f0:	0800f810 	.word	0x0800f810
 80014f4:	0800857c 	.word	0x0800857c

080014f8 <ring_buffer_read>:
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <ring_buffer_read+0x20>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <ring_buffer_read+0x20>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d106      	bne.n	8001526 <ring_buffer_read+0x2e>
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <ring_buffer_read+0x64>)
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <ring_buffer_read+0x68>)
 800151c:	f240 1115 	movw	r1, #277	; 0x115
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <ring_buffer_read+0x6c>)
 8001522:	f005 fc85 	bl	8006e30 <__assert_func>
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e00d      	b.n	8001548 <ring_buffer_read+0x50>
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	617a      	str	r2, [r7, #20]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4413      	add	r3, r2
 8001536:	4619      	mov	r1, r3
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff67 	bl	800140c <ring_buffer_get>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <ring_buffer_read+0x50>
 8001544:	2303      	movs	r3, #3
 8001546:	e004      	b.n	8001552 <ring_buffer_read+0x5a>
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3ed      	bcc.n	800152c <ring_buffer_read+0x34>
 8001550:	2300      	movs	r3, #0
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	08008604 	.word	0x08008604
 8001560:	0800f824 	.word	0x0800f824
 8001564:	0800857c 	.word	0x0800857c

08001568 <time_event_start>:
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	709a      	strb	r2, [r3, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	70da      	strb	r2, [r3, #3]
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <time_event_stop>:
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	709a      	strb	r2, [r3, #2]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	70da      	strb	r2, [r3, #3]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <time_event_is_active>:
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <time_event_update>:
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	789b      	ldrb	r3, [r3, #2]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <time_event_update+0x36>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <time_event_update+0x24>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <time_event_update+0x32>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	70da      	strb	r2, [r3, #3]
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <time_event_update+0x38>
 8001600:	2300      	movs	r3, #0
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <time_event_is_raised>:
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
	...

08001624 <time_event_set_pending_update>:
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <time_event_set_pending_update+0x1c>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	7013      	strb	r3, [r2, #0]
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000194 	.word	0x20000194

08001644 <time_event_get_pending_update>:
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <time_event_get_pending_update+0x14>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000194 	.word	0x20000194

0800165c <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff ffdf 	bl	8001624 <time_event_set_pending_update>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8001670:	f7ff ffe8 	bl	8001644 <time_event_get_pending_update>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <time_events_poll_update+0x26>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <time_events_poll_update+0x2c>)
 800167c:	f7ff fb6c 	bl	8000d58 <btn_debounce_run>
        ui_fsm_time_update(ui_fsm_get());
 8001680:	f000 ffec 	bl	800265c <ui_fsm_get>
 8001684:	4603      	mov	r3, r0
 8001686:	4618      	mov	r0, r3
 8001688:	f001 f838 	bl	80026fc <ui_fsm_time_update>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ffc9 	bl	8001624 <time_event_set_pending_update>
    }
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000144 	.word	0x20000144

0800169c <drawer_fsm_get_info>:
#include "drawer_fsm.h"

drawer_ctrl_info *drawer_fsm_get_info(drawer_no_t no)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]


}
 80016a6:	bf00      	nop
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <drawer_fsm_set_ext_evt>:

void drawer_fsm_set_ext_evt(event_t *event)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
    
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <event_manager_fsm_get+0x10>)
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000260 	.word	0x20000260

080016d8 <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	705a      	strb	r2, [r3, #1]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d002      	beq.n	8001710 <event_manager_fsm_run+0x16>
 800170a:	2b02      	cmp	r3, #2
 800170c:	d004      	beq.n	8001718 <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 800170e:	e007      	b.n	8001720 <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f84d 	bl	80017b0 <wait_event_on_react>
 8001716:	e003      	b.n	8001720 <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f89a 	bl	8001852 <notify_event_on_react>
 800171e:	bf00      	nop
    }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	22c8      	movs	r2, #200	; 0xc8
 8001736:	4905      	ldr	r1, [pc, #20]	; (800174c <event_manager_fsm_init+0x24>)
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fb9d 	bl	8000e78 <event_queue_init>
    enter_seq_wait_event(handle);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f806 	bl	8001750 <enter_seq_wait_event>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000198 	.word	0x20000198

08001750 <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 8001758:	2101      	movs	r1, #1
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffbc 	bl	80016d8 <fsm_set_next_state>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f7ff fbe1 	bl	8000f44 <event_queue_read>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3330      	adds	r3, #48	; 0x30
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb84 	bl	8000ea4 <event_queue_get_pending>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	705a      	strb	r2, [r3, #1]
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d106      	bne.n	80017d2 <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ffcf 	bl	8001768 <exit_action_wait_event>
        enter_seq_notify_event(handle);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f810 	bl	80017f0 <enter_seq_notify_event>
 80017d0:	e001      	b.n	80017d6 <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffd1 	bl	800178a <during_action_wait_event>
    }
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 80017f8:	2102      	movs	r1, #2
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff6c 	bl	80016d8 <fsm_set_next_state>
    entry_action_notify_event(handle);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f804 	bl	800180e <entry_action_notify_event>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
    event_manager_dbg("\t notify evt = [0x%X], from [0x%X] to [0x%X]\r\n",
                 handle->iface.event.name,
                 handle->iface.event.info.fsm.,
                 handle->iface.event.info.fsm.dst);

    switch (handle->iface.event.info.fsm.dst)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	799b      	ldrb	r3, [r3, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <entry_action_notify_event+0x16>
 800181e:	2b02      	cmp	r3, #2
 8001820:	d00a      	beq.n	8001838 <entry_action_notify_event+0x2a>




    default:
        break;
 8001822:	e00f      	b.n	8001844 <entry_action_notify_event+0x36>
            ui_fsm_write_event(ui_fsm_get(), &handle->iface.event);
 8001824:	f000 ff1a 	bl	800265c <ui_fsm_get>
 8001828:	4602      	mov	r2, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f000 ff7e 	bl	8002732 <ui_fsm_write_event>
        }break; 
 8001836:	e005      	b.n	8001844 <entry_action_notify_event+0x36>
            drawer_fsm_set_ext_evt(&handle->iface.event);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff38 	bl	80016b2 <drawer_fsm_set_ext_evt>
        }break; 
 8001842:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	705a      	strb	r2, [r3, #1]
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d102      	bne.n	8001868 <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff74 	bl	8001750 <enter_seq_wait_event>
    }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <event_manager_write>:

//------------------ Event Manager Function Definition ---------------------------------------//

uint8_t event_manager_write(event_manager_handle_t handle, event_t *event)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    return event_queue_write(&handle->iface.queue, event);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3330      	adds	r3, #48	; 0x30
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fb1b 	bl	8000ebc <event_queue_write>
 8001886:	4603      	mov	r3, r0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <ui_draw_window>:


//////////////////////////////////// Static Common Functions  //////////////////////////////////////////////

static void ui_draw_window(ui_window_t *win, uint16_t color, bool show)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
    if (show == true)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d011      	beq.n	80018ca <ui_draw_window+0x3a>
    {
        BSP_LCD_SetTextColor(color);
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 fb33 	bl	8003f14 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	8818      	ldrh	r0, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	8859      	ldrh	r1, [r3, #2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	889a      	ldrh	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	88db      	ldrh	r3, [r3, #6]
 80018be:	f002 fcbf 	bl	8004240 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f002 fb26 	bl	8003f14 <BSP_LCD_SetTextColor>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 80018c8:	e010      	b.n	80018ec <ui_draw_window+0x5c>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 80018ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018ce:	f002 fb21 	bl	8003f14 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	8818      	ldrh	r0, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	8859      	ldrh	r1, [r3, #2]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	889a      	ldrh	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	88db      	ldrh	r3, [r3, #6]
 80018e2:	f002 fcad 	bl	8004240 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f002 fb14 	bl	8003f14 <BSP_LCD_SetTextColor>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <ui_clear_window>:

static void ui_clear_window(ui_window_t *win)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 80018fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001900:	f002 fb08 	bl	8003f14 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(win->x, win->y, win->w, win->h);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	8818      	ldrh	r0, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8859      	ldrh	r1, [r3, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	889a      	ldrh	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	88db      	ldrh	r3, [r3, #6]
 8001914:	f002 fddc 	bl	80044d0 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001918:	2000      	movs	r0, #0
 800191a:	f002 fafb 	bl	8003f14 <BSP_LCD_SetTextColor>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <ui_draw_icon>:

static void ui_draw_icon(ui_icon_t *icon)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
    BSP_LCD_DrawBitmap(icon->x, icon->y, (uint8_t*)icon->ptr);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	8818      	ldrh	r0, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8859      	ldrh	r1, [r3, #2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	f002 fd6e 	bl	800441c <BSP_LCD_DrawBitmap>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <ui_draw_circle>:

static void ui_draw_circle(ui_window_t *win, uint8_t radio, uint16_t color)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
 8001954:	4613      	mov	r3, r2
 8001956:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(color);
 8001958:	883b      	ldrh	r3, [r7, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 fada 	bl	8003f14 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(win->x, win->y, radio);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	8818      	ldrh	r0, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	885b      	ldrh	r3, [r3, #2]
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	b292      	uxth	r2, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f002 fc9d 	bl	80042ac <BSP_LCD_DrawCircle>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001972:	2000      	movs	r0, #0
 8001974:	f002 face 	bl	8003f14 <BSP_LCD_SetTextColor>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <ui_fill_circle>:

static void ui_fill_circle(ui_window_t *win, uint8_t radio, uint16_t color)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
 800198c:	4613      	mov	r3, r2
 800198e:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(color);
 8001990:	883b      	ldrh	r3, [r7, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fabe 	bl	8003f14 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(win->x, win->y, radio);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8818      	ldrh	r0, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	885b      	ldrh	r3, [r3, #2]
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	b292      	uxth	r2, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f002 fdb7 	bl	8004518 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f002 fab2 	bl	8003f14 <BSP_LCD_SetTextColor>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <ui_fill_window>:

static void ui_fill_window(ui_window_t *win, uint16_t color)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
    BSP_LCD_SetTextColor(color);
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 faa4 	bl	8003f14 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(win->x, win->y, win->w, win->h);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	8818      	ldrh	r0, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	8859      	ldrh	r1, [r3, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	889a      	ldrh	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	88db      	ldrh	r3, [r3, #6]
 80019dc:	f002 fd78 	bl	80044d0 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR); 
 80019e0:	2000      	movs	r0, #0
 80019e2:	f002 fa97 	bl	8003f14 <BSP_LCD_SetTextColor>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <ui_display_string>:

static void ui_display_string(ui_window_t *win, char *text, sFONT *font, uint16_t color)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	807b      	strh	r3, [r7, #2]
    BSP_LCD_SetTextColor(color);
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fa87 	bl	8003f14 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(font);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f002 faa4 	bl	8003f54 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(win->x, win->y, (uint8_t*)text, LEFT_MODE);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8818      	ldrh	r0, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8859      	ldrh	r1, [r3, #2]
 8001a14:	2303      	movs	r3, #3
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f002 faf2 	bl	8004000 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <ui_display_string+0x44>)
 8001a1e:	f002 fa99 	bl	8003f54 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_DEFAULT_BACKCOLOR);
 8001a22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a26:	f002 fa85 	bl	8003f34 <BSP_LCD_SetBackColor>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000018 	.word	0x20000018

08001a38 <ui_battery_init>:

//////////////////////////////////// Battery Icon Related Functions   //////////////////////////////////////////////
void ui_battery_init(ui_battery_t *batt)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    /* Main window position - all other components will move according to this coordinate */
    batt->win.main.x = 366;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001a46:	801a      	strh	r2, [r3, #0]
    batt->win.main.y = 10;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	220a      	movs	r2, #10
 8001a4c:	805a      	strh	r2, [r3, #2]
    batt->win.main.h = 81;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2251      	movs	r2, #81	; 0x51
 8001a52:	80da      	strh	r2, [r3, #6]
    batt->win.main.w = 96;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2260      	movs	r2, #96	; 0x60
 8001a58:	809a      	strh	r2, [r3, #4]

    batt->icon.batt.ptr = battery_icon;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <ui_battery_init+0xdc>)
 8001a5e:	615a      	str	r2, [r3, #20]
    batt->icon.batt.x = batt->win.main.x + 4;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	3304      	adds	r3, #4
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	821a      	strh	r2, [r3, #16]
    batt->icon.batt.y = batt->win.main.y + 16;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	885b      	ldrh	r3, [r3, #2]
 8001a70:	3310      	adds	r3, #16
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	825a      	strh	r2, [r3, #18]

    /*commented lines until we extend the MCU memory*/
    // batt->icon.error.ptr = &batt_error_icon;
    batt->icon.error.ptr = battery_icon;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <ui_battery_init+0xdc>)
 8001a7c:	61da      	str	r2, [r3, #28]
    batt->icon.error.x = batt->icon.batt.x + 16;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	8a1b      	ldrh	r3, [r3, #16]
 8001a82:	3310      	adds	r3, #16
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	831a      	strh	r2, [r3, #24]
    batt->icon.error.y = batt->icon.batt.y + 16;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8a5b      	ldrh	r3, [r3, #18]
 8001a8e:	3310      	adds	r3, #16
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	835a      	strh	r2, [r3, #26]

    // batt->icon.warn.ptr = &batt_warning_icon;
    batt->icon.warn.ptr = battery_icon;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <ui_battery_init+0xdc>)
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
    batt->icon.warn.x = batt->icon.batt.x + 16;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	8a1b      	ldrh	r3, [r3, #16]
 8001aa0:	3310      	adds	r3, #16
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	841a      	strh	r2, [r3, #32]
    batt->icon.warn.y = batt->icon.batt.y + 16;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	8a5b      	ldrh	r3, [r3, #18]
 8001aac:	3310      	adds	r3, #16
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	845a      	strh	r2, [r3, #34]	; 0x22

    batt->shape.charge.x = batt->icon.batt.x + 17;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	8a1b      	ldrh	r3, [r3, #16]
 8001ab8:	3311      	adds	r3, #17
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	811a      	strh	r2, [r3, #8]
    batt->shape.charge.y = batt->icon.batt.y + 8;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	8a5b      	ldrh	r3, [r3, #18]
 8001ac4:	3308      	adds	r3, #8
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	815a      	strh	r2, [r3, #10]
    batt->shape.charge.h = batt->icon.batt.ptr->infoHeader.biHeight - 16;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b10      	subs	r3, #16
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	81da      	strh	r2, [r3, #14]
    batt->shape.charge.w = batt->icon.batt.ptr->infoHeader.biWidth - 24;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b18      	subs	r3, #24
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	819a      	strh	r2, [r3, #12]

    batt->text.x = batt->shape.charge.x + 15;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	891b      	ldrh	r3, [r3, #8]
 8001af4:	330f      	adds	r3, #15
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	851a      	strh	r2, [r3, #40]	; 0x28
    batt->text.y = batt->shape.charge.y + 10;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	895b      	ldrh	r3, [r3, #10]
 8001b00:	330a      	adds	r3, #10
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	0800c020 	.word	0x0800c020

08001b18 <ui_battery_show>:

void ui_battery_show(ui_battery_t *batt, bool show)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
    if(show)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <ui_battery_show+0x1e>
    {
        /*Display Battery Icon*/
        ui_draw_icon(&batt->icon.batt);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3310      	adds	r3, #16
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fef9 	bl	8001926 <ui_draw_icon>
    else
    {
        /*Clear battery screen section */
        ui_clear_window(&batt->win.main);
    }
}
 8001b34:	e003      	b.n	8001b3e <ui_battery_show+0x26>
        ui_clear_window(&batt->win.main);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fedb 	bl	80018f4 <ui_clear_window>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <ui_battery_draw_charge>:

static void ui_battery_draw_charge(ui_battery_t *batt, uint8_t batt_lvl)
{
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
    float width = batt->shape.charge.w * (batt_lvl / 100.0);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	899b      	ldrh	r3, [r3, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fc49 	bl	80003f0 <__aeabi_i2d>
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460d      	mov	r5, r1
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc43 	bl	80003f0 <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <ui_battery_draw_charge+0x108>)
 8001b70:	f7fe fdd2 	bl	8000718 <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fca2 	bl	80004c4 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7fe feae 	bl	80008e8 <__aeabi_d2f>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	617b      	str	r3, [r7, #20]
    char str[5] = {0};
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	2300      	movs	r3, #0
 8001b96:	743b      	strb	r3, [r7, #16]
    sprintf(str, "%d%%", batt_lvl);
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	492d      	ldr	r1, [pc, #180]	; (8001c54 <ui_battery_draw_charge+0x10c>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f005 fe17 	bl	80077d4 <siprintf>

    uint8_t temp_w = batt->shape.charge.w;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	899b      	ldrh	r3, [r3, #12]
 8001baa:	74fb      	strb	r3, [r7, #19]
    batt->shape.charge.w = (int)width;
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f7fe feeb 	bl	8000988 <__aeabi_f2iz>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	819a      	strh	r2, [r3, #12]
        
    /*Critical battery level */
    if(batt_lvl > 0 && batt_lvl < 17)
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <ui_battery_draw_charge+0x9e>
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d80f      	bhi.n	8001be6 <ui_battery_draw_charge+0x9e>
    {
        ui_fill_window(&batt->shape.charge, LCD_COLOR_RED);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3308      	adds	r3, #8
 8001bca:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fef2 	bl	80019b8 <ui_fill_window>
        ui_display_string(&batt->text, str, &Font16, LCD_DEFAULT_TEXTCOLOR);   
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001bda:	f107 010c 	add.w	r1, r7, #12
 8001bde:	2300      	movs	r3, #0
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <ui_battery_draw_charge+0x110>)
 8001be2:	f7ff ff05 	bl	80019f0 <ui_display_string>
    }

    /*Medium battery level */
    if(batt_lvl >= 17  && batt_lvl < 70)
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d912      	bls.n	8001c12 <ui_battery_draw_charge+0xca>
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	2b45      	cmp	r3, #69	; 0x45
 8001bf0:	d80f      	bhi.n	8001c12 <ui_battery_draw_charge+0xca>
    {
        ui_fill_window(&batt->shape.charge, LCD_COLOR_YELLOW);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fedc 	bl	80019b8 <ui_fill_window>
        ui_display_string(&batt->text, str, &Font16, LCD_DEFAULT_TEXTCOLOR); 
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001c06:	f107 010c 	add.w	r1, r7, #12
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <ui_battery_draw_charge+0x110>)
 8001c0e:	f7ff feef 	bl	80019f0 <ui_display_string>
    }

    /*High battery level */
    if(batt_lvl >= 70  && batt_lvl <= 100)
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	2b45      	cmp	r3, #69	; 0x45
 8001c16:	d912      	bls.n	8001c3e <ui_battery_draw_charge+0xf6>
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d80f      	bhi.n	8001c3e <ui_battery_draw_charge+0xf6>
    {
        ui_fill_window(&batt->shape.charge, LCD_COLOR_GREEN);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3308      	adds	r3, #8
 8001c22:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fec6 	bl	80019b8 <ui_fill_window>
        ui_display_string(&batt->text, str, &Font16, LCD_DEFAULT_TEXTCOLOR); 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001c32:	f107 010c 	add.w	r1, r7, #12
 8001c36:	2300      	movs	r3, #0
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <ui_battery_draw_charge+0x110>)
 8001c3a:	f7ff fed9 	bl	80019f0 <ui_display_string>
    }

    batt->shape.charge.w = temp_w;
 8001c3e:	7cfb      	ldrb	r3, [r7, #19]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	819a      	strh	r2, [r3, #12]
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40590000 	.word	0x40590000
 8001c54:	0800867c 	.word	0x0800867c
 8001c58:	20000000 	.word	0x20000000

08001c5c <ui_battery_set_config>:

void ui_battery_set_config(ui_battery_t *batt, ui_battery_config_t *config)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
    /*Paint select battery item property*/
    if (config->select == UI_ITEM_SELECT)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	789b      	ldrb	r3, [r3, #2]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <ui_battery_set_config+0x20>
        ui_draw_window(&batt->win.main, UI_SELECTION_COLOR, true);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	211f      	movs	r1, #31
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fe0b 	bl	8001890 <ui_draw_window>
 8001c7a:	e006      	b.n	8001c8a <ui_battery_set_config+0x2e>
    else
        ui_draw_window(&batt->win.main, LCD_DEFAULT_BACKCOLOR, false);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe03 	bl	8001890 <ui_draw_window>
    
    /*Clear charging info */
    ui_clear_window(&batt->shape.charge); 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fe30 	bl	80018f4 <ui_clear_window>

    switch (config->set)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d012      	beq.n	8001cc2 <ui_battery_set_config+0x66>
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	dc17      	bgt.n	8001cd0 <ui_battery_set_config+0x74>
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <ui_battery_set_config+0x4e>
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d006      	beq.n	8001cb6 <ui_battery_set_config+0x5a>
    {
        case BATT_ST_NO_DETECTED: { ui_draw_icon(&batt->icon.error); } break;
        case BATT_ST_LOW_BATTERY: { ui_draw_icon(&batt->icon.warn);  } break;
        case BATT_ST_CHARGING:    { ui_battery_draw_charge(batt, config->charge); } break;
    }
}
 8001ca8:	e012      	b.n	8001cd0 <ui_battery_set_config+0x74>
        case BATT_ST_NO_DETECTED: { ui_draw_icon(&batt->icon.error); } break;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3318      	adds	r3, #24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe39 	bl	8001926 <ui_draw_icon>
 8001cb4:	e00c      	b.n	8001cd0 <ui_battery_set_config+0x74>
        case BATT_ST_LOW_BATTERY: { ui_draw_icon(&batt->icon.warn);  } break;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3320      	adds	r3, #32
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe33 	bl	8001926 <ui_draw_icon>
 8001cc0:	e006      	b.n	8001cd0 <ui_battery_set_config+0x74>
        case BATT_ST_CHARGING:    { ui_battery_draw_charge(batt, config->charge); } break;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff3d 	bl	8001b48 <ui_battery_draw_charge>
 8001cce:	bf00      	nop
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <ui_drawers_init>:

//////////////////////////////////// Drawer Box Related Functions    //////////////////////////////////////////////

void ui_drawers_init(ui_drawers_t *drawers)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
    /*position in the screen, all the remaining components will move with it*/
    drawers->win.main.x = 15;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	801a      	strh	r2, [r3, #0]
    drawers->win.main.y = 10;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	220a      	movs	r2, #10
 8001cea:	805a      	strh	r2, [r3, #2]
    drawers->win.main.h = 81;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2251      	movs	r2, #81	; 0x51
 8001cf0:	80da      	strh	r2, [r3, #6]
    drawers->win.main.w = 132;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2284      	movs	r2, #132	; 0x84
 8001cf6:	809a      	strh	r2, [r3, #4]

    drawers->shape.main.x = drawers->win.main.x + 4;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	811a      	strh	r2, [r3, #8]
    drawers->shape.main.y = drawers->win.main.y + 4;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	885b      	ldrh	r3, [r3, #2]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	815a      	strh	r2, [r3, #10]
    drawers->shape.main.h = drawers->win.main.h - 8;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	88db      	ldrh	r3, [r3, #6]
 8001d14:	3b08      	subs	r3, #8
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	81da      	strh	r2, [r3, #14]
    drawers->shape.main.w = drawers->win.main.w - 8;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	889b      	ldrh	r3, [r3, #4]
 8001d20:	3b08      	subs	r3, #8
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	819a      	strh	r2, [r3, #12]

    drawers->shape.single.w = 50;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2232      	movs	r2, #50	; 0x32
 8001d2c:	829a      	strh	r2, [r3, #20]
    drawers->shape.single.h = 25;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2219      	movs	r2, #25
 8001d32:	82da      	strh	r2, [r3, #22]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
	...

08001d40 <ui_drawers_show>:

void ui_drawers_show(ui_drawers_t *drawers, bool show)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
    static const pos_t drawer_pos[DRAWERn] = { {7, 7}, {66, 7}, {7, 41}, {66, 41} };

    char str_buff[5] = {};
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	2300      	movs	r3, #0
 8001d52:	753b      	strb	r3, [r7, #20]

    if(show)
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d046      	beq.n	8001de8 <ui_drawers_show+0xa8>
    {
        ui_draw_window(&drawers->shape.main, LCD_DEFAULT_TEXTCOLOR, true);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fd94 	bl	8001890 <ui_draw_window>

        for (uint8_t i = 0; i < DRAWERn; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	75fb      	strb	r3, [r7, #23]
 8001d6c:	e038      	b.n	8001de0 <ui_drawers_show+0xa0>
        {
            drawers->shape.single.x = drawers->shape.main.x + drawer_pos[i].x;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	891a      	ldrh	r2, [r3, #8]
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	4920      	ldr	r1, [pc, #128]	; (8001df8 <ui_drawers_show+0xb8>)
 8001d76:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	821a      	strh	r2, [r3, #16]
            drawers->shape.single.y = drawers->shape.main.y + drawer_pos[i].y;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	895a      	ldrh	r2, [r3, #10]
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	491b      	ldr	r1, [pc, #108]	; (8001df8 <ui_drawers_show+0xb8>)
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	4413      	add	r3, r2
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	825a      	strh	r2, [r3, #18]
            ui_draw_window(&drawers->shape.single, LCD_DEFAULT_TEXTCOLOR, true);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3310      	adds	r3, #16
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fd75 	bl	8001890 <ui_draw_window>

            ui_window_t text_pos;
            text_pos.x = drawers->shape.single.x + 15;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8a1b      	ldrh	r3, [r3, #16]
 8001daa:	330f      	adds	r3, #15
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	813b      	strh	r3, [r7, #8]
            text_pos.y = drawers->shape.single.y + 4;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8a5b      	ldrh	r3, [r3, #18]
 8001db4:	3304      	adds	r3, #4
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	817b      	strh	r3, [r7, #10]
            sprintf(str_buff,"%d", i + 1);
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	490e      	ldr	r1, [pc, #56]	; (8001dfc <ui_drawers_show+0xbc>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f005 fd05 	bl	80077d4 <siprintf>
            ui_display_string(&text_pos, str_buff, &Font16, LCD_DEFAULT_TEXTCOLOR);
 8001dca:	f107 0110 	add.w	r1, r7, #16
 8001dce:	f107 0008 	add.w	r0, r7, #8
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <ui_drawers_show+0xc0>)
 8001dd6:	f7ff fe0b 	bl	80019f0 <ui_display_string>
        for (uint8_t i = 0; i < DRAWERn; i++)
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	75fb      	strb	r3, [r7, #23]
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d9c3      	bls.n	8001d6e <ui_drawers_show+0x2e>
    }
    else
    {
        ui_clear_window(&drawers->win.main);
    }
}
 8001de6:	e003      	b.n	8001df0 <ui_drawers_show+0xb0>
        ui_clear_window(&drawers->win.main);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fd82 	bl	80018f4 <ui_clear_window>
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800f838 	.word	0x0800f838
 8001dfc:	08008684 	.word	0x08008684
 8001e00:	20000000 	.word	0x20000000

08001e04 <ui_drawers_set_config>:

void ui_drawers_set_config(ui_drawers_t *drawers, ui_drawers_config_t *config)
{   
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    ui_drawers_show(drawers, true);
 8001e0e:	2101      	movs	r1, #1
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff95 	bl	8001d40 <ui_drawers_show>
    sFONT    *font = &Font20;
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <ui_drawers_set_config+0xe4>)
 8001e18:	61fb      	str	r3, [r7, #28]

    /*Paint select battery item property*/
    if (config->select.main == UI_ITEM_SELECT)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	789b      	ldrb	r3, [r3, #2]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d108      	bne.n	8001e34 <ui_drawers_set_config+0x30>
    {
        font = &Font24;
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <ui_drawers_set_config+0xe8>)
 8001e24:	61fb      	str	r3, [r7, #28]
        ui_draw_window(&drawers->win.main, UI_SELECTION_COLOR, true);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	211f      	movs	r1, #31
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fd2f 	bl	8001890 <ui_draw_window>
 8001e32:	e005      	b.n	8001e40 <ui_drawers_set_config+0x3c>
    }
    else
    {
        ui_draw_window(&drawers->win.main, UI_SELECTION_COLOR, false);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	211f      	movs	r1, #31
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fd28 	bl	8001890 <ui_draw_window>
    }

    /*Paint select battery item property*/
    if (config->select.single == UI_ITEM_SELECT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	78db      	ldrb	r3, [r3, #3]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d139      	bne.n	8001ebc <ui_drawers_set_config+0xb8>
    {
        static const pos_t drawer_pos[DRAWERn] = { {7, 7}, {66, 7}, {7, 41}, {66, 41} };
        drawers->shape.single.x = drawers->shape.main.x + drawer_pos[config->drawer.no].x;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891a      	ldrh	r2, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <ui_drawers_set_config+0xec>)
 8001e54:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	821a      	strh	r2, [r3, #16]
        drawers->shape.single.y = drawers->shape.main.y + drawer_pos[config->drawer.no].y;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	895a      	ldrh	r2, [r3, #10]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	4921      	ldr	r1, [pc, #132]	; (8001ef0 <ui_drawers_set_config+0xec>)
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	4413      	add	r3, r2
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	825a      	strh	r2, [r3, #18]
        ui_draw_window(&drawers->shape.single, UI_SELECTION_COLOR, true);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3310      	adds	r3, #16
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	211f      	movs	r1, #31
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fd05 	bl	8001890 <ui_draw_window>

        ui_window_t text_pos;
        text_pos.x = drawers->shape.single.x + 15;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8a1b      	ldrh	r3, [r3, #16]
 8001e8a:	330f      	adds	r3, #15
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	82bb      	strh	r3, [r7, #20]
        text_pos.y = drawers->shape.single.y + 4;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8a5b      	ldrh	r3, [r3, #18]
 8001e94:	3304      	adds	r3, #4
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	82fb      	strh	r3, [r7, #22]

        char str_buff[5];
        sprintf(str_buff, "%d", config->drawer.no + 1);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	785b      	ldrb	r3, [r3, #1]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4913      	ldr	r1, [pc, #76]	; (8001ef4 <ui_drawers_set_config+0xf0>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 fc94 	bl	80077d4 <siprintf>
        ui_display_string(&text_pos, str_buff, font, UI_SELECTION_COLOR);
 8001eac:	f107 010c 	add.w	r1, r7, #12
 8001eb0:	f107 0014 	add.w	r0, r7, #20
 8001eb4:	231f      	movs	r3, #31
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	f7ff fd9a 	bl	80019f0 <ui_display_string>
    }

    switch (config->drawer.st)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d80a      	bhi.n	8001edc <ui_drawers_set_config+0xd8>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <ui_drawers_set_config+0xc8>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001edd 	.word	0x08001edd
 8001ed4:	08001edd 	.word	0x08001edd
 8001ed8:	08001edd 	.word	0x08001edd
        case DRAWER_ST_OPEN:    { /* place drawing operations for this state here */ } break;
        case DRAWER_ST_OPENING: { /* place drawing operations for this state here */ } break;
        case DRAWER_ST_CLOSE:   { /* place drawing operations for this state here */ } break;
        case DRAWER_ST_CLOSING: { /* place drawing operations for this state here */ } break;
    default:
        break;
 8001edc:	bf00      	nop
    }
}
 8001ede:	bf00      	nop
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000010 	.word	0x20000010
 8001ef0:	0800f848 	.word	0x0800f848
 8001ef4:	08008684 	.word	0x08008684

08001ef8 <ui_feeder_menu_init>:

//////////////////////////////////// Feeder Config Menu Related Functions //////////////////////////////////////////
void ui_feeder_menu_init(ui_feeder_menu_t *menu)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    /*position in the screen */
    menu->win.main.x = 19;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2213      	movs	r2, #19
 8001f04:	801a      	strh	r2, [r3, #0]
    menu->win.main.y = 98;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2262      	movs	r2, #98	; 0x62
 8001f0a:	805a      	strh	r2, [r3, #2]
    menu->win.main.w = 442;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 8001f12:	809a      	strh	r2, [r3, #4]
    menu->win.main.h = 216;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	22d8      	movs	r2, #216	; 0xd8
 8001f18:	80da      	strh	r2, [r3, #6]
    menu->win.daily.x = menu->win.main.x + 393;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f203 1389 	addw	r3, r3, #393	; 0x189
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	811a      	strh	r2, [r3, #8]
    menu->win.daily.y = menu->win.main.y + 39;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	885b      	ldrh	r3, [r3, #2]
 8001f2c:	3327      	adds	r3, #39	; 0x27
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	815a      	strh	r2, [r3, #10]
    menu->win.daily.w = 36;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	819a      	strh	r2, [r3, #12]
    menu->win.daily.h = 18;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2212      	movs	r2, #18
 8001f3e:	81da      	strh	r2, [r3, #14]

    static const label_t header[4] = { {"OPEN_TIME",102, 2}, {"CLOSE_TIME",208, 2}, {"DATE",325, 2}, {"DAILY",380, 2}};

    static char *meals[FEEDER_MEALn] = {"Breakfast", "Snack 1", "Lunch","Snack 2","Dinner", "Snack 3"};

    for (int i = 0; i < FEEDER_MEALn; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e010      	b.n	8001f68 <ui_feeder_menu_init+0x70>
    {       
        ui_window_t text_pos;
        text_pos.x = header->x;
 8001f46:	4b91      	ldr	r3, [pc, #580]	; (800218c <ui_feeder_menu_init+0x294>)
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	823b      	strh	r3, [r7, #16]
        text_pos.y = header->y;
 8001f4c:	4b8f      	ldr	r3, [pc, #572]	; (800218c <ui_feeder_menu_init+0x294>)
 8001f4e:	88db      	ldrh	r3, [r3, #6]
 8001f50:	827b      	strh	r3, [r7, #18]
        ui_display_string(&text_pos, header->name, &Font16, LCD_DEFAULT_TEXTCOLOR);
 8001f52:	4b8e      	ldr	r3, [pc, #568]	; (800218c <ui_feeder_menu_init+0x294>)
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	f107 0010 	add.w	r0, r7, #16
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	4a8c      	ldr	r2, [pc, #560]	; (8002190 <ui_feeder_menu_init+0x298>)
 8001f5e:	f7ff fd47 	bl	80019f0 <ui_display_string>
    for (int i = 0; i < FEEDER_MEALn; i++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	ddeb      	ble.n	8001f46 <ui_feeder_menu_init+0x4e>
    }

    for (int i = 0; i < FEEDER_MEALn; i++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	e102      	b.n	800217a <ui_feeder_menu_init+0x282>
    {
        // meal selection 
        ui_window_t text_pos;
        text_pos.x = 2;
 8001f74:	2302      	movs	r3, #2
 8001f76:	813b      	strh	r3, [r7, #8]
        text_pos.y = 33*(i + 1);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	0152      	lsls	r2, r2, #5
 8001f82:	4413      	add	r3, r2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	817b      	strh	r3, [r7, #10]
        ui_display_string(&text_pos, meals[i], &Font16, LCD_DEFAULT_TEXTCOLOR);
 8001f88:	4a82      	ldr	r2, [pc, #520]	; (8002194 <ui_feeder_menu_init+0x29c>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f90:	f107 0008 	add.w	r0, r7, #8
 8001f94:	2300      	movs	r3, #0
 8001f96:	4a7e      	ldr	r2, [pc, #504]	; (8002190 <ui_feeder_menu_init+0x298>)
 8001f98:	f7ff fd2a 	bl	80019f0 <ui_display_string>

        // open hour 
        menu->meal_td[i].time.open.hour.x    = menu->win.main.x + (10 + 102);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	3370      	adds	r3, #112	; 0x70
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	4413      	add	r3, r2
 8001fac:	3310      	adds	r3, #16
 8001fae:	460a      	mov	r2, r1
 8001fb0:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.open.hour.y    = menu->win.main.y + (i+1)*(33);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	885a      	ldrh	r2, [r3, #2]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	0149      	lsls	r1, r1, #5
 8001fc0:	440b      	add	r3, r1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	4413      	add	r3, r2
 8001fd0:	3312      	adds	r3, #18
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.open.min.x     = menu->win.main.x + (10 + 102 + 30);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	338e      	adds	r3, #142	; 0x8e
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	019b      	lsls	r3, r3, #6
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3318      	adds	r3, #24
 8001fe8:	460a      	mov	r2, r1
 8001fea:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.open.min.y     = menu->win.main.y + (i+1)*(33);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	885a      	ldrh	r2, [r3, #2]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	0149      	lsls	r1, r1, #5
 8001ffa:	440b      	add	r3, r1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	b299      	uxth	r1, r3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	019b      	lsls	r3, r3, #6
 8002008:	4413      	add	r3, r2
 800200a:	331a      	adds	r3, #26
 800200c:	460a      	mov	r2, r1
 800200e:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.open.am_fm.x   = menu->win.main.x + (10 + 102 + 50);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	33a2      	adds	r3, #162	; 0xa2
 8002016:	b299      	uxth	r1, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	4413      	add	r3, r2
 8002020:	3320      	adds	r3, #32
 8002022:	460a      	mov	r2, r1
 8002024:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.open.am_fm.y   = menu->win.main.y + (i+1)*(33);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	885a      	ldrh	r2, [r3, #2]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3301      	adds	r3, #1
 800202e:	b29b      	uxth	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	0149      	lsls	r1, r1, #5
 8002034:	440b      	add	r3, r1
 8002036:	b29b      	uxth	r3, r3
 8002038:	4413      	add	r3, r2
 800203a:	b299      	uxth	r1, r3
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	4413      	add	r3, r2
 8002044:	3322      	adds	r3, #34	; 0x22
 8002046:	460a      	mov	r2, r1
 8002048:	801a      	strh	r2, [r3, #0]

        // close hour
        menu->meal_td[i].time.close.hour.x   = menu->win.main.x + (10 + 209);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	33db      	adds	r3, #219	; 0xdb
 8002050:	b299      	uxth	r1, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	019b      	lsls	r3, r3, #6
 8002058:	4413      	add	r3, r2
 800205a:	3328      	adds	r3, #40	; 0x28
 800205c:	460a      	mov	r2, r1
 800205e:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.close.hour.y   = menu->win.main.y + (i+1)*(33);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	885a      	ldrh	r2, [r3, #2]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	3301      	adds	r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	4619      	mov	r1, r3
 800206c:	0149      	lsls	r1, r1, #5
 800206e:	440b      	add	r3, r1
 8002070:	b29b      	uxth	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b299      	uxth	r1, r3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	019b      	lsls	r3, r3, #6
 800207c:	4413      	add	r3, r2
 800207e:	332a      	adds	r3, #42	; 0x2a
 8002080:	460a      	mov	r2, r1
 8002082:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.close.min.x    = menu->win.main.x + (10 + 209 + 30);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	33f9      	adds	r3, #249	; 0xf9
 800208a:	b299      	uxth	r1, r3
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	019b      	lsls	r3, r3, #6
 8002092:	4413      	add	r3, r2
 8002094:	3330      	adds	r3, #48	; 0x30
 8002096:	460a      	mov	r2, r1
 8002098:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.close.min.y    = menu->win.main.y + (i+1)*(33);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	885a      	ldrh	r2, [r3, #2]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	3301      	adds	r3, #1
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	0149      	lsls	r1, r1, #5
 80020a8:	440b      	add	r3, r1
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	b299      	uxth	r1, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	019b      	lsls	r3, r3, #6
 80020b6:	4413      	add	r3, r2
 80020b8:	3332      	adds	r3, #50	; 0x32
 80020ba:	460a      	mov	r2, r1
 80020bc:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.close.am_fm.x  = menu->win.main.x + (10 + 209 + 50);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80020c6:	b299      	uxth	r1, r3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	4413      	add	r3, r2
 80020d0:	3338      	adds	r3, #56	; 0x38
 80020d2:	460a      	mov	r2, r1
 80020d4:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].time.close.am_fm.y  = menu->win.main.y + (i+1)*(33);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	885a      	ldrh	r2, [r3, #2]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	3301      	adds	r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	0149      	lsls	r1, r1, #5
 80020e4:	440b      	add	r3, r1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	b299      	uxth	r1, r3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	4413      	add	r3, r2
 80020f4:	333a      	adds	r3, #58	; 0x3a
 80020f6:	460a      	mov	r2, r1
 80020f8:	801a      	strh	r2, [r3, #0]

        // date 
        menu->meal_td[i].date.day.x        = menu->win.main.x + (10 + 316);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 8002102:	b299      	uxth	r1, r3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	4413      	add	r3, r2
 800210c:	3348      	adds	r3, #72	; 0x48
 800210e:	460a      	mov	r2, r1
 8002110:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].date.month.x      = menu->win.main.x + (10 + 316 + 30);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800211a:	b299      	uxth	r1, r3
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	019b      	lsls	r3, r3, #6
 8002124:	4413      	add	r3, r2
 8002126:	460a      	mov	r2, r1
 8002128:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].date.day.y        = menu->win.main.y + (i+1)*(33);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	885a      	ldrh	r2, [r3, #2]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	3301      	adds	r3, #1
 8002132:	b29b      	uxth	r3, r3
 8002134:	4619      	mov	r1, r3
 8002136:	0149      	lsls	r1, r1, #5
 8002138:	440b      	add	r3, r1
 800213a:	b29b      	uxth	r3, r3
 800213c:	4413      	add	r3, r2
 800213e:	b299      	uxth	r1, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	4413      	add	r3, r2
 8002148:	334a      	adds	r3, #74	; 0x4a
 800214a:	460a      	mov	r2, r1
 800214c:	801a      	strh	r2, [r3, #0]
        menu->meal_td[i].date.month.y      = menu->win.main.y + (i+1)*(33);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	885a      	ldrh	r2, [r3, #2]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	3301      	adds	r3, #1
 8002156:	b29b      	uxth	r3, r3
 8002158:	4619      	mov	r1, r3
 800215a:	0149      	lsls	r1, r1, #5
 800215c:	440b      	add	r3, r1
 800215e:	b29b      	uxth	r3, r3
 8002160:	4413      	add	r3, r2
 8002162:	b299      	uxth	r1, r3
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3301      	adds	r3, #1
 800216a:	019b      	lsls	r3, r3, #6
 800216c:	4413      	add	r3, r2
 800216e:	3302      	adds	r3, #2
 8002170:	460a      	mov	r2, r1
 8002172:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < FEEDER_MEALn; i++)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	3301      	adds	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2b05      	cmp	r3, #5
 800217e:	f77f aef9 	ble.w	8001f74 <ui_feeder_menu_init+0x7c>
    }


}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	0800f858 	.word	0x0800f858
 8002190:	20000000 	.word	0x20000000
 8002194:	20000054 	.word	0x20000054

08002198 <ui_feeder_menu_show>:
void ui_feeder_menu_show(ui_feeder_menu_t *menu, bool show)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]

    if(show)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d05b      	beq.n	8002262 <ui_feeder_menu_show+0xca>
    {
        for (int i = 0; i < FEEDER_MEALn; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e054      	b.n	800225a <ui_feeder_menu_show+0xc2>
        {
            // Open time
            ui_display_string(&menu->meal_td[i].time.open.hour, "--:", &Font16, LCD_DEFAULT_TEXTCOLOR);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	019b      	lsls	r3, r3, #6
 80021b4:	3310      	adds	r3, #16
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	18d0      	adds	r0, r2, r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <ui_feeder_menu_show+0xdc>)
 80021be:	492e      	ldr	r1, [pc, #184]	; (8002278 <ui_feeder_menu_show+0xe0>)
 80021c0:	f7ff fc16 	bl	80019f0 <ui_display_string>
            ui_display_string(&menu->meal_td[i].time.open.min , "--", &Font16, LCD_DEFAULT_TEXTCOLOR);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	019b      	lsls	r3, r3, #6
 80021c8:	3318      	adds	r3, #24
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	18d0      	adds	r0, r2, r3
 80021ce:	2300      	movs	r3, #0
 80021d0:	4a28      	ldr	r2, [pc, #160]	; (8002274 <ui_feeder_menu_show+0xdc>)
 80021d2:	492a      	ldr	r1, [pc, #168]	; (800227c <ui_feeder_menu_show+0xe4>)
 80021d4:	f7ff fc0c 	bl	80019f0 <ui_display_string>
            ui_display_string(&menu->meal_td[i].time.open.am_fm, (char*)am_fm_str[TIME_FM], &Font16, LCD_DEFAULT_TEXTCOLOR);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	019b      	lsls	r3, r3, #6
 80021dc:	3320      	adds	r3, #32
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	18d0      	adds	r0, r2, r3
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <ui_feeder_menu_show+0xe8>)
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	2300      	movs	r3, #0
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <ui_feeder_menu_show+0xdc>)
 80021ea:	f7ff fc01 	bl	80019f0 <ui_display_string>

            // Close time 
            ui_display_string(&menu->meal_td[i].time.close.hour, "--:", &Font16, LCD_DEFAULT_TEXTCOLOR);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	3328      	adds	r3, #40	; 0x28
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	18d0      	adds	r0, r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <ui_feeder_menu_show+0xdc>)
 80021fc:	491e      	ldr	r1, [pc, #120]	; (8002278 <ui_feeder_menu_show+0xe0>)
 80021fe:	f7ff fbf7 	bl	80019f0 <ui_display_string>
            ui_display_string(&menu->meal_td[i].time.close.min , "--", &Font16, LCD_DEFAULT_TEXTCOLOR);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	019b      	lsls	r3, r3, #6
 8002206:	3330      	adds	r3, #48	; 0x30
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	18d0      	adds	r0, r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <ui_feeder_menu_show+0xdc>)
 8002210:	491a      	ldr	r1, [pc, #104]	; (800227c <ui_feeder_menu_show+0xe4>)
 8002212:	f7ff fbed 	bl	80019f0 <ui_display_string>
            ui_display_string(&menu->meal_td[i].time.close.am_fm, (char*)am_fm_str[TIME_FM], &Font16, LCD_DEFAULT_TEXTCOLOR);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	3338      	adds	r3, #56	; 0x38
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	18d0      	adds	r0, r2, r3
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <ui_feeder_menu_show+0xe8>)
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	2300      	movs	r3, #0
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <ui_feeder_menu_show+0xdc>)
 8002228:	f7ff fbe2 	bl	80019f0 <ui_display_string>

            // Day Month
            ui_display_string(&menu->meal_td[i].date.day, "--/", &Font16, LCD_DEFAULT_TEXTCOLOR);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	019b      	lsls	r3, r3, #6
 8002230:	3348      	adds	r3, #72	; 0x48
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	18d0      	adds	r0, r2, r3
 8002236:	2300      	movs	r3, #0
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <ui_feeder_menu_show+0xdc>)
 800223a:	4912      	ldr	r1, [pc, #72]	; (8002284 <ui_feeder_menu_show+0xec>)
 800223c:	f7ff fbd8 	bl	80019f0 <ui_display_string>
            ui_display_string(&menu->meal_td[i].date.month, "--", &Font16, LCD_DEFAULT_TEXTCOLOR);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3301      	adds	r3, #1
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	18d0      	adds	r0, r2, r3
 800224a:	2300      	movs	r3, #0
 800224c:	4a09      	ldr	r2, [pc, #36]	; (8002274 <ui_feeder_menu_show+0xdc>)
 800224e:	490b      	ldr	r1, [pc, #44]	; (800227c <ui_feeder_menu_show+0xe4>)
 8002250:	f7ff fbce 	bl	80019f0 <ui_display_string>
        for (int i = 0; i < FEEDER_MEALn; i++)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b05      	cmp	r3, #5
 800225e:	dda7      	ble.n	80021b0 <ui_feeder_menu_show+0x18>
    }
    else
    {
        ui_clear_window(&menu->win.main);
    }
}
 8002260:	e003      	b.n	800226a <ui_feeder_menu_show+0xd2>
        ui_clear_window(&menu->win.main);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fb45 	bl	80018f4 <ui_clear_window>
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000
 8002278:	08008688 	.word	0x08008688
 800227c:	0800868c 	.word	0x0800868c
 8002280:	20000044 	.word	0x20000044
 8002284:	08008690 	.word	0x08008690

08002288 <ui_date_time_init>:



//////////////////////////////////// Date Time Config Menu Related Functions ///////////////////////////////////////
void ui_date_time_init(ui_date_time_menu_t *menu)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    menu->win.main.x = 17;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2211      	movs	r2, #17
 8002294:	801a      	strh	r2, [r3, #0]
    menu->win.main.y = 116;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2274      	movs	r2, #116	; 0x74
 800229a:	805a      	strh	r2, [r3, #2]
    menu->win.main.w = 442;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 80022a2:	809a      	strh	r2, [r3, #4]
    menu->win.main.h = 161;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	22a1      	movs	r2, #161	; 0xa1
 80022a8:	80da      	strh	r2, [r3, #6]

    menu->time.hour.x  = menu->win.main.x + 31;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	331f      	adds	r3, #31
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	811a      	strh	r2, [r3, #8]
    menu->time.hour.y  = menu->win.main.y + 29;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	885b      	ldrh	r3, [r3, #2]
 80022ba:	331d      	adds	r3, #29
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	815a      	strh	r2, [r3, #10]
    menu->time.min.x   = menu->win.main.x + 191;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	33bf      	adds	r3, #191	; 0xbf
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	821a      	strh	r2, [r3, #16]
    menu->time.min.y   = menu->win.main.y + 29;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	885b      	ldrh	r3, [r3, #2]
 80022d2:	331d      	adds	r3, #29
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	825a      	strh	r2, [r3, #18]
    menu->date.day.x   = menu->win.main.x + 347;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f203 135b 	addw	r3, r3, #347	; 0x15b
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
    menu->date.day.y   = menu->win.main.y + 61;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	885b      	ldrh	r3, [r3, #2]
 80022ec:	333d      	adds	r3, #61	; 0x3d
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    menu->date.month.x = menu->win.main.x + 389;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	f203 1385 	addw	r3, r3, #389	; 0x185
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	841a      	strh	r2, [r3, #32]
    menu->date.month.y = menu->win.main.y + 61;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	333d      	adds	r3, #61	; 0x3d
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	845a      	strh	r2, [r3, #34]	; 0x22
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <ui_date_time_set_config>:
        ui_clear_window(&menu->win.main);
    }
}

void ui_date_time_set_config(ui_date_time_menu_t *menu, ui_date_time_config_t *config)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    char str[5];
    uint16_t color = LCD_DEFAULT_TEXTCOLOR;
 8002322:	2300      	movs	r3, #0
 8002324:	81fb      	strh	r3, [r7, #14]

    if (config->select == UI_ITEM_SELECT)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	791b      	ldrb	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <ui_date_time_set_config+0x1a>
        color = UI_SELECTION_COLOR;
 800232e:	231f      	movs	r3, #31
 8002330:	81fb      	strh	r3, [r7, #14]

    switch (config->set)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d856      	bhi.n	80023e8 <ui_date_time_set_config+0xd0>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <ui_date_time_set_config+0x28>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	08002377 	.word	0x08002377
 8002348:	0800239d 	.word	0x0800239d
 800234c:	080023c3 	.word	0x080023c3
    {
    case DATE_TIME_CNF_HOUR: {
            sprintf(str, "%.2d", config->time.hour);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	461a      	mov	r2, r3
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4926      	ldr	r1, [pc, #152]	; (80023f4 <ui_date_time_set_config+0xdc>)
 800235c:	4618      	mov	r0, r3
 800235e:	f005 fa39 	bl	80077d4 <siprintf>
            ui_display_string(&menu->time.hour, str, &Font24, color);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f103 0008 	add.w	r0, r3, #8
 8002368:	89fb      	ldrh	r3, [r7, #14]
 800236a:	f107 0108 	add.w	r1, r7, #8
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <ui_date_time_set_config+0xe0>)
 8002370:	f7ff fb3e 	bl	80019f0 <ui_display_string>
    } break;
 8002374:	e039      	b.n	80023ea <ui_date_time_set_config+0xd2>

    case DATE_TIME_CNF_MIN: {
            sprintf(str, "%.2d", config->time.min);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	789b      	ldrb	r3, [r3, #2]
 800237a:	461a      	mov	r2, r3
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	491c      	ldr	r1, [pc, #112]	; (80023f4 <ui_date_time_set_config+0xdc>)
 8002382:	4618      	mov	r0, r3
 8002384:	f005 fa26 	bl	80077d4 <siprintf>
            ui_display_string(&menu->time.min, str, &Font24, color);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f103 0010 	add.w	r0, r3, #16
 800238e:	89fb      	ldrh	r3, [r7, #14]
 8002390:	f107 0108 	add.w	r1, r7, #8
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <ui_date_time_set_config+0xe0>)
 8002396:	f7ff fb2b 	bl	80019f0 <ui_display_string>
    } break;
 800239a:	e026      	b.n	80023ea <ui_date_time_set_config+0xd2>

    case DATE_TIME_CNF_DAY: {
            sprintf(str, "%.2d", config->date.day);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4913      	ldr	r1, [pc, #76]	; (80023f4 <ui_date_time_set_config+0xdc>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 fa13 	bl	80077d4 <siprintf>
            ui_display_string(&menu->date.day, str, &Font16, color);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	f107 0108 	add.w	r1, r7, #8
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <ui_date_time_set_config+0xe4>)
 80023bc:	f7ff fb18 	bl	80019f0 <ui_display_string>
    } break;
 80023c0:	e013      	b.n	80023ea <ui_date_time_set_config+0xd2>

    case DATE_TIME_CNF_MONTH: {
            sprintf(str, "%.2d", config->date.day);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	4909      	ldr	r1, [pc, #36]	; (80023f4 <ui_date_time_set_config+0xdc>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f005 fa00 	bl	80077d4 <siprintf>
            ui_display_string(&menu->date.day, str, &Font16, color);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	f107 0108 	add.w	r1, r7, #8
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <ui_date_time_set_config+0xe4>)
 80023e2:	f7ff fb05 	bl	80019f0 <ui_display_string>
    } break;
 80023e6:	e000      	b.n	80023ea <ui_date_time_set_config+0xd2>

    default:
        break;
 80023e8:	bf00      	nop
    }
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08008694 	.word	0x08008694
 80023f8:	20000010 	.word	0x20000010
 80023fc:	20000000 	.word	0x20000000

08002400 <ui_thermostat_init>:

//////////////////////////////////// Date Time Config Menu Related Functions ///////////////////////////////////////
/* Thermostat icon Functions */
void ui_thermostat_init(ui_thermostat_t *menu)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    menu->win.main.x = 157;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	229d      	movs	r2, #157	; 0x9d
 800240c:	801a      	strh	r2, [r3, #0]
    menu->win.main.y = 11;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	220b      	movs	r2, #11
 8002412:	805a      	strh	r2, [r3, #2]
    menu->win.main.w = 104;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2268      	movs	r2, #104	; 0x68
 8002418:	809a      	strh	r2, [r3, #4]
    menu->win.main.h = 81;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2251      	movs	r2, #81	; 0x51
 800241e:	80da      	strh	r2, [r3, #6]

    menu->icon.therm.ptr = thermostat;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a1e      	ldr	r2, [pc, #120]	; (800249c <ui_thermostat_init+0x9c>)
 8002424:	60da      	str	r2, [r3, #12]
    menu->icon.therm.x = menu->win.main.x + 1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	811a      	strh	r2, [r3, #8]
    menu->icon.therm.y = menu->win.main.y + 4;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	885b      	ldrh	r3, [r3, #2]
 8002436:	3304      	adds	r3, #4
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	815a      	strh	r2, [r3, #10]
    
    menu->shape.temp.x = menu->win.main.x + 13;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	330d      	adds	r3, #13
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	831a      	strh	r2, [r3, #24]
    menu->shape.temp.y = menu->win.main.y + 11;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	885b      	ldrh	r3, [r3, #2]
 800244e:	330b      	adds	r3, #11
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	835a      	strh	r2, [r3, #26]
    menu->shape.temp.h = 49;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2231      	movs	r2, #49	; 0x31
 800245a:	83da      	strh	r2, [r3, #30]
    menu->shape.temp.w = 4;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2204      	movs	r2, #4
 8002460:	839a      	strh	r2, [r3, #28]

    menu->shape.circle.x = menu->win.main.x + 7;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	3307      	adds	r3, #7
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	841a      	strh	r2, [r3, #32]
    menu->shape.circle.y = menu->win.main.y + 52;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	885b      	ldrh	r3, [r3, #2]
 8002472:	3334      	adds	r3, #52	; 0x34
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	845a      	strh	r2, [r3, #34]	; 0x22

    menu->text.temp.x = menu->win.main.x + 38; 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	3326      	adds	r3, #38	; 0x26
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	821a      	strh	r2, [r3, #16]
    menu->text.temp.y = menu->win.main.y + 21;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	885b      	ldrh	r3, [r3, #2]
 800248a:	3315      	adds	r3, #21
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	825a      	strh	r2, [r3, #18]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	0800e3b0 	.word	0x0800e3b0

080024a0 <ui_thermostat_show>:

void ui_thermostat_show(ui_thermostat_t *menu, bool show)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
    if(show)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01b      	beq.n	80024ea <ui_thermostat_show+0x4a>
    {
        ui_draw_icon(&menu->icon.therm);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3308      	adds	r3, #8
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa35 	bl	8001926 <ui_draw_icon>
        ui_draw_window(&menu->shape.temp, LCD_DEFAULT_TEXTCOLOR, true);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3318      	adds	r3, #24
 80024c0:	2201      	movs	r2, #1
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f9e3 	bl	8001890 <ui_draw_window>
        ui_draw_circle(&menu->shape.circle, 8, LCD_DEFAULT_TEXTCOLOR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3320      	adds	r3, #32
 80024ce:	2200      	movs	r2, #0
 80024d0:	2108      	movs	r1, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fa38 	bl	8001948 <ui_draw_circle>
        ui_display_string(&menu->text.temp, "--C", &Font16, LCD_DEFAULT_TEXTCOLOR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0010 	add.w	r0, r3, #16
 80024de:	2300      	movs	r3, #0
 80024e0:	4a06      	ldr	r2, [pc, #24]	; (80024fc <ui_thermostat_show+0x5c>)
 80024e2:	4907      	ldr	r1, [pc, #28]	; (8002500 <ui_thermostat_show+0x60>)
 80024e4:	f7ff fa84 	bl	80019f0 <ui_display_string>
    else 
    {
        ui_clear_window(&menu->win.main);
    }

}
 80024e8:	e003      	b.n	80024f2 <ui_thermostat_show+0x52>
        ui_clear_window(&menu->win.main);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fa01 	bl	80018f4 <ui_clear_window>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000000 	.word	0x20000000
 8002500:	080086c8 	.word	0x080086c8

08002504 <ui_thermostat_set_config>:

void ui_thermostat_set_config(ui_thermostat_t *menu, ui_thermostat_config_t *config)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
    char str[7];
    uint16_t color = LCD_DEFAULT_TEXTCOLOR;
 800250e:	2300      	movs	r3, #0
 8002510:	82fb      	strh	r3, [r7, #22]

    if (config->select == UI_ITEM_SELECT)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	789b      	ldrb	r3, [r3, #2]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <ui_thermostat_set_config+0x1a>
        color = UI_SELECTION_COLOR;
 800251a:	231f      	movs	r3, #31
 800251c:	82fb      	strh	r3, [r7, #22]

    /*!< TODO: make the hight change with the temperature*/
    ui_draw_icon(&menu->icon.therm);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3308      	adds	r3, #8
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f9ff 	bl	8001926 <ui_draw_icon>
    ui_draw_window(&menu->shape.temp, color, true);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3318      	adds	r3, #24
 800252c:	8af9      	ldrh	r1, [r7, #22]
 800252e:	2201      	movs	r2, #1
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f9ad 	bl	8001890 <ui_draw_window>
    ui_fill_window(&menu->shape.temp, LCD_COLOR_BLUE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3318      	adds	r3, #24
 800253a:	211f      	movs	r1, #31
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fa3b 	bl	80019b8 <ui_fill_window>
    ui_draw_circle(&menu->shape.circle, 8, LCD_DEFAULT_TEXTCOLOR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3320      	adds	r3, #32
 8002546:	2200      	movs	r2, #0
 8002548:	2108      	movs	r1, #8
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f9fc 	bl	8001948 <ui_draw_circle>
    ui_fill_circle(&menu->shape.circle, 7, LCD_DEFAULT_TEXTCOLOR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3320      	adds	r3, #32
 8002554:	2200      	movs	r2, #0
 8002556:	2107      	movs	r1, #7
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fa11 	bl	8001980 <ui_fill_circle>
    sprintf(str, "%d%s", config->temp.val, c_f_str[config->temp.unit]);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	461a      	mov	r2, r3
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <ui_thermostat_set_config+0x94>)
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	f107 000c 	add.w	r0, r7, #12
 8002574:	460a      	mov	r2, r1
 8002576:	4909      	ldr	r1, [pc, #36]	; (800259c <ui_thermostat_set_config+0x98>)
 8002578:	f005 f92c 	bl	80077d4 <siprintf>
    ui_display_string(&menu->text.temp, str, &Font16, LCD_DEFAULT_TEXTCOLOR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0010 	add.w	r0, r3, #16
 8002582:	f107 010c 	add.w	r1, r7, #12
 8002586:	2300      	movs	r3, #0
 8002588:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <ui_thermostat_set_config+0x9c>)
 800258a:	f7ff fa31 	bl	80019f0 <ui_display_string>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000004c 	.word	0x2000004c
 800259c:	080086cc 	.word	0x080086cc
 80025a0:	20000000 	.word	0x20000000

080025a4 <ui_petcall_init>:


//////////////////////////////////// Date Time Config Menu Related Functions ///////////////////////////////////////

void ui_petcall_init(ui_petcall_t *menu)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    menu->win.main.x = 165;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	22a5      	movs	r2, #165	; 0xa5
 80025b0:	801a      	strh	r2, [r3, #0]
    menu->win.main.y = 12;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	220c      	movs	r2, #12
 80025b6:	805a      	strh	r2, [r3, #2]
    menu->win.main.w = 64;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	809a      	strh	r2, [r3, #4]
    menu->win.main.h = 81;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2251      	movs	r2, #81	; 0x51
 80025c2:	80da      	strh	r2, [r3, #6]

    //commented line to save flash memory
    menu->icon.mic.ptr = thermostat;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <ui_petcall_init+0x48>)
 80025c8:	60da      	str	r2, [r3, #12]
    // menu->icon.mic.ptr = &recording_icon;
    menu->icon.mic.x = menu->win.main.x + 1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	811a      	strh	r2, [r3, #8]
    menu->icon.mic.y = menu->win.main.y + 9; 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	885b      	ldrh	r3, [r3, #2]
 80025da:	3309      	adds	r3, #9
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	815a      	strh	r2, [r3, #10]

}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	0800e3b0 	.word	0x0800e3b0

080025f0 <ui_petcall_show>:

void ui_petcall_show(ui_petcall_t *menu, bool show)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
    if(show)
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <ui_petcall_show+0x2a>
    {
        ui_draw_window(&menu->win.main, LCD_DEFAULT_TEXTCOLOR, true);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f941 	bl	8001890 <ui_draw_window>
        ui_draw_icon(&menu->icon.mic);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3308      	adds	r3, #8
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f987 	bl	8001926 <ui_draw_icon>
    else
    {
        ui_clear_window(&menu->win.main);
    }

}
 8002618:	e003      	b.n	8002622 <ui_petcall_show+0x32>
        ui_clear_window(&menu->win.main);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f969 	bl	80018f4 <ui_clear_window>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <ui_petcall_set_config>:

void ui_petcall_set_config(ui_petcall_t *menu, ui_petcall_config_t *config)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
    uint16_t win_color = LCD_DEFAULT_BACKCOLOR;
 8002634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002638:	81fb      	strh	r3, [r7, #14]

    if (config->select == UI_ITEM_SELECT)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	785b      	ldrb	r3, [r3, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <ui_petcall_set_config+0x1c>
    {
        win_color = UI_SELECTION_COLOR;
 8002642:	231f      	movs	r3, #31
 8002644:	81fb      	strh	r3, [r7, #14]
    }
    ui_draw_window(&menu->win.main, win_color, true);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	89f9      	ldrh	r1, [r7, #14]
 800264a:	2201      	movs	r2, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff f91f 	bl	8001890 <ui_draw_window>
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <ui_fsm_get>:
static void main_menu_enter_pressed(ui_handle_t handle);

////////////////////////////// Public function declaration //////////////////////////////////////

ui_handle_t ui_fsm_get(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
    return &ui_fsm;
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <ui_fsm_get+0x10>)
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200004d8 	.word	0x200004d8

08002670 <ui_fsm_init>:

void ui_fsm_init(ui_handle_t handle)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	enter_seq_main_menu(handle);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f86c 	bl	8002756 <enter_seq_main_menu>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <ui_fsm_run>:

void ui_fsm_run(ui_handle_t handle)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	3b01      	subs	r3, #1
 8002696:	2b05      	cmp	r3, #5
 8002698:	d816      	bhi.n	80026c8 <ui_fsm_run+0x40>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <ui_fsm_run+0x18>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026b9 	.word	0x080026b9
 80026a4:	080026c9 	.word	0x080026c9
 80026a8:	080026c9 	.word	0x080026c9
 80026ac:	080026c9 	.word	0x080026c9
 80026b0:	080026c9 	.word	0x080026c9
 80026b4:	080026c1 	.word	0x080026c1
    {
        case ST_UI_MAIN_MENU:          main_menu_on_react(handle); break;
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f8a1 	bl	8002800 <main_menu_on_react>
 80026be:	e004      	b.n	80026ca <ui_fsm_run+0x42>
        case ST_UI_DATE_TIME_CONFIG:   break;
        case ST_UI_PETCALL_CONFIG:     break;
        case ST_UI_FEEDER_CONFIG:      break;
        case ST_UI_DRAWER_ST_REQUEST:  drawer_request_on_react(handle); break;
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f987 	bl	80029d4 <drawer_request_on_react>
 80026c6:	e000      	b.n	80026ca <ui_fsm_run+0x42>
    default:
        break;
 80026c8:	bf00      	nop
    }

}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop

080026d4 <fsm_set_next_state>:

static void fsm_set_next_state(ui_handle_t handle, ui_state_t next_st)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
    handle->state = next_st;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	701a      	strb	r2, [r3, #0]
    handle->event.btn = EVT_EXT_BTN_INVALID;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	709a      	strb	r2, [r3, #2]
    handle->event.internal = EVT_INT_UI_INVALID;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	70da      	strb	r2, [r3, #3]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <ui_fsm_time_update>:

void ui_fsm_time_update(ui_handle_t handle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	time_event_t *time_event = (time_event_t *)&handle->event.time;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	e008      	b.n	8002722 <ui_fsm_time_update+0x26>
	{
		time_event_update(time_event);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7fe ff5a 	bl	80015ca <time_event_update>
		time_event++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3304      	adds	r3, #4
 800271a:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3301      	adds	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d9f3      	bls.n	8002710 <ui_fsm_time_update+0x14>
	}
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <ui_fsm_write_event>:

void ui_fsm_write_event(ui_handle_t handle, event_t *event)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
    if(event->info.fsm.src == BTN_FSM)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d103      	bne.n	800274c <ui_fsm_write_event+0x1a>
    {
        ui_fsm_dbg("btn event detected\r\n");
        handle->event.btn = event->info.name;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	709a      	strb	r2, [r3, #2]
    }
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <enter_seq_main_menu>:


/////////////////////////////////// Main Menu State  ///////////////////////////////////////////

static void enter_seq_main_menu(ui_handle_t handle)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ main menu ]");
    fsm_set_next_state(handle, ST_UI_MAIN_MENU);
 800275e:	2101      	movs	r1, #1
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffb7 	bl	80026d4 <fsm_set_next_state>
    entry_action_main_menu(handle);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f804 	bl	8002774 <entry_action_main_menu>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <entry_action_main_menu>:

static void entry_action_main_menu(ui_handle_t handle)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
    /*Initialize UI elements */
    ui_battery_init(&ui_battery);
 800277c:	481a      	ldr	r0, [pc, #104]	; (80027e8 <entry_action_main_menu+0x74>)
 800277e:	f7ff f95b 	bl	8001a38 <ui_battery_init>
    ui_drawers_init(&ui_drawers);
 8002782:	481a      	ldr	r0, [pc, #104]	; (80027ec <entry_action_main_menu+0x78>)
 8002784:	f7ff faa8 	bl	8001cd8 <ui_drawers_init>
    ui_thermostat_init(&ui_thermostat);
 8002788:	4819      	ldr	r0, [pc, #100]	; (80027f0 <entry_action_main_menu+0x7c>)
 800278a:	f7ff fe39 	bl	8002400 <ui_thermostat_init>
   ui_petcall_init(&ui_petcall);
 800278e:	4819      	ldr	r0, [pc, #100]	; (80027f4 <entry_action_main_menu+0x80>)
 8002790:	f7ff ff08 	bl	80025a4 <ui_petcall_init>
    ui_feeder_menu_init(&ui_feeder_menu);
 8002794:	4818      	ldr	r0, [pc, #96]	; (80027f8 <entry_action_main_menu+0x84>)
 8002796:	f7ff fbaf 	bl	8001ef8 <ui_feeder_menu_init>
    ui_date_time_init(&ui_date_time);
 800279a:	4818      	ldr	r0, [pc, #96]	; (80027fc <entry_action_main_menu+0x88>)
 800279c:	f7ff fd74 	bl	8002288 <ui_date_time_init>

    /*Show main menu elements */
    ui_battery_show(&ui_battery, true);
 80027a0:	2101      	movs	r1, #1
 80027a2:	4811      	ldr	r0, [pc, #68]	; (80027e8 <entry_action_main_menu+0x74>)
 80027a4:	f7ff f9b8 	bl	8001b18 <ui_battery_show>
    ui_drawers_show(&ui_drawers, true);
 80027a8:	2101      	movs	r1, #1
 80027aa:	4810      	ldr	r0, [pc, #64]	; (80027ec <entry_action_main_menu+0x78>)
 80027ac:	f7ff fac8 	bl	8001d40 <ui_drawers_show>
    ui_thermostat_show(&ui_thermostat, true);
 80027b0:	2101      	movs	r1, #1
 80027b2:	480f      	ldr	r0, [pc, #60]	; (80027f0 <entry_action_main_menu+0x7c>)
 80027b4:	f7ff fe74 	bl	80024a0 <ui_thermostat_show>
    ui_petcall_show(&ui_petcall, true);
 80027b8:	2101      	movs	r1, #1
 80027ba:	480e      	ldr	r0, [pc, #56]	; (80027f4 <entry_action_main_menu+0x80>)
 80027bc:	f7ff ff18 	bl	80025f0 <ui_petcall_show>
    ui_feeder_menu_show(&ui_feeder_menu, true);
 80027c0:	2101      	movs	r1, #1
 80027c2:	480d      	ldr	r0, [pc, #52]	; (80027f8 <entry_action_main_menu+0x84>)
 80027c4:	f7ff fce8 	bl	8002198 <ui_feeder_menu_show>

    /* Set cursor to first item */
    time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fec9 	bl	8001568 <time_event_start>
    time_event_stop(&handle->event.time.cursor_inact);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3308      	adds	r3, #8
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fed8 	bl	8001590 <time_event_stop>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000298 	.word	0x20000298
 80027ec:	200002c8 	.word	0x200002c8
 80027f0:	200002e0 	.word	0x200002e0
 80027f4:	20000308 	.word	0x20000308
 80027f8:	20000348 	.word	0x20000348
 80027fc:	20000318 	.word	0x20000318

08002800 <main_menu_on_react>:


static void main_menu_on_react(ui_handle_t handle)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    /*navigation key update item selection*/
	ui_drawers_config_t *drawer_cfg = &handle->iface.ui.drawers;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3318      	adds	r3, #24
 800280c:	60fb      	str	r3, [r7, #12]
    ui_main_menu_sel_item_t item = handle->iface.cursor.item;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002814:	72fb      	strb	r3, [r7, #11]

    switch (handle->event.btn)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	789b      	ldrb	r3, [r3, #2]
 800281a:	3b01      	subs	r3, #1
 800281c:	2b08      	cmp	r3, #8
 800281e:	d873      	bhi.n	8002908 <main_menu_on_react+0x108>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <main_menu_on_react+0x28>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002909 	.word	0x08002909
 800282c:	08002909 	.word	0x08002909
 8002830:	0800284d 	.word	0x0800284d
 8002834:	0800288b 	.word	0x0800288b
 8002838:	080028c9 	.word	0x080028c9
 800283c:	080028d1 	.word	0x080028d1
 8002840:	080028df 	.word	0x080028df
 8002844:	080028ed 	.word	0x080028ed
 8002848:	080028fb 	.word	0x080028fb
    case EVT_EXT_BTN_UP_PRESSED:    break;
    case EVT_EXT_BTN_DOWN_PRESSED:  break;

    case EVT_EXT_BTN_LEFT_PRESSED:
    {
        ui_update_item_selection(handle, UI_ITEM_DESELECT);
 800284c:	2101      	movs	r1, #1
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f968 	bl	8002b24 <ui_update_item_selection>
        handle->iface.cursor.item = (item++ % UI_MAIN_MENU_ITEMn);
 8002854:	7afa      	ldrb	r2, [r7, #11]
 8002856:	1c53      	adds	r3, r2, #1
 8002858:	72fb      	strb	r3, [r7, #11]
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <main_menu_on_react+0x160>)
 800285c:	fba3 1302 	umull	r1, r3, r3, r2
 8002860:	0899      	lsrs	r1, r3, #2
 8002862:	460b      	mov	r3, r1
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	b2da      	uxtb	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ui_update_item_selection(handle, UI_ITEM_SELECT);
 8002872:	2100      	movs	r1, #0
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f955 	bl	8002b24 <ui_update_item_selection>
        time_event_start(&handle->event.time.cursor_inact, CURSOR_INACTIVITY_MS);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3308      	adds	r3, #8
 800287e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fe70 	bl	8001568 <time_event_start>
    } break;
 8002888:	e03f      	b.n	800290a <main_menu_on_react+0x10a>
        
    case EVT_EXT_BTN_RIGHT_PRESSED: {

        ui_update_item_selection(handle, UI_ITEM_DESELECT);
 800288a:	2101      	movs	r1, #1
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f949 	bl	8002b24 <ui_update_item_selection>
        handle->iface.cursor.item = (item-- % UI_MAIN_MENU_ITEMn);
 8002892:	7afa      	ldrb	r2, [r7, #11]
 8002894:	1e53      	subs	r3, r2, #1
 8002896:	72fb      	strb	r3, [r7, #11]
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <main_menu_on_react+0x160>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	0899      	lsrs	r1, r3, #2
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ui_update_item_selection(handle, UI_ITEM_SELECT);
 80028b0:	2100      	movs	r1, #0
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f936 	bl	8002b24 <ui_update_item_selection>
        time_event_start(&handle->event.time.cursor_inact, CURSOR_INACTIVITY_MS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3308      	adds	r3, #8
 80028bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fe51 	bl	8001568 <time_event_start>
    } break;
 80028c6:	e020      	b.n	800290a <main_menu_on_react+0x10a>

    case EVT_EXT_BTN_ENTER_PRESSED: { main_menu_enter_pressed(handle); } break;
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f90f 	bl	8002aec <main_menu_enter_pressed>
 80028ce:	e01c      	b.n	800290a <main_menu_on_react+0x10a>
    case EVT_EXT_BTN_UP_AND_ENTER_PRESSED:   {drawer_cfg->drawer.no = DRAWER_NO_1; drawer_request_enter_seq(handle); } break;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	705a      	strb	r2, [r3, #1]
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f844 	bl	8002964 <drawer_request_enter_seq>
 80028dc:	e015      	b.n	800290a <main_menu_on_react+0x10a>
    case EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED: {drawer_cfg->drawer.no = DRAWER_NO_2; drawer_request_enter_seq(handle); } break;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	705a      	strb	r2, [r3, #1]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f83d 	bl	8002964 <drawer_request_enter_seq>
 80028ea:	e00e      	b.n	800290a <main_menu_on_react+0x10a>
    case EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED: {drawer_cfg->drawer.no = DRAWER_NO_3; drawer_request_enter_seq(handle); } break;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2202      	movs	r2, #2
 80028f0:	705a      	strb	r2, [r3, #1]
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f836 	bl	8002964 <drawer_request_enter_seq>
 80028f8:	e007      	b.n	800290a <main_menu_on_react+0x10a>
    case EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED:{drawer_cfg->drawer.no = DRAWER_NO_4; drawer_request_enter_seq(handle); } break;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2203      	movs	r2, #3
 80028fe:	705a      	strb	r2, [r3, #1]
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f82f 	bl	8002964 <drawer_request_enter_seq>
 8002906:	e000      	b.n	800290a <main_menu_on_react+0x10a>

    default:
        break;
 8002908:	bf00      	nop
    };

    /* update gui timer event */
    if(time_event_is_raised(&handle->event.time.update_gui) == true)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fe7c 	bl	800160c <time_event_is_raised>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <main_menu_on_react+0x12e>
    {
        time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fe20 	bl	8001568 <time_event_start>
        gui_update_battery(handle);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8b3 	bl	8002a94 <gui_update_battery>
    }

    /* item cursor timer event */
    if(time_event_is_raised(&handle->event.time.cursor_inact) == true)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3308      	adds	r3, #8
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fe6a 	bl	800160c <time_event_is_raised>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <main_menu_on_react+0x158>
    {
        ui_update_item_selection(handle, UI_ITEM_DESELECT);
 800293e:	2101      	movs	r1, #1
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8ef 	bl	8002b24 <ui_update_item_selection>
        time_event_stop(&handle->event.time.cursor_inact);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3308      	adds	r3, #8
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fe20 	bl	8001590 <time_event_stop>
        handle->iface.cursor.item = UI_MAIN_MENU_ITEM_BATTERY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2203      	movs	r2, #3
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	cccccccd 	.word	0xcccccccd

08002964 <drawer_request_enter_seq>:


/////////////////////////////////// Drawer Request State  ///////////////////////////////////////////
void drawer_request_enter_seq(ui_handle_t handle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ drawer request ]");
    fsm_set_next_state(handle, ST_UI_DRAWER_ST_REQUEST);
 800296c:	2106      	movs	r1, #6
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff feb0 	bl	80026d4 <fsm_set_next_state>
    entry_action_drawer_request(handle);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f805 	bl	8002984 <entry_action_drawer_request>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <entry_action_drawer_request>:

void entry_action_drawer_request(ui_handle_t handle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    /* Notify Drawer FSM */
    notify_manual_drawer_operation(handle);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f841 	bl	8002a14 <notify_manual_drawer_operation>

    /* Update UI Elements */
    ui_drawers_config_t *ui_config = &handle->iface.ui.drawers;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3318      	adds	r3, #24
 8002996:	60fb      	str	r3, [r7, #12]
    drawer_ctrl_info *info = drawer_fsm_get_info(ui_config->drawer.no);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fe7d 	bl	800169c <drawer_fsm_get_info>
 80029a2:	60b8      	str	r0, [r7, #8]
    ui_config->drawer.st = info->status.curr;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	785a      	ldrb	r2, [r3, #1]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	701a      	strb	r2, [r3, #0]
    ui_config->select.single = UI_ITEM_SELECT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	70da      	strb	r2, [r3, #3]
    ui_drawers_set_config(&ui_drawers, ui_config);
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	4806      	ldr	r0, [pc, #24]	; (80029d0 <entry_action_drawer_request+0x4c>)
 80029b6:	f7ff fa25 	bl	8001e04 <ui_drawers_set_config>

    time_event_start(&handle->event.time.dummy, 200);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	330c      	adds	r3, #12
 80029be:	21c8      	movs	r1, #200	; 0xc8
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fdd1 	bl	8001568 <time_event_start>
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200002c8 	.word	0x200002c8

080029d4 <drawer_request_on_react>:

void drawer_request_on_react(ui_handle_t handle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    // no required actions 
    if(time_event_is_raised(&handle->event.time.dummy) == true)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	330c      	adds	r3, #12
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fe13 	bl	800160c <time_event_is_raised>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00c      	beq.n	8002a06 <drawer_request_on_react+0x32>
    {
        ui_drawers_config_t *ui_config = &handle->iface.ui.drawers;;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3318      	adds	r3, #24
 80029f0:	60fb      	str	r3, [r7, #12]
        ui_config->select.single = UI_ITEM_DESELECT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	70da      	strb	r2, [r3, #3]
        ui_drawers_set_config(&ui_drawers, ui_config);
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <drawer_request_on_react+0x3c>)
 80029fc:	f7ff fa02 	bl	8001e04 <ui_drawers_set_config>
        enter_seq_main_menu(handle);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fea8 	bl	8002756 <enter_seq_main_menu>
    }
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200002c8 	.word	0x200002c8

08002a14 <notify_manual_drawer_operation>:


/////////////////////////////////// Drawing Functions  ///////////////////////////////////////////

static void notify_manual_drawer_operation(ui_handle_t handle)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b090      	sub	sp, #64	; 0x40
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    ui_drawers_config_t *drawer_cfg = &handle->iface.ui.drawers;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3318      	adds	r3, #24
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    drawer_ctrl_info *info = drawer_fsm_get_info(drawer_cfg->drawer.no);
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fe38 	bl	800169c <drawer_fsm_get_info>
 8002a2c:	63b8      	str	r0, [r7, #56]	; 0x38
    event_t event;

    event.info.name = EVT_EXT_DRW_INVALID;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	733b      	strb	r3, [r7, #12]
    event.info.fsm.src = UI_FSM;
 8002a32:	2300      	movs	r3, #0
 8002a34:	737b      	strb	r3, [r7, #13]
    event.info.fsm.dst = DRAWER_FSM;
 8002a36:	2302      	movs	r3, #2
 8002a38:	73bb      	strb	r3, [r7, #14]
    event.info.data_len = sizeof(drawer_ev_ext_data_t);
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
    ((drawer_ev_ext_data_t*)event.data.buff)->no = drawer_cfg->drawer.no;
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	3304      	adds	r3, #4
 8002a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a46:	7852      	ldrb	r2, [r2, #1]
 8002a48:	701a      	strb	r2, [r3, #0]

    if (info->status.curr == DRAWER_ST_CLOSE || info->status.curr == DRAWER_ST_CLOSING)
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d003      	beq.n	8002a5a <notify_manual_drawer_operation+0x46>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d102      	bne.n	8002a60 <notify_manual_drawer_operation+0x4c>
    {
        ui_fsm_dbg("manual opening to drawer no [%d]\r\n", handle->iface.drawer + 1);
        event.info.name = EVT_EXT_DRW_OPEN;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	733b      	strb	r3, [r7, #12]
 8002a5e:	e009      	b.n	8002a74 <notify_manual_drawer_operation+0x60>
    }

    else if (info->status.curr == DRAWER_ST_OPEN || info->status.curr == DRAWER_ST_OPENING)
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	785b      	ldrb	r3, [r3, #1]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d003      	beq.n	8002a70 <notify_manual_drawer_operation+0x5c>
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d101      	bne.n	8002a74 <notify_manual_drawer_operation+0x60>
    {
        ui_fsm_dbg("manual closing to drawer no [%d]\r\n", handle->iface.drawer + 1);
        event.info.name = EVT_EXT_DRW_CLOSE;
 8002a70:	2302      	movs	r3, #2
 8002a72:	733b      	strb	r3, [r7, #12]
    }

    if(event.info.name != EVT_EXT_DRW_INVALID)
 8002a74:	7b3b      	ldrb	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <notify_manual_drawer_operation+0x78>
    {
        event_manager_write(event_manager_fsm_get(), &event);
 8002a7a:	f7fe fe23 	bl	80016c4 <event_manager_fsm_get>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f7fe fef2 	bl	8001870 <event_manager_write>
    }
}
 8002a8c:	bf00      	nop
 8002a8e:	3740      	adds	r7, #64	; 0x40
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <gui_update_battery>:

static void gui_update_battery(ui_handle_t handle)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("update battery status \r\n");
    ui_battery_config_t *ui_config = &handle->iface.ui.battery;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	331c      	adds	r3, #28
 8002aa0:	60fb      	str	r3, [r7, #12]
    static uint8_t batt_dummy_val = 0;
    ui_config->select = UI_ITEM_DESELECT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	709a      	strb	r2, [r3, #2]
    ui_config->set    = BATT_ST_CHARGING;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
    ui_config->charge = (batt_dummy_val++ % 100);
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <gui_update_battery+0x4c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	b2d1      	uxtb	r1, r2
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <gui_update_battery+0x4c>)
 8002ab8:	7011      	strb	r1, [r2, #0]
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <gui_update_battery+0x50>)
 8002abc:	fba2 1203 	umull	r1, r2, r2, r3
 8002ac0:	0952      	lsrs	r2, r2, #5
 8002ac2:	2164      	movs	r1, #100	; 0x64
 8002ac4:	fb01 f202 	mul.w	r2, r1, r2
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	705a      	strb	r2, [r3, #1]
    ui_battery_set_config(&ui_battery, ui_config);
 8002ad0:	68f9      	ldr	r1, [r7, #12]
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <gui_update_battery+0x54>)
 8002ad4:	f7ff f8c2 	bl	8001c5c <ui_battery_set_config>
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000510 	.word	0x20000510
 8002ae4:	51eb851f 	.word	0x51eb851f
 8002ae8:	20000298 	.word	0x20000298

08002aec <main_menu_enter_pressed>:

static void main_menu_enter_pressed(ui_handle_t handle)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
    /* define enter sequence according item selected */
    switch (handle->iface.cursor.item)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d80c      	bhi.n	8002b18 <main_menu_enter_pressed+0x2c>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <main_menu_enter_pressed+0x18>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b19 	.word	0x08002b19
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b19 	.word	0x08002b19
 8002b10:	08002b19 	.word	0x08002b19
 8002b14:	08002b19 	.word	0x08002b19
    case UI_MAIN_MENU_ITEM_THERMOSTAT: {  /*enter_sequence_thermostat_menu() */ } break;
    case UI_MAIN_MENU_ITEM_PETCALL:    {  /*enter_sequence_petcall_menu() */    } break;
    case UI_MAIN_MENU_ITEM_BATTERY:    {  /*enter_sequence_battery_menu() */    } break;
    case UI_MAIN_MENU_ITEM_TIME_DATE:  {  /*enter_sequence_time_date_menu() */  } break;
    default:
        break;
 8002b18:	bf00      	nop
    }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <ui_update_item_selection>:

static void ui_update_item_selection(ui_handle_t handle, ui_select_t select)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
    switch (handle->iface.cursor.item)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d843      	bhi.n	8002bc2 <ui_update_item_selection+0x9e>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <ui_update_item_selection+0x1c>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b55 	.word	0x08002b55
 8002b44:	08002b6b 	.word	0x08002b6b
 8002b48:	08002b81 	.word	0x08002b81
 8002b4c:	08002b97 	.word	0x08002b97
 8002b50:	08002bad 	.word	0x08002bad
    {
    case UI_MAIN_MENU_ITEM_DRAWERS:
    {
        ui_drawers_config_t *config;
        config = &handle->iface.ui.drawers;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3318      	adds	r3, #24
 8002b58:	60fb      	str	r3, [r7, #12]
        config->select.main = select;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	709a      	strb	r2, [r3, #2]
        ui_drawers_set_config(&ui_drawers, config);
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	481a      	ldr	r0, [pc, #104]	; (8002bcc <ui_update_item_selection+0xa8>)
 8002b64:	f7ff f94e 	bl	8001e04 <ui_drawers_set_config>
    }
    break;
 8002b68:	e02c      	b.n	8002bc4 <ui_update_item_selection+0xa0>

    case UI_MAIN_MENU_ITEM_THERMOSTAT:
    {
        ui_thermostat_config_t *config;
        config = &handle->iface.ui.therm;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3321      	adds	r3, #33	; 0x21
 8002b6e:	613b      	str	r3, [r7, #16]
        config->select = select;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	709a      	strb	r2, [r3, #2]
        ui_thermostat_set_config(&ui_thermostat, config);
 8002b76:	6939      	ldr	r1, [r7, #16]
 8002b78:	4815      	ldr	r0, [pc, #84]	; (8002bd0 <ui_update_item_selection+0xac>)
 8002b7a:	f7ff fcc3 	bl	8002504 <ui_thermostat_set_config>
    }
    break;
 8002b7e:	e021      	b.n	8002bc4 <ui_update_item_selection+0xa0>

    case UI_MAIN_MENU_ITEM_PETCALL:
    {
        ui_petcall_config_t *config;
        config = &handle->iface.ui.petcall;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	331f      	adds	r3, #31
 8002b84:	617b      	str	r3, [r7, #20]
        config->select = select;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	705a      	strb	r2, [r3, #1]
        ui_petcall_set_config(&ui_petcall, config);
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	4811      	ldr	r0, [pc, #68]	; (8002bd4 <ui_update_item_selection+0xb0>)
 8002b90:	f7ff fd4b 	bl	800262a <ui_petcall_set_config>
    }
    break;
 8002b94:	e016      	b.n	8002bc4 <ui_update_item_selection+0xa0>

    case UI_MAIN_MENU_ITEM_BATTERY:
    {
        ui_battery_config_t *config;
        config = &handle->iface.ui.battery;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	331c      	adds	r3, #28
 8002b9a:	61bb      	str	r3, [r7, #24]
        config->select = select;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	709a      	strb	r2, [r3, #2]
        ui_battery_set_config(&ui_battery, config);
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <ui_update_item_selection+0xb4>)
 8002ba6:	f7ff f859 	bl	8001c5c <ui_battery_set_config>
    }
    break;
 8002baa:	e00b      	b.n	8002bc4 <ui_update_item_selection+0xa0>

    case UI_MAIN_MENU_ITEM_TIME_DATE:
    {
        ui_date_time_config_t *config;
        config = &handle->iface.ui.dt_menu;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	332a      	adds	r3, #42	; 0x2a
 8002bb0:	61fb      	str	r3, [r7, #28]
        config->select = select;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	711a      	strb	r2, [r3, #4]
        ui_date_time_set_config(&ui_date_time, config);
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	4808      	ldr	r0, [pc, #32]	; (8002bdc <ui_update_item_selection+0xb8>)
 8002bbc:	f7ff fbac 	bl	8002318 <ui_date_time_set_config>
    }
    break;
 8002bc0:	e000      	b.n	8002bc4 <ui_update_item_selection+0xa0>

    default:
        break;
 8002bc2:	bf00      	nop
    }
}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200002c8 	.word	0x200002c8
 8002bd0:	200002e0 	.word	0x200002e0
 8002bd4:	20000308 	.word	0x20000308
 8002bd8:	20000298 	.word	0x20000298
 8002bdc:	20000318 	.word	0x20000318

08002be0 <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d034      	beq.n	8002c5a <HAL_GPIO_EXTI_Callback+0x7a>
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	dc40      	bgt.n	8002c76 <HAL_GPIO_EXTI_Callback+0x96>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d022      	beq.n	8002c3e <HAL_GPIO_EXTI_Callback+0x5e>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	dc3c      	bgt.n	8002c76 <HAL_GPIO_EXTI_Callback+0x96>
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <HAL_GPIO_EXTI_Callback+0x26>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d00e      	beq.n	8002c22 <HAL_GPIO_EXTI_Callback+0x42>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
    }
    break;

    default:
        break;
 8002c04:	e037      	b.n	8002c76 <HAL_GPIO_EXTI_Callback+0x96>
        if (!time_event_is_active(&navigation_btn.enter.debounce))
 8002c06:	4822      	ldr	r0, [pc, #136]	; (8002c90 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002c08:	f7fe fcd4 	bl	80015b4 <time_event_is_active>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d030      	beq.n	8002c7a <HAL_GPIO_EXTI_Callback+0x9a>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 8002c18:	2132      	movs	r1, #50	; 0x32
 8002c1a:	481d      	ldr	r0, [pc, #116]	; (8002c90 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002c1c:	f7fe fca4 	bl	8001568 <time_event_start>
    break;
 8002c20:	e02b      	b.n	8002c7a <HAL_GPIO_EXTI_Callback+0x9a>
        if (!time_event_is_active(&navigation_btn.up.debounce))
 8002c22:	481c      	ldr	r0, [pc, #112]	; (8002c94 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002c24:	f7fe fcc6 	bl	80015b4 <time_event_is_active>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f083 0301 	eor.w	r3, r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d024      	beq.n	8002c7e <HAL_GPIO_EXTI_Callback+0x9e>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8002c34:	2132      	movs	r1, #50	; 0x32
 8002c36:	4817      	ldr	r0, [pc, #92]	; (8002c94 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002c38:	f7fe fc96 	bl	8001568 <time_event_start>
    break;
 8002c3c:	e01f      	b.n	8002c7e <HAL_GPIO_EXTI_Callback+0x9e>
        if (!time_event_is_active(&navigation_btn.left.debounce))
 8002c3e:	4816      	ldr	r0, [pc, #88]	; (8002c98 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002c40:	f7fe fcb8 	bl	80015b4 <time_event_is_active>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d018      	beq.n	8002c82 <HAL_GPIO_EXTI_Callback+0xa2>
            time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 8002c50:	2132      	movs	r1, #50	; 0x32
 8002c52:	4811      	ldr	r0, [pc, #68]	; (8002c98 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002c54:	f7fe fc88 	bl	8001568 <time_event_start>
    break;
 8002c58:	e013      	b.n	8002c82 <HAL_GPIO_EXTI_Callback+0xa2>
        if (!time_event_is_active(&navigation_btn.right.debounce))
 8002c5a:	4810      	ldr	r0, [pc, #64]	; (8002c9c <HAL_GPIO_EXTI_Callback+0xbc>)
 8002c5c:	f7fe fcaa 	bl	80015b4 <time_event_is_active>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f083 0301 	eor.w	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <HAL_GPIO_EXTI_Callback+0xa6>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 8002c6c:	2132      	movs	r1, #50	; 0x32
 8002c6e:	480b      	ldr	r0, [pc, #44]	; (8002c9c <HAL_GPIO_EXTI_Callback+0xbc>)
 8002c70:	f7fe fc7a 	bl	8001568 <time_event_start>
    break;
 8002c74:	e007      	b.n	8002c86 <HAL_GPIO_EXTI_Callback+0xa6>
        break;
 8002c76:	bf00      	nop
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002c7a:	bf00      	nop
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002c86:	bf00      	nop
    }

}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000018c 	.word	0x2000018c
 8002c94:	2000014c 	.word	0x2000014c
 8002c98:	2000016c 	.word	0x2000016c
 8002c9c:	2000017c 	.word	0x2000017c

08002ca0 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f003 f917 	bl	8005ed8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}

08002cae <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 8002cb2:	2010      	movs	r0, #16
 8002cb4:	f003 f910 	bl	8005ed8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5)
 8002cc0:	2020      	movs	r0, #32
 8002cc2:	f003 f909 	bl	8005ed8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 8002cc6:	2080      	movs	r0, #128	; 0x80
 8002cc8:	f003 f906 	bl	8005ed8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b094      	sub	sp, #80	; 0x50
 8002cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cda:	2228      	movs	r2, #40	; 0x28
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 f908 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d00:	2301      	movs	r3, #1
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d12:	2302      	movs	r3, #2
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fa32 	bl	8006190 <HAL_RCC_OscConfig>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <SystemClock_Config+0x66>
  {
	Error_Handler();
 8002d32:	f000 fa61 	bl	80031f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d36:	230f      	movs	r3, #15
 8002d38:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2102      	movs	r1, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fc9e 	bl	8006694 <HAL_RCC_ClockConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x92>
  {
	Error_Handler();
 8002d5e:	f000 fa4b 	bl	80031f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d62:	2302      	movs	r3, #2
 8002d64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fe14 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <SystemClock_Config+0xae>
  {
	Error_Handler();
 8002d7a:	f000 fa3d 	bl	80031f8 <Error_Handler>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3750      	adds	r7, #80	; 0x50
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <MX_ADC1_Init+0x78>)
 8002d9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002db2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002db6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002dc4:	480d      	ldr	r0, [pc, #52]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002dc6:	f002 fb59 	bl	800547c <HAL_ADC_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002dd0:	f000 fa12 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 8002dd4:	230a      	movs	r3, #10
 8002dd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_ADC1_Init+0x74>)
 8002de6:	f002 fc21 	bl	800562c <HAL_ADC_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002df0:	f000 fa02 	bl	80031f8 <Error_Handler>
  }
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000514 	.word	0x20000514
 8002e00:	40012400 	.word	0x40012400

08002e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <MX_I2C1_Init+0x54>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e10:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <MX_I2C1_Init+0x58>)
 8002e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e40:	4804      	ldr	r0, [pc, #16]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e42:	f003 f861 	bl	8005f08 <HAL_I2C_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e4c:	f000 f9d4 	bl	80031f8 <Error_Handler>
  }
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000544 	.word	0x20000544
 8002e58:	40005400 	.word	0x40005400
 8002e5c:	000186a0 	.word	0x000186a0

08002e60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <MX_SPI2_Init+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002eac:	220a      	movs	r2, #10
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002eb0:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <MX_SPI2_Init+0x64>)
 8002eb2:	f003 fe29 	bl	8006b08 <HAL_SPI_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ebc:	f000 f99c 	bl	80031f8 <Error_Handler>
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000598 	.word	0x20000598
 8002ec8:	40003800 	.word	0x40003800

08002ecc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <MX_TIM1_Init+0x74>)
 8002ede:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8002f06:	2108      	movs	r1, #8
 8002f08:	480c      	ldr	r0, [pc, #48]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002f0a:	f003 fe81 	bl	8006c10 <HAL_TIM_OnePulse_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8002f14:	f000 f970 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f20:	463b      	mov	r3, r7
 8002f22:	4619      	mov	r1, r3
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <MX_TIM1_Init+0x70>)
 8002f26:	f003 ff25 	bl	8006d74 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002f30:	f000 f962 	bl	80031f8 <Error_Handler>
  }


}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000678 	.word	0x20000678
 8002f40:	40012c00 	.word	0x40012c00

08002f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <MX_DMA_Init+0x48>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <MX_DMA_Init+0x48>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6153      	str	r3, [r2, #20]
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <MX_DMA_Init+0x48>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	200e      	movs	r0, #14
 8002f68:	f002 fd71 	bl	8005a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f6c:	200e      	movs	r0, #14
 8002f6e:	f002 fd8a 	bl	8005a86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2100      	movs	r1, #0
 8002f76:	200f      	movs	r0, #15
 8002f78:	f002 fd69 	bl	8005a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f7c:	200f      	movs	r0, #15
 8002f7e:	f002 fd82 	bl	8005a86 <HAL_NVIC_EnableIRQ>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f96:	f107 0310 	add.w	r3, r7, #16
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa4:	4b6e      	ldr	r3, [pc, #440]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a6d      	ldr	r2, [pc, #436]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002faa:	f043 0310 	orr.w	r3, r3, #16
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b6b      	ldr	r3, [pc, #428]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4a67      	ldr	r2, [pc, #412]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fc2:	f043 0320 	orr.w	r3, r3, #32
 8002fc6:	6193      	str	r3, [r2, #24]
 8002fc8:	4b65      	ldr	r3, [pc, #404]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	4b62      	ldr	r3, [pc, #392]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4a61      	ldr	r2, [pc, #388]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	6193      	str	r3, [r2, #24]
 8002fe0:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b59      	ldr	r3, [pc, #356]	; (8003160 <MX_GPIO_Init+0x1d0>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	2102      	movs	r1, #2
 8003008:	4856      	ldr	r0, [pc, #344]	; (8003164 <MX_GPIO_Init+0x1d4>)
 800300a:	f002 ff4c 	bl	8005ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 800300e:	2200      	movs	r2, #0
 8003010:	f640 715f 	movw	r1, #3935	; 0xf5f
 8003014:	4854      	ldr	r0, [pc, #336]	; (8003168 <MX_GPIO_Init+0x1d8>)
 8003016:	f002 ff46 	bl	8005ea6 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800301a:	2200      	movs	r2, #0
 800301c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003020:	4852      	ldr	r0, [pc, #328]	; (800316c <MX_GPIO_Init+0x1dc>)
 8003022:	f002 ff40 	bl	8005ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8003026:	2302      	movs	r3, #2
 8003028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	2301      	movs	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2302      	movs	r3, #2
 8003034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 0310 	add.w	r3, r7, #16
 800303a:	4619      	mov	r1, r3
 800303c:	4849      	ldr	r0, [pc, #292]	; (8003164 <MX_GPIO_Init+0x1d4>)
 800303e:	f002 fd97 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 8003042:	f241 338c 	movw	r3, #5004	; 0x138c
 8003046:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003050:	f107 0310 	add.w	r3, r7, #16
 8003054:	4619      	mov	r1, r3
 8003056:	4843      	ldr	r0, [pc, #268]	; (8003164 <MX_GPIO_Init+0x1d4>)
 8003058:	f002 fd8a 	bl	8005b70 <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 800305c:	f640 735f 	movw	r3, #3935	; 0xf5f
 8003060:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003062:	2301      	movs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	2302      	movs	r3, #2
 800306c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0310 	add.w	r3, r7, #16
 8003072:	4619      	mov	r1, r3
 8003074:	483c      	ldr	r0, [pc, #240]	; (8003168 <MX_GPIO_Init+0x1d8>)
 8003076:	f002 fd7b 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 800307a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4619      	mov	r1, r3
 800308e:	4836      	ldr	r0, [pc, #216]	; (8003168 <MX_GPIO_Init+0x1d8>)
 8003090:	f002 fd6e 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8003094:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2302      	movs	r3, #2
 80030a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 0310 	add.w	r3, r7, #16
 80030aa:	4619      	mov	r1, r3
 80030ac:	482f      	ldr	r0, [pc, #188]	; (800316c <MX_GPIO_Init+0x1dc>)
 80030ae:	f002 fd5f 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 80030b2:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80030b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <MX_GPIO_Init+0x1e0>)
 80030ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c0:	f107 0310 	add.w	r3, r7, #16
 80030c4:	4619      	mov	r1, r3
 80030c6:	4827      	ldr	r0, [pc, #156]	; (8003164 <MX_GPIO_Init+0x1d4>)
 80030c8:	f002 fd52 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 80030cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030d2:	4b27      	ldr	r3, [pc, #156]	; (8003170 <MX_GPIO_Init+0x1e0>)
 80030d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 80030da:	f107 0310 	add.w	r3, r7, #16
 80030de:	4619      	mov	r1, r3
 80030e0:	4821      	ldr	r0, [pc, #132]	; (8003168 <MX_GPIO_Init+0x1d8>)
 80030e2:	f002 fd45 	bl	8005b70 <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 80030e6:	2330      	movs	r3, #48	; 0x30
 80030e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <MX_GPIO_Init+0x1e4>)
 80030ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	4619      	mov	r1, r3
 80030f8:	481a      	ldr	r0, [pc, #104]	; (8003164 <MX_GPIO_Init+0x1d4>)
 80030fa:	f002 fd39 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin =  DOWN_Pin;
 80030fe:	2320      	movs	r3, #32
 8003100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	4619      	mov	r1, r3
 8003110:	4814      	ldr	r0, [pc, #80]	; (8003164 <MX_GPIO_Init+0x1d4>)
 8003112:	f002 fd2d 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8003116:	23a0      	movs	r3, #160	; 0xa0
 8003118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <MX_GPIO_Init+0x1e4>)
 800311c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4619      	mov	r1, r3
 8003128:	480f      	ldr	r0, [pc, #60]	; (8003168 <MX_GPIO_Init+0x1d8>)
 800312a:	f002 fd21 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 800312e:	2301      	movs	r3, #1
 8003130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <MX_GPIO_Init+0x1e4>)
 8003134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4619      	mov	r1, r3
 8003140:	480a      	ldr	r0, [pc, #40]	; (800316c <MX_GPIO_Init+0x1dc>)
 8003142:	f002 fd15 	bl	8005b70 <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 8003146:	2006      	movs	r0, #6
 8003148:	f002 fc9d 	bl	8005a86 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, right -> A7
 800314c:	2017      	movs	r0, #23
 800314e:	f002 fc9a 	bl	8005a86 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 8003152:	200a      	movs	r0, #10
 8003154:	f002 fc97 	bl	8005a86 <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	40011000 	.word	0x40011000
 8003168:	40010800 	.word	0x40010800
 800316c:	40010c00 	.word	0x40010c00
 8003170:	10110000 	.word	0x10110000
 8003174:	10210000 	.word	0x10210000

08003178 <init_peripherals>:

void init_peripherals(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800317c:	f002 f8f8 	bl	8005370 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003180:	f7ff fda6 	bl	8002cd0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003184:	f7ff ff04 	bl	8002f90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003188:	f7ff fdfe 	bl	8002d88 <MX_ADC1_Init>
  MX_SPI2_Init();
 800318c:	f7ff fe68 	bl	8002e60 <MX_SPI2_Init>
  MX_DMA_Init();
 8003190:	f7ff fed8 	bl	8002f44 <MX_DMA_Init>
  MX_TIM1_Init();
 8003194:	f7ff fe9a 	bl	8002ecc <MX_TIM1_Init>
  MX_I2C1_Init();
 8003198:	f7ff fe34 	bl	8002e04 <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 800319c:	f7fd ff42 	bl	8001024 <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 80031a0:	f000 fe7c 	bl	8003e9c <BSP_LCD_Init>
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  init_peripherals();
 80031ae:	f7ff ffe3 	bl	8003178 <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 80031b2:	480e      	ldr	r0, [pc, #56]	; (80031ec <main+0x44>)
 80031b4:	f7fd fc0e 	bl	80009d4 <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 80031b8:	f7fe fa84 	bl	80016c4 <event_manager_fsm_get>
 80031bc:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fab2 	bl	8001728 <event_manager_fsm_init>

  /*Init UI */
  ui_handle_t ui_fsm = ui_fsm_get();
 80031c4:	f7ff fa4a 	bl	800265c <ui_fsm_get>
 80031c8:	6038      	str	r0, [r7, #0]
  ui_fsm_init(ui_fsm);
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	f7ff fa50 	bl	8002670 <ui_fsm_init>

  printf("Pet Feeder V%s\r\n", FW_VERSION);
 80031d0:	4907      	ldr	r1, [pc, #28]	; (80031f0 <main+0x48>)
 80031d2:	4808      	ldr	r0, [pc, #32]	; (80031f4 <main+0x4c>)
 80031d4:	f004 fa60 	bl	8007698 <iprintf>

  /* Infinite loop */
  while (1)
  {
    ui_fsm_run(ui_fsm);
 80031d8:	6838      	ldr	r0, [r7, #0]
 80031da:	f7ff fa55 	bl	8002688 <ui_fsm_run>
    event_manager_fsm_run(evm_fsm);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe fa8b 	bl	80016fa <event_manager_fsm_run>
    time_events_poll_update();
 80031e4:	f7fe fa42 	bl	800166c <time_events_poll_update>
    ui_fsm_run(ui_fsm);
 80031e8:	e7f6      	b.n	80031d8 <main+0x30>
 80031ea:	bf00      	nop
 80031ec:	20000144 	.word	0x20000144
 80031f0:	0800874c 	.word	0x0800874c
 80031f4:	0800875c 	.word	0x0800875c

080031f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031fc:	b672      	cpsid	i
}
 80031fe:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003200:	e7fe      	b.n	8003200 <Error_Handler+0x8>
	...

08003204 <HAL_MspInit>:
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_MspInit+0x5c>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_MspInit+0x5c>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6193      	str	r3, [r2, #24]
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_MspInit+0x5c>)
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_MspInit+0x5c>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_MspInit+0x5c>)
 8003228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322c:	61d3      	str	r3, [r2, #28]
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_MspInit+0x5c>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_MspInit+0x60>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	4a04      	ldr	r2, [pc, #16]	; (8003264 <HAL_MspInit+0x60>)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6053      	str	r3, [r2, #4]
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40021000 	.word	0x40021000
 8003264:	40010000 	.word	0x40010000

08003268 <HAL_ADC_MspInit>:
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_ADC_MspInit+0x6c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d121      	bne.n	80032cc <HAL_ADC_MspInit+0x64>
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <HAL_ADC_MspInit+0x70>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <HAL_ADC_MspInit+0x70>)
 800328e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003292:	6193      	str	r3, [r2, #24]
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_ADC_MspInit+0x70>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_ADC_MspInit+0x70>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <HAL_ADC_MspInit+0x70>)
 80032a6:	f043 0310 	orr.w	r3, r3, #16
 80032aa:	6193      	str	r3, [r2, #24]
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_ADC_MspInit+0x70>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	2303      	movs	r3, #3
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	f107 0310 	add.w	r3, r7, #16
 80032c4:	4619      	mov	r1, r3
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <HAL_ADC_MspInit+0x74>)
 80032c8:	f002 fc52 	bl	8005b70 <HAL_GPIO_Init>
 80032cc:	bf00      	nop
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40012400 	.word	0x40012400
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40011000 	.word	0x40011000

080032e0 <HAL_I2C_MspInit>:
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	f107 0310 	add.w	r3, r7, #16
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <HAL_I2C_MspInit+0x70>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d123      	bne.n	8003348 <HAL_I2C_MspInit+0x68>
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_I2C_MspInit+0x74>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	4a13      	ldr	r2, [pc, #76]	; (8003354 <HAL_I2C_MspInit+0x74>)
 8003306:	f043 0308 	orr.w	r3, r3, #8
 800330a:	6193      	str	r3, [r2, #24]
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_I2C_MspInit+0x74>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	23c0      	movs	r3, #192	; 0xc0
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	2312      	movs	r3, #18
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	2303      	movs	r3, #3
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	4619      	mov	r1, r3
 800332a:	480b      	ldr	r0, [pc, #44]	; (8003358 <HAL_I2C_MspInit+0x78>)
 800332c:	f002 fc20 	bl	8005b70 <HAL_GPIO_Init>
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_I2C_MspInit+0x74>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_I2C_MspInit+0x74>)
 8003336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800333a:	61d3      	str	r3, [r2, #28]
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_I2C_MspInit+0x74>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	bf00      	nop
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40005400 	.word	0x40005400
 8003354:	40021000 	.word	0x40021000
 8003358:	40010c00 	.word	0x40010c00

0800335c <HAL_SPI_MspInit>:
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	f107 0310 	add.w	r3, r7, #16
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a42      	ldr	r2, [pc, #264]	; (8003480 <HAL_SPI_MspInit+0x124>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d17d      	bne.n	8003478 <HAL_SPI_MspInit+0x11c>
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_SPI_MspInit+0x128>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4a40      	ldr	r2, [pc, #256]	; (8003484 <HAL_SPI_MspInit+0x128>)
 8003382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003386:	61d3      	str	r3, [r2, #28]
 8003388:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <HAL_SPI_MspInit+0x128>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <HAL_SPI_MspInit+0x128>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <HAL_SPI_MspInit+0x128>)
 800339a:	f043 0308 	orr.w	r3, r3, #8
 800339e:	6193      	str	r3, [r2, #24]
 80033a0:	4b38      	ldr	r3, [pc, #224]	; (8003484 <HAL_SPI_MspInit+0x128>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	2302      	movs	r3, #2
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	2303      	movs	r3, #3
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	f107 0310 	add.w	r3, r7, #16
 80033be:	4619      	mov	r1, r3
 80033c0:	4831      	ldr	r0, [pc, #196]	; (8003488 <HAL_SPI_MspInit+0x12c>)
 80033c2:	f002 fbd5 	bl	8005b70 <HAL_GPIO_Init>
 80033c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	4619      	mov	r1, r3
 80033da:	482b      	ldr	r0, [pc, #172]	; (8003488 <HAL_SPI_MspInit+0x12c>)
 80033dc:	f002 fbc8 	bl	8005b70 <HAL_GPIO_Init>
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_SPI_MspInit+0x130>)
 80033e2:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <HAL_SPI_MspInit+0x134>)
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_SPI_MspInit+0x130>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_SPI_MspInit+0x130>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_SPI_MspInit+0x130>)
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_SPI_MspInit+0x130>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_SPI_MspInit+0x130>)
 8003400:	2200      	movs	r2, #0
 8003402:	615a      	str	r2, [r3, #20]
 8003404:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_SPI_MspInit+0x130>)
 8003406:	2200      	movs	r2, #0
 8003408:	619a      	str	r2, [r3, #24]
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_SPI_MspInit+0x130>)
 800340c:	2200      	movs	r2, #0
 800340e:	61da      	str	r2, [r3, #28]
 8003410:	481e      	ldr	r0, [pc, #120]	; (800348c <HAL_SPI_MspInit+0x130>)
 8003412:	f002 fb53 	bl	8005abc <HAL_DMA_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_SPI_MspInit+0xc4>
 800341c:	f7ff feec 	bl	80031f8 <Error_Handler>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <HAL_SPI_MspInit+0x130>)
 8003424:	64da      	str	r2, [r3, #76]	; 0x4c
 8003426:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_SPI_MspInit+0x130>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6253      	str	r3, [r2, #36]	; 0x24
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_SPI_MspInit+0x138>)
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_SPI_MspInit+0x13c>)
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_SPI_MspInit+0x138>)
 8003434:	2210      	movs	r2, #16
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_SPI_MspInit+0x138>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_SPI_MspInit+0x138>)
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_SPI_MspInit+0x138>)
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_SPI_MspInit+0x138>)
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_SPI_MspInit+0x138>)
 8003452:	2200      	movs	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_SPI_MspInit+0x138>)
 8003458:	2200      	movs	r2, #0
 800345a:	61da      	str	r2, [r3, #28]
 800345c:	480d      	ldr	r0, [pc, #52]	; (8003494 <HAL_SPI_MspInit+0x138>)
 800345e:	f002 fb2d 	bl	8005abc <HAL_DMA_Init>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_SPI_MspInit+0x110>
 8003468:	f7ff fec6 	bl	80031f8 <Error_Handler>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_SPI_MspInit+0x138>)
 8003470:	649a      	str	r2, [r3, #72]	; 0x48
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_SPI_MspInit+0x138>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6253      	str	r3, [r2, #36]	; 0x24
 8003478:	bf00      	nop
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40003800 	.word	0x40003800
 8003484:	40021000 	.word	0x40021000
 8003488:	40010c00 	.word	0x40010c00
 800348c:	200005f0 	.word	0x200005f0
 8003490:	40020044 	.word	0x40020044
 8003494:	20000634 	.word	0x20000634
 8003498:	40020058 	.word	0x40020058

0800349c <HAL_TIM_OnePulse_MspInit>:
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_TIM_OnePulse_MspInit+0x34>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10b      	bne.n	80034c6 <HAL_TIM_OnePulse_MspInit+0x2a>
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_TIM_OnePulse_MspInit+0x38>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_TIM_OnePulse_MspInit+0x38>)
 80034b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b8:	6193      	str	r3, [r2, #24]
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_TIM_OnePulse_MspInit+0x38>)
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40021000 	.word	0x40021000

080034d8 <NMI_Handler>:
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
 80034dc:	e7fe      	b.n	80034dc <NMI_Handler+0x4>

080034de <HardFault_Handler>:
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	e7fe      	b.n	80034e2 <HardFault_Handler+0x4>

080034e4 <MemManage_Handler>:
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	e7fe      	b.n	80034e8 <MemManage_Handler+0x4>

080034ea <BusFault_Handler>:
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	e7fe      	b.n	80034ee <BusFault_Handler+0x4>

080034f0 <UsageFault_Handler>:
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	e7fe      	b.n	80034f4 <UsageFault_Handler+0x4>

080034f6 <SVC_Handler>:
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <DebugMon_Handler>:
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <PendSV_Handler>:
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <SysTick_Handler>:
 800351a:	b580      	push	{r7, lr}
 800351c:	af00      	add	r7, sp, #0
 800351e:	f7fe f89d 	bl	800165c <HAL_SYSTICK_Callback>
 8003522:	f001 ff6b 	bl	80053fc <HAL_IncTick>
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}

0800352a <_getpid>:
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
 800352e:	2301      	movs	r3, #1
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <_kill>:
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	f003 fc93 	bl	8006e6c <__errno>
 8003546:	4603      	mov	r3, r0
 8003548:	2216      	movs	r2, #22
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_exit>:
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffe7 	bl	8003538 <_kill>
 800356a:	e7fe      	b.n	800356a <_exit+0x12>

0800356c <_read>:
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e00a      	b.n	8003594 <_read+0x28>
 800357e:	f3af 8000 	nop.w
 8003582:	4601      	mov	r1, r0
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	60ba      	str	r2, [r7, #8]
 800358a:	b2ca      	uxtb	r2, r1
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	3301      	adds	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	dbf0      	blt.n	800357e <_read+0x12>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_close>:
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <_fstat>:
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	2300      	movs	r3, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <_isatty>:
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	2301      	movs	r3, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <_lseek>:
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	2300      	movs	r3, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
	...

08003608 <_sbrk>:
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <_sbrk+0x5c>)
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <_sbrk+0x60>)
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	4b13      	ldr	r3, [pc, #76]	; (800366c <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <_sbrk+0x22>
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <_sbrk+0x64>)
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <_sbrk+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d207      	bcs.n	8003648 <_sbrk+0x40>
 8003638:	f003 fc18 	bl	8006e6c <__errno>
 800363c:	4603      	mov	r3, r0
 800363e:	220c      	movs	r2, #12
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e009      	b.n	800365c <_sbrk+0x54>
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	4a05      	ldr	r2, [pc, #20]	; (800366c <_sbrk+0x64>)
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20005000 	.word	0x20005000
 8003668:	00000400 	.word	0x00000400
 800366c:	200006c0 	.word	0x200006c0
 8003670:	20000b68 	.word	0x20000b68

08003674 <SystemInit>:
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <Reset_Handler>:
 8003680:	480c      	ldr	r0, [pc, #48]	; (80036b4 <LoopFillZerobss+0x12>)
 8003682:	490d      	ldr	r1, [pc, #52]	; (80036b8 <LoopFillZerobss+0x16>)
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <LoopFillZerobss+0x1a>)
 8003686:	2300      	movs	r3, #0
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:
 800368a:	58d4      	ldr	r4, [r2, r3]
 800368c:	50c4      	str	r4, [r0, r3]
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:
 8003690:	18c4      	adds	r4, r0, r3
 8003692:	428c      	cmp	r4, r1
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <LoopFillZerobss+0x1e>)
 8003698:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <LoopFillZerobss+0x22>)
 800369a:	2300      	movs	r3, #0
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:
 80036a2:	42a2      	cmp	r2, r4
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>
 80036a6:	f7ff ffe5 	bl	8003674 <SystemInit>
 80036aa:	f003 fbf7 	bl	8006e9c <__libc_init_array>
 80036ae:	f7ff fd7b 	bl	80031a8 <main>
 80036b2:	4770      	bx	lr
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000124 	.word	0x20000124
 80036bc:	0800f96c 	.word	0x0800f96c
 80036c0:	20000128 	.word	0x20000128
 80036c4:	20000b64 	.word	0x20000b64

080036c8 <ADC1_2_IRQHandler>:
 80036c8:	e7fe      	b.n	80036c8 <ADC1_2_IRQHandler>
	...

080036cc <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 80036d0:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <ili9488_Init+0x114>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d115      	bne.n	8003708 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 80036dc:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <ili9488_Init+0x114>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <ili9488_Init+0x114>)
 80036e8:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 80036ea:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <ili9488_Init+0x114>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <ili9488_Init+0x2e>
      LCD_IO_Init();
 80036f6:	f001 fcb9 	bl	800506c <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <ili9488_Init+0x114>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f043 0302 	orr.w	r3, r3, #2
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <ili9488_Init+0x114>)
 8003706:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8003708:	2069      	movs	r0, #105	; 0x69
 800370a:	f001 fc8d 	bl	8005028 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 800370e:	2001      	movs	r0, #1
 8003710:	f001 fd40 	bl	8005194 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8003714:	2005      	movs	r0, #5
 8003716:	f001 fc87 	bl	8005028 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 800371a:	220f      	movs	r2, #15
 800371c:	4931      	ldr	r1, [pc, #196]	; (80037e4 <ili9488_Init+0x118>)
 800371e:	20e0      	movs	r0, #224	; 0xe0
 8003720:	f001 fd96 	bl	8005250 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8003724:	220f      	movs	r2, #15
 8003726:	4930      	ldr	r1, [pc, #192]	; (80037e8 <ili9488_Init+0x11c>)
 8003728:	20e1      	movs	r0, #225	; 0xe1
 800372a:	f001 fd91 	bl	8005250 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 800372e:	2202      	movs	r2, #2
 8003730:	492e      	ldr	r1, [pc, #184]	; (80037ec <ili9488_Init+0x120>)
 8003732:	20c0      	movs	r0, #192	; 0xc0
 8003734:	f001 fd8c 	bl	8005250 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8003738:	2005      	movs	r0, #5
 800373a:	f001 fc75 	bl	8005028 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 800373e:	20c1      	movs	r0, #193	; 0xc1
 8003740:	f001 fd28 	bl	8005194 <LCD_IO_WriteCmd8>
 8003744:	2041      	movs	r0, #65	; 0x41
 8003746:	f001 fd41 	bl	80051cc <LCD_IO_WriteData8>
  LCD_Delay(5);
 800374a:	2005      	movs	r0, #5
 800374c:	f001 fc6c 	bl	8005028 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8003750:	2203      	movs	r2, #3
 8003752:	4927      	ldr	r1, [pc, #156]	; (80037f0 <ili9488_Init+0x124>)
 8003754:	20c5      	movs	r0, #197	; 0xc5
 8003756:	f001 fd7b 	bl	8005250 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 800375a:	2005      	movs	r0, #5
 800375c:	f001 fc64 	bl	8005028 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8003760:	203a      	movs	r0, #58	; 0x3a
 8003762:	f001 fd17 	bl	8005194 <LCD_IO_WriteCmd8>
 8003766:	2066      	movs	r0, #102	; 0x66
 8003768:	f001 fd30 	bl	80051cc <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 800376c:	20b0      	movs	r0, #176	; 0xb0
 800376e:	f001 fd11 	bl	8005194 <LCD_IO_WriteCmd8>
 8003772:	2080      	movs	r0, #128	; 0x80
 8003774:	f001 fd2a 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8003778:	20b1      	movs	r0, #177	; 0xb1
 800377a:	f001 fd0b 	bl	8005194 <LCD_IO_WriteCmd8>
 800377e:	20a0      	movs	r0, #160	; 0xa0
 8003780:	f001 fd24 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8003784:	20b4      	movs	r0, #180	; 0xb4
 8003786:	f001 fd05 	bl	8005194 <LCD_IO_WriteCmd8>
 800378a:	2002      	movs	r0, #2
 800378c:	f001 fd1e 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8003790:	2202      	movs	r2, #2
 8003792:	4918      	ldr	r1, [pc, #96]	; (80037f4 <ili9488_Init+0x128>)
 8003794:	20b6      	movs	r0, #182	; 0xb6
 8003796:	f001 fd5b 	bl	8005250 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 800379a:	20e9      	movs	r0, #233	; 0xe9
 800379c:	f001 fcfa 	bl	8005194 <LCD_IO_WriteCmd8>
 80037a0:	2000      	movs	r0, #0
 80037a2:	f001 fd13 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 80037a6:	2204      	movs	r2, #4
 80037a8:	4913      	ldr	r1, [pc, #76]	; (80037f8 <ili9488_Init+0x12c>)
 80037aa:	20f7      	movs	r0, #247	; 0xf7
 80037ac:	f001 fd50 	bl	8005250 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 80037b0:	2005      	movs	r0, #5
 80037b2:	f001 fc39 	bl	8005028 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 80037b6:	2011      	movs	r0, #17
 80037b8:	f001 fcec 	bl	8005194 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 80037bc:	2078      	movs	r0, #120	; 0x78
 80037be:	f001 fc33 	bl	8005028 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 80037c2:	2029      	movs	r0, #41	; 0x29
 80037c4:	f001 fce6 	bl	8005194 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 80037c8:	2005      	movs	r0, #5
 80037ca:	f001 fc2d 	bl	8005028 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 80037ce:	2036      	movs	r0, #54	; 0x36
 80037d0:	f001 fce0 	bl	8005194 <LCD_IO_WriteCmd8>
 80037d4:	20e8      	movs	r0, #232	; 0xe8
 80037d6:	f001 fcf9 	bl	80051cc <LCD_IO_WriteData8>
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200006c4 	.word	0x200006c4
 80037e4:	08008770 	.word	0x08008770
 80037e8:	08008780 	.word	0x08008780
 80037ec:	08008790 	.word	0x08008790
 80037f0:	08008794 	.word	0x08008794
 80037f4:	08008798 	.word	0x08008798
 80037f8:	0800879c 	.word	0x0800879c

080037fc <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8003800:	2011      	movs	r0, #17
 8003802:	f001 fcc7 	bl	8005194 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8003806:	2001      	movs	r0, #1
 8003808:	f001 fc1a 	bl	8005040 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}

08003810 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8003814:	2010      	movs	r0, #16
 8003816:	f001 fcbd 	bl	8005194 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 800381a:	2000      	movs	r0, #0
 800381c:	f001 fc10 	bl	8005040 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}

08003824 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8003828:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8003838:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <ili9488_ReadID+0x40>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8003856:	f7ff ff39 	bl	80036cc <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 800385a:	1d39      	adds	r1, r7, #4
 800385c:	2300      	movs	r3, #0
 800385e:	2203      	movs	r2, #3
 8003860:	2004      	movs	r0, #4
 8003862:	f001 fd39 	bl	80052d8 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a06      	ldr	r2, [pc, #24]	; (8003888 <ili9488_ReadID+0x44>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d102      	bne.n	800387a <ili9488_ReadID+0x36>
    return 0x9488;
 8003874:	f249 4388 	movw	r3, #38024	; 0x9488
 8003878:	e000      	b.n	800387c <ili9488_ReadID+0x38>
  return 0;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200006c4 	.word	0x200006c4
 8003888:	00668054 	.word	0x00668054

0800388c <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	460a      	mov	r2, r1
 8003896:	80fb      	strh	r3, [r7, #6]
 8003898:	4613      	mov	r3, r2
 800389a:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800389c:	202a      	movs	r0, #42	; 0x2a
 800389e:	f001 fc79 	bl	8005194 <LCD_IO_WriteCmd8>
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 fc8e 	bl	80051cc <LCD_IO_WriteData8>
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 fc89 	bl	80051cc <LCD_IO_WriteData8>
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 fc82 	bl	80051cc <LCD_IO_WriteData8>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fc7d 	bl	80051cc <LCD_IO_WriteData8>
 80038d2:	202b      	movs	r0, #43	; 0x2b
 80038d4:	f001 fc5e 	bl	8005194 <LCD_IO_WriteCmd8>
 80038d8:	88bb      	ldrh	r3, [r7, #4]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fc73 	bl	80051cc <LCD_IO_WriteData8>
 80038e6:	88bb      	ldrh	r3, [r7, #4]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fc6e 	bl	80051cc <LCD_IO_WriteData8>
 80038f0:	88bb      	ldrh	r3, [r7, #4]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fc67 	bl	80051cc <LCD_IO_WriteData8>
 80038fe:	88bb      	ldrh	r3, [r7, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fc62 	bl	80051cc <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	121b      	asrs	r3, r3, #8
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f023 0307 	bic.w	r3, r3, #7
 8003924:	b2db      	uxtb	r3, r3
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fc50 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	10db      	asrs	r3, r3, #3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fc47 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fc41 	bl	80051cc <LCD_IO_WriteData8>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	80fb      	strh	r3, [r7, #6]
 800395c:	460b      	mov	r3, r1
 800395e:	80bb      	strh	r3, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8003964:	202a      	movs	r0, #42	; 0x2a
 8003966:	f001 fc15 	bl	8005194 <LCD_IO_WriteCmd8>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	b29b      	uxth	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fc2a 	bl	80051cc <LCD_IO_WriteData8>
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4618      	mov	r0, r3
 800397e:	f001 fc25 	bl	80051cc <LCD_IO_WriteData8>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	b29b      	uxth	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fc1e 	bl	80051cc <LCD_IO_WriteData8>
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fc19 	bl	80051cc <LCD_IO_WriteData8>
 800399a:	202b      	movs	r0, #43	; 0x2b
 800399c:	f001 fbfa 	bl	8005194 <LCD_IO_WriteCmd8>
 80039a0:	88bb      	ldrh	r3, [r7, #4]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 fc0f 	bl	80051cc <LCD_IO_WriteData8>
 80039ae:	88bb      	ldrh	r3, [r7, #4]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 fc0a 	bl	80051cc <LCD_IO_WriteData8>
 80039b8:	88bb      	ldrh	r3, [r7, #4]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fc03 	bl	80051cc <LCD_IO_WriteData8>
 80039c6:	88bb      	ldrh	r3, [r7, #4]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fbfe 	bl	80051cc <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80039d0:	202c      	movs	r0, #44	; 0x2c
 80039d2:	f001 fbdf 	bl	8005194 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff99 	bl	8003910 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	460a      	mov	r2, r1
 80039f0:	80fb      	strh	r3, [r7, #6]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 80039f6:	202a      	movs	r0, #42	; 0x2a
 80039f8:	f001 fbcc 	bl	8005194 <LCD_IO_WriteCmd8>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fbe1 	bl	80051cc <LCD_IO_WriteData8>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fbdc 	bl	80051cc <LCD_IO_WriteData8>
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fbd5 	bl	80051cc <LCD_IO_WriteData8>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 fbd0 	bl	80051cc <LCD_IO_WriteData8>
 8003a2c:	202b      	movs	r0, #43	; 0x2b
 8003a2e:	f001 fbb1 	bl	8005194 <LCD_IO_WriteCmd8>
 8003a32:	88bb      	ldrh	r3, [r7, #4]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fbc6 	bl	80051cc <LCD_IO_WriteData8>
 8003a40:	88bb      	ldrh	r3, [r7, #4]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fbc1 	bl	80051cc <LCD_IO_WriteData8>
 8003a4a:	88bb      	ldrh	r3, [r7, #4]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fbba 	bl	80051cc <LCD_IO_WriteData8>
 8003a58:	88bb      	ldrh	r3, [r7, #4]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 fbb5 	bl	80051cc <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8003a62:	f107 010e 	add.w	r1, r7, #14
 8003a66:	2301      	movs	r3, #1
 8003a68:	2201      	movs	r2, #1
 8003a6a:	202e      	movs	r0, #46	; 0x2e
 8003a6c:	f001 fc5a 	bl	8005324 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8003a70:	89fb      	ldrh	r3, [r7, #14]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	80fb      	strh	r3, [r7, #6]
 8003a8e:	4603      	mov	r3, r0
 8003a90:	80bb      	strh	r3, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	807b      	strh	r3, [r7, #2]
 8003a96:	4613      	mov	r3, r2
 8003a98:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <ili9488_SetDisplayWindow+0xc8>)
 8003a9c:	88bb      	ldrh	r3, [r7, #4]
 8003a9e:	8013      	strh	r3, [r2, #0]
 8003aa0:	88ba      	ldrh	r2, [r7, #4]
 8003aa2:	883b      	ldrh	r3, [r7, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <ili9488_SetDisplayWindow+0xcc>)
 8003aae:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8003ab0:	202a      	movs	r0, #42	; 0x2a
 8003ab2:	f001 fb6f 	bl	8005194 <LCD_IO_WriteCmd8>
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 fb84 	bl	80051cc <LCD_IO_WriteData8>
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fb7f 	bl	80051cc <LCD_IO_WriteData8>
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	121b      	asrs	r3, r3, #8
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fb76 	bl	80051cc <LCD_IO_WriteData8>
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	887b      	ldrh	r3, [r7, #2]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fb6b 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8003af6:	202b      	movs	r0, #43	; 0x2b
 8003af8:	f001 fb4c 	bl	8005194 <LCD_IO_WriteCmd8>
 8003afc:	88bb      	ldrh	r3, [r7, #4]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fb61 	bl	80051cc <LCD_IO_WriteData8>
 8003b0a:	88bb      	ldrh	r3, [r7, #4]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fb5c 	bl	80051cc <LCD_IO_WriteData8>
 8003b14:	88ba      	ldrh	r2, [r7, #4]
 8003b16:	883b      	ldrh	r3, [r7, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	121b      	asrs	r3, r3, #8
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 fb53 	bl	80051cc <LCD_IO_WriteData8>
 8003b26:	88bb      	ldrh	r3, [r7, #4]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	883b      	ldrh	r3, [r7, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 fb48 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd90      	pop	{r4, r7, pc}
 8003b44:	200006c6 	.word	0x200006c6
 8003b48:	200006c8 	.word	0x200006c8

08003b4c <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	80fb      	strh	r3, [r7, #6]
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80bb      	strh	r3, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	807b      	strh	r3, [r7, #2]
 8003b66:	4613      	mov	r3, r2
 8003b68:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 8003b6a:	883a      	ldrh	r2, [r7, #0]
 8003b6c:	8879      	ldrh	r1, [r7, #2]
 8003b6e:	88b8      	ldrh	r0, [r7, #4]
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2301      	movs	r3, #1
 8003b76:	f000 f820 	bl	8003bba <ili9488_FillRect>
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}

08003b82 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003b82:	b590      	push	{r4, r7, lr}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af02      	add	r7, sp, #8
 8003b88:	4604      	mov	r4, r0
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4623      	mov	r3, r4
 8003b92:	80fb      	strh	r3, [r7, #6]
 8003b94:	4603      	mov	r3, r0
 8003b96:	80bb      	strh	r3, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8003ba0:	883a      	ldrh	r2, [r7, #0]
 8003ba2:	8879      	ldrh	r1, [r7, #2]
 8003ba4:	88b8      	ldrh	r0, [r7, #4]
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	2201      	movs	r2, #1
 8003bae:	f000 f804 	bl	8003bba <ili9488_FillRect>
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd90      	pop	{r4, r7, pc}

08003bba <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8003bba:	b590      	push	{r4, r7, lr}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	4608      	mov	r0, r1
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4623      	mov	r3, r4
 8003bca:	80fb      	strh	r3, [r7, #6]
 8003bcc:	4603      	mov	r3, r0
 8003bce:	80bb      	strh	r3, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8003bd8:	883b      	ldrh	r3, [r7, #0]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	88b9      	ldrh	r1, [r7, #4]
 8003bde:	88f8      	ldrh	r0, [r7, #6]
 8003be0:	f7ff ff4c 	bl	8003a7c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8003be4:	202c      	movs	r0, #44	; 0x2c
 8003be6:	f001 fad5 	bl	8005194 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	883a      	ldrh	r2, [r7, #0]
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 8003bf4:	e003      	b.n	8003bfe <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 8003bf6:	8c3b      	ldrh	r3, [r7, #32]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fe89 	bl	8003910 <ili9488_write16to24>
  while(XYsize--)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	60fa      	str	r2, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f6      	bne.n	8003bf6 <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd90      	pop	{r4, r7, pc}
	...

08003c14 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	603a      	str	r2, [r7, #0]
 8003c1e:	80fb      	strh	r3, [r7, #6]
 8003c20:	460b      	mov	r3, r1
 8003c22:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3316      	adds	r3, #22
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	3317      	adds	r3, #23
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	88bb      	ldrh	r3, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	3302      	adds	r3, #2
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	461a      	mov	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	330a      	adds	r3, #10
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 8003c98:	2036      	movs	r0, #54	; 0x36
 8003c9a:	f001 fa7b 	bl	8005194 <LCD_IO_WriteCmd8>
 8003c9e:	20a8      	movs	r0, #168	; 0xa8
 8003ca0:	f001 fa94 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 8003ca4:	202b      	movs	r0, #43	; 0x2b
 8003ca6:	f001 fa75 	bl	8005194 <LCD_IO_WriteCmd8>
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <ili9488_DrawBitmap+0x118>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	121b      	asrs	r3, r3, #8
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f001 fa87 	bl	80051cc <LCD_IO_WriteData8>
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <ili9488_DrawBitmap+0x118>)
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 fa7e 	bl	80051cc <LCD_IO_WriteData8>
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <ili9488_DrawBitmap+0x11c>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003cd8:	3301      	adds	r3, #1
 8003cda:	121b      	asrs	r3, r3, #8
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 fa74 	bl	80051cc <LCD_IO_WriteData8>
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <ili9488_DrawBitmap+0x11c>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fa6b 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8003cf6:	202c      	movs	r0, #44	; 0x2c
 8003cf8:	f001 fa4c 	bl	8005194 <LCD_IO_WriteCmd8>
  while(size--)
 8003cfc:	e007      	b.n	8003d0e <ili9488_DrawBitmap+0xfa>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fe04 	bl	8003910 <ili9488_write16to24>
    pbmp+= 2;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	603b      	str	r3, [r7, #0]
  while(size--)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	60fa      	str	r2, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f2      	bne.n	8003cfe <ili9488_DrawBitmap+0xea>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8003d18:	2036      	movs	r0, #54	; 0x36
 8003d1a:	f001 fa3b 	bl	8005194 <LCD_IO_WriteCmd8>
 8003d1e:	20e8      	movs	r0, #232	; 0xe8
 8003d20:	f001 fa54 	bl	80051cc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200006c8 	.word	0x200006c8
 8003d30:	200006c6 	.word	0x200006c6

08003d34 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	4623      	mov	r3, r4
 8003d44:	80fb      	strh	r3, [r7, #6]
 8003d46:	4603      	mov	r3, r0
 8003d48:	80bb      	strh	r3, [r7, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	807b      	strh	r3, [r7, #2]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8003d52:	887b      	ldrh	r3, [r7, #2]
 8003d54:	883a      	ldrh	r2, [r7, #0]
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8003d5c:	883b      	ldrh	r3, [r7, #0]
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	88b9      	ldrh	r1, [r7, #4]
 8003d62:	88f8      	ldrh	r0, [r7, #6]
 8003d64:	f7ff fe8a 	bl	8003a7c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8003d68:	202c      	movs	r0, #44	; 0x2c
 8003d6a:	f001 fa13 	bl	8005194 <LCD_IO_WriteCmd8>
  while(size--)
 8003d6e:	e007      	b.n	8003d80 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fdcb 	bl	8003910 <ili9488_write16to24>
    pdata++;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	623b      	str	r3, [r7, #32]
  while(size--)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	60fa      	str	r2, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f2      	bne.n	8003d70 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}

08003d94 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4623      	mov	r3, r4
 8003da4:	80fb      	strh	r3, [r7, #6]
 8003da6:	4603      	mov	r3, r0
 8003da8:	80bb      	strh	r3, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	807b      	strh	r3, [r7, #2]
 8003dae:	4613      	mov	r3, r2
 8003db0:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	883a      	ldrh	r2, [r7, #0]
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8003dc0:	883b      	ldrh	r3, [r7, #0]
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	88b9      	ldrh	r1, [r7, #4]
 8003dc6:	88f8      	ldrh	r0, [r7, #6]
 8003dc8:	f7ff fe58 	bl	8003a7c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 8003dcc:	2301      	movs	r3, #1
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	202e      	movs	r0, #46	; 0x2e
 8003dd4:	f001 faa6 	bl	8005324 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}

08003de0 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	80fb      	strh	r3, [r7, #6]
 8003dea:	460b      	mov	r3, r1
 8003dec:	80bb      	strh	r3, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 8003df2:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003df4:	88db      	ldrh	r3, [r3, #6]
 8003df6:	88ba      	ldrh	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <ili9488_Scroll+0x26>
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003dfe:	885b      	ldrh	r3, [r3, #2]
 8003e00:	887a      	ldrh	r2, [r7, #2]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d013      	beq.n	8003e2e <ili9488_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8003e06:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e08:	88bb      	ldrh	r3, [r7, #4]
 8003e0a:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8003e0c:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8003e12:	88ba      	ldrh	r2, [r7, #4]
 8003e14:	887b      	ldrh	r3, [r7, #2]
 8003e16:	4413      	add	r3, r2
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e22:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8003e24:	2203      	movs	r2, #3
 8003e26:	491c      	ldr	r1, [pc, #112]	; (8003e98 <ili9488_Scroll+0xb8>)
 8003e28:	2033      	movs	r0, #51	; 0x33
 8003e2a:	f001 fa31 	bl	8005290 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8003e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e32:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e34:	8892      	ldrh	r2, [r2, #4]
 8003e36:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e3a:	fb01 f202 	mul.w	r2, r1, r2
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8003e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da0a      	bge.n	8003e60 <ili9488_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e4c:	889a      	ldrh	r2, [r3, #4]
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	4413      	add	r3, r2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e56:	885b      	ldrh	r3, [r3, #2]
 8003e58:	4413      	add	r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	80fb      	strh	r3, [r7, #6]
 8003e5e:	e005      	b.n	8003e6c <ili9488_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e62:	885a      	ldrh	r2, [r3, #2]
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	4413      	add	r3, r2
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8003e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <ili9488_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e7c:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <ili9488_Scroll+0xb4>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	2201      	movs	r2, #1
 8003e84:	4619      	mov	r1, r3
 8003e86:	2037      	movs	r0, #55	; 0x37
 8003e88:	f001 f9bc 	bl	8005204 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200006cc 	.word	0x200006cc
 8003e98:	200006ce 	.word	0x200006ce

08003e9c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <BSP_LCD_Init+0x3c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <BSP_LCD_Init+0x40>)
 8003eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb4:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <BSP_LCD_Init+0x40>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <BSP_LCD_Init+0x40>)
 8003ebe:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <BSP_LCD_Init+0x44>)
 8003ec0:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8003ec2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ec6:	f000 f853 	bl	8003f70 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003ece:	79fb      	ldrb	r3, [r7, #7]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200000b4 	.word	0x200000b4
 8003edc:	200006d4 	.word	0x200006d4
 8003ee0:	20000018 	.word	0x20000018

08003ee4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <BSP_LCD_GetXSize+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	4798      	blx	r3
 8003ef0:	4603      	mov	r3, r0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200000b4 	.word	0x200000b4

08003efc <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <BSP_LCD_GetYSize+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4798      	blx	r3
 8003f08:	4603      	mov	r3, r0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200000b4 	.word	0x200000b4

08003f14 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <BSP_LCD_SetTextColor+0x1c>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	200006d4 	.word	0x200006d4

08003f34 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	4a03      	ldr	r2, [pc, #12]	; (8003f50 <BSP_LCD_SetBackColor+0x1c>)
 8003f42:	6053      	str	r3, [r2, #4]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	200006d4 	.word	0x200006d4

08003f54 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8003f5c:	4a03      	ldr	r2, [pc, #12]	; (8003f6c <BSP_LCD_SetFont+0x18>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6093      	str	r3, [r2, #8]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	200006d4 	.word	0x200006d4

08003f70 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8003f70:	b5b0      	push	{r4, r5, r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	4603      	mov	r3, r0
 8003f78:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <BSP_LCD_Clear+0x38>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003f80:	f7ff ffb0 	bl	8003ee4 <BSP_LCD_GetXSize>
 8003f84:	4603      	mov	r3, r0
 8003f86:	461d      	mov	r5, r3
 8003f88:	f7ff ffb8 	bl	8003efc <BSP_LCD_GetYSize>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	462a      	mov	r2, r5
 8003f98:	2100      	movs	r1, #0
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	47a0      	blx	r4
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200000b4 	.word	0x200000b4

08003fac <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	80bb      	strh	r3, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <BSP_LCD_DisplayChar+0x50>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003fc8:	490c      	ldr	r1, [pc, #48]	; (8003ffc <BSP_LCD_DisplayChar+0x50>)
 8003fca:	6889      	ldr	r1, [r1, #8]
 8003fcc:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003fce:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <BSP_LCD_DisplayChar+0x50>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	889b      	ldrh	r3, [r3, #4]
 8003fd8:	3307      	adds	r3, #7
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	da00      	bge.n	8003fe0 <BSP_LCD_DisplayChar+0x34>
 8003fde:	3307      	adds	r3, #7
 8003fe0:	10db      	asrs	r3, r3, #3
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003fe6:	441a      	add	r2, r3
 8003fe8:	88b9      	ldrh	r1, [r7, #4]
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fb1f 	bl	8004630 <DrawChar>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200006d4 	.word	0x200006d4

08004000 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60ba      	str	r2, [r7, #8]
 8004008:	461a      	mov	r2, r3
 800400a:	4603      	mov	r3, r0
 800400c:	81fb      	strh	r3, [r7, #14]
 800400e:	460b      	mov	r3, r1
 8004010:	81bb      	strh	r3, [r7, #12]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004016:	2301      	movs	r3, #1
 8004018:	83fb      	strh	r3, [r7, #30]
 800401a:	2300      	movs	r3, #0
 800401c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800402a:	e002      	b.n	8004032 <BSP_LCD_DisplayStringAt+0x32>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	3301      	adds	r3, #1
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	617a      	str	r2, [r7, #20]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f6      	bne.n	800402c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800403e:	f7ff ff51 	bl	8003ee4 <BSP_LCD_GetXSize>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	4b35      	ldr	r3, [pc, #212]	; (800411c <BSP_LCD_DisplayStringAt+0x11c>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	889b      	ldrh	r3, [r3, #4]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	b29b      	uxth	r3, r3
 8004052:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d014      	beq.n	8004084 <BSP_LCD_DisplayStringAt+0x84>
 800405a:	2b03      	cmp	r3, #3
 800405c:	dc23      	bgt.n	80040a6 <BSP_LCD_DisplayStringAt+0xa6>
 800405e:	2b01      	cmp	r3, #1
 8004060:	d002      	beq.n	8004068 <BSP_LCD_DisplayStringAt+0x68>
 8004062:	2b02      	cmp	r3, #2
 8004064:	d011      	beq.n	800408a <BSP_LCD_DisplayStringAt+0x8a>
 8004066:	e01e      	b.n	80040a6 <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	4a2b      	ldr	r2, [pc, #172]	; (800411c <BSP_LCD_DisplayStringAt+0x11c>)
 8004070:	6892      	ldr	r2, [r2, #8]
 8004072:	8892      	ldrh	r2, [r2, #4]
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	89fb      	ldrh	r3, [r7, #14]
 800407e:	4413      	add	r3, r2
 8004080:	83fb      	strh	r3, [r7, #30]
      break;
 8004082:	e013      	b.n	80040ac <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8004084:	89fb      	ldrh	r3, [r7, #14]
 8004086:	83fb      	strh	r3, [r7, #30]
      break;
 8004088:	e010      	b.n	80040ac <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	b29b      	uxth	r3, r3
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <BSP_LCD_DisplayStringAt+0x11c>)
 8004094:	6892      	ldr	r2, [r2, #8]
 8004096:	8892      	ldrh	r2, [r2, #4]
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	b29a      	uxth	r2, r3
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	83fb      	strh	r3, [r7, #30]
      break;
 80040a4:	e002      	b.n	80040ac <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	83fb      	strh	r3, [r7, #30]
      break;
 80040aa:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80040ac:	e012      	b.n	80040d4 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	89b9      	ldrh	r1, [r7, #12]
 80040b4:	8bfb      	ldrh	r3, [r7, #30]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ff78 	bl	8003fac <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80040bc:	4b17      	ldr	r3, [pc, #92]	; (800411c <BSP_LCD_DisplayStringAt+0x11c>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	889a      	ldrh	r2, [r3, #4]
 80040c2:	8bfb      	ldrh	r3, [r7, #30]
 80040c4:	4413      	add	r3, r2
 80040c6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
    i++;
 80040ce:	8bbb      	ldrh	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2dc      	uxtb	r4, r3
 80040e2:	f7ff feff 	bl	8003ee4 <BSP_LCD_GetXSize>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4619      	mov	r1, r3
 80040ea:	8bbb      	ldrh	r3, [r7, #28]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <BSP_LCD_DisplayStringAt+0x11c>)
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	8892      	ldrh	r2, [r2, #4]
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	1acb      	subs	r3, r1, r3
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4a08      	ldr	r2, [pc, #32]	; (800411c <BSP_LCD_DisplayStringAt+0x11c>)
 80040fc:	6892      	ldr	r2, [r2, #8]
 80040fe:	8892      	ldrh	r2, [r2, #4]
 8004100:	4293      	cmp	r3, r2
 8004102:	bfac      	ite	ge
 8004104:	2301      	movge	r3, #1
 8004106:	2300      	movlt	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	4023      	ands	r3, r4
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1cd      	bne.n	80040ae <BSP_LCD_DisplayStringAt+0xae>
  }
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3724      	adds	r7, #36	; 0x24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd90      	pop	{r4, r7, pc}
 800411c:	200006d4 	.word	0x200006d4

08004120 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	80fb      	strh	r3, [r7, #6]
 800412a:	460b      	mov	r3, r1
 800412c:	80bb      	strh	r3, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <BSP_LCD_DrawPixel+0x34>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d006      	beq.n	800414a <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <BSP_LCD_DrawPixel+0x34>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	88b9      	ldrh	r1, [r7, #4]
 8004146:	88f8      	ldrh	r0, [r7, #6]
 8004148:	4798      	blx	r3
  }
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200000b4 	.word	0x200000b4

08004158 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
 8004162:	460b      	mov	r3, r1
 8004164:	80bb      	strh	r3, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <BSP_LCD_DrawHLine+0x6c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <BSP_LCD_DrawHLine+0x6c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a1c      	ldr	r4, [r3, #32]
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <BSP_LCD_DrawHLine+0x70>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	b298      	uxth	r0, r3
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	88ba      	ldrh	r2, [r7, #4]
 8004188:	88f9      	ldrh	r1, [r7, #6]
 800418a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800418c:	e015      	b.n	80041ba <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e00e      	b.n	80041b2 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	b29a      	uxth	r2, r3
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	4413      	add	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <BSP_LCD_DrawHLine+0x70>)
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	b292      	uxth	r2, r2
 80041a4:	88b9      	ldrh	r1, [r7, #4]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ffba 	bl	8004120 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d3ec      	bcc.n	8004194 <BSP_LCD_DrawHLine+0x3c>
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd90      	pop	{r4, r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200000b4 	.word	0x200000b4
 80041c8:	200006d4 	.word	0x200006d4

080041cc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	80fb      	strh	r3, [r7, #6]
 80041d6:	460b      	mov	r3, r1
 80041d8:	80bb      	strh	r3, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <BSP_LCD_DrawVLine+0x6c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <BSP_LCD_DrawVLine+0x6c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <BSP_LCD_DrawVLine+0x70>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	b298      	uxth	r0, r3
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	88ba      	ldrh	r2, [r7, #4]
 80041fc:	88f9      	ldrh	r1, [r7, #6]
 80041fe:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8004200:	e015      	b.n	800422e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e00e      	b.n	8004226 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	b29a      	uxth	r2, r3
 800420c:	88bb      	ldrh	r3, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	b299      	uxth	r1, r3
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <BSP_LCD_DrawVLine+0x70>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b29a      	uxth	r2, r3
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ff80 	bl	8004120 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3301      	adds	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	429a      	cmp	r2, r3
 800422c:	d3ec      	bcc.n	8004208 <BSP_LCD_DrawVLine+0x3c>
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bd90      	pop	{r4, r7, pc}
 8004236:	bf00      	nop
 8004238:	200000b4 	.word	0x200000b4
 800423c:	200006d4 	.word	0x200006d4

08004240 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4623      	mov	r3, r4
 8004250:	80fb      	strh	r3, [r7, #6]
 8004252:	4603      	mov	r3, r0
 8004254:	80bb      	strh	r3, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	807b      	strh	r3, [r7, #2]
 800425a:	4613      	mov	r3, r2
 800425c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	88b9      	ldrh	r1, [r7, #4]
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff77 	bl	8004158 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 800426a:	88ba      	ldrh	r2, [r7, #4]
 800426c:	883b      	ldrh	r3, [r7, #0]
 800426e:	4413      	add	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b299      	uxth	r1, r3
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff6c 	bl	8004158 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8004280:	883a      	ldrh	r2, [r7, #0]
 8004282:	88b9      	ldrh	r1, [r7, #4]
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ffa0 	bl	80041cc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 800428c:	88fa      	ldrh	r2, [r7, #6]
 800428e:	887b      	ldrh	r3, [r7, #2]
 8004290:	4413      	add	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29b      	uxth	r3, r3
 8004298:	883a      	ldrh	r2, [r7, #0]
 800429a:	88b9      	ldrh	r1, [r7, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff95 	bl	80041cc <BSP_LCD_DrawVLine>
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}
	...

080042ac <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	80fb      	strh	r3, [r7, #6]
 80042b6:	460b      	mov	r3, r1
 80042b8:	80bb      	strh	r3, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80042be:	887b      	ldrh	r3, [r7, #2]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	f1c3 0303 	rsb	r3, r3, #3
 80042c6:	617b      	str	r3, [r7, #20]
  CurX = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80042cc:	887b      	ldrh	r3, [r7, #2]
 80042ce:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 80042d0:	e097      	b.n	8004402 <BSP_LCD_DrawCircle+0x156>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	4413      	add	r3, r2
 80042da:	b298      	uxth	r0, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	88ba      	ldrh	r2, [r7, #4]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4a4c      	ldr	r2, [pc, #304]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	b292      	uxth	r2, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	f7ff ff17 	bl	8004120 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	b298      	uxth	r0, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	88ba      	ldrh	r2, [r7, #4]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	b29b      	uxth	r3, r3
 8004306:	4a44      	ldr	r2, [pc, #272]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	b292      	uxth	r2, r2
 800430c:	4619      	mov	r1, r3
 800430e:	f7ff ff07 	bl	8004120 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	b29a      	uxth	r2, r3
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4413      	add	r3, r2
 800431a:	b298      	uxth	r0, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	b29b      	uxth	r3, r3
 8004320:	88ba      	ldrh	r2, [r7, #4]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	b29b      	uxth	r3, r3
 8004326:	4a3c      	ldr	r2, [pc, #240]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	b292      	uxth	r2, r2
 800432c:	4619      	mov	r1, r3
 800432e:	f7ff fef7 	bl	8004120 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	b29b      	uxth	r3, r3
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	b298      	uxth	r0, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	b29b      	uxth	r3, r3
 8004340:	88ba      	ldrh	r2, [r7, #4]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	b29b      	uxth	r3, r3
 8004346:	4a34      	ldr	r2, [pc, #208]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	b292      	uxth	r2, r2
 800434c:	4619      	mov	r1, r3
 800434e:	f7ff fee7 	bl	8004120 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	b29a      	uxth	r2, r3
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	4413      	add	r3, r2
 800435a:	b298      	uxth	r0, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	b29a      	uxth	r2, r3
 8004360:	88bb      	ldrh	r3, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	b292      	uxth	r2, r2
 800436c:	4619      	mov	r1, r3
 800436e:	f7ff fed7 	bl	8004120 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	b29b      	uxth	r3, r3
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	b298      	uxth	r0, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	b29a      	uxth	r2, r3
 8004380:	88bb      	ldrh	r3, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	b29b      	uxth	r3, r3
 8004386:	4a24      	ldr	r2, [pc, #144]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	b292      	uxth	r2, r2
 800438c:	4619      	mov	r1, r3
 800438e:	f7ff fec7 	bl	8004120 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	b29a      	uxth	r2, r3
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	4413      	add	r3, r2
 800439a:	b298      	uxth	r0, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	88bb      	ldrh	r3, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	b292      	uxth	r2, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	f7ff feb7 	bl	8004120 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	b298      	uxth	r0, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	b29a      	uxth	r2, r3
 80043c0:	88bb      	ldrh	r3, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4a14      	ldr	r2, [pc, #80]	; (8004418 <BSP_LCD_DrawCircle+0x16c>)
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	b292      	uxth	r2, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7ff fea7 	bl	8004120 <BSP_LCD_DrawPixel>

    if (D < 0)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da06      	bge.n	80043e6 <BSP_LCD_DrawCircle+0x13a>
    { 
      D += (CurX << 2) + 6;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4413      	add	r3, r2
 80043e0:	3306      	adds	r3, #6
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	e00a      	b.n	80043fc <BSP_LCD_DrawCircle+0x150>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	009a      	lsls	r2, r3, #2
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4413      	add	r3, r2
 80043f2:	330a      	adds	r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
      CurY--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3301      	adds	r3, #1
 8004400:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	429a      	cmp	r2, r3
 8004408:	f67f af63 	bls.w	80042d2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200006d4 	.word	0x200006d4

0800441c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	603a      	str	r2, [r7, #0]
 8004426:	80fb      	strh	r3, [r7, #6]
 8004428:	460b      	mov	r3, r1
 800442a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	3312      	adds	r3, #18
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3313      	adds	r3, #19
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	441a      	add	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	3314      	adds	r3, #20
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	441a      	add	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	3315      	adds	r3, #21
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	4413      	add	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	3316      	adds	r3, #22
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	3317      	adds	r3, #23
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	441a      	add	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	3318      	adds	r3, #24
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	441a      	add	r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	3319      	adds	r3, #25
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	4413      	add	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	b29b      	uxth	r3, r3
 800448c:	88b9      	ldrh	r1, [r7, #4]
 800448e:	88f8      	ldrh	r0, [r7, #6]
 8004490:	f000 f9c0 	bl	8004814 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8004494:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <BSP_LCD_DrawBitmap+0xb0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <BSP_LCD_DrawBitmap+0xb0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	88b9      	ldrh	r1, [r7, #4]
 80044a6:	88f8      	ldrh	r0, [r7, #6]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80044ac:	f7ff fd1a 	bl	8003ee4 <BSP_LCD_GetXSize>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461c      	mov	r4, r3
 80044b4:	f7ff fd22 	bl	8003efc <BSP_LCD_GetYSize>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4622      	mov	r2, r4
 80044bc:	2100      	movs	r1, #0
 80044be:	2000      	movs	r0, #0
 80044c0:	f000 f9a8 	bl	8004814 <SetDisplayWindow>
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd90      	pop	{r4, r7, pc}
 80044cc:	200000b4 	.word	0x200000b4

080044d0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	4611      	mov	r1, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	80fb      	strh	r3, [r7, #6]
 80044e2:	4603      	mov	r3, r0
 80044e4:	80bb      	strh	r3, [r7, #4]
 80044e6:	460b      	mov	r3, r1
 80044e8:	807b      	strh	r3, [r7, #2]
 80044ea:	4613      	mov	r3, r2
 80044ec:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <BSP_LCD_FillRect+0x40>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <BSP_LCD_FillRect+0x44>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	883d      	ldrh	r5, [r7, #0]
 80044fc:	887a      	ldrh	r2, [r7, #2]
 80044fe:	88b9      	ldrh	r1, [r7, #4]
 8004500:	88f8      	ldrh	r0, [r7, #6]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	462b      	mov	r3, r5
 8004506:	47a0      	blx	r4
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bdb0      	pop	{r4, r5, r7, pc}
 8004510:	200000b4 	.word	0x200000b4
 8004514:	200006d4 	.word	0x200006d4

08004518 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	80fb      	strh	r3, [r7, #6]
 8004522:	460b      	mov	r3, r1
 8004524:	80bb      	strh	r3, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	f1c3 0303 	rsb	r3, r3, #3
 8004532:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8004538:	887b      	ldrh	r3, [r7, #2]
 800453a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800453c:	4b3b      	ldr	r3, [pc, #236]	; (800462c <BSP_LCD_FillCircle+0x114>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fce6 	bl	8003f14 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8004548:	e061      	b.n	800460e <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d021      	beq.n	8004594 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	b29b      	uxth	r3, r3
 8004554:	88fa      	ldrh	r2, [r7, #6]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	b298      	uxth	r0, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	b29a      	uxth	r2, r3
 800455e:	88bb      	ldrh	r3, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	b299      	uxth	r1, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	b29b      	uxth	r3, r3
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	f7ff fdf3 	bl	8004158 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	b29b      	uxth	r3, r3
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	b298      	uxth	r0, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	b29b      	uxth	r3, r3
 8004580:	88ba      	ldrh	r2, [r7, #4]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	b299      	uxth	r1, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	b29b      	uxth	r3, r3
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	b29b      	uxth	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	f7ff fde2 	bl	8004158 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d021      	beq.n	80045de <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	b29b      	uxth	r3, r3
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	b298      	uxth	r0, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	88ba      	ldrh	r2, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	b299      	uxth	r1, r3
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	f7ff fdce 	bl	8004158 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	b298      	uxth	r0, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	88bb      	ldrh	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	b299      	uxth	r1, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	f7ff fdbd 	bl	8004158 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da06      	bge.n	80045f2 <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	4413      	add	r3, r2
 80045ec:	3306      	adds	r3, #6
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e00a      	b.n	8004608 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	009a      	lsls	r2, r3, #2
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	330a      	adds	r3, #10
 8004600:	617b      	str	r3, [r7, #20]
      CurY--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b01      	subs	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3301      	adds	r3, #1
 800460c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	429a      	cmp	r2, r3
 8004614:	d999      	bls.n	800454a <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004616:	887a      	ldrh	r2, [r7, #2]
 8004618:	88b9      	ldrh	r1, [r7, #4]
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fe45 	bl	80042ac <BSP_LCD_DrawCircle>
}
 8004622:	bf00      	nop
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200006d4 	.word	0x200006d4

08004630 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	603a      	str	r2, [r7, #0]
 800463a:	80fb      	strh	r3, [r7, #6]
 800463c:	460b      	mov	r3, r1
 800463e:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	2300      	movs	r3, #0
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	82fb      	strh	r3, [r7, #22]
 8004650:	2300      	movs	r3, #0
 8004652:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8004660:	4b63      	ldr	r3, [pc, #396]	; (80047f0 <DrawChar+0x1c0>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	88db      	ldrh	r3, [r3, #6]
 8004666:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8004668:	4b61      	ldr	r3, [pc, #388]	; (80047f0 <DrawChar+0x1c0>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	889b      	ldrh	r3, [r3, #4]
 800466e:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8004670:	8afb      	ldrh	r3, [r7, #22]
 8004672:	8aba      	ldrh	r2, [r7, #20]
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	b29b      	uxth	r3, r3
 800467a:	331b      	adds	r3, #27
 800467c:	b29b      	uxth	r3, r3
 800467e:	4a5d      	ldr	r2, [pc, #372]	; (80047f4 <DrawChar+0x1c4>)
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8004686:	8afb      	ldrh	r3, [r7, #22]
 8004688:	8aba      	ldrh	r2, [r7, #20]
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	331b      	adds	r3, #27
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	141a      	asrs	r2, r3, #16
 8004694:	4b58      	ldr	r3, [pc, #352]	; (80047f8 <DrawChar+0x1c8>)
 8004696:	b292      	uxth	r2, r2
 8004698:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 800469a:	4b58      	ldr	r3, [pc, #352]	; (80047fc <DrawChar+0x1cc>)
 800469c:	2236      	movs	r2, #54	; 0x36
 800469e:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 80046a0:	4a57      	ldr	r2, [pc, #348]	; (8004800 <DrawChar+0x1d0>)
 80046a2:	8abb      	ldrh	r3, [r7, #20]
 80046a4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 80046a6:	8abb      	ldrh	r3, [r7, #20]
 80046a8:	141a      	asrs	r2, r3, #16
 80046aa:	4b56      	ldr	r3, [pc, #344]	; (8004804 <DrawChar+0x1d4>)
 80046ac:	b292      	uxth	r2, r2
 80046ae:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 80046b0:	4a55      	ldr	r2, [pc, #340]	; (8004808 <DrawChar+0x1d8>)
 80046b2:	8afb      	ldrh	r3, [r7, #22]
 80046b4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 80046b6:	8afb      	ldrh	r3, [r7, #22]
 80046b8:	141a      	asrs	r2, r3, #16
 80046ba:	4b54      	ldr	r3, [pc, #336]	; (800480c <DrawChar+0x1dc>)
 80046bc:	b292      	uxth	r2, r2
 80046be:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 80046c0:	8abb      	ldrh	r3, [r7, #20]
 80046c2:	3307      	adds	r3, #7
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da00      	bge.n	80046ca <DrawChar+0x9a>
 80046c8:	3307      	adds	r3, #7
 80046ca:	10db      	asrs	r3, r3, #3
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	8abb      	ldrh	r3, [r7, #20]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	e078      	b.n	80047d2 <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 80046e0:	8abb      	ldrh	r3, [r7, #20]
 80046e2:	3307      	adds	r3, #7
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	da00      	bge.n	80046ea <DrawChar+0xba>
 80046e8:	3307      	adds	r3, #7
 80046ea:	10db      	asrs	r3, r3, #3
 80046ec:	461a      	mov	r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	4413      	add	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 80046fa:	8abb      	ldrh	r3, [r7, #20]
 80046fc:	3b11      	subs	r3, #17
 80046fe:	2b07      	cmp	r3, #7
 8004700:	d80c      	bhi.n	800471c <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	041a      	lsls	r2, r3, #16
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	4313      	orrs	r3, r2
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	3202      	adds	r2, #2
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 800471c:	8abb      	ldrh	r3, [r7, #20]
 800471e:	3b09      	subs	r3, #9
 8004720:	2b07      	cmp	r3, #7
 8004722:	d807      	bhi.n	8004734 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	3201      	adds	r2, #1
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	4313      	orrs	r3, r2
 8004732:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8004734:	8abb      	ldrh	r3, [r7, #20]
 8004736:	3b01      	subs	r3, #1
 8004738:	2b07      	cmp	r3, #7
 800473a:	d802      	bhi.n	8004742 <DrawChar+0x112>
    {
      line =  pchar[0];
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	e03d      	b.n	80047c4 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8004748:	8afa      	ldrh	r2, [r7, #22]
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	8aba      	ldrh	r2, [r7, #20]
 8004752:	fb03 f202 	mul.w	r2, r3, r2
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	4413      	add	r3, r2
 800475a:	331b      	adds	r3, #27
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8004760:	8aba      	ldrh	r2, [r7, #20]
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	4413      	add	r3, r2
 800476a:	3b01      	subs	r3, #1
 800476c:	2201      	movs	r2, #1
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	461a      	mov	r2, r3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 800477c:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <DrawChar+0x1c0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	b2d9      	uxtb	r1, r3
 8004782:	4a23      	ldr	r2, [pc, #140]	; (8004810 <DrawChar+0x1e0>)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	4413      	add	r3, r2
 8004788:	460a      	mov	r2, r1
 800478a:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 800478c:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <DrawChar+0x1c0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0a1a      	lsrs	r2, r3, #8
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	3301      	adds	r3, #1
 8004796:	b2d1      	uxtb	r1, r2
 8004798:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <DrawChar+0x1e0>)
 800479a:	54d1      	strb	r1, [r2, r3]
 800479c:	e00f      	b.n	80047be <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <DrawChar+0x1c0>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	b2d9      	uxtb	r1, r3
 80047a4:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <DrawChar+0x1e0>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4413      	add	r3, r2
 80047aa:	460a      	mov	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <DrawChar+0x1c0>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	0a1a      	lsrs	r2, r3, #8
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	3301      	adds	r3, #1
 80047b8:	b2d1      	uxtb	r1, r2
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <DrawChar+0x1e0>)
 80047bc:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	3301      	adds	r3, #1
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	8abb      	ldrh	r3, [r7, #20]
 80047c6:	6a3a      	ldr	r2, [r7, #32]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3bd      	bcc.n	8004748 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	3301      	adds	r3, #1
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	8afb      	ldrh	r3, [r7, #22]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d382      	bcc.n	80046e0 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 80047da:	88b9      	ldrh	r1, [r7, #4]
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <DrawChar+0x1e0>)
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fe1b 	bl	800441c <BSP_LCD_DrawBitmap>
}
 80047e6:	bf00      	nop
 80047e8:	3728      	adds	r7, #40	; 0x28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200006d4 	.word	0x200006d4
 80047f4:	200006e2 	.word	0x200006e2
 80047f8:	200006e4 	.word	0x200006e4
 80047fc:	200006ea 	.word	0x200006ea
 8004800:	200006f2 	.word	0x200006f2
 8004804:	200006f4 	.word	0x200006f4
 8004808:	200006f6 	.word	0x200006f6
 800480c:	200006f8 	.word	0x200006f8
 8004810:	200006e0 	.word	0x200006e0

08004814 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4604      	mov	r4, r0
 800481c:	4608      	mov	r0, r1
 800481e:	4611      	mov	r1, r2
 8004820:	461a      	mov	r2, r3
 8004822:	4623      	mov	r3, r4
 8004824:	80fb      	strh	r3, [r7, #6]
 8004826:	4603      	mov	r3, r0
 8004828:	80bb      	strh	r3, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	807b      	strh	r3, [r7, #2]
 800482e:	4613      	mov	r3, r2
 8004830:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <SetDisplayWindow+0x40>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <SetDisplayWindow+0x40>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69dc      	ldr	r4, [r3, #28]
 8004842:	883b      	ldrh	r3, [r7, #0]
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	88b9      	ldrh	r1, [r7, #4]
 8004848:	88f8      	ldrh	r0, [r7, #6]
 800484a:	47a0      	blx	r4
  }  
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bd90      	pop	{r4, r7, pc}
 8004854:	200000b4 	.word	0x200000b4

08004858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	2b00      	cmp	r3, #0
 8004868:	db0b      	blt.n	8004882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4906      	ldr	r1, [pc, #24]	; (800488c <__NVIC_EnableIRQ+0x34>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2001      	movs	r0, #1
 800487a:	fa00 f202 	lsl.w	r2, r0, r2
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	e000e100 	.word	0xe000e100

08004890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db0a      	blt.n	80048ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	490c      	ldr	r1, [pc, #48]	; (80048dc <__NVIC_SetPriority+0x4c>)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	0112      	lsls	r2, r2, #4
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	440b      	add	r3, r1
 80048b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b8:	e00a      	b.n	80048d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4908      	ldr	r1, [pc, #32]	; (80048e0 <__NVIC_SetPriority+0x50>)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	3b04      	subs	r3, #4
 80048c8:	0112      	lsls	r2, r2, #4
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	440b      	add	r3, r1
 80048ce:	761a      	strb	r2, [r3, #24]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	e000e100 	.word	0xe000e100
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <LcdDirRead+0x70>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <LcdDirRead+0x70>)
 80048f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80048fa:	6013      	str	r3, [r2, #0]
  while(d--)
 80048fc:	e008      	b.n	8004910 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 80048fe:	4b16      	ldr	r3, [pc, #88]	; (8004958 <LcdDirRead+0x74>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8004904:	2000      	movs	r0, #0
 8004906:	f000 fb7f 	bl	8005008 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <LcdDirRead+0x74>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
  while(d--)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f1      	bne.n	80048fe <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <LcdDirRead+0x70>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004922:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <LcdDirRead+0x70>)
 8004924:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8004928:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800492a:	e002      	b.n	8004932 <LcdDirRead+0x4e>
    d = SPIX->DR;
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <LcdDirRead+0x78>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <LcdDirRead+0x7c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f8      	bne.n	800492c <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <LcdDirRead+0x78>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8004942:	4a06      	ldr	r2, [pc, #24]	; (800495c <LcdDirRead+0x78>)
 8004944:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 8004948:	6013      	str	r3, [r2, #0]
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40010c04 	.word	0x40010c04
 8004958:	422181b4 	.word	0x422181b4
 800495c:	40003800 	.word	0x40003800
 8004960:	42070100 	.word	0x42070100

08004964 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <LcdDirWrite+0x5c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <LcdDirWrite+0x5c>)
 8004970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004974:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004976:	e002      	b.n	800497e <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <LcdDirWrite+0x5c>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <LcdDirWrite+0x60>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f8      	bne.n	8004978 <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <LcdDirWrite+0x5c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <LcdDirWrite+0x5c>)
 8004990:	f043 0308 	orr.w	r3, r3, #8
 8004994:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8004996:	2001      	movs	r0, #1
 8004998:	f000 fb36 	bl	8005008 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800499c:	e002      	b.n	80049a4 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <LcdDirWrite+0x5c>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <LcdDirWrite+0x60>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f8      	bne.n	800499e <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <LcdDirWrite+0x5c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a03      	ldr	r2, [pc, #12]	; (80049c0 <LcdDirWrite+0x5c>)
 80049b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40003800 	.word	0x40003800
 80049c4:	42070100 	.word	0x42070100

080049c8 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 80049d2:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <LcdWrite8+0x2c>)
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 80049d8:	2002      	movs	r0, #2
 80049da:	f000 fb15 	bl	8005008 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80049de:	bf00      	nop
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <LcdWrite8+0x30>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1fb      	bne.n	80049e0 <LcdWrite8+0x18>
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40003800 	.word	0x40003800
 80049f8:	4207011c 	.word	0x4207011c

080049fc <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <LcdCmdWrite8+0x34>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8004a0c:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <LcdCmdWrite8+0x38>)
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8004a12:	2002      	movs	r0, #2
 8004a14:	f000 faf8 	bl	8005008 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8004a18:	bf00      	nop
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <LcdCmdWrite8+0x3c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1fb      	bne.n	8004a1a <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8004a22:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <LcdCmdWrite8+0x34>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	422181ac 	.word	0x422181ac
 8004a34:	40003800 	.word	0x40003800
 8004a38:	4207011c 	.word	0x4207011c

08004a3c <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8004a40:	bf00      	nop
 8004a42:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <WaitForDmaEnd+0x18>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1fb      	bne.n	8004a42 <WaitForDmaEnd+0x6>
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	20000a48 	.word	0x20000a48

08004a58 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8004a5c:	4b17      	ldr	r3, [pc, #92]	; (8004abc <DMA1_Channel5_IRQHandler+0x64>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d023      	beq.n	8004ab0 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <DMA1_Channel5_IRQHandler+0x64>)
 8004a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a6e:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8004a70:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <DMA1_Channel5_IRQHandler+0x68>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8004a76:	bf00      	nop
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <DMA1_Channel5_IRQHandler+0x68>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f9      	bne.n	8004a78 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <DMA1_Channel5_IRQHandler+0x6c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8004a8a:	bf00      	nop
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <DMA1_Channel5_IRQHandler+0x70>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1fb      	bne.n	8004a8c <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8004a94:	2003      	movs	r0, #3
 8004a96:	f000 fab7 	bl	8005008 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <DMA1_Channel5_IRQHandler+0x74>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d102      	bne.n	8004aa8 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <DMA1_Channel5_IRQHandler+0x78>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <DMA1_Channel5_IRQHandler+0x74>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8004aae:	e003      	b.n	8004ab8 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8004ab0:	4b02      	ldr	r3, [pc, #8]	; (8004abc <DMA1_Channel5_IRQHandler+0x64>)
 8004ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ab6:	605a      	str	r2, [r3, #4]
}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40020000 	.word	0x40020000
 8004ac0:	40020058 	.word	0x40020058
 8004ac4:	42070084 	.word	0x42070084
 8004ac8:	4207011c 	.word	0x4207011c
 8004acc:	20000a48 	.word	0x20000a48
 8004ad0:	422181b0 	.word	0x422181b0

08004ad4 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <LCD_IO_WriteMultiData+0x74>)
 8004ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ae6:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8004ae8:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <LCD_IO_WriteMultiData+0x78>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <LCD_IO_WriteMultiData+0x78>)
 8004aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af2:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8004afa:	bf00      	nop
 8004afc:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f9      	bne.n	8004afc <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004b10:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <LCD_IO_WriteMultiData+0x80>)
 8004b12:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8004b14:	4a0e      	ldr	r2, [pc, #56]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8004b1a:	4a0d      	ldr	r2, [pc, #52]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <LCD_IO_WriteMultiData+0x84>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <LCD_IO_WriteMultiData+0x78>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <LCD_IO_WriteMultiData+0x78>)
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b30:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <LCD_IO_WriteMultiData+0x7c>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	6013      	str	r3, [r2, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	40020000 	.word	0x40020000
 8004b4c:	40003800 	.word	0x40003800
 8004b50:	40020058 	.word	0x40020058
 8004b54:	4000380c 	.word	0x4000380c
 8004b58:	42070084 	.word	0x42070084

08004b5c <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <LCD_IO_WriteMultiData8+0x98>)
 8004b74:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8004b76:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <LCD_IO_WriteMultiData8+0x98>)
 8004b78:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8004b7a:	f241 0312 	movw	r3, #4114	; 0x1012
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	e030      	b.n	8004be4 <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8004b82:	f241 0392 	movw	r3, #4242	; 0x1092
 8004b86:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8004b88:	e02c      	b.n	8004be4 <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d80f      	bhi.n	8004bb4 <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8004b94:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <LCD_IO_WriteMultiData8+0x9c>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff ff98 	bl	8004ad4 <LCD_IO_WriteMultiData>
      Size = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01a      	beq.n	8004be4 <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8004bae:	f7ff ff45 	bl	8004a3c <WaitForDmaEnd>
 8004bb2:	e017      	b.n	8004be4 <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <LCD_IO_WriteMultiData8+0x9c>)
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff ff87 	bl	8004ad4 <LCD_IO_WriteMultiData>
      if(dinc)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004bd2:	33fe      	adds	r3, #254	; 0xfe
 8004bd4:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8004bdc:	3bfe      	subs	r3, #254	; 0xfe
 8004bde:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8004be0:	f7ff ff2c 	bl	8004a3c <WaitForDmaEnd>
  while(Size)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1cf      	bne.n	8004b8a <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000a4c 	.word	0x20000a4c
 8004bf8:	20000a48 	.word	0x20000a48

08004bfc <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	4b31      	ldr	r3, [pc, #196]	; (8004cd8 <LCD_IO_WriteMultiData16+0xdc>)
 8004c14:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <LCD_IO_WriteMultiData16+0xdc>)
 8004c18:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8004c1a:	f241 5312 	movw	r3, #5394	; 0x1512
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e051      	b.n	8004cc6 <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8004c22:	f241 5392 	movw	r3, #5522	; 0x1592
 8004c26:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8004c28:	e04d      	b.n	8004cc6 <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d80f      	bhi.n	8004c54 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8004c34:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <LCD_IO_WriteMultiData16+0xe0>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff ff48 	bl	8004ad4 <LCD_IO_WriteMultiData>
      Size = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d03b      	beq.n	8004cc6 <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 8004c4e:	f7ff fef5 	bl	8004a3c <WaitForDmaEnd>
 8004c52:	e038      	b.n	8004cc6 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <LCD_IO_WriteMultiData16+0xe4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d81b      	bhi.n	8004c94 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <LCD_IO_WriteMultiData16+0xe0>)
 8004c5e:	2202      	movs	r2, #2
 8004c60:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8004c68:	3bfe      	subs	r3, #254	; 0xfe
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff ff30 	bl	8004ad4 <LCD_IO_WriteMultiData>
      if(dinc)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d006      	beq.n	8004c88 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <LCD_IO_WriteMultiData16+0xe8>)
 8004c7e:	4413      	add	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8004c88:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004c8c:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8004c8e:	f7ff fed5 	bl	8004a3c <WaitForDmaEnd>
 8004c92:	e018      	b.n	8004cc6 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <LCD_IO_WriteMultiData16+0xe0>)
 8004c96:	2202      	movs	r2, #2
 8004c98:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff ff17 	bl	8004ad4 <LCD_IO_WriteMultiData>
      if(dinc)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8004cb2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004cb6:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8004cbe:	3bfe      	subs	r3, #254	; 0xfe
 8004cc0:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8004cc2:	f7ff febb 	bl	8004a3c <WaitForDmaEnd>
  while(Size)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ae      	bne.n	8004c2a <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000a4e 	.word	0x20000a4e
 8004cdc:	20000a48 	.word	0x20000a48
 8004ce0:	0001fffb 	.word	0x0001fffb
 8004ce4:	7fff0002 	.word	0x7fff0002

08004ce8 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8004cee:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <DMA1_Channel4_IRQHandler+0x98>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03a      	beq.n	8004d70 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8004cfa:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <DMA1_Channel4_IRQHandler+0x98>)
 8004cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d00:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <DMA1_Channel4_IRQHandler+0x9c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004d08:	e002      	b.n	8004d10 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 8004d0a:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <DMA1_Channel4_IRQHandler+0xa0>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004d10:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <DMA1_Channel4_IRQHandler+0xa4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f8      	bne.n	8004d0a <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8004d18:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <DMA1_Channel4_IRQHandler+0xa8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d20:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <DMA1_Channel4_IRQHandler+0xa8>)
 8004d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d2a:	f043 0318 	orr.w	r3, r3, #24
 8004d2e:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f000 f969 	bl	8005008 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004d36:	e003      	b.n	8004d40 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <DMA1_Channel4_IRQHandler+0xa8>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <DMA1_Channel4_IRQHandler+0xa4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f7      	bne.n	8004d38 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <DMA1_Channel4_IRQHandler+0xa8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a10      	ldr	r2, [pc, #64]	; (8004d90 <DMA1_Channel4_IRQHandler+0xa8>)
 8004d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d52:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <DMA1_Channel4_IRQHandler+0xac>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004d5a:	bf00      	nop
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <DMA1_Channel4_IRQHandler+0xac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f9      	bne.n	8004d5c <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <DMA1_Channel4_IRQHandler+0xb0>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8004d6e:	e003      	b.n	8004d78 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <DMA1_Channel4_IRQHandler+0x98>)
 8004d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d76:	605a      	str	r2, [r3, #4]
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40020000 	.word	0x40020000
 8004d84:	42070080 	.word	0x42070080
 8004d88:	4000380c 	.word	0x4000380c
 8004d8c:	42070100 	.word	0x42070100
 8004d90:	40003800 	.word	0x40003800
 8004d94:	40020044 	.word	0x40020044
 8004d98:	20000a48 	.word	0x20000a48

08004d9c <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <LCD_IO_ReadMultiData+0x5c>)
 8004daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dae:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8004db0:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004db6:	bf00      	nop
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f9      	bne.n	8004db8 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004dcc:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <LCD_IO_ReadMultiData+0x64>)
 8004dce:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a06      	ldr	r2, [pc, #24]	; (8004dfc <LCD_IO_ReadMultiData+0x60>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <LCD_IO_ReadMultiData+0x68>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	40020000 	.word	0x40020000
 8004dfc:	40020044 	.word	0x40020044
 8004e00:	4000380c 	.word	0x4000380c
 8004e04:	42070080 	.word	0x42070080

08004e08 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8004e12:	f241 0382 	movw	r3, #4226	; 0x1082
 8004e16:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8004e18:	e024      	b.n	8004e64 <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d913      	bls.n	8004e4c <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <LCD_IO_ReadMultiData8+0x74>)
 8004e26:	2202      	movs	r2, #2
 8004e28:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ffb3 	bl	8004d9c <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8004e3c:	3bfe      	subs	r3, #254	; 0xfe
 8004e3e:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004e46:	33fe      	adds	r3, #254	; 0xfe
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	e009      	b.n	8004e60 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <LCD_IO_ReadMultiData8+0x74>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff ffa0 	bl	8004d9c <LCD_IO_ReadMultiData>
      Size = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8004e60:	f7ff fdec 	bl	8004a3c <WaitForDmaEnd>
  while(Size)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1d7      	bne.n	8004e1a <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <LCD_IO_ReadMultiData8+0x78>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8004e70:	f7ff fd78 	bl	8004964 <LcdDirWrite>
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000a48 	.word	0x20000a48
 8004e80:	422181b0 	.word	0x422181b0

08004e84 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8004e96:	4b54      	ldr	r3, [pc, #336]	; (8004fe8 <LCD_IO_ReadMultiData16to24+0x164>)
 8004e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e9c:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8004e9e:	4b53      	ldr	r3, [pc, #332]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004ea4:	bf00      	nop
 8004ea6:	4b51      	ldr	r3, [pc, #324]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f9      	bne.n	8004ea6 <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8004eb2:	4b4e      	ldr	r3, [pc, #312]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004eb4:	4a4e      	ldr	r2, [pc, #312]	; (8004ff0 <LCD_IO_ReadMultiData16to24+0x16c>)
 8004eb6:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8004eb8:	4b4c      	ldr	r3, [pc, #304]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004eba:	4a4e      	ldr	r2, [pc, #312]	; (8004ff4 <LCD_IO_ReadMultiData16to24+0x170>)
 8004ebc:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8004ebe:	4b4b      	ldr	r3, [pc, #300]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ec4:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8004ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eca:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8004ecc:	4b47      	ldr	r3, [pc, #284]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004ece:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 8004ed2:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8004ed4:	4b45      	ldr	r3, [pc, #276]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a44      	ldr	r2, [pc, #272]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 8004ee0:	4b45      	ldr	r3, [pc, #276]	; (8004ff8 <LCD_IO_ReadMultiData16to24+0x174>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
  while(Size)
 8004ee6:	e044      	b.n	8004f72 <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d03f      	beq.n	8004f72 <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8004efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f02:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	1c53      	adds	r3, r2, #1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1c59      	adds	r1, r3, #1
 8004f14:	6139      	str	r1, [r7, #16]
 8004f16:	4936      	ldr	r1, [pc, #216]	; (8004ff0 <LCD_IO_ReadMultiData16to24+0x16c>)
 8004f18:	5c8a      	ldrb	r2, [r1, r2]
 8004f1a:	3318      	adds	r3, #24
 8004f1c:	443b      	add	r3, r7
 8004f1e:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2bff      	cmp	r3, #255	; 0xff
 8004f26:	d901      	bls.n	8004f2c <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d11f      	bne.n	8004f72 <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
        Size--;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8004f3c:	7a3b      	ldrb	r3, [r7, #8]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f46:	f023 0307 	bic.w	r3, r3, #7
 8004f4a:	b21a      	sxth	r2, r3
 8004f4c:	7a7b      	ldrb	r3, [r7, #9]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	b21b      	sxth	r3, r3
 8004f52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b21a      	sxth	r2, r3
 8004f5c:	7abb      	ldrb	r3, [r7, #10]
 8004f5e:	08db      	lsrs	r3, r3, #3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b219      	sxth	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	b28a      	uxth	r2, r1
 8004f70:	801a      	strh	r2, [r3, #0]
  while(Size)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1b7      	bne.n	8004ee8 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 8004f78:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <LCD_IO_ReadMultiData16to24+0x174>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004f7e:	e003      	b.n	8004f88 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 8004f80:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <LCD_IO_ReadMultiData16to24+0x178>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004f88:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <LCD_IO_ReadMultiData16to24+0x17c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f7      	bne.n	8004f80 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8004f90:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <LCD_IO_ReadMultiData16to24+0x178>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f98:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004f9c:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <LCD_IO_ReadMultiData16to24+0x178>)
 8004f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa2:	f043 0308 	orr.w	r3, r3, #8
 8004fa6:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f000 f82d 	bl	8005008 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004fae:	e003      	b.n	8004fb8 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <LCD_IO_ReadMultiData16to24+0x178>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <LCD_IO_ReadMultiData16to24+0x17c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f7      	bne.n	8004fb0 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004fc6:	bf00      	nop
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <LCD_IO_ReadMultiData16to24+0x168>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f9      	bne.n	8004fc8 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <LCD_IO_ReadMultiData16to24+0x180>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8004fda:	f7ff fcc3 	bl	8004964 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8004fde:	bf00      	nop
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40020000 	.word	0x40020000
 8004fec:	40020044 	.word	0x40020044
 8004ff0:	20000a50 	.word	0x20000a50
 8004ff4:	4000380c 	.word	0x4000380c
 8004ff8:	42070080 	.word	0x42070080
 8004ffc:	40003800 	.word	0x40003800
 8005000:	42070100 	.word	0x42070100
 8005004:	422181b0 	.word	0x422181b0

08005008 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  while(c--);
 8005010:	bf00      	nop
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1e5a      	subs	r2, r3, #1
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1fa      	bne.n	8005012 <LCD_IO_Delay+0xa>
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f9ff 	bl	8005434 <HAL_Delay>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <LCD_IO_Bl_OnOff+0x28>)
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8005056:	e002      	b.n	800505e <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <LCD_IO_Bl_OnOff+0x28>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	42220198 	.word	0x42220198

0800506c <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8005070:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <LCD_IO_Init+0x104>)
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4a3e      	ldr	r2, [pc, #248]	; (8005170 <LCD_IO_Init+0x104>)
 8005076:	f043 0318 	orr.w	r3, r3, #24
 800507a:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 800507c:	4b3c      	ldr	r3, [pc, #240]	; (8005170 <LCD_IO_Init+0x104>)
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	4a3b      	ldr	r2, [pc, #236]	; (8005170 <LCD_IO_Init+0x104>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8005088:	4b3a      	ldr	r3, [pc, #232]	; (8005174 <LCD_IO_Init+0x108>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005090:	4a38      	ldr	r2, [pc, #224]	; (8005174 <LCD_IO_Init+0x108>)
 8005092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005096:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8005098:	4b37      	ldr	r3, [pc, #220]	; (8005178 <LCD_IO_Init+0x10c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80050a0:	4a35      	ldr	r2, [pc, #212]	; (8005178 <LCD_IO_Init+0x10c>)
 80050a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050a6:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 80050a8:	2001      	movs	r0, #1
 80050aa:	f7ff ffc9 	bl	8005040 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <LCD_IO_Init+0x108>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050b6:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <LCD_IO_Init+0x108>)
 80050b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050bc:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <LCD_IO_Init+0x110>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80050c4:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <LCD_IO_Init+0x114>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80050ca:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <LCD_IO_Init+0x118>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <LCD_IO_Init+0x108>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d8:	4a26      	ldr	r2, [pc, #152]	; (8005174 <LCD_IO_Init+0x108>)
 80050da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80050de:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 80050e0:	4b24      	ldr	r3, [pc, #144]	; (8005174 <LCD_IO_Init+0x108>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80050e8:	4a22      	ldr	r2, [pc, #136]	; (8005174 <LCD_IO_Init+0x108>)
 80050ea:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80050ee:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <LCD_IO_Init+0x11c>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 80050f6:	4b25      	ldr	r3, [pc, #148]	; (800518c <LCD_IO_Init+0x120>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <LCD_IO_Init+0x108>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <LCD_IO_Init+0x108>)
 8005106:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 800510a:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <LCD_IO_Init+0x108>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <LCD_IO_Init+0x108>)
 8005116:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 800511a:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <LCD_IO_Init+0x124>)
 800511e:	f240 324f 	movw	r2, #847	; 0x34f
 8005122:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8005124:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <LCD_IO_Init+0x124>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <LCD_IO_Init+0x124>)
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8005130:	200a      	movs	r0, #10
 8005132:	f7ff ff79 	bl	8005028 <LCD_Delay>
  LCD_RST_ON;
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <LCD_IO_Init+0x110>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 800513c:	200a      	movs	r0, #10
 800513e:	f7ff ff73 	bl	8005028 <LCD_Delay>
  LCD_RST_OFF;
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <LCD_IO_Init+0x110>)
 8005144:	2201      	movs	r2, #1
 8005146:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8005148:	200a      	movs	r0, #10
 800514a:	f7ff ff6d 	bl	8005028 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 800514e:	210f      	movs	r1, #15
 8005150:	200f      	movs	r0, #15
 8005152:	f7ff fb9d 	bl	8004890 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8005156:	200f      	movs	r0, #15
 8005158:	f7ff fb7e 	bl	8004858 <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 800515c:	210f      	movs	r1, #15
 800515e:	200e      	movs	r0, #14
 8005160:	f7ff fb96 	bl	8004890 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8005164:	200e      	movs	r0, #14
 8005166:	f7ff fb77 	bl	8004858 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	40010c04 	.word	0x40010c04
 8005178:	40011000 	.word	0x40011000
 800517c:	422181a8 	.word	0x422181a8
 8005180:	422181ac 	.word	0x422181ac
 8005184:	422181b0 	.word	0x422181b0
 8005188:	422181b4 	.word	0x422181b4
 800518c:	424203b8 	.word	0x424203b8
 8005190:	40003800 	.word	0x40003800

08005194 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 800519e:	f7ff fc4d 	bl	8004a3c <WaitForDmaEnd>
  LcdSpiMode8();
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <LCD_IO_WriteCmd8+0x30>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <LCD_IO_WriteCmd8+0x34>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fc23 	bl	80049fc <LcdCmdWrite8>
  LCD_CS_OFF;
 80051b6:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <LCD_IO_WriteCmd8+0x34>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	4207002c 	.word	0x4207002c
 80051c8:	422181b0 	.word	0x422181b0

080051cc <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 80051d6:	f7ff fc31 	bl	8004a3c <WaitForDmaEnd>
  LcdSpiMode8();
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <LCD_IO_WriteData8+0x30>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <LCD_IO_WriteData8+0x34>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fbed 	bl	80049c8 <LcdWrite8>
  LCD_CS_OFF;
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <LCD_IO_WriteData8+0x34>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	4207002c 	.word	0x4207002c
 8005200:	422181b0 	.word	0x422181b0

08005204 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	603a      	str	r2, [r7, #0]
 800520e:	71fb      	strb	r3, [r7, #7]
 8005210:	460b      	mov	r3, r1
 8005212:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8005214:	f7ff fc12 	bl	8004a3c <WaitForDmaEnd>
  LcdSpiMode8();
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <LCD_IO_WriteCmd8DataFill16+0x44>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <LCD_IO_WriteCmd8DataFill16+0x48>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fbe8 	bl	80049fc <LcdCmdWrite8>
  LcdSpiMode16();
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <LCD_IO_WriteCmd8DataFill16+0x44>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	2200      	movs	r2, #0
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fcdf 	bl	8004bfc <LCD_IO_WriteMultiData16>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	4207002c 	.word	0x4207002c
 800524c:	422181b0 	.word	0x422181b0

08005250 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800525e:	f7ff fbed 	bl	8004a3c <WaitForDmaEnd>
  LcdSpiMode8();
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fbc3 	bl	80049fc <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8005276:	2201      	movs	r2, #1
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	68b8      	ldr	r0, [r7, #8]
 800527c:	f7ff fc6e 	bl	8004b5c <LCD_IO_WriteMultiData8>
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	4207002c 	.word	0x4207002c
 800528c:	422181b0 	.word	0x422181b0

08005290 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800529e:	f7ff fbcd 	bl	8004a3c <WaitForDmaEnd>
  LcdSpiMode8();
 80052a2:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fba3 	bl	80049fc <LcdCmdWrite8>
  LcdSpiMode16();
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 80052bc:	2201      	movs	r2, #1
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	68b8      	ldr	r0, [r7, #8]
 80052c2:	f7ff fc9b 	bl	8004bfc <LCD_IO_WriteMultiData16>
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	4207002c 	.word	0x4207002c
 80052d4:	422181b0 	.word	0x422181b0

080052d8 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80052e8:	f7ff fba8 	bl	8004a3c <WaitForDmaEnd>
  LcdSpiMode8();
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <LCD_IO_ReadCmd8MultipleData8+0x44>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fb7e 	bl	80049fc <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8005306:	6838      	ldr	r0, [r7, #0]
 8005308:	f7ff faec 	bl	80048e4 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	68b8      	ldr	r0, [r7, #8]
 8005310:	f7ff fd7a 	bl	8004e08 <LCD_IO_ReadMultiData8>
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	4207002c 	.word	0x4207002c
 8005320:	422181b0 	.word	0x422181b0

08005324 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8005334:	f7ff fb82 	bl	8004a3c <WaitForDmaEnd>
  LcdSpiMode8();
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fb58 	bl	80049fc <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8005352:	6838      	ldr	r0, [r7, #0]
 8005354:	f7ff fac6 	bl	80048e4 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f7ff fd92 	bl	8004e84 <LCD_IO_ReadMultiData16to24>
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	4207002c 	.word	0x4207002c
 800536c:	422181b0 	.word	0x422181b0

08005370 <HAL_Init>:
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_Init+0x28>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_Init+0x28>)
 800537a:	f043 0310 	orr.w	r3, r3, #16
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	2003      	movs	r0, #3
 8005382:	f000 fb59 	bl	8005a38 <HAL_NVIC_SetPriorityGrouping>
 8005386:	200f      	movs	r0, #15
 8005388:	f000 f808 	bl	800539c <HAL_InitTick>
 800538c:	f7fd ff3a 	bl	8003204 <HAL_MspInit>
 8005390:	2300      	movs	r3, #0
 8005392:	4618      	mov	r0, r3
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40022000 	.word	0x40022000

0800539c <HAL_InitTick>:
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_InitTick+0x54>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_InitTick+0x58>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fb71 	bl	8005aa2 <HAL_SYSTICK_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_InitTick+0x2e>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00e      	b.n	80053e8 <HAL_InitTick+0x4c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d80a      	bhi.n	80053e6 <HAL_InitTick+0x4a>
 80053d0:	2200      	movs	r2, #0
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	f000 fb39 	bl	8005a4e <HAL_NVIC_SetPriority>
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <HAL_InitTick+0x5c>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_InitTick+0x4c>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000006c 	.word	0x2000006c
 80053f4:	200000bc 	.word	0x200000bc
 80053f8:	200000b8 	.word	0x200000b8

080053fc <HAL_IncTick>:
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_IncTick+0x1c>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_IncTick+0x20>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4413      	add	r3, r2
 800540c:	4a03      	ldr	r2, [pc, #12]	; (800541c <HAL_IncTick+0x20>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	200000bc 	.word	0x200000bc
 800541c:	20000b50 	.word	0x20000b50

08005420 <HAL_GetTick>:
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <HAL_GetTick+0x10>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	20000b50 	.word	0x20000b50

08005434 <HAL_Delay>:
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	f7ff fff0 	bl	8005420 <HAL_GetTick>
 8005440:	60b8      	str	r0, [r7, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d005      	beq.n	800545a <HAL_Delay+0x26>
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <HAL_Delay+0x44>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	bf00      	nop
 800545c:	f7ff ffe0 	bl	8005420 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	429a      	cmp	r2, r3
 800546a:	d8f7      	bhi.n	800545c <HAL_Delay+0x28>
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200000bc 	.word	0x200000bc

0800547c <HAL_ADC_Init>:
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	2300      	movs	r3, #0
 8005486:	75fb      	strb	r3, [r7, #23]
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_ADC_Init+0x22>
 800549a:	2301      	movs	r3, #1
 800549c:	e0be      	b.n	800561c <HAL_ADC_Init+0x1a0>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_ADC_Init+0x44>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fd fed4 	bl	8003268 <HAL_ADC_MspInit>
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f9ab 	bl	800581c <ADC_ConversionStop_Disable>
 80054c6:	4603      	mov	r3, r0
 80054c8:	75fb      	strb	r3, [r7, #23]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f040 8099 	bne.w	800560a <HAL_ADC_Init+0x18e>
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 8095 	bne.w	800560a <HAL_ADC_Init+0x18e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054e8:	f023 0302 	bic.w	r3, r3, #2
 80054ec:	f043 0202 	orr.w	r2, r3, #2
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7b1b      	ldrb	r3, [r3, #12]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4313      	orrs	r3, r2
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005514:	d003      	beq.n	800551e <HAL_ADC_Init+0xa2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <HAL_ADC_Init+0xa8>
 800551e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005522:	e000      	b.n	8005526 <HAL_ADC_Init+0xaa>
 8005524:	2300      	movs	r3, #0
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7d1b      	ldrb	r3, [r3, #20]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d119      	bne.n	8005568 <HAL_ADC_Init+0xec>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	7b1b      	ldrb	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <HAL_ADC_Init+0xd4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	3b01      	subs	r3, #1
 8005542:	035a      	lsls	r2, r3, #13
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e00b      	b.n	8005568 <HAL_ADC_Init+0xec>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	f043 0220 	orr.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	f043 0201 	orr.w	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	4b28      	ldr	r3, [pc, #160]	; (8005624 <HAL_ADC_Init+0x1a8>)
 8005584:	4013      	ands	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	430b      	orrs	r3, r1
 800558e:	6093      	str	r3, [r2, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d003      	beq.n	80055a2 <HAL_ADC_Init+0x126>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d104      	bne.n	80055ac <HAL_ADC_Init+0x130>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	051b      	lsls	r3, r3, #20
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	430a      	orrs	r2, r1
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b18      	ldr	r3, [pc, #96]	; (8005628 <HAL_ADC_Init+0x1ac>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d10b      	bne.n	80055e8 <HAL_ADC_Init+0x16c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	f023 0303 	bic.w	r3, r3, #3
 80055de:	f043 0201 	orr.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	629a      	str	r2, [r3, #40]	; 0x28
 80055e6:	e018      	b.n	800561a <HAL_ADC_Init+0x19e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	f023 0312 	bic.w	r3, r3, #18
 80055f0:	f043 0210 	orr.w	r2, r3, #16
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	f043 0201 	orr.w	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
 8005608:	e007      	b.n	800561a <HAL_ADC_Init+0x19e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f043 0210 	orr.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	629a      	str	r2, [r3, #40]	; 0x28
 8005616:	2301      	movs	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	ffe1f7fd 	.word	0xffe1f7fd
 8005628:	ff1f0efe 	.word	0xff1f0efe

0800562c <HAL_ADC_ConfigChannel>:
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x20>
 8005648:	2302      	movs	r3, #2
 800564a:	e0dc      	b.n	8005806 <HAL_ADC_ConfigChannel+0x1da>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b06      	cmp	r3, #6
 800565a:	d81c      	bhi.n	8005696 <HAL_ADC_ConfigChannel+0x6a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	3b05      	subs	r3, #5
 800566e:	221f      	movs	r2, #31
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	4019      	ands	r1, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	3b05      	subs	r3, #5
 8005688:	fa00 f203 	lsl.w	r2, r0, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	635a      	str	r2, [r3, #52]	; 0x34
 8005694:	e03c      	b.n	8005710 <HAL_ADC_ConfigChannel+0xe4>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d81c      	bhi.n	80056d8 <HAL_ADC_ConfigChannel+0xac>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	3b23      	subs	r3, #35	; 0x23
 80056b0:	221f      	movs	r2, #31
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	4019      	ands	r1, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	3b23      	subs	r3, #35	; 0x23
 80056ca:	fa00 f203 	lsl.w	r2, r0, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
 80056d6:	e01b      	b.n	8005710 <HAL_ADC_ConfigChannel+0xe4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	3b41      	subs	r3, #65	; 0x41
 80056ea:	221f      	movs	r2, #31
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	4019      	ands	r1, r3
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	3b41      	subs	r3, #65	; 0x41
 8005704:	fa00 f203 	lsl.w	r2, r0, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b09      	cmp	r3, #9
 8005716:	d91c      	bls.n	8005752 <HAL_ADC_ConfigChannel+0x126>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68d9      	ldr	r1, [r3, #12]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	3b1e      	subs	r3, #30
 800572a:	2207      	movs	r2, #7
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	4019      	ands	r1, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6898      	ldr	r0, [r3, #8]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	3b1e      	subs	r3, #30
 8005744:	fa00 f203 	lsl.w	r2, r0, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e019      	b.n	8005786 <HAL_ADC_ConfigChannel+0x15a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6919      	ldr	r1, [r3, #16]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	2207      	movs	r2, #7
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	4019      	ands	r1, r3
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6898      	ldr	r0, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	fa00 f203 	lsl.w	r2, r0, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b10      	cmp	r3, #16
 800578c:	d003      	beq.n	8005796 <HAL_ADC_ConfigChannel+0x16a>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b11      	cmp	r3, #17
 8005794:	d132      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x1d0>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_ADC_ConfigChannel+0x1e4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d125      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x1c0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d126      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x1d0>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d11a      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x1d0>
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <HAL_ADC_ConfigChannel+0x1e8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a13      	ldr	r2, [pc, #76]	; (8005818 <HAL_ADC_ConfigChannel+0x1ec>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	0c9a      	lsrs	r2, r3, #18
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	e002      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x1b8>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f9      	bne.n	80057de <HAL_ADC_ConfigChannel+0x1b2>
 80057ea:	e007      	b.n	80057fc <HAL_ADC_ConfigChannel+0x1d0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	629a      	str	r2, [r3, #40]	; 0x28
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr
 8005810:	40012400 	.word	0x40012400
 8005814:	2000006c 	.word	0x2000006c
 8005818:	431bde83 	.word	0x431bde83

0800581c <ADC_ConversionStop_Disable>:
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d12e      	bne.n	8005894 <ADC_ConversionStop_Disable+0x78>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	609a      	str	r2, [r3, #8]
 8005846:	f7ff fdeb 	bl	8005420 <HAL_GetTick>
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	e01b      	b.n	8005886 <ADC_ConversionStop_Disable+0x6a>
 800584e:	f7ff fde7 	bl	8005420 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d914      	bls.n	8005886 <ADC_ConversionStop_Disable+0x6a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b01      	cmp	r3, #1
 8005868:	d10d      	bne.n	8005886 <ADC_ConversionStop_Disable+0x6a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	629a      	str	r2, [r3, #40]	; 0x28
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	62da      	str	r2, [r3, #44]	; 0x2c
 8005882:	2301      	movs	r3, #1
 8005884:	e007      	b.n	8005896 <ADC_ConversionStop_Disable+0x7a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d0dc      	beq.n	800584e <ADC_ConversionStop_Disable+0x32>
 8005894:	2300      	movs	r3, #0
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <__NVIC_SetPriorityGrouping>:
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <__NVIC_SetPriorityGrouping+0x44>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058bc:	4013      	ands	r3, r2
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	4a04      	ldr	r2, [pc, #16]	; (80058e4 <__NVIC_SetPriorityGrouping+0x44>)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	60d3      	str	r3, [r2, #12]
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	e000ed00 	.word	0xe000ed00

080058e8 <__NVIC_GetPriorityGrouping>:
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <__NVIC_GetPriorityGrouping+0x18>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	4618      	mov	r0, r3
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <__NVIC_EnableIRQ>:
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	71fb      	strb	r3, [r7, #7]
 800590e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005912:	2b00      	cmp	r3, #0
 8005914:	db0b      	blt.n	800592e <__NVIC_EnableIRQ+0x2a>
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	f003 021f 	and.w	r2, r3, #31
 800591c:	4906      	ldr	r1, [pc, #24]	; (8005938 <__NVIC_EnableIRQ+0x34>)
 800591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	2001      	movs	r0, #1
 8005926:	fa00 f202 	lsl.w	r2, r0, r2
 800592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	e000e100 	.word	0xe000e100

0800593c <__NVIC_SetPriority>:
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	6039      	str	r1, [r7, #0]
 8005946:	71fb      	strb	r3, [r7, #7]
 8005948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594c:	2b00      	cmp	r3, #0
 800594e:	db0a      	blt.n	8005966 <__NVIC_SetPriority+0x2a>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	b2da      	uxtb	r2, r3
 8005954:	490c      	ldr	r1, [pc, #48]	; (8005988 <__NVIC_SetPriority+0x4c>)
 8005956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595a:	0112      	lsls	r2, r2, #4
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	440b      	add	r3, r1
 8005960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005964:	e00a      	b.n	800597c <__NVIC_SetPriority+0x40>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	4908      	ldr	r1, [pc, #32]	; (800598c <__NVIC_SetPriority+0x50>)
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	3b04      	subs	r3, #4
 8005974:	0112      	lsls	r2, r2, #4
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	440b      	add	r3, r1
 800597a:	761a      	strb	r2, [r3, #24]
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	e000e100 	.word	0xe000e100
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <NVIC_EncodePriority>:
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f1c3 0307 	rsb	r3, r3, #7
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	bf28      	it	cs
 80059ae:	2304      	movcs	r3, #4
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3304      	adds	r3, #4
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d902      	bls.n	80059c0 <NVIC_EncodePriority+0x30>
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3b03      	subs	r3, #3
 80059be:	e000      	b.n	80059c2 <NVIC_EncodePriority+0x32>
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	43da      	mvns	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	401a      	ands	r2, r3
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	409a      	lsls	r2, r3
 80059d8:	f04f 31ff 	mov.w	r1, #4294967295
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	fa01 f303 	lsl.w	r3, r1, r3
 80059e2:	43d9      	mvns	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	400b      	ands	r3, r1
 80059e8:	4313      	orrs	r3, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	3724      	adds	r7, #36	; 0x24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <SysTick_Config>:
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a04:	d301      	bcc.n	8005a0a <SysTick_Config+0x16>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e00f      	b.n	8005a2a <SysTick_Config+0x36>
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <SysTick_Config+0x40>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	6053      	str	r3, [r2, #4]
 8005a12:	210f      	movs	r1, #15
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	f7ff ff90 	bl	800593c <__NVIC_SetPriority>
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <SysTick_Config+0x40>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <SysTick_Config+0x40>)
 8005a24:	2207      	movs	r2, #7
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	e000e010 	.word	0xe000e010

08005a38 <HAL_NVIC_SetPriorityGrouping>:
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff ff2d 	bl	80058a0 <__NVIC_SetPriorityGrouping>
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_NVIC_SetPriority>:
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	4603      	mov	r3, r0
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	73fb      	strb	r3, [r7, #15]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	f7ff ff42 	bl	80058e8 <__NVIC_GetPriorityGrouping>
 8005a64:	6178      	str	r0, [r7, #20]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	6978      	ldr	r0, [r7, #20]
 8005a6c:	f7ff ff90 	bl	8005990 <NVIC_EncodePriority>
 8005a70:	4602      	mov	r2, r0
 8005a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff ff5f 	bl	800593c <__NVIC_SetPriority>
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_NVIC_EnableIRQ>:
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	71fb      	strb	r3, [r7, #7]
 8005a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff ff35 	bl	8005904 <__NVIC_EnableIRQ>
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_SYSTICK_Config>:
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ffa2 	bl	80059f4 <SysTick_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <HAL_DMA_Init>:
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_DMA_Init+0x16>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e043      	b.n	8005b5a <HAL_DMA_Init+0x9e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <HAL_DMA_Init+0xa8>)
 8005ada:	4413      	add	r3, r2
 8005adc:	4a22      	ldr	r2, [pc, #136]	; (8005b68 <HAL_DMA_Init+0xac>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	091b      	lsrs	r3, r3, #4
 8005ae4:	009a      	lsls	r2, r3, #2
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1f      	ldr	r2, [pc, #124]	; (8005b6c <HAL_DMA_Init+0xb0>)
 8005aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2020 	strb.w	r2, [r3, #32]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	bffdfff8 	.word	0xbffdfff8
 8005b68:	cccccccd 	.word	0xcccccccd
 8005b6c:	40020000 	.word	0x40020000

08005b70 <HAL_GPIO_Init>:
 8005b70:	b480      	push	{r7}
 8005b72:	b08b      	sub	sp, #44	; 0x2c
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	2300      	movs	r3, #0
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	e169      	b.n	8005e58 <HAL_GPIO_Init+0x2e8>
 8005b84:	2201      	movs	r2, #1
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	4013      	ands	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	f040 8158 	bne.w	8005e52 <HAL_GPIO_Init+0x2e2>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4a9a      	ldr	r2, [pc, #616]	; (8005e10 <HAL_GPIO_Init+0x2a0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d05e      	beq.n	8005c6a <HAL_GPIO_Init+0xfa>
 8005bac:	4a98      	ldr	r2, [pc, #608]	; (8005e10 <HAL_GPIO_Init+0x2a0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d875      	bhi.n	8005c9e <HAL_GPIO_Init+0x12e>
 8005bb2:	4a98      	ldr	r2, [pc, #608]	; (8005e14 <HAL_GPIO_Init+0x2a4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d058      	beq.n	8005c6a <HAL_GPIO_Init+0xfa>
 8005bb8:	4a96      	ldr	r2, [pc, #600]	; (8005e14 <HAL_GPIO_Init+0x2a4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d86f      	bhi.n	8005c9e <HAL_GPIO_Init+0x12e>
 8005bbe:	4a96      	ldr	r2, [pc, #600]	; (8005e18 <HAL_GPIO_Init+0x2a8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d052      	beq.n	8005c6a <HAL_GPIO_Init+0xfa>
 8005bc4:	4a94      	ldr	r2, [pc, #592]	; (8005e18 <HAL_GPIO_Init+0x2a8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d869      	bhi.n	8005c9e <HAL_GPIO_Init+0x12e>
 8005bca:	4a94      	ldr	r2, [pc, #592]	; (8005e1c <HAL_GPIO_Init+0x2ac>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d04c      	beq.n	8005c6a <HAL_GPIO_Init+0xfa>
 8005bd0:	4a92      	ldr	r2, [pc, #584]	; (8005e1c <HAL_GPIO_Init+0x2ac>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d863      	bhi.n	8005c9e <HAL_GPIO_Init+0x12e>
 8005bd6:	4a92      	ldr	r2, [pc, #584]	; (8005e20 <HAL_GPIO_Init+0x2b0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d046      	beq.n	8005c6a <HAL_GPIO_Init+0xfa>
 8005bdc:	4a90      	ldr	r2, [pc, #576]	; (8005e20 <HAL_GPIO_Init+0x2b0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d85d      	bhi.n	8005c9e <HAL_GPIO_Init+0x12e>
 8005be2:	2b12      	cmp	r3, #18
 8005be4:	d82a      	bhi.n	8005c3c <HAL_GPIO_Init+0xcc>
 8005be6:	2b12      	cmp	r3, #18
 8005be8:	d859      	bhi.n	8005c9e <HAL_GPIO_Init+0x12e>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <HAL_GPIO_Init+0x80>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c6b 	.word	0x08005c6b
 8005bf4:	08005c45 	.word	0x08005c45
 8005bf8:	08005c57 	.word	0x08005c57
 8005bfc:	08005c99 	.word	0x08005c99
 8005c00:	08005c9f 	.word	0x08005c9f
 8005c04:	08005c9f 	.word	0x08005c9f
 8005c08:	08005c9f 	.word	0x08005c9f
 8005c0c:	08005c9f 	.word	0x08005c9f
 8005c10:	08005c9f 	.word	0x08005c9f
 8005c14:	08005c9f 	.word	0x08005c9f
 8005c18:	08005c9f 	.word	0x08005c9f
 8005c1c:	08005c9f 	.word	0x08005c9f
 8005c20:	08005c9f 	.word	0x08005c9f
 8005c24:	08005c9f 	.word	0x08005c9f
 8005c28:	08005c9f 	.word	0x08005c9f
 8005c2c:	08005c9f 	.word	0x08005c9f
 8005c30:	08005c9f 	.word	0x08005c9f
 8005c34:	08005c4d 	.word	0x08005c4d
 8005c38:	08005c61 	.word	0x08005c61
 8005c3c:	4a79      	ldr	r2, [pc, #484]	; (8005e24 <HAL_GPIO_Init+0x2b4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <HAL_GPIO_Init+0xfa>
 8005c42:	e02c      	b.n	8005c9e <HAL_GPIO_Init+0x12e>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	e029      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	3304      	adds	r3, #4
 8005c52:	623b      	str	r3, [r7, #32]
 8005c54:	e024      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	e01f      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	330c      	adds	r3, #12
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	e01a      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <HAL_GPIO_Init+0x108>
 8005c72:	2304      	movs	r3, #4
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	e013      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d105      	bne.n	8005c8c <HAL_GPIO_Init+0x11c>
 8005c80:	2308      	movs	r3, #8
 8005c82:	623b      	str	r3, [r7, #32]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	e009      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	615a      	str	r2, [r3, #20]
 8005c96:	e003      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	623b      	str	r3, [r7, #32]
 8005c9c:	e000      	b.n	8005ca0 <HAL_GPIO_Init+0x130>
 8005c9e:	bf00      	nop
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2bff      	cmp	r3, #255	; 0xff
 8005ca4:	d801      	bhi.n	8005caa <HAL_GPIO_Init+0x13a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	e001      	b.n	8005cae <HAL_GPIO_Init+0x13e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2bff      	cmp	r3, #255	; 0xff
 8005cb4:	d802      	bhi.n	8005cbc <HAL_GPIO_Init+0x14c>
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	e002      	b.n	8005cc2 <HAL_GPIO_Init+0x152>
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	3b08      	subs	r3, #8
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	210f      	movs	r1, #15
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	6a39      	ldr	r1, [r7, #32]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80b1 	beq.w	8005e52 <HAL_GPIO_Init+0x2e2>
 8005cf0:	4b4d      	ldr	r3, [pc, #308]	; (8005e28 <HAL_GPIO_Init+0x2b8>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	4a4c      	ldr	r2, [pc, #304]	; (8005e28 <HAL_GPIO_Init+0x2b8>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6193      	str	r3, [r2, #24]
 8005cfc:	4b4a      	ldr	r3, [pc, #296]	; (8005e28 <HAL_GPIO_Init+0x2b8>)
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4a48      	ldr	r2, [pc, #288]	; (8005e2c <HAL_GPIO_Init+0x2bc>)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	089b      	lsrs	r3, r3, #2
 8005d0e:	3302      	adds	r3, #2
 8005d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	220f      	movs	r2, #15
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43db      	mvns	r3, r3
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a40      	ldr	r2, [pc, #256]	; (8005e30 <HAL_GPIO_Init+0x2c0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_GPIO_Init+0x1ec>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a3f      	ldr	r2, [pc, #252]	; (8005e34 <HAL_GPIO_Init+0x2c4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00d      	beq.n	8005d58 <HAL_GPIO_Init+0x1e8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a3e      	ldr	r2, [pc, #248]	; (8005e38 <HAL_GPIO_Init+0x2c8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <HAL_GPIO_Init+0x1e4>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a3d      	ldr	r2, [pc, #244]	; (8005e3c <HAL_GPIO_Init+0x2cc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <HAL_GPIO_Init+0x1e0>
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e006      	b.n	8005d5e <HAL_GPIO_Init+0x1ee>
 8005d50:	2304      	movs	r3, #4
 8005d52:	e004      	b.n	8005d5e <HAL_GPIO_Init+0x1ee>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e002      	b.n	8005d5e <HAL_GPIO_Init+0x1ee>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <HAL_GPIO_Init+0x1ee>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	f002 0203 	and.w	r2, r2, #3
 8005d64:	0092      	lsls	r2, r2, #2
 8005d66:	4093      	lsls	r3, r2
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	492f      	ldr	r1, [pc, #188]	; (8005e2c <HAL_GPIO_Init+0x2bc>)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	3302      	adds	r3, #2
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d006      	beq.n	8005d96 <HAL_GPIO_Init+0x226>
 8005d88:	4b2d      	ldr	r3, [pc, #180]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	492c      	ldr	r1, [pc, #176]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]
 8005d94:	e006      	b.n	8005da4 <HAL_GPIO_Init+0x234>
 8005d96:	4b2a      	ldr	r3, [pc, #168]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	4928      	ldr	r1, [pc, #160]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	600b      	str	r3, [r1, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <HAL_GPIO_Init+0x24e>
 8005db0:	4b23      	ldr	r3, [pc, #140]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4922      	ldr	r1, [pc, #136]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	604b      	str	r3, [r1, #4]
 8005dbc:	e006      	b.n	8005dcc <HAL_GPIO_Init+0x25c>
 8005dbe:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	491e      	ldr	r1, [pc, #120]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <HAL_GPIO_Init+0x276>
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	4918      	ldr	r1, [pc, #96]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	608b      	str	r3, [r1, #8]
 8005de4:	e006      	b.n	8005df4 <HAL_GPIO_Init+0x284>
 8005de6:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	4914      	ldr	r1, [pc, #80]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	608b      	str	r3, [r1, #8]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d021      	beq.n	8005e44 <HAL_GPIO_Init+0x2d4>
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	490e      	ldr	r1, [pc, #56]	; (8005e40 <HAL_GPIO_Init+0x2d0>)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60cb      	str	r3, [r1, #12]
 8005e0c:	e021      	b.n	8005e52 <HAL_GPIO_Init+0x2e2>
 8005e0e:	bf00      	nop
 8005e10:	10320000 	.word	0x10320000
 8005e14:	10310000 	.word	0x10310000
 8005e18:	10220000 	.word	0x10220000
 8005e1c:	10210000 	.word	0x10210000
 8005e20:	10120000 	.word	0x10120000
 8005e24:	10110000 	.word	0x10110000
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40010800 	.word	0x40010800
 8005e34:	40010c00 	.word	0x40010c00
 8005e38:	40011000 	.word	0x40011000
 8005e3c:	40011400 	.word	0x40011400
 8005e40:	40010400 	.word	0x40010400
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_GPIO_Init+0x304>)
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	4909      	ldr	r1, [pc, #36]	; (8005e74 <HAL_GPIO_Init+0x304>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	60cb      	str	r3, [r1, #12]
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	3301      	adds	r3, #1
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f47f ae8e 	bne.w	8005b84 <HAL_GPIO_Init+0x14>
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	372c      	adds	r7, #44	; 0x2c
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	40010400 	.word	0x40010400

08005e78 <HAL_GPIO_ReadPin>:
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	887b      	ldrh	r3, [r7, #2]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_GPIO_ReadPin+0x1e>
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	e001      	b.n	8005e9a <HAL_GPIO_ReadPin+0x22>
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_GPIO_WritePin>:
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	807b      	strh	r3, [r7, #2]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	707b      	strb	r3, [r7, #1]
 8005eb6:	787b      	ldrb	r3, [r7, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_WritePin+0x1e>
 8005ebc:	887a      	ldrh	r2, [r7, #2]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]
 8005ec2:	e003      	b.n	8005ecc <HAL_GPIO_WritePin+0x26>
 8005ec4:	887b      	ldrh	r3, [r7, #2]
 8005ec6:	041a      	lsls	r2, r3, #16
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	611a      	str	r2, [r3, #16]
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_GPIO_EXTI_IRQHandler>:
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	80fb      	strh	r3, [r7, #6]
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <HAL_GPIO_EXTI_IRQHandler+0x24>
 8005eee:	4a05      	ldr	r2, [pc, #20]	; (8005f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	6153      	str	r3, [r2, #20]
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fc fe72 	bl	8002be0 <HAL_GPIO_EXTI_Callback>
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40010400 	.word	0x40010400

08005f08 <HAL_I2C_Init>:
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_I2C_Init+0x12>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e12b      	b.n	8006172 <HAL_I2C_Init+0x26a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_I2C_Init+0x2c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fd f9d6 	bl	80032e0 <HAL_I2C_MspInit>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2224      	movs	r2, #36	; 0x24
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f000 fce4 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4a81      	ldr	r2, [pc, #516]	; (800617c <HAL_I2C_Init+0x274>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d807      	bhi.n	8005f8c <HAL_I2C_Init+0x84>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a80      	ldr	r2, [pc, #512]	; (8006180 <HAL_I2C_Init+0x278>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bf94      	ite	ls
 8005f84:	2301      	movls	r3, #1
 8005f86:	2300      	movhi	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	e006      	b.n	8005f9a <HAL_I2C_Init+0x92>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a7d      	ldr	r2, [pc, #500]	; (8006184 <HAL_I2C_Init+0x27c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	bf94      	ite	ls
 8005f94:	2301      	movls	r3, #1
 8005f96:	2300      	movhi	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_I2C_Init+0x9a>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e0e7      	b.n	8006172 <HAL_I2C_Init+0x26a>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a78      	ldr	r2, [pc, #480]	; (8006188 <HAL_I2C_Init+0x280>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0c9b      	lsrs	r3, r3, #18
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a6a      	ldr	r2, [pc, #424]	; (800617c <HAL_I2C_Init+0x274>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d802      	bhi.n	8005fdc <HAL_I2C_Init+0xd4>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	e009      	b.n	8005ff0 <HAL_I2C_Init+0xe8>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	4a69      	ldr	r2, [pc, #420]	; (800618c <HAL_I2C_Init+0x284>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	099b      	lsrs	r3, r3, #6
 8005fee:	3301      	adds	r3, #1
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	6213      	str	r3, [r2, #32]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	495c      	ldr	r1, [pc, #368]	; (800617c <HAL_I2C_Init+0x274>)
 800600c:	428b      	cmp	r3, r1
 800600e:	d819      	bhi.n	8006044 <HAL_I2C_Init+0x13c>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1e59      	subs	r1, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	fbb1 f3f3 	udiv	r3, r1, r3
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006024:	400b      	ands	r3, r1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_I2C_Init+0x138>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1e59      	subs	r1, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	fbb1 f3f3 	udiv	r3, r1, r3
 8006038:	3301      	adds	r3, #1
 800603a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603e:	e051      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 8006040:	2304      	movs	r3, #4
 8006042:	e04f      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d111      	bne.n	8006070 <HAL_I2C_Init+0x168>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1e58      	subs	r0, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	440b      	add	r3, r1
 800605a:	fbb0 f3f3 	udiv	r3, r0, r3
 800605e:	3301      	adds	r3, #1
 8006060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e012      	b.n	8006096 <HAL_I2C_Init+0x18e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1e58      	subs	r0, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	0099      	lsls	r1, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	fbb0 f3f3 	udiv	r3, r0, r3
 8006086:	3301      	adds	r3, #1
 8006088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_I2C_Init+0x196>
 800609a:	2301      	movs	r3, #1
 800609c:	e022      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10e      	bne.n	80060c4 <HAL_I2C_Init+0x1bc>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1e58      	subs	r0, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6859      	ldr	r1, [r3, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	440b      	add	r3, r1
 80060b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060b8:	3301      	adds	r3, #1
 80060ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	e00f      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1e58      	subs	r0, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	0099      	lsls	r1, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060da:	3301      	adds	r3, #1
 80060dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	6809      	ldr	r1, [r1, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61cb      	str	r3, [r1, #28]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6911      	ldr	r1, [r2, #16]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68d2      	ldr	r2, [r2, #12]
 800611e:	4311      	orrs	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	430b      	orrs	r3, r1
 8006126:	6093      	str	r3, [r2, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	60da      	str	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006170:	2300      	movs	r3, #0
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	000186a0 	.word	0x000186a0
 8006180:	001e847f 	.word	0x001e847f
 8006184:	003d08ff 	.word	0x003d08ff
 8006188:	431bde83 	.word	0x431bde83
 800618c:	10624dd3 	.word	0x10624dd3

08006190 <HAL_RCC_OscConfig>:
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
 800619e:	2301      	movs	r3, #1
 80061a0:	e272      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8087 	beq.w	80062be <HAL_RCC_OscConfig+0x12e>
 80061b0:	4b92      	ldr	r3, [pc, #584]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d00c      	beq.n	80061d6 <HAL_RCC_OscConfig+0x46>
 80061bc:	4b8f      	ldr	r3, [pc, #572]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 030c 	and.w	r3, r3, #12
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d112      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
 80061c8:	4b8c      	ldr	r3, [pc, #560]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d4:	d10b      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
 80061d6:	4b89      	ldr	r3, [pc, #548]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d06c      	beq.n	80062bc <HAL_RCC_OscConfig+0x12c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d168      	bne.n	80062bc <HAL_RCC_OscConfig+0x12c>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e24c      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d106      	bne.n	8006206 <HAL_RCC_OscConfig+0x76>
 80061f8:	4b80      	ldr	r3, [pc, #512]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a7f      	ldr	r2, [pc, #508]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e02e      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x98>
 800620e:	4b7b      	ldr	r3, [pc, #492]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a7a      	ldr	r2, [pc, #488]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b78      	ldr	r3, [pc, #480]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a77      	ldr	r2, [pc, #476]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e01d      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0xbc>
 8006232:	4b72      	ldr	r3, [pc, #456]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a71      	ldr	r2, [pc, #452]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b6f      	ldr	r3, [pc, #444]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a6e      	ldr	r2, [pc, #440]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 800624c:	4b6b      	ldr	r3, [pc, #428]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a6a      	ldr	r2, [pc, #424]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b68      	ldr	r3, [pc, #416]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a67      	ldr	r2, [pc, #412]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800625e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d013      	beq.n	8006294 <HAL_RCC_OscConfig+0x104>
 800626c:	f7ff f8d8 	bl	8005420 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0xf6>
 8006274:	f7ff f8d4 	bl	8005420 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b64      	cmp	r3, #100	; 0x64
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0xf6>
 8006282:	2303      	movs	r3, #3
 8006284:	e200      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006286:	4b5d      	ldr	r3, [pc, #372]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0xe4>
 8006292:	e014      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
 8006294:	f7ff f8c4 	bl	8005420 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x11e>
 800629c:	f7ff f8c0 	bl	8005420 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x11e>
 80062aa:	2303      	movs	r3, #3
 80062ac:	e1ec      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 80062ae:	4b53      	ldr	r3, [pc, #332]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x10c>
 80062ba:	e000      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
 80062bc:	bf00      	nop
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d063      	beq.n	8006392 <HAL_RCC_OscConfig+0x202>
 80062ca:	4b4c      	ldr	r3, [pc, #304]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_RCC_OscConfig+0x15e>
 80062d6:	4b49      	ldr	r3, [pc, #292]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d11c      	bne.n	800631c <HAL_RCC_OscConfig+0x18c>
 80062e2:	4b46      	ldr	r3, [pc, #280]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d116      	bne.n	800631c <HAL_RCC_OscConfig+0x18c>
 80062ee:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_RCC_OscConfig+0x176>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d001      	beq.n	8006306 <HAL_RCC_OscConfig+0x176>
 8006302:	2301      	movs	r3, #1
 8006304:	e1c0      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006306:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4939      	ldr	r1, [pc, #228]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	600b      	str	r3, [r1, #0]
 800631a:	e03a      	b.n	8006392 <HAL_RCC_OscConfig+0x202>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d020      	beq.n	8006366 <HAL_RCC_OscConfig+0x1d6>
 8006324:	4b36      	ldr	r3, [pc, #216]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	f7ff f879 	bl	8005420 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x1b4>
 8006332:	f7ff f875 	bl	8005420 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x1b4>
 8006340:	2303      	movs	r3, #3
 8006342:	e1a1      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006344:	4b2d      	ldr	r3, [pc, #180]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0x1a2>
 8006350:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4927      	ldr	r1, [pc, #156]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	600b      	str	r3, [r1, #0]
 8006364:	e015      	b.n	8006392 <HAL_RCC_OscConfig+0x202>
 8006366:	4b26      	ldr	r3, [pc, #152]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f7ff f858 	bl	8005420 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x1f6>
 8006374:	f7ff f854 	bl	8005420 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x1f6>
 8006382:	2303      	movs	r3, #3
 8006384:	e180      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006386:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x1e4>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03a      	beq.n	8006414 <HAL_RCC_OscConfig+0x284>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d019      	beq.n	80063da <HAL_RCC_OscConfig+0x24a>
 80063a6:	4b17      	ldr	r3, [pc, #92]	; (8006404 <HAL_RCC_OscConfig+0x274>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	f7ff f838 	bl	8005420 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x236>
 80063b4:	f7ff f834 	bl	8005420 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x236>
 80063c2:	2303      	movs	r3, #3
 80063c4:	e160      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0x224>
 80063d2:	2001      	movs	r0, #1
 80063d4:	f000 fac4 	bl	8006960 <RCC_Delay>
 80063d8:	e01c      	b.n	8006414 <HAL_RCC_OscConfig+0x284>
 80063da:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <HAL_RCC_OscConfig+0x274>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f7ff f81e 	bl	8005420 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]
 80063e6:	e00f      	b.n	8006408 <HAL_RCC_OscConfig+0x278>
 80063e8:	f7ff f81a 	bl	8005420 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d908      	bls.n	8006408 <HAL_RCC_OscConfig+0x278>
 80063f6:	2303      	movs	r3, #3
 80063f8:	e146      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000
 8006400:	42420000 	.word	0x42420000
 8006404:	42420480 	.word	0x42420480
 8006408:	4b92      	ldr	r3, [pc, #584]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e9      	bne.n	80063e8 <HAL_RCC_OscConfig+0x258>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80a6 	beq.w	800656e <HAL_RCC_OscConfig+0x3de>
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
 8006426:	4b8b      	ldr	r3, [pc, #556]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_RCC_OscConfig+0x2be>
 8006432:	4b88      	ldr	r3, [pc, #544]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	4a87      	ldr	r2, [pc, #540]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643c:	61d3      	str	r3, [r2, #28]
 800643e:	4b85      	ldr	r3, [pc, #532]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
 800644e:	4b82      	ldr	r3, [pc, #520]	; (8006658 <HAL_RCC_OscConfig+0x4c8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d118      	bne.n	800648c <HAL_RCC_OscConfig+0x2fc>
 800645a:	4b7f      	ldr	r3, [pc, #508]	; (8006658 <HAL_RCC_OscConfig+0x4c8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7e      	ldr	r2, [pc, #504]	; (8006658 <HAL_RCC_OscConfig+0x4c8>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	f7fe ffdb 	bl	8005420 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]
 800646c:	e008      	b.n	8006480 <HAL_RCC_OscConfig+0x2f0>
 800646e:	f7fe ffd7 	bl	8005420 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b64      	cmp	r3, #100	; 0x64
 800647a:	d901      	bls.n	8006480 <HAL_RCC_OscConfig+0x2f0>
 800647c:	2303      	movs	r3, #3
 800647e:	e103      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006480:	4b75      	ldr	r3, [pc, #468]	; (8006658 <HAL_RCC_OscConfig+0x4c8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f0      	beq.n	800646e <HAL_RCC_OscConfig+0x2de>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d106      	bne.n	80064a2 <HAL_RCC_OscConfig+0x312>
 8006494:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	4a6e      	ldr	r2, [pc, #440]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	6213      	str	r3, [r2, #32]
 80064a0:	e02d      	b.n	80064fe <HAL_RCC_OscConfig+0x36e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x334>
 80064aa:	4b6a      	ldr	r3, [pc, #424]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4a69      	ldr	r2, [pc, #420]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	6213      	str	r3, [r2, #32]
 80064b6:	4b67      	ldr	r3, [pc, #412]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	4a66      	ldr	r2, [pc, #408]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	6213      	str	r3, [r2, #32]
 80064c2:	e01c      	b.n	80064fe <HAL_RCC_OscConfig+0x36e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCC_OscConfig+0x356>
 80064cc:	4b61      	ldr	r3, [pc, #388]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	4a60      	ldr	r2, [pc, #384]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064d2:	f043 0304 	orr.w	r3, r3, #4
 80064d6:	6213      	str	r3, [r2, #32]
 80064d8:	4b5e      	ldr	r3, [pc, #376]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4a5d      	ldr	r2, [pc, #372]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6213      	str	r3, [r2, #32]
 80064e4:	e00b      	b.n	80064fe <HAL_RCC_OscConfig+0x36e>
 80064e6:	4b5b      	ldr	r3, [pc, #364]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4a5a      	ldr	r2, [pc, #360]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	6213      	str	r3, [r2, #32]
 80064f2:	4b58      	ldr	r3, [pc, #352]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	4a57      	ldr	r2, [pc, #348]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80064f8:	f023 0304 	bic.w	r3, r3, #4
 80064fc:	6213      	str	r3, [r2, #32]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d015      	beq.n	8006532 <HAL_RCC_OscConfig+0x3a2>
 8006506:	f7fe ff8b 	bl	8005420 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]
 800650c:	e00a      	b.n	8006524 <HAL_RCC_OscConfig+0x394>
 800650e:	f7fe ff87 	bl	8005420 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x394>
 8006520:	2303      	movs	r3, #3
 8006522:	e0b1      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006524:	4b4b      	ldr	r3, [pc, #300]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0ee      	beq.n	800650e <HAL_RCC_OscConfig+0x37e>
 8006530:	e014      	b.n	800655c <HAL_RCC_OscConfig+0x3cc>
 8006532:	f7fe ff75 	bl	8005420 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]
 8006538:	e00a      	b.n	8006550 <HAL_RCC_OscConfig+0x3c0>
 800653a:	f7fe ff71 	bl	8005420 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	f241 3288 	movw	r2, #5000	; 0x1388
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x3c0>
 800654c:	2303      	movs	r3, #3
 800654e:	e09b      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006550:	4b40      	ldr	r3, [pc, #256]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1ee      	bne.n	800653a <HAL_RCC_OscConfig+0x3aa>
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d105      	bne.n	800656e <HAL_RCC_OscConfig+0x3de>
 8006562:	4b3c      	ldr	r3, [pc, #240]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	4a3b      	ldr	r2, [pc, #236]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 8006568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656c:	61d3      	str	r3, [r2, #28]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8087 	beq.w	8006686 <HAL_RCC_OscConfig+0x4f6>
 8006578:	4b36      	ldr	r3, [pc, #216]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b08      	cmp	r3, #8
 8006582:	d061      	beq.n	8006648 <HAL_RCC_OscConfig+0x4b8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d146      	bne.n	800661a <HAL_RCC_OscConfig+0x48a>
 800658c:	4b33      	ldr	r3, [pc, #204]	; (800665c <HAL_RCC_OscConfig+0x4cc>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	f7fe ff45 	bl	8005420 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x41c>
 800659a:	f7fe ff41 	bl	8005420 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x41c>
 80065a8:	2303      	movs	r3, #3
 80065aa:	e06d      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 80065ac:	4b29      	ldr	r3, [pc, #164]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f0      	bne.n	800659a <HAL_RCC_OscConfig+0x40a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c0:	d108      	bne.n	80065d4 <HAL_RCC_OscConfig+0x444>
 80065c2:	4b24      	ldr	r3, [pc, #144]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	4921      	ldr	r1, [pc, #132]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	604b      	str	r3, [r1, #4]
 80065d4:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a19      	ldr	r1, [r3, #32]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	430b      	orrs	r3, r1
 80065e6:	491b      	ldr	r1, [pc, #108]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	604b      	str	r3, [r1, #4]
 80065ec:	4b1b      	ldr	r3, [pc, #108]	; (800665c <HAL_RCC_OscConfig+0x4cc>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	f7fe ff15 	bl	8005420 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x47c>
 80065fa:	f7fe ff11 	bl	8005420 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x47c>
 8006608:	2303      	movs	r3, #3
 800660a:	e03d      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x46a>
 8006618:	e035      	b.n	8006686 <HAL_RCC_OscConfig+0x4f6>
 800661a:	4b10      	ldr	r3, [pc, #64]	; (800665c <HAL_RCC_OscConfig+0x4cc>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	f7fe fefe 	bl	8005420 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x4aa>
 8006628:	f7fe fefa 	bl	8005420 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x4aa>
 8006636:	2303      	movs	r3, #3
 8006638:	e026      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <HAL_RCC_OscConfig+0x4c4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x498>
 8006646:	e01e      	b.n	8006686 <HAL_RCC_OscConfig+0x4f6>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d107      	bne.n	8006660 <HAL_RCC_OscConfig+0x4d0>
 8006650:	2301      	movs	r3, #1
 8006652:	e019      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006654:	40021000 	.word	0x40021000
 8006658:	40007000 	.word	0x40007000
 800665c:	42420060 	.word	0x42420060
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_RCC_OscConfig+0x500>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	429a      	cmp	r2, r3
 8006672:	d106      	bne.n	8006682 <HAL_RCC_OscConfig+0x4f2>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	429a      	cmp	r2, r3
 8006680:	d001      	beq.n	8006686 <HAL_RCC_OscConfig+0x4f6>
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <HAL_RCC_OscConfig+0x4f8>
 8006686:	2300      	movs	r3, #0
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40021000 	.word	0x40021000

08006694 <HAL_RCC_ClockConfig>:
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x14>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0d0      	b.n	800684a <HAL_RCC_ClockConfig+0x1b6>
 80066a8:	4b6a      	ldr	r3, [pc, #424]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d910      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x44>
 80066b6:	4b67      	ldr	r3, [pc, #412]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f023 0207 	bic.w	r2, r3, #7
 80066be:	4965      	ldr	r1, [pc, #404]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	600b      	str	r3, [r1, #0]
 80066c6:	4b63      	ldr	r3, [pc, #396]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x44>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0b8      	b.n	800684a <HAL_RCC_ClockConfig+0x1b6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d020      	beq.n	8006726 <HAL_RCC_ClockConfig+0x92>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCC_ClockConfig+0x68>
 80066f0:	4b59      	ldr	r3, [pc, #356]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4a58      	ldr	r2, [pc, #352]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 80066f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066fa:	6053      	str	r3, [r2, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x80>
 8006708:	4b53      	ldr	r3, [pc, #332]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4a52      	ldr	r2, [pc, #328]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 800670e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006712:	6053      	str	r3, [r2, #4]
 8006714:	4b50      	ldr	r3, [pc, #320]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	494d      	ldr	r1, [pc, #308]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 8006722:	4313      	orrs	r3, r2
 8006724:	604b      	str	r3, [r1, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d040      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x120>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d107      	bne.n	800674a <HAL_RCC_ClockConfig+0xb6>
 800673a:	4b47      	ldr	r3, [pc, #284]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d115      	bne.n	8006772 <HAL_RCC_ClockConfig+0xde>
 8006746:	2301      	movs	r3, #1
 8006748:	e07f      	b.n	800684a <HAL_RCC_ClockConfig+0x1b6>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0xce>
 8006752:	4b41      	ldr	r3, [pc, #260]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <HAL_RCC_ClockConfig+0xde>
 800675e:	2301      	movs	r3, #1
 8006760:	e073      	b.n	800684a <HAL_RCC_ClockConfig+0x1b6>
 8006762:	4b3d      	ldr	r3, [pc, #244]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_RCC_ClockConfig+0xde>
 800676e:	2301      	movs	r3, #1
 8006770:	e06b      	b.n	800684a <HAL_RCC_ClockConfig+0x1b6>
 8006772:	4b39      	ldr	r3, [pc, #228]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f023 0203 	bic.w	r2, r3, #3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4936      	ldr	r1, [pc, #216]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	4313      	orrs	r3, r2
 8006782:	604b      	str	r3, [r1, #4]
 8006784:	f7fe fe4c 	bl	8005420 <HAL_GetTick>
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	e00a      	b.n	80067a2 <HAL_RCC_ClockConfig+0x10e>
 800678c:	f7fe fe48 	bl	8005420 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	f241 3288 	movw	r2, #5000	; 0x1388
 800679a:	4293      	cmp	r3, r2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_ClockConfig+0x10e>
 800679e:	2303      	movs	r3, #3
 80067a0:	e053      	b.n	800684a <HAL_RCC_ClockConfig+0x1b6>
 80067a2:	4b2d      	ldr	r3, [pc, #180]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 020c 	and.w	r2, r3, #12
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d1eb      	bne.n	800678c <HAL_RCC_ClockConfig+0xf8>
 80067b4:	4b27      	ldr	r3, [pc, #156]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d210      	bcs.n	80067e4 <HAL_RCC_ClockConfig+0x150>
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 0207 	bic.w	r2, r3, #7
 80067ca:	4922      	ldr	r1, [pc, #136]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]
 80067d2:	4b20      	ldr	r3, [pc, #128]	; (8006854 <HAL_RCC_ClockConfig+0x1c0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x150>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e032      	b.n	800684a <HAL_RCC_ClockConfig+0x1b6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_RCC_ClockConfig+0x16e>
 80067f0:	4b19      	ldr	r3, [pc, #100]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4916      	ldr	r1, [pc, #88]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	604b      	str	r3, [r1, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <HAL_RCC_ClockConfig+0x18e>
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	490e      	ldr	r1, [pc, #56]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	4313      	orrs	r3, r2
 8006820:	604b      	str	r3, [r1, #4]
 8006822:	f000 f821 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006826:	4602      	mov	r2, r0
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCC_ClockConfig+0x1c4>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	091b      	lsrs	r3, r3, #4
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	490a      	ldr	r1, [pc, #40]	; (800685c <HAL_RCC_ClockConfig+0x1c8>)
 8006834:	5ccb      	ldrb	r3, [r1, r3]
 8006836:	fa22 f303 	lsr.w	r3, r2, r3
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <HAL_RCC_ClockConfig+0x1cc>)
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_RCC_ClockConfig+0x1d0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fdaa 	bl	800539c <HAL_InitTick>
 8006848:	2300      	movs	r3, #0
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40022000 	.word	0x40022000
 8006858:	40021000 	.word	0x40021000
 800685c:	0800f878 	.word	0x0800f878
 8006860:	2000006c 	.word	0x2000006c
 8006864:	200000b8 	.word	0x200000b8

08006868 <HAL_RCC_GetSysClockFreq>:
 8006868:	b490      	push	{r4, r7}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	4b29      	ldr	r3, [pc, #164]	; (8006914 <HAL_RCC_GetSysClockFreq+0xac>)
 8006870:	1d3c      	adds	r4, r7, #4
 8006872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006878:	f240 2301 	movw	r3, #513	; 0x201
 800687c:	803b      	strh	r3, [r7, #0]
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	2300      	movs	r3, #0
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	4b21      	ldr	r3, [pc, #132]	; (8006918 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 030c 	and.w	r3, r3, #12
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d002      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x40>
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d003      	beq.n	80068ae <HAL_RCC_GetSysClockFreq+0x46>
 80068a6:	e02b      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0x98>
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <HAL_RCC_GetSysClockFreq+0xb4>)
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	e02b      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0x9e>
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	0c9b      	lsrs	r3, r3, #18
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	3328      	adds	r3, #40	; 0x28
 80068b8:	443b      	add	r3, r7
 80068ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d012      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x88>
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	0c5b      	lsrs	r3, r3, #17
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	3328      	adds	r3, #40	; 0x28
 80068d6:	443b      	add	r3, r7
 80068d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4a0e      	ldr	r2, [pc, #56]	; (800691c <HAL_RCC_GetSysClockFreq+0xb4>)
 80068e2:	fb03 f202 	mul.w	r2, r3, r2
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
 80068ee:	e004      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x92>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4a0b      	ldr	r2, [pc, #44]	; (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	623b      	str	r3, [r7, #32]
 80068fe:	e002      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0x9e>
 8006900:	4b06      	ldr	r3, [pc, #24]	; (800691c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006902:	623b      	str	r3, [r7, #32]
 8006904:	bf00      	nop
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bc90      	pop	{r4, r7}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	080087a4 	.word	0x080087a4
 8006918:	40021000 	.word	0x40021000
 800691c:	007a1200 	.word	0x007a1200
 8006920:	003d0900 	.word	0x003d0900

08006924 <HAL_RCC_GetHCLKFreq>:
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <HAL_RCC_GetHCLKFreq+0x10>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr
 8006934:	2000006c 	.word	0x2000006c

08006938 <HAL_RCC_GetPCLK1Freq>:
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
 800693c:	f7ff fff2 	bl	8006924 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4903      	ldr	r1, [pc, #12]	; (800695c <HAL_RCC_GetPCLK1Freq+0x24>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
 8006954:	4618      	mov	r0, r3
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40021000 	.word	0x40021000
 800695c:	0800f888 	.word	0x0800f888

08006960 <RCC_Delay>:
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <RCC_Delay+0x34>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <RCC_Delay+0x38>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	0a5b      	lsrs	r3, r3, #9
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	fb02 f303 	mul.w	r3, r2, r3
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	bf00      	nop
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1e5a      	subs	r2, r3, #1
 8006982:	60fa      	str	r2, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f9      	bne.n	800697c <RCC_Delay+0x1c>
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	2000006c 	.word	0x2000006c
 8006998:	10624dd3 	.word	0x10624dd3

0800699c <HAL_RCCEx_PeriphCLKConfig>:
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d07d      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80069b8:	2300      	movs	r3, #0
 80069ba:	75fb      	strb	r3, [r7, #23]
 80069bc:	4b4f      	ldr	r3, [pc, #316]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10d      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80069c8:	4b4c      	ldr	r3, [pc, #304]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	4a4b      	ldr	r2, [pc, #300]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d2:	61d3      	str	r3, [r2, #28]
 80069d4:	4b49      	ldr	r3, [pc, #292]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2301      	movs	r3, #1
 80069e2:	75fb      	strb	r3, [r7, #23]
 80069e4:	4b46      	ldr	r3, [pc, #280]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d118      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80069f0:	4b43      	ldr	r3, [pc, #268]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a42      	ldr	r2, [pc, #264]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	f7fe fd10 	bl	8005420 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]
 8006a02:	e008      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a04:	f7fe fd0c 	bl	8005420 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b64      	cmp	r3, #100	; 0x64
 8006a10:	d901      	bls.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a12:	2303      	movs	r3, #3
 8006a14:	e06d      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8006a16:	4b3a      	ldr	r3, [pc, #232]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006a22:	4b36      	ldr	r3, [pc, #216]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d02e      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d027      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a40:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	4b2c      	ldr	r3, [pc, #176]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	4a29      	ldr	r2, [pc, #164]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6213      	str	r3, [r2, #32]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d014      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a66:	f7fe fcdb 	bl	8005420 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006a6e:	f7fe fcd7 	bl	8005420 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006a80:	2303      	movs	r3, #3
 8006a82:	e036      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0ee      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4917      	ldr	r1, [pc, #92]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	620b      	str	r3, [r1, #32]
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d105      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	4a13      	ldr	r2, [pc, #76]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	61d3      	str	r3, [r2, #28]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	490b      	ldr	r1, [pc, #44]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	604b      	str	r3, [r1, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ade:	4b07      	ldr	r3, [pc, #28]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4904      	ldr	r1, [pc, #16]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	604b      	str	r3, [r1, #4]
 8006af0:	2300      	movs	r3, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40007000 	.word	0x40007000
 8006b04:	42420440 	.word	0x42420440

08006b08 <HAL_SPI_Init>:
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_SPI_Init+0x12>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e076      	b.n	8006c08 <HAL_SPI_Init+0x100>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <HAL_SPI_Init+0x2c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b2a:	d009      	beq.n	8006b40 <HAL_SPI_Init+0x38>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
 8006b32:	e005      	b.n	8006b40 <HAL_SPI_Init+0x38>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	615a      	str	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	629a      	str	r2, [r3, #40]	; 0x28
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_SPI_Init+0x58>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fc fbfe 	bl	800335c <HAL_SPI_MspInit>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc4:	ea42 0103 	orr.w	r1, r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	0c1a      	lsrs	r2, r3, #16
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f002 0204 	and.w	r2, r2, #4
 8006be6:	605a      	str	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69da      	ldr	r2, [r3, #28]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bf6:	61da      	str	r2, [r3, #28]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006c06:	2300      	movs	r3, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_OnePulse_Init>:
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIM_OnePulse_Init+0x14>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e041      	b.n	8006ca8 <HAL_TIM_OnePulse_Init+0x98>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <HAL_TIM_OnePulse_Init+0x2e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fc fc2f 	bl	800349c <HAL_TIM_OnePulse_MspInit>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4610      	mov	r0, r2
 8006c52:	f000 f82d 	bl	8006cb0 <TIM_Base_SetConfig>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0208 	bic.w	r2, r2, #8
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6819      	ldr	r1, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <TIM_Base_SetConfig>:
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a29      	ldr	r2, [pc, #164]	; (8006d68 <TIM_Base_SetConfig+0xb8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00b      	beq.n	8006ce0 <TIM_Base_SetConfig+0x30>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cce:	d007      	beq.n	8006ce0 <TIM_Base_SetConfig+0x30>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a26      	ldr	r2, [pc, #152]	; (8006d6c <TIM_Base_SetConfig+0xbc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_Base_SetConfig+0x30>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <TIM_Base_SetConfig+0xc0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d108      	bne.n	8006cf2 <TIM_Base_SetConfig+0x42>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <TIM_Base_SetConfig+0xb8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_Base_SetConfig+0x62>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d00:	d007      	beq.n	8006d12 <TIM_Base_SetConfig+0x62>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a19      	ldr	r2, [pc, #100]	; (8006d6c <TIM_Base_SetConfig+0xbc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_Base_SetConfig+0x62>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <TIM_Base_SetConfig+0xc0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d108      	bne.n	8006d24 <TIM_Base_SetConfig+0x74>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a07      	ldr	r2, [pc, #28]	; (8006d68 <TIM_Base_SetConfig+0xb8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d103      	bne.n	8006d58 <TIM_Base_SetConfig+0xa8>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	615a      	str	r2, [r3, #20]
 8006d5e:	bf00      	nop
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800

08006d74 <HAL_TIMEx_MasterConfigSynchronization>:
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e046      	b.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd8:	d009      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a12      	ldr	r2, [pc, #72]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a10      	ldr	r2, [pc, #64]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800

08006e30 <__assert_func>:
 8006e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e32:	4614      	mov	r4, r2
 8006e34:	461a      	mov	r2, r3
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <__assert_func+0x2c>)
 8006e38:	4605      	mov	r5, r0
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68d8      	ldr	r0, [r3, #12]
 8006e3e:	b14c      	cbz	r4, 8006e54 <__assert_func+0x24>
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <__assert_func+0x30>)
 8006e42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e46:	9100      	str	r1, [sp, #0]
 8006e48:	462b      	mov	r3, r5
 8006e4a:	4906      	ldr	r1, [pc, #24]	; (8006e64 <__assert_func+0x34>)
 8006e4c:	f000 f814 	bl	8006e78 <fiprintf>
 8006e50:	f000 fda0 	bl	8007994 <abort>
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <__assert_func+0x38>)
 8006e56:	461c      	mov	r4, r3
 8006e58:	e7f3      	b.n	8006e42 <__assert_func+0x12>
 8006e5a:	bf00      	nop
 8006e5c:	200000c0 	.word	0x200000c0
 8006e60:	0800f890 	.word	0x0800f890
 8006e64:	0800f89d 	.word	0x0800f89d
 8006e68:	0800f8cb 	.word	0x0800f8cb

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	; (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	200000c0 	.word	0x200000c0

08006e78 <fiprintf>:
 8006e78:	b40e      	push	{r1, r2, r3}
 8006e7a:	b503      	push	{r0, r1, lr}
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	ab03      	add	r3, sp, #12
 8006e80:	4805      	ldr	r0, [pc, #20]	; (8006e98 <fiprintf+0x20>)
 8006e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e86:	6800      	ldr	r0, [r0, #0]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	f000 f93f 	bl	800710c <_vfiprintf_r>
 8006e8e:	b002      	add	sp, #8
 8006e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e94:	b003      	add	sp, #12
 8006e96:	4770      	bx	lr
 8006e98:	200000c0 	.word	0x200000c0

08006e9c <__libc_init_array>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	4d0c      	ldr	r5, [pc, #48]	; (8006ed4 <__libc_init_array+0x38>)
 8006ea2:	4c0d      	ldr	r4, [pc, #52]	; (8006ed8 <__libc_init_array+0x3c>)
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	42a6      	cmp	r6, r4
 8006eaa:	d109      	bne.n	8006ec0 <__libc_init_array+0x24>
 8006eac:	f001 fa5a 	bl	8008364 <_init>
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	4d0a      	ldr	r5, [pc, #40]	; (8006edc <__libc_init_array+0x40>)
 8006eb4:	4c0a      	ldr	r4, [pc, #40]	; (8006ee0 <__libc_init_array+0x44>)
 8006eb6:	1b64      	subs	r4, r4, r5
 8006eb8:	10a4      	asrs	r4, r4, #2
 8006eba:	42a6      	cmp	r6, r4
 8006ebc:	d105      	bne.n	8006eca <__libc_init_array+0x2e>
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec4:	4798      	blx	r3
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__libc_init_array+0xc>
 8006eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ece:	4798      	blx	r3
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	e7f2      	b.n	8006eba <__libc_init_array+0x1e>
 8006ed4:	0800f964 	.word	0x0800f964
 8006ed8:	0800f964 	.word	0x0800f964
 8006edc:	0800f964 	.word	0x0800f964
 8006ee0:	0800f968 	.word	0x0800f968

08006ee4 <malloc>:
 8006ee4:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <malloc+0xc>)
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f000 b873 	b.w	8006fd4 <_malloc_r>
 8006eee:	bf00      	nop
 8006ef0:	200000c0 	.word	0x200000c0

08006ef4 <memset>:
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4402      	add	r2, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <_free_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4605      	mov	r5, r0
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	d040      	beq.n	8006f8e <_free_r+0x8a>
 8006f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f10:	1f0c      	subs	r4, r1, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfb8      	it	lt
 8006f16:	18e4      	addlt	r4, r4, r3
 8006f18:	f000 ff96 	bl	8007e48 <__malloc_lock>
 8006f1c:	4a1c      	ldr	r2, [pc, #112]	; (8006f90 <_free_r+0x8c>)
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	b933      	cbnz	r3, 8006f30 <_free_r+0x2c>
 8006f22:	6063      	str	r3, [r4, #4]
 8006f24:	6014      	str	r4, [r2, #0]
 8006f26:	4628      	mov	r0, r5
 8006f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2c:	f000 bf92 	b.w	8007e54 <__malloc_unlock>
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	d908      	bls.n	8006f46 <_free_r+0x42>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	1821      	adds	r1, r4, r0
 8006f38:	428b      	cmp	r3, r1
 8006f3a:	bf01      	itttt	eq
 8006f3c:	6819      	ldreq	r1, [r3, #0]
 8006f3e:	685b      	ldreq	r3, [r3, #4]
 8006f40:	1809      	addeq	r1, r1, r0
 8006f42:	6021      	streq	r1, [r4, #0]
 8006f44:	e7ed      	b.n	8006f22 <_free_r+0x1e>
 8006f46:	461a      	mov	r2, r3
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	b10b      	cbz	r3, 8006f50 <_free_r+0x4c>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d9fa      	bls.n	8006f46 <_free_r+0x42>
 8006f50:	6811      	ldr	r1, [r2, #0]
 8006f52:	1850      	adds	r0, r2, r1
 8006f54:	42a0      	cmp	r0, r4
 8006f56:	d10b      	bne.n	8006f70 <_free_r+0x6c>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	4401      	add	r1, r0
 8006f5c:	1850      	adds	r0, r2, r1
 8006f5e:	4283      	cmp	r3, r0
 8006f60:	6011      	str	r1, [r2, #0]
 8006f62:	d1e0      	bne.n	8006f26 <_free_r+0x22>
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4401      	add	r1, r0
 8006f6a:	6011      	str	r1, [r2, #0]
 8006f6c:	6053      	str	r3, [r2, #4]
 8006f6e:	e7da      	b.n	8006f26 <_free_r+0x22>
 8006f70:	d902      	bls.n	8006f78 <_free_r+0x74>
 8006f72:	230c      	movs	r3, #12
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	e7d6      	b.n	8006f26 <_free_r+0x22>
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	1821      	adds	r1, r4, r0
 8006f7c:	428b      	cmp	r3, r1
 8006f7e:	bf01      	itttt	eq
 8006f80:	6819      	ldreq	r1, [r3, #0]
 8006f82:	685b      	ldreq	r3, [r3, #4]
 8006f84:	1809      	addeq	r1, r1, r0
 8006f86:	6021      	streq	r1, [r4, #0]
 8006f88:	6063      	str	r3, [r4, #4]
 8006f8a:	6054      	str	r4, [r2, #4]
 8006f8c:	e7cb      	b.n	8006f26 <_free_r+0x22>
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	20000b54 	.word	0x20000b54

08006f94 <sbrk_aligned>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	4e0e      	ldr	r6, [pc, #56]	; (8006fd0 <sbrk_aligned+0x3c>)
 8006f98:	460c      	mov	r4, r1
 8006f9a:	6831      	ldr	r1, [r6, #0]
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	b911      	cbnz	r1, 8006fa6 <sbrk_aligned+0x12>
 8006fa0:	f000 fc08 	bl	80077b4 <_sbrk_r>
 8006fa4:	6030      	str	r0, [r6, #0]
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f000 fc03 	bl	80077b4 <_sbrk_r>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d00a      	beq.n	8006fc8 <sbrk_aligned+0x34>
 8006fb2:	1cc4      	adds	r4, r0, #3
 8006fb4:	f024 0403 	bic.w	r4, r4, #3
 8006fb8:	42a0      	cmp	r0, r4
 8006fba:	d007      	beq.n	8006fcc <sbrk_aligned+0x38>
 8006fbc:	1a21      	subs	r1, r4, r0
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 fbf8 	bl	80077b4 <_sbrk_r>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d101      	bne.n	8006fcc <sbrk_aligned+0x38>
 8006fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006fcc:	4620      	mov	r0, r4
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	20000b58 	.word	0x20000b58

08006fd4 <_malloc_r>:
 8006fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd8:	1ccd      	adds	r5, r1, #3
 8006fda:	f025 0503 	bic.w	r5, r5, #3
 8006fde:	3508      	adds	r5, #8
 8006fe0:	2d0c      	cmp	r5, #12
 8006fe2:	bf38      	it	cc
 8006fe4:	250c      	movcc	r5, #12
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	4607      	mov	r7, r0
 8006fea:	db01      	blt.n	8006ff0 <_malloc_r+0x1c>
 8006fec:	42a9      	cmp	r1, r5
 8006fee:	d905      	bls.n	8006ffc <_malloc_r+0x28>
 8006ff0:	230c      	movs	r3, #12
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	4e2e      	ldr	r6, [pc, #184]	; (80070b8 <_malloc_r+0xe4>)
 8006ffe:	f000 ff23 	bl	8007e48 <__malloc_lock>
 8007002:	6833      	ldr	r3, [r6, #0]
 8007004:	461c      	mov	r4, r3
 8007006:	bb34      	cbnz	r4, 8007056 <_malloc_r+0x82>
 8007008:	4629      	mov	r1, r5
 800700a:	4638      	mov	r0, r7
 800700c:	f7ff ffc2 	bl	8006f94 <sbrk_aligned>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	4604      	mov	r4, r0
 8007014:	d14d      	bne.n	80070b2 <_malloc_r+0xde>
 8007016:	6834      	ldr	r4, [r6, #0]
 8007018:	4626      	mov	r6, r4
 800701a:	2e00      	cmp	r6, #0
 800701c:	d140      	bne.n	80070a0 <_malloc_r+0xcc>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	4631      	mov	r1, r6
 8007022:	4638      	mov	r0, r7
 8007024:	eb04 0803 	add.w	r8, r4, r3
 8007028:	f000 fbc4 	bl	80077b4 <_sbrk_r>
 800702c:	4580      	cmp	r8, r0
 800702e:	d13a      	bne.n	80070a6 <_malloc_r+0xd2>
 8007030:	6821      	ldr	r1, [r4, #0]
 8007032:	3503      	adds	r5, #3
 8007034:	1a6d      	subs	r5, r5, r1
 8007036:	f025 0503 	bic.w	r5, r5, #3
 800703a:	3508      	adds	r5, #8
 800703c:	2d0c      	cmp	r5, #12
 800703e:	bf38      	it	cc
 8007040:	250c      	movcc	r5, #12
 8007042:	4638      	mov	r0, r7
 8007044:	4629      	mov	r1, r5
 8007046:	f7ff ffa5 	bl	8006f94 <sbrk_aligned>
 800704a:	3001      	adds	r0, #1
 800704c:	d02b      	beq.n	80070a6 <_malloc_r+0xd2>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	442b      	add	r3, r5
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	e00e      	b.n	8007074 <_malloc_r+0xa0>
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	1b52      	subs	r2, r2, r5
 800705a:	d41e      	bmi.n	800709a <_malloc_r+0xc6>
 800705c:	2a0b      	cmp	r2, #11
 800705e:	d916      	bls.n	800708e <_malloc_r+0xba>
 8007060:	1961      	adds	r1, r4, r5
 8007062:	42a3      	cmp	r3, r4
 8007064:	6025      	str	r5, [r4, #0]
 8007066:	bf18      	it	ne
 8007068:	6059      	strne	r1, [r3, #4]
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	bf08      	it	eq
 800706e:	6031      	streq	r1, [r6, #0]
 8007070:	5162      	str	r2, [r4, r5]
 8007072:	604b      	str	r3, [r1, #4]
 8007074:	4638      	mov	r0, r7
 8007076:	f104 060b 	add.w	r6, r4, #11
 800707a:	f000 feeb 	bl	8007e54 <__malloc_unlock>
 800707e:	f026 0607 	bic.w	r6, r6, #7
 8007082:	1d23      	adds	r3, r4, #4
 8007084:	1af2      	subs	r2, r6, r3
 8007086:	d0b6      	beq.n	8006ff6 <_malloc_r+0x22>
 8007088:	1b9b      	subs	r3, r3, r6
 800708a:	50a3      	str	r3, [r4, r2]
 800708c:	e7b3      	b.n	8006ff6 <_malloc_r+0x22>
 800708e:	6862      	ldr	r2, [r4, #4]
 8007090:	42a3      	cmp	r3, r4
 8007092:	bf0c      	ite	eq
 8007094:	6032      	streq	r2, [r6, #0]
 8007096:	605a      	strne	r2, [r3, #4]
 8007098:	e7ec      	b.n	8007074 <_malloc_r+0xa0>
 800709a:	4623      	mov	r3, r4
 800709c:	6864      	ldr	r4, [r4, #4]
 800709e:	e7b2      	b.n	8007006 <_malloc_r+0x32>
 80070a0:	4634      	mov	r4, r6
 80070a2:	6876      	ldr	r6, [r6, #4]
 80070a4:	e7b9      	b.n	800701a <_malloc_r+0x46>
 80070a6:	230c      	movs	r3, #12
 80070a8:	4638      	mov	r0, r7
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	f000 fed2 	bl	8007e54 <__malloc_unlock>
 80070b0:	e7a1      	b.n	8006ff6 <_malloc_r+0x22>
 80070b2:	6025      	str	r5, [r4, #0]
 80070b4:	e7de      	b.n	8007074 <_malloc_r+0xa0>
 80070b6:	bf00      	nop
 80070b8:	20000b54 	.word	0x20000b54

080070bc <__sfputc_r>:
 80070bc:	6893      	ldr	r3, [r2, #8]
 80070be:	b410      	push	{r4}
 80070c0:	3b01      	subs	r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	6093      	str	r3, [r2, #8]
 80070c6:	da07      	bge.n	80070d8 <__sfputc_r+0x1c>
 80070c8:	6994      	ldr	r4, [r2, #24]
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	db01      	blt.n	80070d2 <__sfputc_r+0x16>
 80070ce:	290a      	cmp	r1, #10
 80070d0:	d102      	bne.n	80070d8 <__sfputc_r+0x1c>
 80070d2:	bc10      	pop	{r4}
 80070d4:	f000 bb9e 	b.w	8007814 <__swbuf_r>
 80070d8:	6813      	ldr	r3, [r2, #0]
 80070da:	1c58      	adds	r0, r3, #1
 80070dc:	6010      	str	r0, [r2, #0]
 80070de:	7019      	strb	r1, [r3, #0]
 80070e0:	4608      	mov	r0, r1
 80070e2:	bc10      	pop	{r4}
 80070e4:	4770      	bx	lr

080070e6 <__sfputs_r>:
 80070e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e8:	4606      	mov	r6, r0
 80070ea:	460f      	mov	r7, r1
 80070ec:	4614      	mov	r4, r2
 80070ee:	18d5      	adds	r5, r2, r3
 80070f0:	42ac      	cmp	r4, r5
 80070f2:	d101      	bne.n	80070f8 <__sfputs_r+0x12>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e007      	b.n	8007108 <__sfputs_r+0x22>
 80070f8:	463a      	mov	r2, r7
 80070fa:	4630      	mov	r0, r6
 80070fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007100:	f7ff ffdc 	bl	80070bc <__sfputc_r>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d1f3      	bne.n	80070f0 <__sfputs_r+0xa>
 8007108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800710c <_vfiprintf_r>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	460d      	mov	r5, r1
 8007112:	4614      	mov	r4, r2
 8007114:	4698      	mov	r8, r3
 8007116:	4606      	mov	r6, r0
 8007118:	b09d      	sub	sp, #116	; 0x74
 800711a:	b118      	cbz	r0, 8007124 <_vfiprintf_r+0x18>
 800711c:	6983      	ldr	r3, [r0, #24]
 800711e:	b90b      	cbnz	r3, 8007124 <_vfiprintf_r+0x18>
 8007120:	f000 fd56 	bl	8007bd0 <__sinit>
 8007124:	4b89      	ldr	r3, [pc, #548]	; (800734c <_vfiprintf_r+0x240>)
 8007126:	429d      	cmp	r5, r3
 8007128:	d11b      	bne.n	8007162 <_vfiprintf_r+0x56>
 800712a:	6875      	ldr	r5, [r6, #4]
 800712c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800712e:	07d9      	lsls	r1, r3, #31
 8007130:	d405      	bmi.n	800713e <_vfiprintf_r+0x32>
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	059a      	lsls	r2, r3, #22
 8007136:	d402      	bmi.n	800713e <_vfiprintf_r+0x32>
 8007138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800713a:	f000 fde7 	bl	8007d0c <__retarget_lock_acquire_recursive>
 800713e:	89ab      	ldrh	r3, [r5, #12]
 8007140:	071b      	lsls	r3, r3, #28
 8007142:	d501      	bpl.n	8007148 <_vfiprintf_r+0x3c>
 8007144:	692b      	ldr	r3, [r5, #16]
 8007146:	b9eb      	cbnz	r3, 8007184 <_vfiprintf_r+0x78>
 8007148:	4629      	mov	r1, r5
 800714a:	4630      	mov	r0, r6
 800714c:	f000 fbb4 	bl	80078b8 <__swsetup_r>
 8007150:	b1c0      	cbz	r0, 8007184 <_vfiprintf_r+0x78>
 8007152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007154:	07dc      	lsls	r4, r3, #31
 8007156:	d50e      	bpl.n	8007176 <_vfiprintf_r+0x6a>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	b01d      	add	sp, #116	; 0x74
 800715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007162:	4b7b      	ldr	r3, [pc, #492]	; (8007350 <_vfiprintf_r+0x244>)
 8007164:	429d      	cmp	r5, r3
 8007166:	d101      	bne.n	800716c <_vfiprintf_r+0x60>
 8007168:	68b5      	ldr	r5, [r6, #8]
 800716a:	e7df      	b.n	800712c <_vfiprintf_r+0x20>
 800716c:	4b79      	ldr	r3, [pc, #484]	; (8007354 <_vfiprintf_r+0x248>)
 800716e:	429d      	cmp	r5, r3
 8007170:	bf08      	it	eq
 8007172:	68f5      	ldreq	r5, [r6, #12]
 8007174:	e7da      	b.n	800712c <_vfiprintf_r+0x20>
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	0598      	lsls	r0, r3, #22
 800717a:	d4ed      	bmi.n	8007158 <_vfiprintf_r+0x4c>
 800717c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800717e:	f000 fdc6 	bl	8007d0e <__retarget_lock_release_recursive>
 8007182:	e7e9      	b.n	8007158 <_vfiprintf_r+0x4c>
 8007184:	2300      	movs	r3, #0
 8007186:	9309      	str	r3, [sp, #36]	; 0x24
 8007188:	2320      	movs	r3, #32
 800718a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718e:	2330      	movs	r3, #48	; 0x30
 8007190:	f04f 0901 	mov.w	r9, #1
 8007194:	f8cd 800c 	str.w	r8, [sp, #12]
 8007198:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007358 <_vfiprintf_r+0x24c>
 800719c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071a0:	4623      	mov	r3, r4
 80071a2:	469a      	mov	sl, r3
 80071a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a8:	b10a      	cbz	r2, 80071ae <_vfiprintf_r+0xa2>
 80071aa:	2a25      	cmp	r2, #37	; 0x25
 80071ac:	d1f9      	bne.n	80071a2 <_vfiprintf_r+0x96>
 80071ae:	ebba 0b04 	subs.w	fp, sl, r4
 80071b2:	d00b      	beq.n	80071cc <_vfiprintf_r+0xc0>
 80071b4:	465b      	mov	r3, fp
 80071b6:	4622      	mov	r2, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ff93 	bl	80070e6 <__sfputs_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	f000 80aa 	beq.w	800731a <_vfiprintf_r+0x20e>
 80071c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c8:	445a      	add	r2, fp
 80071ca:	9209      	str	r2, [sp, #36]	; 0x24
 80071cc:	f89a 3000 	ldrb.w	r3, [sl]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a2 	beq.w	800731a <_vfiprintf_r+0x20e>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e0:	f10a 0a01 	add.w	sl, sl, #1
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ec:	931a      	str	r3, [sp, #104]	; 0x68
 80071ee:	4654      	mov	r4, sl
 80071f0:	2205      	movs	r2, #5
 80071f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f6:	4858      	ldr	r0, [pc, #352]	; (8007358 <_vfiprintf_r+0x24c>)
 80071f8:	f000 fdf0 	bl	8007ddc <memchr>
 80071fc:	9a04      	ldr	r2, [sp, #16]
 80071fe:	b9d8      	cbnz	r0, 8007238 <_vfiprintf_r+0x12c>
 8007200:	06d1      	lsls	r1, r2, #27
 8007202:	bf44      	itt	mi
 8007204:	2320      	movmi	r3, #32
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720a:	0713      	lsls	r3, r2, #28
 800720c:	bf44      	itt	mi
 800720e:	232b      	movmi	r3, #43	; 0x2b
 8007210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007214:	f89a 3000 	ldrb.w	r3, [sl]
 8007218:	2b2a      	cmp	r3, #42	; 0x2a
 800721a:	d015      	beq.n	8007248 <_vfiprintf_r+0x13c>
 800721c:	4654      	mov	r4, sl
 800721e:	2000      	movs	r0, #0
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	9a07      	ldr	r2, [sp, #28]
 8007226:	4621      	mov	r1, r4
 8007228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722c:	3b30      	subs	r3, #48	; 0x30
 800722e:	2b09      	cmp	r3, #9
 8007230:	d94e      	bls.n	80072d0 <_vfiprintf_r+0x1c4>
 8007232:	b1b0      	cbz	r0, 8007262 <_vfiprintf_r+0x156>
 8007234:	9207      	str	r2, [sp, #28]
 8007236:	e014      	b.n	8007262 <_vfiprintf_r+0x156>
 8007238:	eba0 0308 	sub.w	r3, r0, r8
 800723c:	fa09 f303 	lsl.w	r3, r9, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	46a2      	mov	sl, r4
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	e7d2      	b.n	80071ee <_vfiprintf_r+0xe2>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d19      	adds	r1, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9103      	str	r1, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfbb      	ittet	lt
 8007254:	425b      	neglt	r3, r3
 8007256:	f042 0202 	orrlt.w	r2, r2, #2
 800725a:	9307      	strge	r3, [sp, #28]
 800725c:	9307      	strlt	r3, [sp, #28]
 800725e:	bfb8      	it	lt
 8007260:	9204      	strlt	r2, [sp, #16]
 8007262:	7823      	ldrb	r3, [r4, #0]
 8007264:	2b2e      	cmp	r3, #46	; 0x2e
 8007266:	d10c      	bne.n	8007282 <_vfiprintf_r+0x176>
 8007268:	7863      	ldrb	r3, [r4, #1]
 800726a:	2b2a      	cmp	r3, #42	; 0x2a
 800726c:	d135      	bne.n	80072da <_vfiprintf_r+0x1ce>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	3402      	adds	r4, #2
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	9203      	str	r2, [sp, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	bfb8      	it	lt
 800727c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800735c <_vfiprintf_r+0x250>
 8007286:	2203      	movs	r2, #3
 8007288:	4650      	mov	r0, sl
 800728a:	7821      	ldrb	r1, [r4, #0]
 800728c:	f000 fda6 	bl	8007ddc <memchr>
 8007290:	b140      	cbz	r0, 80072a4 <_vfiprintf_r+0x198>
 8007292:	2340      	movs	r3, #64	; 0x40
 8007294:	eba0 000a 	sub.w	r0, r0, sl
 8007298:	fa03 f000 	lsl.w	r0, r3, r0
 800729c:	9b04      	ldr	r3, [sp, #16]
 800729e:	3401      	adds	r4, #1
 80072a0:	4303      	orrs	r3, r0
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a8:	2206      	movs	r2, #6
 80072aa:	482d      	ldr	r0, [pc, #180]	; (8007360 <_vfiprintf_r+0x254>)
 80072ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072b0:	f000 fd94 	bl	8007ddc <memchr>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d03f      	beq.n	8007338 <_vfiprintf_r+0x22c>
 80072b8:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <_vfiprintf_r+0x258>)
 80072ba:	bb1b      	cbnz	r3, 8007304 <_vfiprintf_r+0x1f8>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	3307      	adds	r3, #7
 80072c0:	f023 0307 	bic.w	r3, r3, #7
 80072c4:	3308      	adds	r3, #8
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ca:	443b      	add	r3, r7
 80072cc:	9309      	str	r3, [sp, #36]	; 0x24
 80072ce:	e767      	b.n	80071a0 <_vfiprintf_r+0x94>
 80072d0:	460c      	mov	r4, r1
 80072d2:	2001      	movs	r0, #1
 80072d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d8:	e7a5      	b.n	8007226 <_vfiprintf_r+0x11a>
 80072da:	2300      	movs	r3, #0
 80072dc:	f04f 0c0a 	mov.w	ip, #10
 80072e0:	4619      	mov	r1, r3
 80072e2:	3401      	adds	r4, #1
 80072e4:	9305      	str	r3, [sp, #20]
 80072e6:	4620      	mov	r0, r4
 80072e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ec:	3a30      	subs	r2, #48	; 0x30
 80072ee:	2a09      	cmp	r2, #9
 80072f0:	d903      	bls.n	80072fa <_vfiprintf_r+0x1ee>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0c5      	beq.n	8007282 <_vfiprintf_r+0x176>
 80072f6:	9105      	str	r1, [sp, #20]
 80072f8:	e7c3      	b.n	8007282 <_vfiprintf_r+0x176>
 80072fa:	4604      	mov	r4, r0
 80072fc:	2301      	movs	r3, #1
 80072fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007302:	e7f0      	b.n	80072e6 <_vfiprintf_r+0x1da>
 8007304:	ab03      	add	r3, sp, #12
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	462a      	mov	r2, r5
 800730a:	4630      	mov	r0, r6
 800730c:	4b16      	ldr	r3, [pc, #88]	; (8007368 <_vfiprintf_r+0x25c>)
 800730e:	a904      	add	r1, sp, #16
 8007310:	f3af 8000 	nop.w
 8007314:	4607      	mov	r7, r0
 8007316:	1c78      	adds	r0, r7, #1
 8007318:	d1d6      	bne.n	80072c8 <_vfiprintf_r+0x1bc>
 800731a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	d405      	bmi.n	800732c <_vfiprintf_r+0x220>
 8007320:	89ab      	ldrh	r3, [r5, #12]
 8007322:	059a      	lsls	r2, r3, #22
 8007324:	d402      	bmi.n	800732c <_vfiprintf_r+0x220>
 8007326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007328:	f000 fcf1 	bl	8007d0e <__retarget_lock_release_recursive>
 800732c:	89ab      	ldrh	r3, [r5, #12]
 800732e:	065b      	lsls	r3, r3, #25
 8007330:	f53f af12 	bmi.w	8007158 <_vfiprintf_r+0x4c>
 8007334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007336:	e711      	b.n	800715c <_vfiprintf_r+0x50>
 8007338:	ab03      	add	r3, sp, #12
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	462a      	mov	r2, r5
 800733e:	4630      	mov	r0, r6
 8007340:	4b09      	ldr	r3, [pc, #36]	; (8007368 <_vfiprintf_r+0x25c>)
 8007342:	a904      	add	r1, sp, #16
 8007344:	f000 f882 	bl	800744c <_printf_i>
 8007348:	e7e4      	b.n	8007314 <_vfiprintf_r+0x208>
 800734a:	bf00      	nop
 800734c:	0800f924 	.word	0x0800f924
 8007350:	0800f944 	.word	0x0800f944
 8007354:	0800f904 	.word	0x0800f904
 8007358:	0800f8d0 	.word	0x0800f8d0
 800735c:	0800f8d6 	.word	0x0800f8d6
 8007360:	0800f8da 	.word	0x0800f8da
 8007364:	00000000 	.word	0x00000000
 8007368:	080070e7 	.word	0x080070e7

0800736c <_printf_common>:
 800736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	4616      	mov	r6, r2
 8007372:	4699      	mov	r9, r3
 8007374:	688a      	ldr	r2, [r1, #8]
 8007376:	690b      	ldr	r3, [r1, #16]
 8007378:	4607      	mov	r7, r0
 800737a:	4293      	cmp	r3, r2
 800737c:	bfb8      	it	lt
 800737e:	4613      	movlt	r3, r2
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007386:	460c      	mov	r4, r1
 8007388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800738c:	b10a      	cbz	r2, 8007392 <_printf_common+0x26>
 800738e:	3301      	adds	r3, #1
 8007390:	6033      	str	r3, [r6, #0]
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	0699      	lsls	r1, r3, #26
 8007396:	bf42      	ittt	mi
 8007398:	6833      	ldrmi	r3, [r6, #0]
 800739a:	3302      	addmi	r3, #2
 800739c:	6033      	strmi	r3, [r6, #0]
 800739e:	6825      	ldr	r5, [r4, #0]
 80073a0:	f015 0506 	ands.w	r5, r5, #6
 80073a4:	d106      	bne.n	80073b4 <_printf_common+0x48>
 80073a6:	f104 0a19 	add.w	sl, r4, #25
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	6832      	ldr	r2, [r6, #0]
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dc28      	bgt.n	8007406 <_printf_common+0x9a>
 80073b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073b8:	1e13      	subs	r3, r2, #0
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	bf18      	it	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	0692      	lsls	r2, r2, #26
 80073c2:	d42d      	bmi.n	8007420 <_printf_common+0xb4>
 80073c4:	4649      	mov	r1, r9
 80073c6:	4638      	mov	r0, r7
 80073c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073cc:	47c0      	blx	r8
 80073ce:	3001      	adds	r0, #1
 80073d0:	d020      	beq.n	8007414 <_printf_common+0xa8>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	68e5      	ldr	r5, [r4, #12]
 80073d6:	f003 0306 	and.w	r3, r3, #6
 80073da:	2b04      	cmp	r3, #4
 80073dc:	bf18      	it	ne
 80073de:	2500      	movne	r5, #0
 80073e0:	6832      	ldr	r2, [r6, #0]
 80073e2:	f04f 0600 	mov.w	r6, #0
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	bf08      	it	eq
 80073ea:	1aad      	subeq	r5, r5, r2
 80073ec:	6922      	ldr	r2, [r4, #16]
 80073ee:	bf08      	it	eq
 80073f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f4:	4293      	cmp	r3, r2
 80073f6:	bfc4      	itt	gt
 80073f8:	1a9b      	subgt	r3, r3, r2
 80073fa:	18ed      	addgt	r5, r5, r3
 80073fc:	341a      	adds	r4, #26
 80073fe:	42b5      	cmp	r5, r6
 8007400:	d11a      	bne.n	8007438 <_printf_common+0xcc>
 8007402:	2000      	movs	r0, #0
 8007404:	e008      	b.n	8007418 <_printf_common+0xac>
 8007406:	2301      	movs	r3, #1
 8007408:	4652      	mov	r2, sl
 800740a:	4649      	mov	r1, r9
 800740c:	4638      	mov	r0, r7
 800740e:	47c0      	blx	r8
 8007410:	3001      	adds	r0, #1
 8007412:	d103      	bne.n	800741c <_printf_common+0xb0>
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741c:	3501      	adds	r5, #1
 800741e:	e7c4      	b.n	80073aa <_printf_common+0x3e>
 8007420:	2030      	movs	r0, #48	; 0x30
 8007422:	18e1      	adds	r1, r4, r3
 8007424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800742e:	4422      	add	r2, r4
 8007430:	3302      	adds	r3, #2
 8007432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007436:	e7c5      	b.n	80073c4 <_printf_common+0x58>
 8007438:	2301      	movs	r3, #1
 800743a:	4622      	mov	r2, r4
 800743c:	4649      	mov	r1, r9
 800743e:	4638      	mov	r0, r7
 8007440:	47c0      	blx	r8
 8007442:	3001      	adds	r0, #1
 8007444:	d0e6      	beq.n	8007414 <_printf_common+0xa8>
 8007446:	3601      	adds	r6, #1
 8007448:	e7d9      	b.n	80073fe <_printf_common+0x92>
	...

0800744c <_printf_i>:
 800744c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	7e0f      	ldrb	r7, [r1, #24]
 8007452:	4691      	mov	r9, r2
 8007454:	2f78      	cmp	r7, #120	; 0x78
 8007456:	4680      	mov	r8, r0
 8007458:	460c      	mov	r4, r1
 800745a:	469a      	mov	sl, r3
 800745c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800745e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007462:	d807      	bhi.n	8007474 <_printf_i+0x28>
 8007464:	2f62      	cmp	r7, #98	; 0x62
 8007466:	d80a      	bhi.n	800747e <_printf_i+0x32>
 8007468:	2f00      	cmp	r7, #0
 800746a:	f000 80d9 	beq.w	8007620 <_printf_i+0x1d4>
 800746e:	2f58      	cmp	r7, #88	; 0x58
 8007470:	f000 80a4 	beq.w	80075bc <_printf_i+0x170>
 8007474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800747c:	e03a      	b.n	80074f4 <_printf_i+0xa8>
 800747e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007482:	2b15      	cmp	r3, #21
 8007484:	d8f6      	bhi.n	8007474 <_printf_i+0x28>
 8007486:	a101      	add	r1, pc, #4	; (adr r1, 800748c <_printf_i+0x40>)
 8007488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800748c:	080074e5 	.word	0x080074e5
 8007490:	080074f9 	.word	0x080074f9
 8007494:	08007475 	.word	0x08007475
 8007498:	08007475 	.word	0x08007475
 800749c:	08007475 	.word	0x08007475
 80074a0:	08007475 	.word	0x08007475
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	08007475 	.word	0x08007475
 80074ac:	08007475 	.word	0x08007475
 80074b0:	08007475 	.word	0x08007475
 80074b4:	08007475 	.word	0x08007475
 80074b8:	08007607 	.word	0x08007607
 80074bc:	08007529 	.word	0x08007529
 80074c0:	080075e9 	.word	0x080075e9
 80074c4:	08007475 	.word	0x08007475
 80074c8:	08007475 	.word	0x08007475
 80074cc:	08007629 	.word	0x08007629
 80074d0:	08007475 	.word	0x08007475
 80074d4:	08007529 	.word	0x08007529
 80074d8:	08007475 	.word	0x08007475
 80074dc:	08007475 	.word	0x08007475
 80074e0:	080075f1 	.word	0x080075f1
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	602a      	str	r2, [r5, #0]
 80074ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0a4      	b.n	8007642 <_printf_i+0x1f6>
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	6829      	ldr	r1, [r5, #0]
 80074fc:	0606      	lsls	r6, r0, #24
 80074fe:	f101 0304 	add.w	r3, r1, #4
 8007502:	d50a      	bpl.n	800751a <_printf_i+0xce>
 8007504:	680e      	ldr	r6, [r1, #0]
 8007506:	602b      	str	r3, [r5, #0]
 8007508:	2e00      	cmp	r6, #0
 800750a:	da03      	bge.n	8007514 <_printf_i+0xc8>
 800750c:	232d      	movs	r3, #45	; 0x2d
 800750e:	4276      	negs	r6, r6
 8007510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007514:	230a      	movs	r3, #10
 8007516:	485e      	ldr	r0, [pc, #376]	; (8007690 <_printf_i+0x244>)
 8007518:	e019      	b.n	800754e <_printf_i+0x102>
 800751a:	680e      	ldr	r6, [r1, #0]
 800751c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	bf18      	it	ne
 8007524:	b236      	sxthne	r6, r6
 8007526:	e7ef      	b.n	8007508 <_printf_i+0xbc>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	1d19      	adds	r1, r3, #4
 800752e:	6029      	str	r1, [r5, #0]
 8007530:	0601      	lsls	r1, r0, #24
 8007532:	d501      	bpl.n	8007538 <_printf_i+0xec>
 8007534:	681e      	ldr	r6, [r3, #0]
 8007536:	e002      	b.n	800753e <_printf_i+0xf2>
 8007538:	0646      	lsls	r6, r0, #25
 800753a:	d5fb      	bpl.n	8007534 <_printf_i+0xe8>
 800753c:	881e      	ldrh	r6, [r3, #0]
 800753e:	2f6f      	cmp	r7, #111	; 0x6f
 8007540:	bf0c      	ite	eq
 8007542:	2308      	moveq	r3, #8
 8007544:	230a      	movne	r3, #10
 8007546:	4852      	ldr	r0, [pc, #328]	; (8007690 <_printf_i+0x244>)
 8007548:	2100      	movs	r1, #0
 800754a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800754e:	6865      	ldr	r5, [r4, #4]
 8007550:	2d00      	cmp	r5, #0
 8007552:	bfa8      	it	ge
 8007554:	6821      	ldrge	r1, [r4, #0]
 8007556:	60a5      	str	r5, [r4, #8]
 8007558:	bfa4      	itt	ge
 800755a:	f021 0104 	bicge.w	r1, r1, #4
 800755e:	6021      	strge	r1, [r4, #0]
 8007560:	b90e      	cbnz	r6, 8007566 <_printf_i+0x11a>
 8007562:	2d00      	cmp	r5, #0
 8007564:	d04d      	beq.n	8007602 <_printf_i+0x1b6>
 8007566:	4615      	mov	r5, r2
 8007568:	fbb6 f1f3 	udiv	r1, r6, r3
 800756c:	fb03 6711 	mls	r7, r3, r1, r6
 8007570:	5dc7      	ldrb	r7, [r0, r7]
 8007572:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007576:	4637      	mov	r7, r6
 8007578:	42bb      	cmp	r3, r7
 800757a:	460e      	mov	r6, r1
 800757c:	d9f4      	bls.n	8007568 <_printf_i+0x11c>
 800757e:	2b08      	cmp	r3, #8
 8007580:	d10b      	bne.n	800759a <_printf_i+0x14e>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	07de      	lsls	r6, r3, #31
 8007586:	d508      	bpl.n	800759a <_printf_i+0x14e>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	6861      	ldr	r1, [r4, #4]
 800758c:	4299      	cmp	r1, r3
 800758e:	bfde      	ittt	le
 8007590:	2330      	movle	r3, #48	; 0x30
 8007592:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007596:	f105 35ff 	addle.w	r5, r5, #4294967295
 800759a:	1b52      	subs	r2, r2, r5
 800759c:	6122      	str	r2, [r4, #16]
 800759e:	464b      	mov	r3, r9
 80075a0:	4621      	mov	r1, r4
 80075a2:	4640      	mov	r0, r8
 80075a4:	f8cd a000 	str.w	sl, [sp]
 80075a8:	aa03      	add	r2, sp, #12
 80075aa:	f7ff fedf 	bl	800736c <_printf_common>
 80075ae:	3001      	adds	r0, #1
 80075b0:	d14c      	bne.n	800764c <_printf_i+0x200>
 80075b2:	f04f 30ff 	mov.w	r0, #4294967295
 80075b6:	b004      	add	sp, #16
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	4834      	ldr	r0, [pc, #208]	; (8007690 <_printf_i+0x244>)
 80075be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075c2:	6829      	ldr	r1, [r5, #0]
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80075ca:	6029      	str	r1, [r5, #0]
 80075cc:	061d      	lsls	r5, r3, #24
 80075ce:	d514      	bpl.n	80075fa <_printf_i+0x1ae>
 80075d0:	07df      	lsls	r7, r3, #31
 80075d2:	bf44      	itt	mi
 80075d4:	f043 0320 	orrmi.w	r3, r3, #32
 80075d8:	6023      	strmi	r3, [r4, #0]
 80075da:	b91e      	cbnz	r6, 80075e4 <_printf_i+0x198>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	f023 0320 	bic.w	r3, r3, #32
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	2310      	movs	r3, #16
 80075e6:	e7af      	b.n	8007548 <_printf_i+0xfc>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	f043 0320 	orr.w	r3, r3, #32
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	2378      	movs	r3, #120	; 0x78
 80075f2:	4828      	ldr	r0, [pc, #160]	; (8007694 <_printf_i+0x248>)
 80075f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075f8:	e7e3      	b.n	80075c2 <_printf_i+0x176>
 80075fa:	0659      	lsls	r1, r3, #25
 80075fc:	bf48      	it	mi
 80075fe:	b2b6      	uxthmi	r6, r6
 8007600:	e7e6      	b.n	80075d0 <_printf_i+0x184>
 8007602:	4615      	mov	r5, r2
 8007604:	e7bb      	b.n	800757e <_printf_i+0x132>
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	6826      	ldr	r6, [r4, #0]
 800760a:	1d18      	adds	r0, r3, #4
 800760c:	6961      	ldr	r1, [r4, #20]
 800760e:	6028      	str	r0, [r5, #0]
 8007610:	0635      	lsls	r5, r6, #24
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	d501      	bpl.n	800761a <_printf_i+0x1ce>
 8007616:	6019      	str	r1, [r3, #0]
 8007618:	e002      	b.n	8007620 <_printf_i+0x1d4>
 800761a:	0670      	lsls	r0, r6, #25
 800761c:	d5fb      	bpl.n	8007616 <_printf_i+0x1ca>
 800761e:	8019      	strh	r1, [r3, #0]
 8007620:	2300      	movs	r3, #0
 8007622:	4615      	mov	r5, r2
 8007624:	6123      	str	r3, [r4, #16]
 8007626:	e7ba      	b.n	800759e <_printf_i+0x152>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	2100      	movs	r1, #0
 800762c:	1d1a      	adds	r2, r3, #4
 800762e:	602a      	str	r2, [r5, #0]
 8007630:	681d      	ldr	r5, [r3, #0]
 8007632:	6862      	ldr	r2, [r4, #4]
 8007634:	4628      	mov	r0, r5
 8007636:	f000 fbd1 	bl	8007ddc <memchr>
 800763a:	b108      	cbz	r0, 8007640 <_printf_i+0x1f4>
 800763c:	1b40      	subs	r0, r0, r5
 800763e:	6060      	str	r0, [r4, #4]
 8007640:	6863      	ldr	r3, [r4, #4]
 8007642:	6123      	str	r3, [r4, #16]
 8007644:	2300      	movs	r3, #0
 8007646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800764a:	e7a8      	b.n	800759e <_printf_i+0x152>
 800764c:	462a      	mov	r2, r5
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	47d0      	blx	sl
 8007656:	3001      	adds	r0, #1
 8007658:	d0ab      	beq.n	80075b2 <_printf_i+0x166>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	079b      	lsls	r3, r3, #30
 800765e:	d413      	bmi.n	8007688 <_printf_i+0x23c>
 8007660:	68e0      	ldr	r0, [r4, #12]
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	4298      	cmp	r0, r3
 8007666:	bfb8      	it	lt
 8007668:	4618      	movlt	r0, r3
 800766a:	e7a4      	b.n	80075b6 <_printf_i+0x16a>
 800766c:	2301      	movs	r3, #1
 800766e:	4632      	mov	r2, r6
 8007670:	4649      	mov	r1, r9
 8007672:	4640      	mov	r0, r8
 8007674:	47d0      	blx	sl
 8007676:	3001      	adds	r0, #1
 8007678:	d09b      	beq.n	80075b2 <_printf_i+0x166>
 800767a:	3501      	adds	r5, #1
 800767c:	68e3      	ldr	r3, [r4, #12]
 800767e:	9903      	ldr	r1, [sp, #12]
 8007680:	1a5b      	subs	r3, r3, r1
 8007682:	42ab      	cmp	r3, r5
 8007684:	dcf2      	bgt.n	800766c <_printf_i+0x220>
 8007686:	e7eb      	b.n	8007660 <_printf_i+0x214>
 8007688:	2500      	movs	r5, #0
 800768a:	f104 0619 	add.w	r6, r4, #25
 800768e:	e7f5      	b.n	800767c <_printf_i+0x230>
 8007690:	0800f8e1 	.word	0x0800f8e1
 8007694:	0800f8f2 	.word	0x0800f8f2

08007698 <iprintf>:
 8007698:	b40f      	push	{r0, r1, r2, r3}
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <iprintf+0x2c>)
 800769c:	b513      	push	{r0, r1, r4, lr}
 800769e:	681c      	ldr	r4, [r3, #0]
 80076a0:	b124      	cbz	r4, 80076ac <iprintf+0x14>
 80076a2:	69a3      	ldr	r3, [r4, #24]
 80076a4:	b913      	cbnz	r3, 80076ac <iprintf+0x14>
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 fa92 	bl	8007bd0 <__sinit>
 80076ac:	ab05      	add	r3, sp, #20
 80076ae:	4620      	mov	r0, r4
 80076b0:	9a04      	ldr	r2, [sp, #16]
 80076b2:	68a1      	ldr	r1, [r4, #8]
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	f7ff fd29 	bl	800710c <_vfiprintf_r>
 80076ba:	b002      	add	sp, #8
 80076bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c0:	b004      	add	sp, #16
 80076c2:	4770      	bx	lr
 80076c4:	200000c0 	.word	0x200000c0

080076c8 <_puts_r>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	460e      	mov	r6, r1
 80076cc:	4605      	mov	r5, r0
 80076ce:	b118      	cbz	r0, 80076d8 <_puts_r+0x10>
 80076d0:	6983      	ldr	r3, [r0, #24]
 80076d2:	b90b      	cbnz	r3, 80076d8 <_puts_r+0x10>
 80076d4:	f000 fa7c 	bl	8007bd0 <__sinit>
 80076d8:	69ab      	ldr	r3, [r5, #24]
 80076da:	68ac      	ldr	r4, [r5, #8]
 80076dc:	b913      	cbnz	r3, 80076e4 <_puts_r+0x1c>
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 fa76 	bl	8007bd0 <__sinit>
 80076e4:	4b2c      	ldr	r3, [pc, #176]	; (8007798 <_puts_r+0xd0>)
 80076e6:	429c      	cmp	r4, r3
 80076e8:	d120      	bne.n	800772c <_puts_r+0x64>
 80076ea:	686c      	ldr	r4, [r5, #4]
 80076ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ee:	07db      	lsls	r3, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_puts_r+0x36>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	0598      	lsls	r0, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_puts_r+0x36>
 80076f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fa:	f000 fb07 	bl	8007d0c <__retarget_lock_acquire_recursive>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	0719      	lsls	r1, r3, #28
 8007702:	d51d      	bpl.n	8007740 <_puts_r+0x78>
 8007704:	6923      	ldr	r3, [r4, #16]
 8007706:	b1db      	cbz	r3, 8007740 <_puts_r+0x78>
 8007708:	3e01      	subs	r6, #1
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007710:	3b01      	subs	r3, #1
 8007712:	60a3      	str	r3, [r4, #8]
 8007714:	bb39      	cbnz	r1, 8007766 <_puts_r+0x9e>
 8007716:	2b00      	cmp	r3, #0
 8007718:	da38      	bge.n	800778c <_puts_r+0xc4>
 800771a:	4622      	mov	r2, r4
 800771c:	210a      	movs	r1, #10
 800771e:	4628      	mov	r0, r5
 8007720:	f000 f878 	bl	8007814 <__swbuf_r>
 8007724:	3001      	adds	r0, #1
 8007726:	d011      	beq.n	800774c <_puts_r+0x84>
 8007728:	250a      	movs	r5, #10
 800772a:	e011      	b.n	8007750 <_puts_r+0x88>
 800772c:	4b1b      	ldr	r3, [pc, #108]	; (800779c <_puts_r+0xd4>)
 800772e:	429c      	cmp	r4, r3
 8007730:	d101      	bne.n	8007736 <_puts_r+0x6e>
 8007732:	68ac      	ldr	r4, [r5, #8]
 8007734:	e7da      	b.n	80076ec <_puts_r+0x24>
 8007736:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <_puts_r+0xd8>)
 8007738:	429c      	cmp	r4, r3
 800773a:	bf08      	it	eq
 800773c:	68ec      	ldreq	r4, [r5, #12]
 800773e:	e7d5      	b.n	80076ec <_puts_r+0x24>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f8b8 	bl	80078b8 <__swsetup_r>
 8007748:	2800      	cmp	r0, #0
 800774a:	d0dd      	beq.n	8007708 <_puts_r+0x40>
 800774c:	f04f 35ff 	mov.w	r5, #4294967295
 8007750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007752:	07da      	lsls	r2, r3, #31
 8007754:	d405      	bmi.n	8007762 <_puts_r+0x9a>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	d402      	bmi.n	8007762 <_puts_r+0x9a>
 800775c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775e:	f000 fad6 	bl	8007d0e <__retarget_lock_release_recursive>
 8007762:	4628      	mov	r0, r5
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	2b00      	cmp	r3, #0
 8007768:	da04      	bge.n	8007774 <_puts_r+0xac>
 800776a:	69a2      	ldr	r2, [r4, #24]
 800776c:	429a      	cmp	r2, r3
 800776e:	dc06      	bgt.n	800777e <_puts_r+0xb6>
 8007770:	290a      	cmp	r1, #10
 8007772:	d004      	beq.n	800777e <_puts_r+0xb6>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	7019      	strb	r1, [r3, #0]
 800777c:	e7c5      	b.n	800770a <_puts_r+0x42>
 800777e:	4622      	mov	r2, r4
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f847 	bl	8007814 <__swbuf_r>
 8007786:	3001      	adds	r0, #1
 8007788:	d1bf      	bne.n	800770a <_puts_r+0x42>
 800778a:	e7df      	b.n	800774c <_puts_r+0x84>
 800778c:	250a      	movs	r5, #10
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	701d      	strb	r5, [r3, #0]
 8007796:	e7db      	b.n	8007750 <_puts_r+0x88>
 8007798:	0800f924 	.word	0x0800f924
 800779c:	0800f944 	.word	0x0800f944
 80077a0:	0800f904 	.word	0x0800f904

080077a4 <puts>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <puts+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bf8d 	b.w	80076c8 <_puts_r>
 80077ae:	bf00      	nop
 80077b0:	200000c0 	.word	0x200000c0

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	2300      	movs	r3, #0
 80077b8:	4d05      	ldr	r5, [pc, #20]	; (80077d0 <_sbrk_r+0x1c>)
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7fb ff22 	bl	8003608 <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20000b60 	.word	0x20000b60

080077d4 <siprintf>:
 80077d4:	b40e      	push	{r1, r2, r3}
 80077d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077da:	b500      	push	{lr}
 80077dc:	b09c      	sub	sp, #112	; 0x70
 80077de:	ab1d      	add	r3, sp, #116	; 0x74
 80077e0:	9002      	str	r0, [sp, #8]
 80077e2:	9006      	str	r0, [sp, #24]
 80077e4:	9107      	str	r1, [sp, #28]
 80077e6:	9104      	str	r1, [sp, #16]
 80077e8:	4808      	ldr	r0, [pc, #32]	; (800780c <siprintf+0x38>)
 80077ea:	4909      	ldr	r1, [pc, #36]	; (8007810 <siprintf+0x3c>)
 80077ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f0:	9105      	str	r1, [sp, #20]
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	a902      	add	r1, sp, #8
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	f000 fbbc 	bl	8007f74 <_svfiprintf_r>
 80077fc:	2200      	movs	r2, #0
 80077fe:	9b02      	ldr	r3, [sp, #8]
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	b01c      	add	sp, #112	; 0x70
 8007804:	f85d eb04 	ldr.w	lr, [sp], #4
 8007808:	b003      	add	sp, #12
 800780a:	4770      	bx	lr
 800780c:	200000c0 	.word	0x200000c0
 8007810:	ffff0208 	.word	0xffff0208

08007814 <__swbuf_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	460e      	mov	r6, r1
 8007818:	4614      	mov	r4, r2
 800781a:	4605      	mov	r5, r0
 800781c:	b118      	cbz	r0, 8007826 <__swbuf_r+0x12>
 800781e:	6983      	ldr	r3, [r0, #24]
 8007820:	b90b      	cbnz	r3, 8007826 <__swbuf_r+0x12>
 8007822:	f000 f9d5 	bl	8007bd0 <__sinit>
 8007826:	4b21      	ldr	r3, [pc, #132]	; (80078ac <__swbuf_r+0x98>)
 8007828:	429c      	cmp	r4, r3
 800782a:	d12b      	bne.n	8007884 <__swbuf_r+0x70>
 800782c:	686c      	ldr	r4, [r5, #4]
 800782e:	69a3      	ldr	r3, [r4, #24]
 8007830:	60a3      	str	r3, [r4, #8]
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	071a      	lsls	r2, r3, #28
 8007836:	d52f      	bpl.n	8007898 <__swbuf_r+0x84>
 8007838:	6923      	ldr	r3, [r4, #16]
 800783a:	b36b      	cbz	r3, 8007898 <__swbuf_r+0x84>
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	b2f6      	uxtb	r6, r6
 8007842:	1ac0      	subs	r0, r0, r3
 8007844:	6963      	ldr	r3, [r4, #20]
 8007846:	4637      	mov	r7, r6
 8007848:	4283      	cmp	r3, r0
 800784a:	dc04      	bgt.n	8007856 <__swbuf_r+0x42>
 800784c:	4621      	mov	r1, r4
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f92a 	bl	8007aa8 <_fflush_r>
 8007854:	bb30      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	3001      	adds	r0, #1
 800785a:	3b01      	subs	r3, #1
 800785c:	60a3      	str	r3, [r4, #8]
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	701e      	strb	r6, [r3, #0]
 8007866:	6963      	ldr	r3, [r4, #20]
 8007868:	4283      	cmp	r3, r0
 800786a:	d004      	beq.n	8007876 <__swbuf_r+0x62>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d506      	bpl.n	8007880 <__swbuf_r+0x6c>
 8007872:	2e0a      	cmp	r6, #10
 8007874:	d104      	bne.n	8007880 <__swbuf_r+0x6c>
 8007876:	4621      	mov	r1, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f915 	bl	8007aa8 <_fflush_r>
 800787e:	b988      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007880:	4638      	mov	r0, r7
 8007882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <__swbuf_r+0x9c>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d101      	bne.n	800788e <__swbuf_r+0x7a>
 800788a:	68ac      	ldr	r4, [r5, #8]
 800788c:	e7cf      	b.n	800782e <__swbuf_r+0x1a>
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <__swbuf_r+0xa0>)
 8007890:	429c      	cmp	r4, r3
 8007892:	bf08      	it	eq
 8007894:	68ec      	ldreq	r4, [r5, #12]
 8007896:	e7ca      	b.n	800782e <__swbuf_r+0x1a>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f80c 	bl	80078b8 <__swsetup_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0cb      	beq.n	800783c <__swbuf_r+0x28>
 80078a4:	f04f 37ff 	mov.w	r7, #4294967295
 80078a8:	e7ea      	b.n	8007880 <__swbuf_r+0x6c>
 80078aa:	bf00      	nop
 80078ac:	0800f924 	.word	0x0800f924
 80078b0:	0800f944 	.word	0x0800f944
 80078b4:	0800f904 	.word	0x0800f904

080078b8 <__swsetup_r>:
 80078b8:	4b32      	ldr	r3, [pc, #200]	; (8007984 <__swsetup_r+0xcc>)
 80078ba:	b570      	push	{r4, r5, r6, lr}
 80078bc:	681d      	ldr	r5, [r3, #0]
 80078be:	4606      	mov	r6, r0
 80078c0:	460c      	mov	r4, r1
 80078c2:	b125      	cbz	r5, 80078ce <__swsetup_r+0x16>
 80078c4:	69ab      	ldr	r3, [r5, #24]
 80078c6:	b913      	cbnz	r3, 80078ce <__swsetup_r+0x16>
 80078c8:	4628      	mov	r0, r5
 80078ca:	f000 f981 	bl	8007bd0 <__sinit>
 80078ce:	4b2e      	ldr	r3, [pc, #184]	; (8007988 <__swsetup_r+0xd0>)
 80078d0:	429c      	cmp	r4, r3
 80078d2:	d10f      	bne.n	80078f4 <__swsetup_r+0x3c>
 80078d4:	686c      	ldr	r4, [r5, #4]
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078dc:	0719      	lsls	r1, r3, #28
 80078de:	d42c      	bmi.n	800793a <__swsetup_r+0x82>
 80078e0:	06dd      	lsls	r5, r3, #27
 80078e2:	d411      	bmi.n	8007908 <__swsetup_r+0x50>
 80078e4:	2309      	movs	r3, #9
 80078e6:	6033      	str	r3, [r6, #0]
 80078e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	81a3      	strh	r3, [r4, #12]
 80078f2:	e03e      	b.n	8007972 <__swsetup_r+0xba>
 80078f4:	4b25      	ldr	r3, [pc, #148]	; (800798c <__swsetup_r+0xd4>)
 80078f6:	429c      	cmp	r4, r3
 80078f8:	d101      	bne.n	80078fe <__swsetup_r+0x46>
 80078fa:	68ac      	ldr	r4, [r5, #8]
 80078fc:	e7eb      	b.n	80078d6 <__swsetup_r+0x1e>
 80078fe:	4b24      	ldr	r3, [pc, #144]	; (8007990 <__swsetup_r+0xd8>)
 8007900:	429c      	cmp	r4, r3
 8007902:	bf08      	it	eq
 8007904:	68ec      	ldreq	r4, [r5, #12]
 8007906:	e7e6      	b.n	80078d6 <__swsetup_r+0x1e>
 8007908:	0758      	lsls	r0, r3, #29
 800790a:	d512      	bpl.n	8007932 <__swsetup_r+0x7a>
 800790c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800790e:	b141      	cbz	r1, 8007922 <__swsetup_r+0x6a>
 8007910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007914:	4299      	cmp	r1, r3
 8007916:	d002      	beq.n	800791e <__swsetup_r+0x66>
 8007918:	4630      	mov	r0, r6
 800791a:	f7ff faf3 	bl	8006f04 <_free_r>
 800791e:	2300      	movs	r3, #0
 8007920:	6363      	str	r3, [r4, #52]	; 0x34
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	2300      	movs	r3, #0
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f043 0308 	orr.w	r3, r3, #8
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	b94b      	cbnz	r3, 8007952 <__swsetup_r+0x9a>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007948:	d003      	beq.n	8007952 <__swsetup_r+0x9a>
 800794a:	4621      	mov	r1, r4
 800794c:	4630      	mov	r0, r6
 800794e:	f000 fa05 	bl	8007d5c <__smakebuf_r>
 8007952:	89a0      	ldrh	r0, [r4, #12]
 8007954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007958:	f010 0301 	ands.w	r3, r0, #1
 800795c:	d00a      	beq.n	8007974 <__swsetup_r+0xbc>
 800795e:	2300      	movs	r3, #0
 8007960:	60a3      	str	r3, [r4, #8]
 8007962:	6963      	ldr	r3, [r4, #20]
 8007964:	425b      	negs	r3, r3
 8007966:	61a3      	str	r3, [r4, #24]
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	b943      	cbnz	r3, 800797e <__swsetup_r+0xc6>
 800796c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007970:	d1ba      	bne.n	80078e8 <__swsetup_r+0x30>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	0781      	lsls	r1, r0, #30
 8007976:	bf58      	it	pl
 8007978:	6963      	ldrpl	r3, [r4, #20]
 800797a:	60a3      	str	r3, [r4, #8]
 800797c:	e7f4      	b.n	8007968 <__swsetup_r+0xb0>
 800797e:	2000      	movs	r0, #0
 8007980:	e7f7      	b.n	8007972 <__swsetup_r+0xba>
 8007982:	bf00      	nop
 8007984:	200000c0 	.word	0x200000c0
 8007988:	0800f924 	.word	0x0800f924
 800798c:	0800f944 	.word	0x0800f944
 8007990:	0800f904 	.word	0x0800f904

08007994 <abort>:
 8007994:	2006      	movs	r0, #6
 8007996:	b508      	push	{r3, lr}
 8007998:	f000 fc14 	bl	80081c4 <raise>
 800799c:	2001      	movs	r0, #1
 800799e:	f7fb fddb 	bl	8003558 <_exit>
	...

080079a4 <__sflush_r>:
 80079a4:	898a      	ldrh	r2, [r1, #12]
 80079a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a8:	4605      	mov	r5, r0
 80079aa:	0710      	lsls	r0, r2, #28
 80079ac:	460c      	mov	r4, r1
 80079ae:	d457      	bmi.n	8007a60 <__sflush_r+0xbc>
 80079b0:	684b      	ldr	r3, [r1, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dc04      	bgt.n	80079c0 <__sflush_r+0x1c>
 80079b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dc01      	bgt.n	80079c0 <__sflush_r+0x1c>
 80079bc:	2000      	movs	r0, #0
 80079be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c2:	2e00      	cmp	r6, #0
 80079c4:	d0fa      	beq.n	80079bc <__sflush_r+0x18>
 80079c6:	2300      	movs	r3, #0
 80079c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079cc:	682f      	ldr	r7, [r5, #0]
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	d032      	beq.n	8007a38 <__sflush_r+0x94>
 80079d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	075a      	lsls	r2, r3, #29
 80079d8:	d505      	bpl.n	80079e6 <__sflush_r+0x42>
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	1ac0      	subs	r0, r0, r3
 80079de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079e0:	b10b      	cbz	r3, 80079e6 <__sflush_r+0x42>
 80079e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079e4:	1ac0      	subs	r0, r0, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	4602      	mov	r2, r0
 80079ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ec:	4628      	mov	r0, r5
 80079ee:	6a21      	ldr	r1, [r4, #32]
 80079f0:	47b0      	blx	r6
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	d106      	bne.n	8007a06 <__sflush_r+0x62>
 80079f8:	6829      	ldr	r1, [r5, #0]
 80079fa:	291d      	cmp	r1, #29
 80079fc:	d82c      	bhi.n	8007a58 <__sflush_r+0xb4>
 80079fe:	4a29      	ldr	r2, [pc, #164]	; (8007aa4 <__sflush_r+0x100>)
 8007a00:	40ca      	lsrs	r2, r1
 8007a02:	07d6      	lsls	r6, r2, #31
 8007a04:	d528      	bpl.n	8007a58 <__sflush_r+0xb4>
 8007a06:	2200      	movs	r2, #0
 8007a08:	6062      	str	r2, [r4, #4]
 8007a0a:	6922      	ldr	r2, [r4, #16]
 8007a0c:	04d9      	lsls	r1, r3, #19
 8007a0e:	6022      	str	r2, [r4, #0]
 8007a10:	d504      	bpl.n	8007a1c <__sflush_r+0x78>
 8007a12:	1c42      	adds	r2, r0, #1
 8007a14:	d101      	bne.n	8007a1a <__sflush_r+0x76>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b903      	cbnz	r3, 8007a1c <__sflush_r+0x78>
 8007a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a1e:	602f      	str	r7, [r5, #0]
 8007a20:	2900      	cmp	r1, #0
 8007a22:	d0cb      	beq.n	80079bc <__sflush_r+0x18>
 8007a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a28:	4299      	cmp	r1, r3
 8007a2a:	d002      	beq.n	8007a32 <__sflush_r+0x8e>
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f7ff fa69 	bl	8006f04 <_free_r>
 8007a32:	2000      	movs	r0, #0
 8007a34:	6360      	str	r0, [r4, #52]	; 0x34
 8007a36:	e7c2      	b.n	80079be <__sflush_r+0x1a>
 8007a38:	6a21      	ldr	r1, [r4, #32]
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b0      	blx	r6
 8007a40:	1c41      	adds	r1, r0, #1
 8007a42:	d1c7      	bne.n	80079d4 <__sflush_r+0x30>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0c4      	beq.n	80079d4 <__sflush_r+0x30>
 8007a4a:	2b1d      	cmp	r3, #29
 8007a4c:	d001      	beq.n	8007a52 <__sflush_r+0xae>
 8007a4e:	2b16      	cmp	r3, #22
 8007a50:	d101      	bne.n	8007a56 <__sflush_r+0xb2>
 8007a52:	602f      	str	r7, [r5, #0]
 8007a54:	e7b2      	b.n	80079bc <__sflush_r+0x18>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	e7ae      	b.n	80079be <__sflush_r+0x1a>
 8007a60:	690f      	ldr	r7, [r1, #16]
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	d0aa      	beq.n	80079bc <__sflush_r+0x18>
 8007a66:	0793      	lsls	r3, r2, #30
 8007a68:	bf18      	it	ne
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	680e      	ldr	r6, [r1, #0]
 8007a6e:	bf08      	it	eq
 8007a70:	694b      	ldreq	r3, [r1, #20]
 8007a72:	1bf6      	subs	r6, r6, r7
 8007a74:	600f      	str	r7, [r1, #0]
 8007a76:	608b      	str	r3, [r1, #8]
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	dd9f      	ble.n	80079bc <__sflush_r+0x18>
 8007a7c:	4633      	mov	r3, r6
 8007a7e:	463a      	mov	r2, r7
 8007a80:	4628      	mov	r0, r5
 8007a82:	6a21      	ldr	r1, [r4, #32]
 8007a84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a88:	47e0      	blx	ip
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	dc06      	bgt.n	8007a9c <__sflush_r+0xf8>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e790      	b.n	80079be <__sflush_r+0x1a>
 8007a9c:	4407      	add	r7, r0
 8007a9e:	1a36      	subs	r6, r6, r0
 8007aa0:	e7ea      	b.n	8007a78 <__sflush_r+0xd4>
 8007aa2:	bf00      	nop
 8007aa4:	20400001 	.word	0x20400001

08007aa8 <_fflush_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	690b      	ldr	r3, [r1, #16]
 8007aac:	4605      	mov	r5, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	b913      	cbnz	r3, 8007ab8 <_fflush_r+0x10>
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	b118      	cbz	r0, 8007ac2 <_fflush_r+0x1a>
 8007aba:	6983      	ldr	r3, [r0, #24]
 8007abc:	b90b      	cbnz	r3, 8007ac2 <_fflush_r+0x1a>
 8007abe:	f000 f887 	bl	8007bd0 <__sinit>
 8007ac2:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <_fflush_r+0x6c>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	d11b      	bne.n	8007b00 <_fflush_r+0x58>
 8007ac8:	686c      	ldr	r4, [r5, #4]
 8007aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0ef      	beq.n	8007ab2 <_fflush_r+0xa>
 8007ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ad4:	07d0      	lsls	r0, r2, #31
 8007ad6:	d404      	bmi.n	8007ae2 <_fflush_r+0x3a>
 8007ad8:	0599      	lsls	r1, r3, #22
 8007ada:	d402      	bmi.n	8007ae2 <_fflush_r+0x3a>
 8007adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ade:	f000 f915 	bl	8007d0c <__retarget_lock_acquire_recursive>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f7ff ff5d 	bl	80079a4 <__sflush_r>
 8007aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aec:	4605      	mov	r5, r0
 8007aee:	07da      	lsls	r2, r3, #31
 8007af0:	d4e0      	bmi.n	8007ab4 <_fflush_r+0xc>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	059b      	lsls	r3, r3, #22
 8007af6:	d4dd      	bmi.n	8007ab4 <_fflush_r+0xc>
 8007af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afa:	f000 f908 	bl	8007d0e <__retarget_lock_release_recursive>
 8007afe:	e7d9      	b.n	8007ab4 <_fflush_r+0xc>
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <_fflush_r+0x70>)
 8007b02:	429c      	cmp	r4, r3
 8007b04:	d101      	bne.n	8007b0a <_fflush_r+0x62>
 8007b06:	68ac      	ldr	r4, [r5, #8]
 8007b08:	e7df      	b.n	8007aca <_fflush_r+0x22>
 8007b0a:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <_fflush_r+0x74>)
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	bf08      	it	eq
 8007b10:	68ec      	ldreq	r4, [r5, #12]
 8007b12:	e7da      	b.n	8007aca <_fflush_r+0x22>
 8007b14:	0800f924 	.word	0x0800f924
 8007b18:	0800f944 	.word	0x0800f944
 8007b1c:	0800f904 	.word	0x0800f904

08007b20 <std>:
 8007b20:	2300      	movs	r3, #0
 8007b22:	b510      	push	{r4, lr}
 8007b24:	4604      	mov	r4, r0
 8007b26:	e9c0 3300 	strd	r3, r3, [r0]
 8007b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b2e:	6083      	str	r3, [r0, #8]
 8007b30:	8181      	strh	r1, [r0, #12]
 8007b32:	6643      	str	r3, [r0, #100]	; 0x64
 8007b34:	81c2      	strh	r2, [r0, #14]
 8007b36:	6183      	str	r3, [r0, #24]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	305c      	adds	r0, #92	; 0x5c
 8007b3e:	f7ff f9d9 	bl	8006ef4 <memset>
 8007b42:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <std+0x38>)
 8007b44:	6224      	str	r4, [r4, #32]
 8007b46:	6263      	str	r3, [r4, #36]	; 0x24
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <std+0x3c>)
 8007b4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b4c:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <std+0x40>)
 8007b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <std+0x44>)
 8007b52:	6323      	str	r3, [r4, #48]	; 0x30
 8007b54:	bd10      	pop	{r4, pc}
 8007b56:	bf00      	nop
 8007b58:	080081fd 	.word	0x080081fd
 8007b5c:	0800821f 	.word	0x0800821f
 8007b60:	08008257 	.word	0x08008257
 8007b64:	0800827b 	.word	0x0800827b

08007b68 <_cleanup_r>:
 8007b68:	4901      	ldr	r1, [pc, #4]	; (8007b70 <_cleanup_r+0x8>)
 8007b6a:	f000 b8af 	b.w	8007ccc <_fwalk_reent>
 8007b6e:	bf00      	nop
 8007b70:	08007aa9 	.word	0x08007aa9

08007b74 <__sfmoreglue>:
 8007b74:	2268      	movs	r2, #104	; 0x68
 8007b76:	b570      	push	{r4, r5, r6, lr}
 8007b78:	1e4d      	subs	r5, r1, #1
 8007b7a:	4355      	muls	r5, r2
 8007b7c:	460e      	mov	r6, r1
 8007b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b82:	f7ff fa27 	bl	8006fd4 <_malloc_r>
 8007b86:	4604      	mov	r4, r0
 8007b88:	b140      	cbz	r0, 8007b9c <__sfmoreglue+0x28>
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b90:	300c      	adds	r0, #12
 8007b92:	60a0      	str	r0, [r4, #8]
 8007b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b98:	f7ff f9ac 	bl	8006ef4 <memset>
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}

08007ba0 <__sfp_lock_acquire>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	; (8007ba8 <__sfp_lock_acquire+0x8>)
 8007ba2:	f000 b8b3 	b.w	8007d0c <__retarget_lock_acquire_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20000b5d 	.word	0x20000b5d

08007bac <__sfp_lock_release>:
 8007bac:	4801      	ldr	r0, [pc, #4]	; (8007bb4 <__sfp_lock_release+0x8>)
 8007bae:	f000 b8ae 	b.w	8007d0e <__retarget_lock_release_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	20000b5d 	.word	0x20000b5d

08007bb8 <__sinit_lock_acquire>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	; (8007bc0 <__sinit_lock_acquire+0x8>)
 8007bba:	f000 b8a7 	b.w	8007d0c <__retarget_lock_acquire_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	20000b5e 	.word	0x20000b5e

08007bc4 <__sinit_lock_release>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	; (8007bcc <__sinit_lock_release+0x8>)
 8007bc6:	f000 b8a2 	b.w	8007d0e <__retarget_lock_release_recursive>
 8007bca:	bf00      	nop
 8007bcc:	20000b5e 	.word	0x20000b5e

08007bd0 <__sinit>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	f7ff fff0 	bl	8007bb8 <__sinit_lock_acquire>
 8007bd8:	69a3      	ldr	r3, [r4, #24]
 8007bda:	b11b      	cbz	r3, 8007be4 <__sinit+0x14>
 8007bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be0:	f7ff bff0 	b.w	8007bc4 <__sinit_lock_release>
 8007be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007be8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bea:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <__sinit+0x68>)
 8007bec:	4a13      	ldr	r2, [pc, #76]	; (8007c3c <__sinit+0x6c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	bf08      	it	eq
 8007bf6:	2301      	moveq	r3, #1
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	bf08      	it	eq
 8007bfc:	61a3      	streq	r3, [r4, #24]
 8007bfe:	f000 f81f 	bl	8007c40 <__sfp>
 8007c02:	6060      	str	r0, [r4, #4]
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 f81b 	bl	8007c40 <__sfp>
 8007c0a:	60a0      	str	r0, [r4, #8]
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 f817 	bl	8007c40 <__sfp>
 8007c12:	2200      	movs	r2, #0
 8007c14:	2104      	movs	r1, #4
 8007c16:	60e0      	str	r0, [r4, #12]
 8007c18:	6860      	ldr	r0, [r4, #4]
 8007c1a:	f7ff ff81 	bl	8007b20 <std>
 8007c1e:	2201      	movs	r2, #1
 8007c20:	2109      	movs	r1, #9
 8007c22:	68a0      	ldr	r0, [r4, #8]
 8007c24:	f7ff ff7c 	bl	8007b20 <std>
 8007c28:	2202      	movs	r2, #2
 8007c2a:	2112      	movs	r1, #18
 8007c2c:	68e0      	ldr	r0, [r4, #12]
 8007c2e:	f7ff ff77 	bl	8007b20 <std>
 8007c32:	2301      	movs	r3, #1
 8007c34:	61a3      	str	r3, [r4, #24]
 8007c36:	e7d1      	b.n	8007bdc <__sinit+0xc>
 8007c38:	0800f8cc 	.word	0x0800f8cc
 8007c3c:	08007b69 	.word	0x08007b69

08007c40 <__sfp>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	4607      	mov	r7, r0
 8007c44:	f7ff ffac 	bl	8007ba0 <__sfp_lock_acquire>
 8007c48:	4b1e      	ldr	r3, [pc, #120]	; (8007cc4 <__sfp+0x84>)
 8007c4a:	681e      	ldr	r6, [r3, #0]
 8007c4c:	69b3      	ldr	r3, [r6, #24]
 8007c4e:	b913      	cbnz	r3, 8007c56 <__sfp+0x16>
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7ff ffbd 	bl	8007bd0 <__sinit>
 8007c56:	3648      	adds	r6, #72	; 0x48
 8007c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	d503      	bpl.n	8007c68 <__sfp+0x28>
 8007c60:	6833      	ldr	r3, [r6, #0]
 8007c62:	b30b      	cbz	r3, 8007ca8 <__sfp+0x68>
 8007c64:	6836      	ldr	r6, [r6, #0]
 8007c66:	e7f7      	b.n	8007c58 <__sfp+0x18>
 8007c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c6c:	b9d5      	cbnz	r5, 8007ca4 <__sfp+0x64>
 8007c6e:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <__sfp+0x88>)
 8007c70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c74:	60e3      	str	r3, [r4, #12]
 8007c76:	6665      	str	r5, [r4, #100]	; 0x64
 8007c78:	f000 f847 	bl	8007d0a <__retarget_lock_init_recursive>
 8007c7c:	f7ff ff96 	bl	8007bac <__sfp_lock_release>
 8007c80:	2208      	movs	r2, #8
 8007c82:	4629      	mov	r1, r5
 8007c84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c8c:	6025      	str	r5, [r4, #0]
 8007c8e:	61a5      	str	r5, [r4, #24]
 8007c90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c94:	f7ff f92e 	bl	8006ef4 <memset>
 8007c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca4:	3468      	adds	r4, #104	; 0x68
 8007ca6:	e7d9      	b.n	8007c5c <__sfp+0x1c>
 8007ca8:	2104      	movs	r1, #4
 8007caa:	4638      	mov	r0, r7
 8007cac:	f7ff ff62 	bl	8007b74 <__sfmoreglue>
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	6030      	str	r0, [r6, #0]
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d1d5      	bne.n	8007c64 <__sfp+0x24>
 8007cb8:	f7ff ff78 	bl	8007bac <__sfp_lock_release>
 8007cbc:	230c      	movs	r3, #12
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	e7ee      	b.n	8007ca0 <__sfp+0x60>
 8007cc2:	bf00      	nop
 8007cc4:	0800f8cc 	.word	0x0800f8cc
 8007cc8:	ffff0001 	.word	0xffff0001

08007ccc <_fwalk_reent>:
 8007ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	4688      	mov	r8, r1
 8007cd4:	2700      	movs	r7, #0
 8007cd6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cde:	f1b9 0901 	subs.w	r9, r9, #1
 8007ce2:	d505      	bpl.n	8007cf0 <_fwalk_reent+0x24>
 8007ce4:	6824      	ldr	r4, [r4, #0]
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	d1f7      	bne.n	8007cda <_fwalk_reent+0xe>
 8007cea:	4638      	mov	r0, r7
 8007cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf0:	89ab      	ldrh	r3, [r5, #12]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d907      	bls.n	8007d06 <_fwalk_reent+0x3a>
 8007cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	d003      	beq.n	8007d06 <_fwalk_reent+0x3a>
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4630      	mov	r0, r6
 8007d02:	47c0      	blx	r8
 8007d04:	4307      	orrs	r7, r0
 8007d06:	3568      	adds	r5, #104	; 0x68
 8007d08:	e7e9      	b.n	8007cde <_fwalk_reent+0x12>

08007d0a <__retarget_lock_init_recursive>:
 8007d0a:	4770      	bx	lr

08007d0c <__retarget_lock_acquire_recursive>:
 8007d0c:	4770      	bx	lr

08007d0e <__retarget_lock_release_recursive>:
 8007d0e:	4770      	bx	lr

08007d10 <__swhatbuf_r>:
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	460e      	mov	r6, r1
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	4614      	mov	r4, r2
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	461d      	mov	r5, r3
 8007d1e:	b096      	sub	sp, #88	; 0x58
 8007d20:	da08      	bge.n	8007d34 <__swhatbuf_r+0x24>
 8007d22:	2200      	movs	r2, #0
 8007d24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d28:	602a      	str	r2, [r5, #0]
 8007d2a:	061a      	lsls	r2, r3, #24
 8007d2c:	d410      	bmi.n	8007d50 <__swhatbuf_r+0x40>
 8007d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d32:	e00e      	b.n	8007d52 <__swhatbuf_r+0x42>
 8007d34:	466a      	mov	r2, sp
 8007d36:	f000 fac7 	bl	80082c8 <_fstat_r>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	dbf1      	blt.n	8007d22 <__swhatbuf_r+0x12>
 8007d3e:	9a01      	ldr	r2, [sp, #4]
 8007d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d48:	425a      	negs	r2, r3
 8007d4a:	415a      	adcs	r2, r3
 8007d4c:	602a      	str	r2, [r5, #0]
 8007d4e:	e7ee      	b.n	8007d2e <__swhatbuf_r+0x1e>
 8007d50:	2340      	movs	r3, #64	; 0x40
 8007d52:	2000      	movs	r0, #0
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	b016      	add	sp, #88	; 0x58
 8007d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d5c <__smakebuf_r>:
 8007d5c:	898b      	ldrh	r3, [r1, #12]
 8007d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d60:	079d      	lsls	r5, r3, #30
 8007d62:	4606      	mov	r6, r0
 8007d64:	460c      	mov	r4, r1
 8007d66:	d507      	bpl.n	8007d78 <__smakebuf_r+0x1c>
 8007d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	6123      	str	r3, [r4, #16]
 8007d70:	2301      	movs	r3, #1
 8007d72:	6163      	str	r3, [r4, #20]
 8007d74:	b002      	add	sp, #8
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	466a      	mov	r2, sp
 8007d7a:	ab01      	add	r3, sp, #4
 8007d7c:	f7ff ffc8 	bl	8007d10 <__swhatbuf_r>
 8007d80:	9900      	ldr	r1, [sp, #0]
 8007d82:	4605      	mov	r5, r0
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7ff f925 	bl	8006fd4 <_malloc_r>
 8007d8a:	b948      	cbnz	r0, 8007da0 <__smakebuf_r+0x44>
 8007d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d90:	059a      	lsls	r2, r3, #22
 8007d92:	d4ef      	bmi.n	8007d74 <__smakebuf_r+0x18>
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	f043 0302 	orr.w	r3, r3, #2
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	e7e3      	b.n	8007d68 <__smakebuf_r+0xc>
 8007da0:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <__smakebuf_r+0x7c>)
 8007da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	6020      	str	r0, [r4, #0]
 8007da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	6120      	str	r0, [r4, #16]
 8007db2:	6163      	str	r3, [r4, #20]
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	b15b      	cbz	r3, 8007dd0 <__smakebuf_r+0x74>
 8007db8:	4630      	mov	r0, r6
 8007dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dbe:	f000 fa95 	bl	80082ec <_isatty_r>
 8007dc2:	b128      	cbz	r0, 8007dd0 <__smakebuf_r+0x74>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f023 0303 	bic.w	r3, r3, #3
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	81a3      	strh	r3, [r4, #12]
 8007dd0:	89a0      	ldrh	r0, [r4, #12]
 8007dd2:	4305      	orrs	r5, r0
 8007dd4:	81a5      	strh	r5, [r4, #12]
 8007dd6:	e7cd      	b.n	8007d74 <__smakebuf_r+0x18>
 8007dd8:	08007b69 	.word	0x08007b69

08007ddc <memchr>:
 8007ddc:	4603      	mov	r3, r0
 8007dde:	b510      	push	{r4, lr}
 8007de0:	b2c9      	uxtb	r1, r1
 8007de2:	4402      	add	r2, r0
 8007de4:	4293      	cmp	r3, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	d101      	bne.n	8007dee <memchr+0x12>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e003      	b.n	8007df6 <memchr+0x1a>
 8007dee:	7804      	ldrb	r4, [r0, #0]
 8007df0:	3301      	adds	r3, #1
 8007df2:	428c      	cmp	r4, r1
 8007df4:	d1f6      	bne.n	8007de4 <memchr+0x8>
 8007df6:	bd10      	pop	{r4, pc}

08007df8 <memcpy>:
 8007df8:	440a      	add	r2, r1
 8007dfa:	4291      	cmp	r1, r2
 8007dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e00:	d100      	bne.n	8007e04 <memcpy+0xc>
 8007e02:	4770      	bx	lr
 8007e04:	b510      	push	{r4, lr}
 8007e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e10:	d1f9      	bne.n	8007e06 <memcpy+0xe>
 8007e12:	bd10      	pop	{r4, pc}

08007e14 <memmove>:
 8007e14:	4288      	cmp	r0, r1
 8007e16:	b510      	push	{r4, lr}
 8007e18:	eb01 0402 	add.w	r4, r1, r2
 8007e1c:	d902      	bls.n	8007e24 <memmove+0x10>
 8007e1e:	4284      	cmp	r4, r0
 8007e20:	4623      	mov	r3, r4
 8007e22:	d807      	bhi.n	8007e34 <memmove+0x20>
 8007e24:	1e43      	subs	r3, r0, #1
 8007e26:	42a1      	cmp	r1, r4
 8007e28:	d008      	beq.n	8007e3c <memmove+0x28>
 8007e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e32:	e7f8      	b.n	8007e26 <memmove+0x12>
 8007e34:	4601      	mov	r1, r0
 8007e36:	4402      	add	r2, r0
 8007e38:	428a      	cmp	r2, r1
 8007e3a:	d100      	bne.n	8007e3e <memmove+0x2a>
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e46:	e7f7      	b.n	8007e38 <memmove+0x24>

08007e48 <__malloc_lock>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__malloc_lock+0x8>)
 8007e4a:	f7ff bf5f 	b.w	8007d0c <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	20000b5c 	.word	0x20000b5c

08007e54 <__malloc_unlock>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__malloc_unlock+0x8>)
 8007e56:	f7ff bf5a 	b.w	8007d0e <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20000b5c 	.word	0x20000b5c

08007e60 <_realloc_r>:
 8007e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e64:	4680      	mov	r8, r0
 8007e66:	4614      	mov	r4, r2
 8007e68:	460e      	mov	r6, r1
 8007e6a:	b921      	cbnz	r1, 8007e76 <_realloc_r+0x16>
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e72:	f7ff b8af 	b.w	8006fd4 <_malloc_r>
 8007e76:	b92a      	cbnz	r2, 8007e84 <_realloc_r+0x24>
 8007e78:	f7ff f844 	bl	8006f04 <_free_r>
 8007e7c:	4625      	mov	r5, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	f000 fa54 	bl	8008330 <_malloc_usable_size_r>
 8007e88:	4284      	cmp	r4, r0
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	d802      	bhi.n	8007e94 <_realloc_r+0x34>
 8007e8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e92:	d812      	bhi.n	8007eba <_realloc_r+0x5a>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7ff f89c 	bl	8006fd4 <_malloc_r>
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d0ed      	beq.n	8007e7e <_realloc_r+0x1e>
 8007ea2:	42bc      	cmp	r4, r7
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	bf28      	it	cs
 8007eaa:	463a      	movcs	r2, r7
 8007eac:	f7ff ffa4 	bl	8007df8 <memcpy>
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	f7ff f826 	bl	8006f04 <_free_r>
 8007eb8:	e7e1      	b.n	8007e7e <_realloc_r+0x1e>
 8007eba:	4635      	mov	r5, r6
 8007ebc:	e7df      	b.n	8007e7e <_realloc_r+0x1e>

08007ebe <__ssputs_r>:
 8007ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec2:	688e      	ldr	r6, [r1, #8]
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	460c      	mov	r4, r1
 8007eca:	4690      	mov	r8, r2
 8007ecc:	461f      	mov	r7, r3
 8007ece:	d838      	bhi.n	8007f42 <__ssputs_r+0x84>
 8007ed0:	898a      	ldrh	r2, [r1, #12]
 8007ed2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ed6:	d032      	beq.n	8007f3e <__ssputs_r+0x80>
 8007ed8:	6825      	ldr	r5, [r4, #0]
 8007eda:	6909      	ldr	r1, [r1, #16]
 8007edc:	3301      	adds	r3, #1
 8007ede:	eba5 0901 	sub.w	r9, r5, r1
 8007ee2:	6965      	ldr	r5, [r4, #20]
 8007ee4:	444b      	add	r3, r9
 8007ee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007eea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007eee:	106d      	asrs	r5, r5, #1
 8007ef0:	429d      	cmp	r5, r3
 8007ef2:	bf38      	it	cc
 8007ef4:	461d      	movcc	r5, r3
 8007ef6:	0553      	lsls	r3, r2, #21
 8007ef8:	d531      	bpl.n	8007f5e <__ssputs_r+0xa0>
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7ff f86a 	bl	8006fd4 <_malloc_r>
 8007f00:	4606      	mov	r6, r0
 8007f02:	b950      	cbnz	r0, 8007f1a <__ssputs_r+0x5c>
 8007f04:	230c      	movs	r3, #12
 8007f06:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0a:	f8ca 3000 	str.w	r3, [sl]
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1a:	464a      	mov	r2, r9
 8007f1c:	6921      	ldr	r1, [r4, #16]
 8007f1e:	f7ff ff6b 	bl	8007df8 <memcpy>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	6126      	str	r6, [r4, #16]
 8007f30:	444e      	add	r6, r9
 8007f32:	6026      	str	r6, [r4, #0]
 8007f34:	463e      	mov	r6, r7
 8007f36:	6165      	str	r5, [r4, #20]
 8007f38:	eba5 0509 	sub.w	r5, r5, r9
 8007f3c:	60a5      	str	r5, [r4, #8]
 8007f3e:	42be      	cmp	r6, r7
 8007f40:	d900      	bls.n	8007f44 <__ssputs_r+0x86>
 8007f42:	463e      	mov	r6, r7
 8007f44:	4632      	mov	r2, r6
 8007f46:	4641      	mov	r1, r8
 8007f48:	6820      	ldr	r0, [r4, #0]
 8007f4a:	f7ff ff63 	bl	8007e14 <memmove>
 8007f4e:	68a3      	ldr	r3, [r4, #8]
 8007f50:	2000      	movs	r0, #0
 8007f52:	1b9b      	subs	r3, r3, r6
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	4433      	add	r3, r6
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	e7db      	b.n	8007f16 <__ssputs_r+0x58>
 8007f5e:	462a      	mov	r2, r5
 8007f60:	f7ff ff7e 	bl	8007e60 <_realloc_r>
 8007f64:	4606      	mov	r6, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1e1      	bne.n	8007f2e <__ssputs_r+0x70>
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	f7fe ffc9 	bl	8006f04 <_free_r>
 8007f72:	e7c7      	b.n	8007f04 <__ssputs_r+0x46>

08007f74 <_svfiprintf_r>:
 8007f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	4698      	mov	r8, r3
 8007f7a:	898b      	ldrh	r3, [r1, #12]
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	061b      	lsls	r3, r3, #24
 8007f80:	460d      	mov	r5, r1
 8007f82:	4614      	mov	r4, r2
 8007f84:	b09d      	sub	sp, #116	; 0x74
 8007f86:	d50e      	bpl.n	8007fa6 <_svfiprintf_r+0x32>
 8007f88:	690b      	ldr	r3, [r1, #16]
 8007f8a:	b963      	cbnz	r3, 8007fa6 <_svfiprintf_r+0x32>
 8007f8c:	2140      	movs	r1, #64	; 0x40
 8007f8e:	f7ff f821 	bl	8006fd4 <_malloc_r>
 8007f92:	6028      	str	r0, [r5, #0]
 8007f94:	6128      	str	r0, [r5, #16]
 8007f96:	b920      	cbnz	r0, 8007fa2 <_svfiprintf_r+0x2e>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	e0d1      	b.n	8008146 <_svfiprintf_r+0x1d2>
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	616b      	str	r3, [r5, #20]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8007faa:	2320      	movs	r3, #32
 8007fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fb0:	2330      	movs	r3, #48	; 0x30
 8007fb2:	f04f 0901 	mov.w	r9, #1
 8007fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008160 <_svfiprintf_r+0x1ec>
 8007fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	469a      	mov	sl, r3
 8007fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fca:	b10a      	cbz	r2, 8007fd0 <_svfiprintf_r+0x5c>
 8007fcc:	2a25      	cmp	r2, #37	; 0x25
 8007fce:	d1f9      	bne.n	8007fc4 <_svfiprintf_r+0x50>
 8007fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd4:	d00b      	beq.n	8007fee <_svfiprintf_r+0x7a>
 8007fd6:	465b      	mov	r3, fp
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f7ff ff6e 	bl	8007ebe <__ssputs_r>
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	f000 80aa 	beq.w	800813c <_svfiprintf_r+0x1c8>
 8007fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fea:	445a      	add	r2, fp
 8007fec:	9209      	str	r2, [sp, #36]	; 0x24
 8007fee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 80a2 	beq.w	800813c <_svfiprintf_r+0x1c8>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008002:	f10a 0a01 	add.w	sl, sl, #1
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	9307      	str	r3, [sp, #28]
 800800a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800800e:	931a      	str	r3, [sp, #104]	; 0x68
 8008010:	4654      	mov	r4, sl
 8008012:	2205      	movs	r2, #5
 8008014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008018:	4851      	ldr	r0, [pc, #324]	; (8008160 <_svfiprintf_r+0x1ec>)
 800801a:	f7ff fedf 	bl	8007ddc <memchr>
 800801e:	9a04      	ldr	r2, [sp, #16]
 8008020:	b9d8      	cbnz	r0, 800805a <_svfiprintf_r+0xe6>
 8008022:	06d0      	lsls	r0, r2, #27
 8008024:	bf44      	itt	mi
 8008026:	2320      	movmi	r3, #32
 8008028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802c:	0711      	lsls	r1, r2, #28
 800802e:	bf44      	itt	mi
 8008030:	232b      	movmi	r3, #43	; 0x2b
 8008032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008036:	f89a 3000 	ldrb.w	r3, [sl]
 800803a:	2b2a      	cmp	r3, #42	; 0x2a
 800803c:	d015      	beq.n	800806a <_svfiprintf_r+0xf6>
 800803e:	4654      	mov	r4, sl
 8008040:	2000      	movs	r0, #0
 8008042:	f04f 0c0a 	mov.w	ip, #10
 8008046:	9a07      	ldr	r2, [sp, #28]
 8008048:	4621      	mov	r1, r4
 800804a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800804e:	3b30      	subs	r3, #48	; 0x30
 8008050:	2b09      	cmp	r3, #9
 8008052:	d94e      	bls.n	80080f2 <_svfiprintf_r+0x17e>
 8008054:	b1b0      	cbz	r0, 8008084 <_svfiprintf_r+0x110>
 8008056:	9207      	str	r2, [sp, #28]
 8008058:	e014      	b.n	8008084 <_svfiprintf_r+0x110>
 800805a:	eba0 0308 	sub.w	r3, r0, r8
 800805e:	fa09 f303 	lsl.w	r3, r9, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	46a2      	mov	sl, r4
 8008066:	9304      	str	r3, [sp, #16]
 8008068:	e7d2      	b.n	8008010 <_svfiprintf_r+0x9c>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	1d19      	adds	r1, r3, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	9103      	str	r1, [sp, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	bfbb      	ittet	lt
 8008076:	425b      	neglt	r3, r3
 8008078:	f042 0202 	orrlt.w	r2, r2, #2
 800807c:	9307      	strge	r3, [sp, #28]
 800807e:	9307      	strlt	r3, [sp, #28]
 8008080:	bfb8      	it	lt
 8008082:	9204      	strlt	r2, [sp, #16]
 8008084:	7823      	ldrb	r3, [r4, #0]
 8008086:	2b2e      	cmp	r3, #46	; 0x2e
 8008088:	d10c      	bne.n	80080a4 <_svfiprintf_r+0x130>
 800808a:	7863      	ldrb	r3, [r4, #1]
 800808c:	2b2a      	cmp	r3, #42	; 0x2a
 800808e:	d135      	bne.n	80080fc <_svfiprintf_r+0x188>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	3402      	adds	r4, #2
 8008094:	1d1a      	adds	r2, r3, #4
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	9203      	str	r2, [sp, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	bfb8      	it	lt
 800809e:	f04f 33ff 	movlt.w	r3, #4294967295
 80080a2:	9305      	str	r3, [sp, #20]
 80080a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008164 <_svfiprintf_r+0x1f0>
 80080a8:	2203      	movs	r2, #3
 80080aa:	4650      	mov	r0, sl
 80080ac:	7821      	ldrb	r1, [r4, #0]
 80080ae:	f7ff fe95 	bl	8007ddc <memchr>
 80080b2:	b140      	cbz	r0, 80080c6 <_svfiprintf_r+0x152>
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	eba0 000a 	sub.w	r0, r0, sl
 80080ba:	fa03 f000 	lsl.w	r0, r3, r0
 80080be:	9b04      	ldr	r3, [sp, #16]
 80080c0:	3401      	adds	r4, #1
 80080c2:	4303      	orrs	r3, r0
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ca:	2206      	movs	r2, #6
 80080cc:	4826      	ldr	r0, [pc, #152]	; (8008168 <_svfiprintf_r+0x1f4>)
 80080ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080d2:	f7ff fe83 	bl	8007ddc <memchr>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d038      	beq.n	800814c <_svfiprintf_r+0x1d8>
 80080da:	4b24      	ldr	r3, [pc, #144]	; (800816c <_svfiprintf_r+0x1f8>)
 80080dc:	bb1b      	cbnz	r3, 8008126 <_svfiprintf_r+0x1b2>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	3307      	adds	r3, #7
 80080e2:	f023 0307 	bic.w	r3, r3, #7
 80080e6:	3308      	adds	r3, #8
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ec:	4433      	add	r3, r6
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	e767      	b.n	8007fc2 <_svfiprintf_r+0x4e>
 80080f2:	460c      	mov	r4, r1
 80080f4:	2001      	movs	r0, #1
 80080f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080fa:	e7a5      	b.n	8008048 <_svfiprintf_r+0xd4>
 80080fc:	2300      	movs	r3, #0
 80080fe:	f04f 0c0a 	mov.w	ip, #10
 8008102:	4619      	mov	r1, r3
 8008104:	3401      	adds	r4, #1
 8008106:	9305      	str	r3, [sp, #20]
 8008108:	4620      	mov	r0, r4
 800810a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800810e:	3a30      	subs	r2, #48	; 0x30
 8008110:	2a09      	cmp	r2, #9
 8008112:	d903      	bls.n	800811c <_svfiprintf_r+0x1a8>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0c5      	beq.n	80080a4 <_svfiprintf_r+0x130>
 8008118:	9105      	str	r1, [sp, #20]
 800811a:	e7c3      	b.n	80080a4 <_svfiprintf_r+0x130>
 800811c:	4604      	mov	r4, r0
 800811e:	2301      	movs	r3, #1
 8008120:	fb0c 2101 	mla	r1, ip, r1, r2
 8008124:	e7f0      	b.n	8008108 <_svfiprintf_r+0x194>
 8008126:	ab03      	add	r3, sp, #12
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	462a      	mov	r2, r5
 800812c:	4638      	mov	r0, r7
 800812e:	4b10      	ldr	r3, [pc, #64]	; (8008170 <_svfiprintf_r+0x1fc>)
 8008130:	a904      	add	r1, sp, #16
 8008132:	f3af 8000 	nop.w
 8008136:	1c42      	adds	r2, r0, #1
 8008138:	4606      	mov	r6, r0
 800813a:	d1d6      	bne.n	80080ea <_svfiprintf_r+0x176>
 800813c:	89ab      	ldrh	r3, [r5, #12]
 800813e:	065b      	lsls	r3, r3, #25
 8008140:	f53f af2c 	bmi.w	8007f9c <_svfiprintf_r+0x28>
 8008144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008146:	b01d      	add	sp, #116	; 0x74
 8008148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814c:	ab03      	add	r3, sp, #12
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	462a      	mov	r2, r5
 8008152:	4638      	mov	r0, r7
 8008154:	4b06      	ldr	r3, [pc, #24]	; (8008170 <_svfiprintf_r+0x1fc>)
 8008156:	a904      	add	r1, sp, #16
 8008158:	f7ff f978 	bl	800744c <_printf_i>
 800815c:	e7eb      	b.n	8008136 <_svfiprintf_r+0x1c2>
 800815e:	bf00      	nop
 8008160:	0800f8d0 	.word	0x0800f8d0
 8008164:	0800f8d6 	.word	0x0800f8d6
 8008168:	0800f8da 	.word	0x0800f8da
 800816c:	00000000 	.word	0x00000000
 8008170:	08007ebf 	.word	0x08007ebf

08008174 <_raise_r>:
 8008174:	291f      	cmp	r1, #31
 8008176:	b538      	push	{r3, r4, r5, lr}
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	d904      	bls.n	8008188 <_raise_r+0x14>
 800817e:	2316      	movs	r3, #22
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	f04f 30ff 	mov.w	r0, #4294967295
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800818a:	b112      	cbz	r2, 8008192 <_raise_r+0x1e>
 800818c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008190:	b94b      	cbnz	r3, 80081a6 <_raise_r+0x32>
 8008192:	4620      	mov	r0, r4
 8008194:	f000 f830 	bl	80081f8 <_getpid_r>
 8008198:	462a      	mov	r2, r5
 800819a:	4601      	mov	r1, r0
 800819c:	4620      	mov	r0, r4
 800819e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a2:	f000 b817 	b.w	80081d4 <_kill_r>
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d00a      	beq.n	80081c0 <_raise_r+0x4c>
 80081aa:	1c59      	adds	r1, r3, #1
 80081ac:	d103      	bne.n	80081b6 <_raise_r+0x42>
 80081ae:	2316      	movs	r3, #22
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	2001      	movs	r0, #1
 80081b4:	e7e7      	b.n	8008186 <_raise_r+0x12>
 80081b6:	2400      	movs	r4, #0
 80081b8:	4628      	mov	r0, r5
 80081ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081be:	4798      	blx	r3
 80081c0:	2000      	movs	r0, #0
 80081c2:	e7e0      	b.n	8008186 <_raise_r+0x12>

080081c4 <raise>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <raise+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f7ff bfd3 	b.w	8008174 <_raise_r>
 80081ce:	bf00      	nop
 80081d0:	200000c0 	.word	0x200000c0

080081d4 <_kill_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	2300      	movs	r3, #0
 80081d8:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_kill_r+0x20>)
 80081da:	4604      	mov	r4, r0
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	f7fb f9a9 	bl	8003538 <_kill>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d102      	bne.n	80081f0 <_kill_r+0x1c>
 80081ea:	682b      	ldr	r3, [r5, #0]
 80081ec:	b103      	cbz	r3, 80081f0 <_kill_r+0x1c>
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
 80081f2:	bf00      	nop
 80081f4:	20000b60 	.word	0x20000b60

080081f8 <_getpid_r>:
 80081f8:	f7fb b997 	b.w	800352a <_getpid>

080081fc <__sread>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	460c      	mov	r4, r1
 8008200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008204:	f000 f89c 	bl	8008340 <_read_r>
 8008208:	2800      	cmp	r0, #0
 800820a:	bfab      	itete	ge
 800820c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800820e:	89a3      	ldrhlt	r3, [r4, #12]
 8008210:	181b      	addge	r3, r3, r0
 8008212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008216:	bfac      	ite	ge
 8008218:	6563      	strge	r3, [r4, #84]	; 0x54
 800821a:	81a3      	strhlt	r3, [r4, #12]
 800821c:	bd10      	pop	{r4, pc}

0800821e <__swrite>:
 800821e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008222:	461f      	mov	r7, r3
 8008224:	898b      	ldrh	r3, [r1, #12]
 8008226:	4605      	mov	r5, r0
 8008228:	05db      	lsls	r3, r3, #23
 800822a:	460c      	mov	r4, r1
 800822c:	4616      	mov	r6, r2
 800822e:	d505      	bpl.n	800823c <__swrite+0x1e>
 8008230:	2302      	movs	r3, #2
 8008232:	2200      	movs	r2, #0
 8008234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008238:	f000 f868 	bl	800830c <_lseek_r>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	4632      	mov	r2, r6
 8008240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	4628      	mov	r0, r5
 8008248:	463b      	mov	r3, r7
 800824a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	f000 b817 	b.w	8008284 <_write_r>

08008256 <__sseek>:
 8008256:	b510      	push	{r4, lr}
 8008258:	460c      	mov	r4, r1
 800825a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825e:	f000 f855 	bl	800830c <_lseek_r>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	bf15      	itete	ne
 8008268:	6560      	strne	r0, [r4, #84]	; 0x54
 800826a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800826e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008272:	81a3      	strheq	r3, [r4, #12]
 8008274:	bf18      	it	ne
 8008276:	81a3      	strhne	r3, [r4, #12]
 8008278:	bd10      	pop	{r4, pc}

0800827a <__sclose>:
 800827a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827e:	f000 b813 	b.w	80082a8 <_close_r>
	...

08008284 <_write_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	4611      	mov	r1, r2
 800828c:	2200      	movs	r2, #0
 800828e:	4d05      	ldr	r5, [pc, #20]	; (80082a4 <_write_r+0x20>)
 8008290:	602a      	str	r2, [r5, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f7f8 fef9 	bl	800108a <_write>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_write_r+0x1e>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_write_r+0x1e>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20000b60 	.word	0x20000b60

080082a8 <_close_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	2300      	movs	r3, #0
 80082ac:	4d05      	ldr	r5, [pc, #20]	; (80082c4 <_close_r+0x1c>)
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7fb f977 	bl	80035a6 <_close>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_close_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_close_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	20000b60 	.word	0x20000b60

080082c8 <_fstat_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	2300      	movs	r3, #0
 80082cc:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_fstat_r+0x20>)
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	4611      	mov	r1, r2
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	f7fb f971 	bl	80035bc <_fstat>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	d102      	bne.n	80082e4 <_fstat_r+0x1c>
 80082de:	682b      	ldr	r3, [r5, #0]
 80082e0:	b103      	cbz	r3, 80082e4 <_fstat_r+0x1c>
 80082e2:	6023      	str	r3, [r4, #0]
 80082e4:	bd38      	pop	{r3, r4, r5, pc}
 80082e6:	bf00      	nop
 80082e8:	20000b60 	.word	0x20000b60

080082ec <_isatty_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	2300      	movs	r3, #0
 80082f0:	4d05      	ldr	r5, [pc, #20]	; (8008308 <_isatty_r+0x1c>)
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7fb f96f 	bl	80035da <_isatty>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_isatty_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_isatty_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20000b60 	.word	0x20000b60

0800830c <_lseek_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	2200      	movs	r2, #0
 8008316:	4d05      	ldr	r5, [pc, #20]	; (800832c <_lseek_r+0x20>)
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7fb f967 	bl	80035ee <_lseek>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_lseek_r+0x1e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_lseek_r+0x1e>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20000b60 	.word	0x20000b60

08008330 <_malloc_usable_size_r>:
 8008330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008334:	1f18      	subs	r0, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfbc      	itt	lt
 800833a:	580b      	ldrlt	r3, [r1, r0]
 800833c:	18c0      	addlt	r0, r0, r3
 800833e:	4770      	bx	lr

08008340 <_read_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	2200      	movs	r2, #0
 800834a:	4d05      	ldr	r5, [pc, #20]	; (8008360 <_read_r+0x20>)
 800834c:	602a      	str	r2, [r5, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f7fb f90c 	bl	800356c <_read>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_read_r+0x1e>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_read_r+0x1e>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000b60 	.word	0x20000b60

08008364 <_init>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	bf00      	nop
 8008368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836a:	bc08      	pop	{r3}
 800836c:	469e      	mov	lr, r3
 800836e:	4770      	bx	lr

08008370 <_fini>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	bf00      	nop
 8008374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008376:	bc08      	pop	{r3}
 8008378:	469e      	mov	lr, r3
 800837a:	4770      	bx	lr
