
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003968  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d44  08003d44  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003d44  08003d44  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d44  08003d44  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000090  08003ddc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08003ddc  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa47  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d9  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  000335e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9d8  00000000  00000000  00034690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152ff  00000000  00000000  0004f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936c7  00000000  00000000  00064367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b0  00000000  00000000  000f7a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a5c 	.word	0x08003a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08003a5c 	.word	0x08003a5c

0800014c <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d105      	bne.n	8000166 <tail_ptr_retreat+0x1a>
 800015a:	4b0c      	ldr	r3, [pc, #48]	; (800018c <tail_ptr_retreat+0x40>)
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <tail_ptr_retreat+0x44>)
 800015e:	2139      	movs	r1, #57	; 0x39
 8000160:	480c      	ldr	r0, [pc, #48]	; (8000194 <tail_ptr_retreat+0x48>)
 8000162:	f002 fbbb 	bl	80028dc <__assert_func>

    rb->full = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	689b      	ldr	r3, [r3, #8]
 8000170:	3301      	adds	r3, #1
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	68d2      	ldr	r2, [r2, #12]
 8000176:	fbb3 f1f2 	udiv	r1, r3, r2
 800017a:	fb01 f202 	mul.w	r2, r1, r2
 800017e:	1a9a      	subs	r2, r3, r2
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	609a      	str	r2, [r3, #8]
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	08003a74 	.word	0x08003a74
 8000190:	08003be0 	.word	0x08003be0
 8000194:	08003a78 	.word	0x08003a78

08000198 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    assert(rb);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d105      	bne.n	80001b2 <is_ring_buffer_empty+0x1a>
 80001a6:	4b0c      	ldr	r3, [pc, #48]	; (80001d8 <is_ring_buffer_empty+0x40>)
 80001a8:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <is_ring_buffer_empty+0x44>)
 80001aa:	214e      	movs	r1, #78	; 0x4e
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <is_ring_buffer_empty+0x48>)
 80001ae:	f002 fb95 	bl	80028dc <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	7c1b      	ldrb	r3, [r3, #16]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <is_ring_buffer_empty+0x32>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	689a      	ldr	r2, [r3, #8]
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	685b      	ldr	r3, [r3, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d101      	bne.n	80001ca <is_ring_buffer_empty+0x32>
 80001c6:	2301      	movs	r3, #1
 80001c8:	e000      	b.n	80001cc <is_ring_buffer_empty+0x34>
 80001ca:	2300      	movs	r3, #0
 80001cc:	b2db      	uxtb	r3, r3
}
 80001ce:	4618      	mov	r0, r3
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	08003a74 	.word	0x08003a74
 80001dc:	08003bf4 	.word	0x08003bf4
 80001e0:	08003a78 	.word	0x08003a78

080001e4 <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d002      	beq.n	80001fa <ring_buffer_init+0x16>
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d105      	bne.n	8000206 <ring_buffer_init+0x22>
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <ring_buffer_init+0x74>)
 80001fc:	4a17      	ldr	r2, [pc, #92]	; (800025c <ring_buffer_init+0x78>)
 80001fe:	2169      	movs	r1, #105	; 0x69
 8000200:	4817      	ldr	r0, [pc, #92]	; (8000260 <ring_buffer_init+0x7c>)
 8000202:	f002 fb6b 	bl	80028dc <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 8000206:	2014      	movs	r0, #20
 8000208:	f002 fbc2 	bl	8002990 <malloc>
 800020c:	4603      	mov	r3, r0
 800020e:	60fb      	str	r3, [r7, #12]
    assert(rb);
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d105      	bne.n	8000222 <ring_buffer_init+0x3e>
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <ring_buffer_init+0x80>)
 8000218:	4a10      	ldr	r2, [pc, #64]	; (800025c <ring_buffer_init+0x78>)
 800021a:	216c      	movs	r1, #108	; 0x6c
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <ring_buffer_init+0x7c>)
 800021e:	f002 fb5d 	bl	80028dc <__assert_func>

    rb->buffer = buffer;
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 800022e:	68f8      	ldr	r0, [r7, #12]
 8000230:	f000 f81c 	bl	800026c <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f7ff ffaf 	bl	8000198 <is_ring_buffer_empty>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d105      	bne.n	800024c <ring_buffer_init+0x68>
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <ring_buffer_init+0x84>)
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <ring_buffer_init+0x78>)
 8000244:	2172      	movs	r1, #114	; 0x72
 8000246:	4806      	ldr	r0, [pc, #24]	; (8000260 <ring_buffer_init+0x7c>)
 8000248:	f002 fb48 	bl	80028dc <__assert_func>

    return rb;
 800024c:	68fb      	ldr	r3, [r7, #12]
}
 800024e:	4618      	mov	r0, r3
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	08003a98 	.word	0x08003a98
 800025c:	08003c0c 	.word	0x08003c0c
 8000260:	08003a78 	.word	0x08003a78
 8000264:	08003a74 	.word	0x08003a74
 8000268:	08003aa8 	.word	0x08003aa8

0800026c <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d105      	bne.n	8000286 <ring_buffer_reset+0x1a>
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <ring_buffer_reset+0x34>)
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <ring_buffer_reset+0x38>)
 800027e:	2189      	movs	r1, #137	; 0x89
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <ring_buffer_reset+0x3c>)
 8000282:	f002 fb2b 	bl	80028dc <__assert_func>
    rb->head = 0;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	741a      	strb	r2, [r3, #16]
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	08003a74 	.word	0x08003a74
 80002a4:	08003c20 	.word	0x08003c20
 80002a8:	08003a78 	.word	0x08003a78

080002ac <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d006      	beq.n	80002ca <ring_buffer_get+0x1e>
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d003      	beq.n	80002ca <ring_buffer_get+0x1e>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d105      	bne.n	80002d6 <ring_buffer_get+0x2a>
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <ring_buffer_get+0x60>)
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <ring_buffer_get+0x64>)
 80002ce:	21da      	movs	r1, #218	; 0xda
 80002d0:	4810      	ldr	r0, [pc, #64]	; (8000314 <ring_buffer_get+0x68>)
 80002d2:	f002 fb03 	bl	80028dc <__assert_func>

    int r = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f7ff ff5c 	bl	8000198 <is_ring_buffer_empty>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10c      	bne.n	8000300 <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	4413      	add	r3, r2
 80002f0:	781a      	ldrb	r2, [r3, #0]
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f7ff ff28 	bl	800014c <tail_ptr_retreat>

        r = 1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	b2db      	uxtb	r3, r3
}
 8000304:	4618      	mov	r0, r3
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	08003ad8 	.word	0x08003ad8
 8000310:	08003c34 	.word	0x08003c34
 8000314:	08003a78 	.word	0x08003a78

08000318 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d006      	beq.n	8000338 <ring_buffer_read+0x20>
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <ring_buffer_read+0x20>
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d106      	bne.n	8000346 <ring_buffer_read+0x2e>
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <ring_buffer_read+0x64>)
 800033a:	4a11      	ldr	r2, [pc, #68]	; (8000380 <ring_buffer_read+0x68>)
 800033c:	f240 1115 	movw	r1, #277	; 0x115
 8000340:	4810      	ldr	r0, [pc, #64]	; (8000384 <ring_buffer_read+0x6c>)
 8000342:	f002 facb 	bl	80028dc <__assert_func>

    size_t data_counter = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 800034a:	e00d      	b.n	8000368 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	617a      	str	r2, [r7, #20]
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	4413      	add	r3, r2
 8000356:	4619      	mov	r1, r3
 8000358:	68f8      	ldr	r0, [r7, #12]
 800035a:	f7ff ffa7 	bl	80002ac <ring_buffer_get>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d101      	bne.n	8000368 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 8000364:	2303      	movs	r3, #3
 8000366:	e004      	b.n	8000372 <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 8000368:	697a      	ldr	r2, [r7, #20]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	429a      	cmp	r2, r3
 800036e:	d3ed      	bcc.n	800034c <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	08003af4 	.word	0x08003af4
 8000380:	08003c44 	.word	0x08003c44
 8000384:	08003a78 	.word	0x08003a78

08000388 <evt_mgmt_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

evt_mgmt_handle_t evt_mgmt_fsm_get(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
    return &evt_mgmt_fsm;
 800038c:	4b02      	ldr	r3, [pc, #8]	; (8000398 <evt_mgmt_fsm_get+0x10>)
}
 800038e:	4618      	mov	r0, r3
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000174 	.word	0x20000174

0800039c <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(evt_mgmt_handle_t handle, evt_mgmt_state_t next_state)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	78fa      	ldrb	r2, [r7, #3]
 80003ac:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2200      	movs	r2, #0
 80003b2:	705a      	strb	r2, [r3, #1]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <evt_mgmt_fsm_run>:

void evt_mgmt_fsm_run(evt_mgmt_handle_t handle)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d002      	beq.n	80003d4 <evt_mgmt_fsm_run+0x16>
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d004      	beq.n	80003dc <evt_mgmt_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 80003d2:	e007      	b.n	80003e4 <evt_mgmt_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f84d 	bl	8000474 <wait_event_on_react>
 80003da:	e003      	b.n	80003e4 <evt_mgmt_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f885 	bl	80004ec <notify_event_on_react>
 80003e2:	bf00      	nop
    }
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <evt_mgmt_fsm_init>:

void evt_mgmt_fsm_init(evt_mgmt_handle_t handle)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3358      	adds	r3, #88	; 0x58
 80003f8:	22c8      	movs	r2, #200	; 0xc8
 80003fa:	4905      	ldr	r1, [pc, #20]	; (8000410 <evt_mgmt_fsm_init+0x24>)
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f898 	bl	8000532 <event_queue_init>
    enter_seq_wait_event(handle);
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f000 f806 	bl	8000414 <enter_seq_wait_event>
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200000ac 	.word	0x200000ac

08000414 <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(evt_mgmt_handle_t handle)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    evt_mgmt_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 800041c:	2101      	movs	r1, #1
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ffbc 	bl	800039c <fsm_set_next_state>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <exit_action_wait_event>:

static void exit_action_wait_event(evt_mgmt_handle_t handle)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3304      	adds	r3, #4
 800043e:	4619      	mov	r1, r3
 8000440:	4610      	mov	r0, r2
 8000442:	f000 f897 	bl	8000574 <event_queue_read>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <during_action_wait_event>:

static void during_action_wait_event(evt_mgmt_handle_t handle)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3358      	adds	r3, #88	; 0x58
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f87f 	bl	800055e <event_queue_get_pending>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <during_action_wait_event+0x1e>
        handle->event.internal = EVT_UNREAD_EVENT;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2201      	movs	r2, #1
 800046a:	705a      	strb	r2, [r3, #1]
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <wait_event_on_react>:

static void wait_event_on_react(evt_mgmt_handle_t handle)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 800047c:	2301      	movs	r3, #1
 800047e:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_UNREAD_EVENT)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	785b      	ldrb	r3, [r3, #1]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d106      	bne.n	8000496 <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f7ff ffcf 	bl	800042c <exit_action_wait_event>
        enter_seq_notify_event(handle);
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f000 f810 	bl	80004b4 <enter_seq_notify_event>
 8000494:	e001      	b.n	800049a <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 8000496:	2300      	movs	r3, #0
 8000498:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	f083 0301 	eor.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d002      	beq.n	80004ac <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff ffd1 	bl	800044e <during_action_wait_event>
    }
}
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <enter_seq_notify_event>:

static void enter_seq_notify_event(evt_mgmt_handle_t handle)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    evt_mgmt_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 80004bc:	2102      	movs	r1, #2
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff ff6c 	bl	800039c <fsm_set_next_state>
    entry_action_notify_event(handle);
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f000 f804 	bl	80004d2 <entry_action_notify_event>
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <entry_action_notify_event>:

static void entry_action_notify_event(evt_mgmt_handle_t handle)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
        temp_ctrl_fsm_write_evt(&temp_fsm, &handle->iface.event);
    break;
    */
    
    default:
        break;
 80004da:	bf00      	nop
    }

    handle->event.internal = EVT_NOTIFICATION_DONE;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2202      	movs	r2, #2
 80004e0:	705a      	strb	r2, [r3, #1]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <notify_event_on_react>:

static void notify_event_on_react(evt_mgmt_handle_t handle)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_NOTIFICATION_DONE)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	785b      	ldrb	r3, [r3, #1]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d102      	bne.n	8000502 <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff89 	bl	8000414 <enter_seq_wait_event>
    }
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm_src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm_dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->evt);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->header.payload_len);

    if(evt->header.payload_len)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	78db      	ldrb	r3, [r3, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d007      	beq.n	800052a <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->payload.buff, evt->header.payload_len);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	1d19      	adds	r1, r3, #4
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	78db      	ldrb	r3, [r3, #3]
 8000522:	461a      	mov	r2, r3
 8000524:	2058      	movs	r0, #88	; 0x58
 8000526:	f000 fcbd 	bl	8000ea4 <print_buffer>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b084      	sub	sp, #16
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	4613      	mov	r3, r2
 800053e:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4619      	mov	r1, r3
 8000544:	68b8      	ldr	r0, [r7, #8]
 8000546:	f7ff fe4d 	bl	80001e4 <ring_buffer_init>
 800054a:	4602      	mov	r2, r0
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2200      	movs	r2, #0
 8000554:	711a      	strb	r2, [r3, #4]
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <event_queue_read>:

    return write_st;
}

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff ffeb 	bl	800055e <event_queue_get_pending>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d031      	beq.n	80005f2 <event_queue_read+0x7e>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6839      	ldr	r1, [r7, #0]
 8000594:	2204      	movs	r2, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff febe 	bl	8000318 <ring_buffer_read>
 800059c:	4603      	mov	r3, r0
 800059e:	73fb      	strb	r3, [r7, #15]
        if (evt->header.payload_len)
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	78db      	ldrb	r3, [r3, #3]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00a      	beq.n	80005be <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	1d19      	adds	r1, r3, #4
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	78db      	ldrb	r3, [r3, #3]
 80005b4:	461a      	mov	r2, r3
 80005b6:	f7ff feaf 	bl	8000318 <ring_buffer_read>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d109      	bne.n	80005d8 <event_queue_read+0x64>
        {
            queue->pending_cnt--;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 80005d0:	6838      	ldr	r0, [r7, #0]
 80005d2:	f7ff ff9a 	bl	800050a <event_print_info>
 80005d6:	e00c      	b.n	80005f2 <event_queue_read+0x7e>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <event_queue_read+0x88>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fdb1 	bl	8003144 <iprintf>
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <event_queue_read+0x8c>)
 80005e4:	f002 fe34 	bl	8003250 <puts>
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <event_queue_read+0x88>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fda9 	bl	8003144 <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004
 8000600:	08003b30 	.word	0x08003b30

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fcdf 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f816 	bl	800063e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f943 	bl	800089c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000616:	f000 f863 	bl	80006e0 <MX_ADC1_Init>
  MX_SPI2_Init();
 800061a:	f000 f8cd 	bl	80007b8 <MX_SPI2_Init>
  MX_I2C1_Init();
 800061e:	f000 f89d 	bl	800075c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000622:	f000 f8ff 	bl	8000824 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  evt_mgmt_handle_t evt_mgmt_fsm = evt_mgmt_fsm_get();
 8000626:	f7ff feaf 	bl	8000388 <evt_mgmt_fsm_get>
 800062a:	6078      	str	r0, [r7, #4]
  evt_mgmt_fsm_init(evt_mgmt_fsm);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fedd 	bl	80003ec <evt_mgmt_fsm_init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    evt_mgmt_fsm_run(evt_mgmt_fsm);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff fec3 	bl	80003be <evt_mgmt_fsm_run>
    time_events_poll_update();
 8000638:	f000 fc96 	bl	8000f68 <time_events_poll_update>
    evt_mgmt_fsm_run(evt_mgmt_fsm);
 800063c:	e7f9      	b.n	8000632 <main+0x2e>

0800063e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b094      	sub	sp, #80	; 0x50
 8000642:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000648:	2228      	movs	r2, #40	; 0x28
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f9a7 	bl	80029a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2310      	movs	r3, #16
 8000678:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fada 	bl	8001c3c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800068e:	f000 f9cb 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fd47 	bl	8002140 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006b8:	f000 f9b6 	bl	8000a28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006bc:	2302      	movs	r3, #2
 80006be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 febe 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d2:	f000 f9a9 	bl	8000a28 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_ADC1_Init+0x74>)
 80006f2:	4a19      	ldr	r2, [pc, #100]	; (8000758 <MX_ADC1_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_ADC1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_ADC1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_ADC1_Init+0x74>)
 800070a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_ADC1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC1_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_ADC1_Init+0x74>)
 800071e:	f000 fcb7 	bl	8001090 <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f97e 	bl	8000a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800072c:	230a      	movs	r3, #10
 800072e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2301      	movs	r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_ADC1_Init+0x74>)
 800073e:	f000 fd7f 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000748:	f000 f96e 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001d4 	.word	0x200001d4
 8000758:	40012400 	.word	0x40012400

0800075c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2C1_Init+0x50>)
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <MX_I2C1_Init+0x54>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_I2C1_Init+0x50>)
 8000768:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x58>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_I2C1_Init+0x50>)
 800077a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_I2C1_Init+0x50>)
 800079a:	f001 f90b 	bl	80019b4 <HAL_I2C_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 f940 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000204 	.word	0x20000204
 80007b0:	40005400 	.word	0x40005400
 80007b4:	000186a0 	.word	0x000186a0

080007b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI2_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_SPI2_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI2_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI2_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI2_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI2_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI2_Init+0x64>)
 80007ec:	2210      	movs	r2, #16
 80007ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI2_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI2_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI2_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI2_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI2_Init+0x64>)
 800080a:	f001 fed3 	bl	80025b4 <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 f908 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000258 	.word	0x20000258
 8000820:	40003800 	.word	0x40003800

08000824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_TIM1_Init+0x70>)
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_TIM1_Init+0x74>)
 8000836:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_TIM1_Init+0x70>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM1_Init+0x70>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_TIM1_Init+0x70>)
 8000846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_TIM1_Init+0x70>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_TIM1_Init+0x70>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_TIM1_Init+0x70>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800085e:	2108      	movs	r1, #8
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM1_Init+0x70>)
 8000862:	f001 ff2b 	bl	80026bc <HAL_TIM_OnePulse_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f8dc 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM1_Init+0x70>)
 800087e:	f001 ffcf 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000888:	f000 f8ce 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200002b0 	.word	0x200002b0
 8000898:	40012c00 	.word	0x40012c00

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b0:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a57      	ldr	r2, [pc, #348]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0310 	and.w	r3, r3, #16
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c8:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a51      	ldr	r2, [pc, #324]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008ce:	f043 0320 	orr.w	r3, r3, #32
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b4f      	ldr	r3, [pc, #316]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b4c      	ldr	r3, [pc, #304]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a4b      	ldr	r2, [pc, #300]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a45      	ldr	r2, [pc, #276]	; (8000a14 <MX_GPIO_Init+0x178>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <MX_GPIO_Init+0x178>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	4840      	ldr	r0, [pc, #256]	; (8000a18 <MX_GPIO_Init+0x17c>)
 8000916:	f001 f835 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 800091a:	2200      	movs	r2, #0
 800091c:	f640 715f 	movw	r1, #3935	; 0xf5f
 8000920:	483e      	ldr	r0, [pc, #248]	; (8000a1c <MX_GPIO_Init+0x180>)
 8000922:	f001 f82f 	bl	8001984 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800092c:	483c      	ldr	r0, [pc, #240]	; (8000a20 <MX_GPIO_Init+0x184>)
 800092e:	f001 f829 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	4833      	ldr	r0, [pc, #204]	; (8000a18 <MX_GPIO_Init+0x17c>)
 800094a:	f000 fe97 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin UP_Pin DOWN_Pin
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin|UP_Pin|DOWN_Pin
 800094e:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8000952:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	482d      	ldr	r0, [pc, #180]	; (8000a18 <MX_GPIO_Init+0x17c>)
 8000964:	f000 fe8a 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8000968:	f640 735f 	movw	r3, #3935	; 0xf5f
 800096c:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	4826      	ldr	r0, [pc, #152]	; (8000a1c <MX_GPIO_Init+0x180>)
 8000982:	f000 fe7b 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin S4_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin|S4_Pin;
 8000986:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 800098a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4820      	ldr	r0, [pc, #128]	; (8000a1c <MX_GPIO_Init+0x180>)
 800099c:	f000 fe6e 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80009a0:	2301      	movs	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_GPIO_Init+0x188>)
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <MX_GPIO_Init+0x184>)
 80009b4:	f000 fe62 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80009b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_GPIO_Init+0x184>)
 80009d2:	f000 fe53 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 80009d6:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_GPIO_Init+0x188>)
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x17c>)
 80009ec:	f000 fe46 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 80009f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_GPIO_Init+0x188>)
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_GPIO_Init+0x180>)
 8000a06:	f000 fe39 	bl	800167c <HAL_GPIO_Init>

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	10110000 	.word	0x10110000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_MspInit+0x60>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_MspInit+0x60>)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010000 	.word	0x40010000

08000a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_ADC_MspInit+0x6c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d121      	bne.n	8000afc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <HAL_ADC_MspInit+0x70>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <HAL_ADC_MspInit+0x70>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_ADC_MspInit+0x70>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_ADC_MspInit+0x70>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <HAL_ADC_MspInit+0x70>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_ADC_MspInit+0x70>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aec:	2303      	movs	r3, #3
 8000aee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_ADC_MspInit+0x74>)
 8000af8:	f000 fdc0 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40012400 	.word	0x40012400
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40011000 	.word	0x40011000

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <HAL_I2C_MspInit+0x70>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d123      	bne.n	8000b78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_I2C_MspInit+0x74>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_I2C_MspInit+0x74>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_I2C_MspInit+0x74>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8000b48:	23c0      	movs	r3, #192	; 0xc0
 8000b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4c:	2312      	movs	r3, #18
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480b      	ldr	r0, [pc, #44]	; (8000b88 <HAL_I2C_MspInit+0x78>)
 8000b5c:	f000 fd8e 	bl	800167c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_I2C_MspInit+0x74>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_I2C_MspInit+0x74>)
 8000b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6a:	61d3      	str	r3, [r2, #28]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_I2C_MspInit+0x74>)
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40005400 	.word	0x40005400
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_SPI_MspInit+0x8c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d131      	bne.n	8000c10 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_SPI_MspInit+0x90>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_SPI_MspInit+0x90>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	61d3      	str	r3, [r2, #28]
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_SPI_MspInit+0x90>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_SPI_MspInit+0x90>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <HAL_SPI_MspInit+0x90>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_SPI_MspInit+0x90>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8000bdc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <HAL_SPI_MspInit+0x94>)
 8000bf2:	f000 fd43 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8000bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_SPI_MspInit+0x94>)
 8000c0c:	f000 fd36 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40003800 	.word	0x40003800
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <HAL_TIM_OnePulse_MspInit+0x34>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10b      	bne.n	8000c4e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_TIM_OnePulse_MspInit+0x38>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_TIM_OnePulse_MspInit+0x38>)
 8000c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_TIM_OnePulse_MspInit+0x38>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	40012c00 	.word	0x40012c00
 8000c5c:	40021000 	.word	0x40021000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f9d7 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
	return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <_kill>:

int _kill(int pid, int sig)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cc6:	f001 fe27 	bl	8002918 <__errno>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2216      	movs	r2, #22
 8000cce:	601a      	str	r2, [r3, #0]
	return -1;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_exit>:

void _exit (int status)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ffe7 	bl	8000cbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cee:	e7fe      	b.n	8000cee <_exit+0x12>

08000cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
	}

return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d50:	605a      	str	r2, [r3, #4]
	return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b085      	sub	sp, #20
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
	return 0;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f001 fdac 	bl	8002918 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20005000 	.word	0x20005000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200002f8 	.word	0x200002f8
 8000df4:	20000318 	.word	0x20000318

08000df8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d013      	beq.n	8000e44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00b      	beq.n	8000e44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e2c:	e000      	b.n	8000e30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	e009      	b.n	8000e74 <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffcb 	bl	8000e04 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf1      	blt.n	8000e60 <itm_write+0x10>
	}
	return len;
 8000e7c:	683b      	ldr	r3, [r7, #0]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	68b8      	ldr	r0, [r7, #8]
 8000e96:	f7ff ffdb 	bl	8000e50 <itm_write>
 8000e9a:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <print_buffer+0x7c>)
 8000eb6:	f002 f9cb 	bl	8003250 <puts>
	for (size_t i = 0; i < len; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e023      	b.n	8000f08 <print_buffer+0x64>
	{
		switch (format)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b43      	cmp	r3, #67	; 0x43
 8000ec4:	d002      	beq.n	8000ecc <print_buffer+0x28>
 8000ec6:	2b58      	cmp	r3, #88	; 0x58
 8000ec8:	d009      	beq.n	8000ede <print_buffer+0x3a>
 8000eca:	e011      	b.n	8000ef0 <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <print_buffer+0x80>)
 8000ed8:	f002 f934 	bl	8003144 <iprintf>
 8000edc:	e011      	b.n	8000f02 <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480f      	ldr	r0, [pc, #60]	; (8000f28 <print_buffer+0x84>)
 8000eea:	f002 f92b 	bl	8003144 <iprintf>
 8000eee:	e008      	b.n	8000f02 <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <print_buffer+0x84>)
 8000efc:	f002 f922 	bl	8003144 <iprintf>
 8000f00:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3301      	adds	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d3d7      	bcc.n	8000ec0 <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <print_buffer+0x88>)
 8000f12:	f002 f99d 	bl	8003250 <puts>
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	08003bb0 	.word	0x08003bb0
 8000f24:	08003bbc 	.word	0x08003bbc
 8000f28:	08003bc4 	.word	0x08003bc4
 8000f2c:	08003bcc 	.word	0x08003bcc

08000f30 <time_event_set_pending_update>:
{
    return time_event->raised;
}

void time_event_set_pending_update(bool status)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <time_event_set_pending_update+0x1c>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	7013      	strb	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200002fc 	.word	0x200002fc

08000f50 <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
    return pending_time_update;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <time_event_get_pending_update+0x14>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200002fc 	.word	0x200002fc

08000f68 <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8000f6c:	f7ff fff0 	bl	8000f50 <time_event_get_pending_update>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <time_events_poll_update+0x14>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ffda 	bl	8000f30 <time_event_set_pending_update>
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fa6:	f7ff ff27 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f001 fccd 	bl	8002948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff fb29 	bl	8000604 <main>
  bx lr
 8000fb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fbc:	08003d4c 	.word	0x08003d4c
  ldr r2, =_sbss
 8000fc0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fc4:	20000314 	.word	0x20000314

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_Init+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x28>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 fb19 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fd24 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fb23 	bl	8001662 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 faf9 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	20000028 	.word	0x20000028
 8001054:	20000024 	.word	0x20000024

08001058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_IncTick+0x1c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x20>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a03      	ldr	r2, [pc, #12]	; (8001078 <HAL_IncTick+0x20>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000028 	.word	0x20000028
 8001078:	20000300 	.word	0x20000300

0800107c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20000300 	.word	0x20000300

08001090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0be      	b.n	8001230 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d109      	bne.n	80010d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fce2 	bl	8000a98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f9ab 	bl	8001430 <ADC_ConversionStop_Disable>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 8099 	bne.w	800121e <HAL_ADC_Init+0x18e>
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 8095 	bne.w	800121e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010fc:	f023 0302 	bic.w	r3, r3, #2
 8001100:	f043 0202 	orr.w	r2, r3, #2
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001110:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7b1b      	ldrb	r3, [r3, #12]
 8001116:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001118:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4313      	orrs	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001128:	d003      	beq.n	8001132 <HAL_ADC_Init+0xa2>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d102      	bne.n	8001138 <HAL_ADC_Init+0xa8>
 8001132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001136:	e000      	b.n	800113a <HAL_ADC_Init+0xaa>
 8001138:	2300      	movs	r3, #0
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7d1b      	ldrb	r3, [r3, #20]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d119      	bne.n	800117c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7b1b      	ldrb	r3, [r3, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d109      	bne.n	8001164 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	3b01      	subs	r3, #1
 8001156:	035a      	lsls	r2, r3, #13
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	e00b      	b.n	800117c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f043 0220 	orr.w	r2, r3, #32
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	430a      	orrs	r2, r1
 800118e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_ADC_Init+0x1a8>)
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ac:	d003      	beq.n	80011b6 <HAL_ADC_Init+0x126>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d104      	bne.n	80011c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	051b      	lsls	r3, r3, #20
 80011be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_ADC_Init+0x1ac>)
 80011dc:	4013      	ands	r3, r2
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d10b      	bne.n	80011fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011fa:	e018      	b.n	800122e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f023 0312 	bic.w	r3, r3, #18
 8001204:	f043 0210 	orr.w	r2, r3, #16
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800121c:	e007      	b.n	800122e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f043 0210 	orr.w	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800122e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	ffe1f7fd 	.word	0xffe1f7fd
 800123c:	ff1f0efe 	.word	0xff1f0efe

08001240 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x20>
 800125c:	2302      	movs	r3, #2
 800125e:	e0dc      	b.n	800141a <HAL_ADC_ConfigChannel+0x1da>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b06      	cmp	r3, #6
 800126e:	d81c      	bhi.n	80012aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b05      	subs	r3, #5
 8001282:	221f      	movs	r2, #31
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
 80012a8:	e03c      	b.n	8001324 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b0c      	cmp	r3, #12
 80012b0:	d81c      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	3b23      	subs	r3, #35	; 0x23
 80012c4:	221f      	movs	r2, #31
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4019      	ands	r1, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b23      	subs	r3, #35	; 0x23
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
 80012ea:	e01b      	b.n	8001324 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3b41      	subs	r3, #65	; 0x41
 80012fe:	221f      	movs	r2, #31
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	4019      	ands	r1, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b41      	subs	r3, #65	; 0x41
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	d91c      	bls.n	8001366 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68d9      	ldr	r1, [r3, #12]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	3b1e      	subs	r3, #30
 800133e:	2207      	movs	r2, #7
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	4019      	ands	r1, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6898      	ldr	r0, [r3, #8]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	3b1e      	subs	r3, #30
 8001358:	fa00 f203 	lsl.w	r2, r0, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	e019      	b.n	800139a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6919      	ldr	r1, [r3, #16]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	2207      	movs	r2, #7
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	4019      	ands	r1, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6898      	ldr	r0, [r3, #8]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	fa00 f203 	lsl.w	r2, r0, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d132      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_ADC_ConfigChannel+0x1e4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d125      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d126      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d11a      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_ADC_ConfigChannel+0x1e8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <HAL_ADC_ConfigChannel+0x1ec>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x1b2>
 80013fe:	e007      	b.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	f043 0220 	orr.w	r2, r3, #32
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40012400 	.word	0x40012400
 8001428:	20000000 	.word	0x20000000
 800142c:	431bde83 	.word	0x431bde83

08001430 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b01      	cmp	r3, #1
 8001448:	d12e      	bne.n	80014a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800145a:	f7ff fe0f 	bl	800107c <HAL_GetTick>
 800145e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001460:	e01b      	b.n	800149a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001462:	f7ff fe0b 	bl	800107c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d914      	bls.n	800149a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10d      	bne.n	800149a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	f043 0210 	orr.w	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	f043 0201 	orr.w	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e007      	b.n	80014aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d0dc      	beq.n	8001462 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <__NVIC_SetPriorityGrouping>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_SetPriority>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Config>:
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff90 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff49 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff5e 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffb0 	bl	80015d0 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e169      	b.n	8001964 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001690:	2201      	movs	r2, #1
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8158 	bne.w	800195e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a9a      	ldr	r2, [pc, #616]	; (800191c <HAL_GPIO_Init+0x2a0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d05e      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016b8:	4a98      	ldr	r2, [pc, #608]	; (800191c <HAL_GPIO_Init+0x2a0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d875      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016be:	4a98      	ldr	r2, [pc, #608]	; (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d058      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016c4:	4a96      	ldr	r2, [pc, #600]	; (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d86f      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ca:	4a96      	ldr	r2, [pc, #600]	; (8001924 <HAL_GPIO_Init+0x2a8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016d0:	4a94      	ldr	r2, [pc, #592]	; (8001924 <HAL_GPIO_Init+0x2a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d869      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016d6:	4a94      	ldr	r2, [pc, #592]	; (8001928 <HAL_GPIO_Init+0x2ac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04c      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016dc:	4a92      	ldr	r2, [pc, #584]	; (8001928 <HAL_GPIO_Init+0x2ac>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d863      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016e2:	4a92      	ldr	r2, [pc, #584]	; (800192c <HAL_GPIO_Init+0x2b0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d046      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016e8:	4a90      	ldr	r2, [pc, #576]	; (800192c <HAL_GPIO_Init+0x2b0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d85d      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d82a      	bhi.n	8001748 <HAL_GPIO_Init+0xcc>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d859      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016f6:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <HAL_GPIO_Init+0x80>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001751 	.word	0x08001751
 8001704:	08001763 	.word	0x08001763
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017ab 	.word	0x080017ab
 8001710:	080017ab 	.word	0x080017ab
 8001714:	080017ab 	.word	0x080017ab
 8001718:	080017ab 	.word	0x080017ab
 800171c:	080017ab 	.word	0x080017ab
 8001720:	080017ab 	.word	0x080017ab
 8001724:	080017ab 	.word	0x080017ab
 8001728:	080017ab 	.word	0x080017ab
 800172c:	080017ab 	.word	0x080017ab
 8001730:	080017ab 	.word	0x080017ab
 8001734:	080017ab 	.word	0x080017ab
 8001738:	080017ab 	.word	0x080017ab
 800173c:	080017ab 	.word	0x080017ab
 8001740:	08001759 	.word	0x08001759
 8001744:	0800176d 	.word	0x0800176d
 8001748:	4a79      	ldr	r2, [pc, #484]	; (8001930 <HAL_GPIO_Init+0x2b4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e029      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e024      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01f      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e01a      	b.n	80017ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e013      	b.n	80017ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e009      	b.n	80017ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x130>
          break;
 80017aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d801      	bhi.n	80017b6 <HAL_GPIO_Init+0x13a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_Init+0x13e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d802      	bhi.n	80017c8 <HAL_GPIO_Init+0x14c>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x152>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3b08      	subs	r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	210f      	movs	r1, #15
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80b1 	beq.w	800195e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001814:	4a48      	ldr	r2, [pc, #288]	; (8001938 <HAL_GPIO_Init+0x2bc>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a40      	ldr	r2, [pc, #256]	; (800193c <HAL_GPIO_Init+0x2c0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_GPIO_Init+0x1ec>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1e8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3e      	ldr	r2, [pc, #248]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1e4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3d      	ldr	r2, [pc, #244]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1e0>
 8001858:	2303      	movs	r3, #3
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 800185c:	2304      	movs	r3, #4
 800185e:	e004      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001860:	2302      	movs	r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001868:	2300      	movs	r3, #0
 800186a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186c:	f002 0203 	and.w	r2, r2, #3
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	4093      	lsls	r3, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800187a:	492f      	ldr	r1, [pc, #188]	; (8001938 <HAL_GPIO_Init+0x2bc>)
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	492c      	ldr	r1, [pc, #176]	; (800194c <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4928      	ldr	r1, [pc, #160]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4922      	ldr	r1, [pc, #136]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	491e      	ldr	r1, [pc, #120]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4918      	ldr	r1, [pc, #96]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4914      	ldr	r1, [pc, #80]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d021      	beq.n	8001950 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_GPIO_Init+0x2d0>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
 8001918:	e021      	b.n	800195e <HAL_GPIO_Init+0x2e2>
 800191a:	bf00      	nop
 800191c:	10320000 	.word	0x10320000
 8001920:	10310000 	.word	0x10310000
 8001924:	10220000 	.word	0x10220000
 8001928:	10210000 	.word	0x10210000
 800192c:	10120000 	.word	0x10120000
 8001930:	10110000 	.word	0x10110000
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	40010800 	.word	0x40010800
 8001940:	40010c00 	.word	0x40010c00
 8001944:	40011000 	.word	0x40011000
 8001948:	40011400 	.word	0x40011400
 800194c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_GPIO_Init+0x304>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	43db      	mvns	r3, r3
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <HAL_GPIO_Init+0x304>)
 800195a:	4013      	ands	r3, r2
 800195c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	3301      	adds	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae8e 	bne.w	8001690 <HAL_GPIO_Init+0x14>
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	372c      	adds	r7, #44	; 0x2c
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e12b      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff f898 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a18:	f000 fce4 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a81      	ldr	r2, [pc, #516]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d807      	bhi.n	8001a38 <HAL_I2C_Init+0x84>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a80      	ldr	r2, [pc, #512]	; (8001c2c <HAL_I2C_Init+0x278>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf94      	ite	ls
 8001a30:	2301      	movls	r3, #1
 8001a32:	2300      	movhi	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e006      	b.n	8001a46 <HAL_I2C_Init+0x92>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a7d      	ldr	r2, [pc, #500]	; (8001c30 <HAL_I2C_Init+0x27c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0e7      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4a78      	ldr	r2, [pc, #480]	; (8001c34 <HAL_I2C_Init+0x280>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9b      	lsrs	r3, r3, #18
 8001a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d802      	bhi.n	8001a88 <HAL_I2C_Init+0xd4>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3301      	adds	r3, #1
 8001a86:	e009      	b.n	8001a9c <HAL_I2C_Init+0xe8>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	4a69      	ldr	r2, [pc, #420]	; (8001c38 <HAL_I2C_Init+0x284>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	495c      	ldr	r1, [pc, #368]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	d819      	bhi.n	8001af0 <HAL_I2C_Init+0x13c>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1e59      	subs	r1, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aca:	1c59      	adds	r1, r3, #1
 8001acc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_I2C_Init+0x138>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e59      	subs	r1, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aea:	e051      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e04f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d111      	bne.n	8001b1c <HAL_I2C_Init+0x168>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e012      	b.n	8001b42 <HAL_I2C_Init+0x18e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	0099      	lsls	r1, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Init+0x196>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e022      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10e      	bne.n	8001b70 <HAL_I2C_Init+0x1bc>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e58      	subs	r0, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6e:	e00f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	0099      	lsls	r1, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	6809      	ldr	r1, [r1, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6911      	ldr	r1, [r2, #16]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68d2      	ldr	r2, [r2, #12]
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	000186a0 	.word	0x000186a0
 8001c2c:	001e847f 	.word	0x001e847f
 8001c30:	003d08ff 	.word	0x003d08ff
 8001c34:	431bde83 	.word	0x431bde83
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e272      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8087 	beq.w	8001d6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5c:	4b92      	ldr	r3, [pc, #584]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d00c      	beq.n	8001c82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c68:	4b8f      	ldr	r3, [pc, #572]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d112      	bne.n	8001c9a <HAL_RCC_OscConfig+0x5e>
 8001c74:	4b8c      	ldr	r3, [pc, #560]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d10b      	bne.n	8001c9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d06c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x12c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d168      	bne.n	8001d68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e24c      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x76>
 8001ca4:	4b80      	ldr	r3, [pc, #512]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a7f      	ldr	r2, [pc, #508]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e02e      	b.n	8001d10 <HAL_RCC_OscConfig+0xd4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x98>
 8001cba:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7a      	ldr	r2, [pc, #488]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a77      	ldr	r2, [pc, #476]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xd4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xbc>
 8001cde:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a71      	ldr	r2, [pc, #452]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xd4>
 8001cf8:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6a      	ldr	r2, [pc, #424]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a67      	ldr	r2, [pc, #412]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f9b0 	bl	800107c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f9ac 	bl	800107c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e200      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xe4>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff f99c 	bl	800107c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f998 	bl	800107c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1ec      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x10c>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d76:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x18c>
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x176>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1c0      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4939      	ldr	r1, [pc, #228]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f951 	bl	800107c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff f94d 	bl	800107c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1a1      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4927      	ldr	r1, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff f930 	bl	800107c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff f92c 	bl	800107c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e180      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d03a      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_RCC_OscConfig+0x274>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff f910 	bl	800107c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f90c 	bl	800107c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e160      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 fac4 	bl	800240c <RCC_Delay>
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_OscConfig+0x274>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f8f6 	bl	800107c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff f8f2 	bl	800107c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d908      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e146      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	42420000 	.word	0x42420000
 8001eb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e9      	bne.n	8001e94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a6 	beq.w	800201a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10d      	bne.n	8001efa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a87      	ldr	r2, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b82      	ldr	r3, [pc, #520]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f06:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7e      	ldr	r2, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7ff f8b3 	bl	800107c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff f8af 	bl	800107c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	; 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e103      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	4b75      	ldr	r3, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x312>
 8001f40:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	e02d      	b.n	8001faa <HAL_RCC_OscConfig+0x36e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x334>
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a69      	ldr	r2, [pc, #420]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a66      	ldr	r2, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	e01c      	b.n	8001faa <HAL_RCC_OscConfig+0x36e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x356>
 8001f78:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a60      	ldr	r2, [pc, #384]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a5d      	ldr	r2, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e00b      	b.n	8001faa <HAL_RCC_OscConfig+0x36e>
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a5a      	ldr	r2, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	4b58      	ldr	r3, [pc, #352]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d015      	beq.n	8001fde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f863 	bl	800107c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff f85f 	bl	800107c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0b1      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0ee      	beq.n	8001fba <HAL_RCC_OscConfig+0x37e>
 8001fdc:	e014      	b.n	8002008 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff f84d 	bl	800107c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff f849 	bl	800107c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e09b      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ee      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d105      	bne.n	800201a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002018:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8087 	beq.w	8002132 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d061      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d146      	bne.n	80020c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff f81d 	bl	800107c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff f819 	bl	800107c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e06d      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d108      	bne.n	8002080 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	4921      	ldr	r1, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a19      	ldr	r1, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	430b      	orrs	r3, r1
 8002092:	491b      	ldr	r1, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe ffed 	bl	800107c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe ffe9 	bl	800107c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e03d      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46a>
 80020c4:	e035      	b.n	8002132 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x4cc>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffd6 	bl	800107c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe ffd2 	bl	800107c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e026      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x498>
 80020f2:	e01e      	b.n	8002132 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e019      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x500>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d0      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4965      	ldr	r1, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d040      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e073      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4936      	ldr	r1, [pc, #216]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7fe ff24 	bl	800107c <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe ff20 	bl	800107c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e053      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1cc>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fe82 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	08003c58 	.word	0x08003c58
 800230c:	20000000 	.word	0x20000000
 8002310:	20000024 	.word	0x20000024

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800231c:	1d3c      	adds	r4, r7, #4
 800231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002324:	f240 2301 	movw	r3, #513	; 0x201
 8002328:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x46>
 8002352:	e02b      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002356:	623b      	str	r3, [r7, #32]
      break;
 8002358:	e02b      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3328      	adds	r3, #40	; 0x28
 8002364:	443b      	add	r3, r7
 8002366:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800236a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0c5b      	lsrs	r3, r3, #17
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	3328      	adds	r3, #40	; 0x28
 8002382:	443b      	add	r3, r7
 8002384:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002388:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800238e:	fb03 f202 	mul.w	r2, r3, r2
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
 800239a:	e004      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	623b      	str	r3, [r7, #32]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ae:	623b      	str	r3, [r7, #32]
      break;
 80023b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b2:	6a3b      	ldr	r3, [r7, #32]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc90      	pop	{r4, r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	08003bd0 	.word	0x08003bd0
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	003d0900 	.word	0x003d0900

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000000 	.word	0x20000000

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e8:	f7ff fff2 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	08003c68 	.word	0x08003c68

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000000 	.word	0x20000000
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	61d3      	str	r3, [r2, #28]
 8002480:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d118      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a42      	ldr	r2, [pc, #264]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fde8 	bl	800107c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b0:	f7fe fde4 	bl	800107c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e06d      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02e      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d027      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002502:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe fdb3 	bl	800107c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe fdaf 	bl	800107c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e036      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4917      	ldr	r1, [pc, #92]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	4313      	orrs	r3, r2
 800254c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	490b      	ldr	r1, [pc, #44]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4904      	ldr	r1, [pc, #16]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420440 	.word	0x42420440

080025b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e076      	b.n	80026b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d108      	bne.n	80025e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d6:	d009      	beq.n	80025ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
 80025de:	e005      	b.n	80025ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fac0 	bl	8000b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	0c1a      	lsrs	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f002 0204 	and.w	r2, r2, #4
 8002692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e041      	b.n	8002754 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7fe fa9d 	bl	8000c24 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f000 f82d 	bl	800275c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0208 	bic.w	r2, r2, #8
 8002710:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a29      	ldr	r2, [pc, #164]	; (8002814 <TIM_Base_SetConfig+0xb8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00b      	beq.n	800278c <TIM_Base_SetConfig+0x30>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d007      	beq.n	800278c <TIM_Base_SetConfig+0x30>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <TIM_Base_SetConfig+0xbc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_Base_SetConfig+0x30>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a25      	ldr	r2, [pc, #148]	; (800281c <TIM_Base_SetConfig+0xc0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d108      	bne.n	800279e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <TIM_Base_SetConfig+0xb8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00b      	beq.n	80027be <TIM_Base_SetConfig+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d007      	beq.n	80027be <TIM_Base_SetConfig+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <TIM_Base_SetConfig+0xbc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <TIM_Base_SetConfig+0x62>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <TIM_Base_SetConfig+0xc0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d108      	bne.n	80027d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a07      	ldr	r2, [pc, #28]	; (8002814 <TIM_Base_SetConfig+0xb8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d103      	bne.n	8002804 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	615a      	str	r2, [r3, #20]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400
 800281c:	40000800 	.word	0x40000800

08002820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002834:	2302      	movs	r3, #2
 8002836:	e046      	b.n	80028c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00e      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d009      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10c      	bne.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800

080028dc <__assert_func>:
 80028dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80028de:	4614      	mov	r4, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <__assert_func+0x2c>)
 80028e4:	4605      	mov	r5, r0
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68d8      	ldr	r0, [r3, #12]
 80028ea:	b14c      	cbz	r4, 8002900 <__assert_func+0x24>
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <__assert_func+0x30>)
 80028ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80028f2:	9100      	str	r1, [sp, #0]
 80028f4:	462b      	mov	r3, r5
 80028f6:	4906      	ldr	r1, [pc, #24]	; (8002910 <__assert_func+0x34>)
 80028f8:	f000 f814 	bl	8002924 <fiprintf>
 80028fc:	f000 fd80 	bl	8003400 <abort>
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__assert_func+0x38>)
 8002902:	461c      	mov	r4, r3
 8002904:	e7f3      	b.n	80028ee <__assert_func+0x12>
 8002906:	bf00      	nop
 8002908:	2000002c 	.word	0x2000002c
 800290c:	08003c70 	.word	0x08003c70
 8002910:	08003c7d 	.word	0x08003c7d
 8002914:	08003cab 	.word	0x08003cab

08002918 <__errno>:
 8002918:	4b01      	ldr	r3, [pc, #4]	; (8002920 <__errno+0x8>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	2000002c 	.word	0x2000002c

08002924 <fiprintf>:
 8002924:	b40e      	push	{r1, r2, r3}
 8002926:	b503      	push	{r0, r1, lr}
 8002928:	4601      	mov	r1, r0
 800292a:	ab03      	add	r3, sp, #12
 800292c:	4805      	ldr	r0, [pc, #20]	; (8002944 <fiprintf+0x20>)
 800292e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002932:	6800      	ldr	r0, [r0, #0]
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	f000 f93f 	bl	8002bb8 <_vfiprintf_r>
 800293a:	b002      	add	sp, #8
 800293c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002940:	b003      	add	sp, #12
 8002942:	4770      	bx	lr
 8002944:	2000002c 	.word	0x2000002c

08002948 <__libc_init_array>:
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	2600      	movs	r6, #0
 800294c:	4d0c      	ldr	r5, [pc, #48]	; (8002980 <__libc_init_array+0x38>)
 800294e:	4c0d      	ldr	r4, [pc, #52]	; (8002984 <__libc_init_array+0x3c>)
 8002950:	1b64      	subs	r4, r4, r5
 8002952:	10a4      	asrs	r4, r4, #2
 8002954:	42a6      	cmp	r6, r4
 8002956:	d109      	bne.n	800296c <__libc_init_array+0x24>
 8002958:	f001 f880 	bl	8003a5c <_init>
 800295c:	2600      	movs	r6, #0
 800295e:	4d0a      	ldr	r5, [pc, #40]	; (8002988 <__libc_init_array+0x40>)
 8002960:	4c0a      	ldr	r4, [pc, #40]	; (800298c <__libc_init_array+0x44>)
 8002962:	1b64      	subs	r4, r4, r5
 8002964:	10a4      	asrs	r4, r4, #2
 8002966:	42a6      	cmp	r6, r4
 8002968:	d105      	bne.n	8002976 <__libc_init_array+0x2e>
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002970:	4798      	blx	r3
 8002972:	3601      	adds	r6, #1
 8002974:	e7ee      	b.n	8002954 <__libc_init_array+0xc>
 8002976:	f855 3b04 	ldr.w	r3, [r5], #4
 800297a:	4798      	blx	r3
 800297c:	3601      	adds	r6, #1
 800297e:	e7f2      	b.n	8002966 <__libc_init_array+0x1e>
 8002980:	08003d44 	.word	0x08003d44
 8002984:	08003d44 	.word	0x08003d44
 8002988:	08003d44 	.word	0x08003d44
 800298c:	08003d48 	.word	0x08003d48

08002990 <malloc>:
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <malloc+0xc>)
 8002992:	4601      	mov	r1, r0
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	f000 b873 	b.w	8002a80 <_malloc_r>
 800299a:	bf00      	nop
 800299c:	2000002c 	.word	0x2000002c

080029a0 <memset>:
 80029a0:	4603      	mov	r3, r0
 80029a2:	4402      	add	r2, r0
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d100      	bne.n	80029aa <memset+0xa>
 80029a8:	4770      	bx	lr
 80029aa:	f803 1b01 	strb.w	r1, [r3], #1
 80029ae:	e7f9      	b.n	80029a4 <memset+0x4>

080029b0 <_free_r>:
 80029b0:	b538      	push	{r3, r4, r5, lr}
 80029b2:	4605      	mov	r5, r0
 80029b4:	2900      	cmp	r1, #0
 80029b6:	d040      	beq.n	8002a3a <_free_r+0x8a>
 80029b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029bc:	1f0c      	subs	r4, r1, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bfb8      	it	lt
 80029c2:	18e4      	addlt	r4, r4, r3
 80029c4:	f000 ff4e 	bl	8003864 <__malloc_lock>
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <_free_r+0x8c>)
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	b933      	cbnz	r3, 80029dc <_free_r+0x2c>
 80029ce:	6063      	str	r3, [r4, #4]
 80029d0:	6014      	str	r4, [r2, #0]
 80029d2:	4628      	mov	r0, r5
 80029d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029d8:	f000 bf4a 	b.w	8003870 <__malloc_unlock>
 80029dc:	42a3      	cmp	r3, r4
 80029de:	d908      	bls.n	80029f2 <_free_r+0x42>
 80029e0:	6820      	ldr	r0, [r4, #0]
 80029e2:	1821      	adds	r1, r4, r0
 80029e4:	428b      	cmp	r3, r1
 80029e6:	bf01      	itttt	eq
 80029e8:	6819      	ldreq	r1, [r3, #0]
 80029ea:	685b      	ldreq	r3, [r3, #4]
 80029ec:	1809      	addeq	r1, r1, r0
 80029ee:	6021      	streq	r1, [r4, #0]
 80029f0:	e7ed      	b.n	80029ce <_free_r+0x1e>
 80029f2:	461a      	mov	r2, r3
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	b10b      	cbz	r3, 80029fc <_free_r+0x4c>
 80029f8:	42a3      	cmp	r3, r4
 80029fa:	d9fa      	bls.n	80029f2 <_free_r+0x42>
 80029fc:	6811      	ldr	r1, [r2, #0]
 80029fe:	1850      	adds	r0, r2, r1
 8002a00:	42a0      	cmp	r0, r4
 8002a02:	d10b      	bne.n	8002a1c <_free_r+0x6c>
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	4401      	add	r1, r0
 8002a08:	1850      	adds	r0, r2, r1
 8002a0a:	4283      	cmp	r3, r0
 8002a0c:	6011      	str	r1, [r2, #0]
 8002a0e:	d1e0      	bne.n	80029d2 <_free_r+0x22>
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4401      	add	r1, r0
 8002a16:	6011      	str	r1, [r2, #0]
 8002a18:	6053      	str	r3, [r2, #4]
 8002a1a:	e7da      	b.n	80029d2 <_free_r+0x22>
 8002a1c:	d902      	bls.n	8002a24 <_free_r+0x74>
 8002a1e:	230c      	movs	r3, #12
 8002a20:	602b      	str	r3, [r5, #0]
 8002a22:	e7d6      	b.n	80029d2 <_free_r+0x22>
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	1821      	adds	r1, r4, r0
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	bf01      	itttt	eq
 8002a2c:	6819      	ldreq	r1, [r3, #0]
 8002a2e:	685b      	ldreq	r3, [r3, #4]
 8002a30:	1809      	addeq	r1, r1, r0
 8002a32:	6021      	streq	r1, [r4, #0]
 8002a34:	6063      	str	r3, [r4, #4]
 8002a36:	6054      	str	r4, [r2, #4]
 8002a38:	e7cb      	b.n	80029d2 <_free_r+0x22>
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	20000304 	.word	0x20000304

08002a40 <sbrk_aligned>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4e0e      	ldr	r6, [pc, #56]	; (8002a7c <sbrk_aligned+0x3c>)
 8002a44:	460c      	mov	r4, r1
 8002a46:	6831      	ldr	r1, [r6, #0]
 8002a48:	4605      	mov	r5, r0
 8002a4a:	b911      	cbnz	r1, 8002a52 <sbrk_aligned+0x12>
 8002a4c:	f000 fc08 	bl	8003260 <_sbrk_r>
 8002a50:	6030      	str	r0, [r6, #0]
 8002a52:	4621      	mov	r1, r4
 8002a54:	4628      	mov	r0, r5
 8002a56:	f000 fc03 	bl	8003260 <_sbrk_r>
 8002a5a:	1c43      	adds	r3, r0, #1
 8002a5c:	d00a      	beq.n	8002a74 <sbrk_aligned+0x34>
 8002a5e:	1cc4      	adds	r4, r0, #3
 8002a60:	f024 0403 	bic.w	r4, r4, #3
 8002a64:	42a0      	cmp	r0, r4
 8002a66:	d007      	beq.n	8002a78 <sbrk_aligned+0x38>
 8002a68:	1a21      	subs	r1, r4, r0
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f000 fbf8 	bl	8003260 <_sbrk_r>
 8002a70:	3001      	adds	r0, #1
 8002a72:	d101      	bne.n	8002a78 <sbrk_aligned+0x38>
 8002a74:	f04f 34ff 	mov.w	r4, #4294967295
 8002a78:	4620      	mov	r0, r4
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	20000308 	.word	0x20000308

08002a80 <_malloc_r>:
 8002a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a84:	1ccd      	adds	r5, r1, #3
 8002a86:	f025 0503 	bic.w	r5, r5, #3
 8002a8a:	3508      	adds	r5, #8
 8002a8c:	2d0c      	cmp	r5, #12
 8002a8e:	bf38      	it	cc
 8002a90:	250c      	movcc	r5, #12
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	4607      	mov	r7, r0
 8002a96:	db01      	blt.n	8002a9c <_malloc_r+0x1c>
 8002a98:	42a9      	cmp	r1, r5
 8002a9a:	d905      	bls.n	8002aa8 <_malloc_r+0x28>
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aa8:	4e2e      	ldr	r6, [pc, #184]	; (8002b64 <_malloc_r+0xe4>)
 8002aaa:	f000 fedb 	bl	8003864 <__malloc_lock>
 8002aae:	6833      	ldr	r3, [r6, #0]
 8002ab0:	461c      	mov	r4, r3
 8002ab2:	bb34      	cbnz	r4, 8002b02 <_malloc_r+0x82>
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	f7ff ffc2 	bl	8002a40 <sbrk_aligned>
 8002abc:	1c43      	adds	r3, r0, #1
 8002abe:	4604      	mov	r4, r0
 8002ac0:	d14d      	bne.n	8002b5e <_malloc_r+0xde>
 8002ac2:	6834      	ldr	r4, [r6, #0]
 8002ac4:	4626      	mov	r6, r4
 8002ac6:	2e00      	cmp	r6, #0
 8002ac8:	d140      	bne.n	8002b4c <_malloc_r+0xcc>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	4631      	mov	r1, r6
 8002ace:	4638      	mov	r0, r7
 8002ad0:	eb04 0803 	add.w	r8, r4, r3
 8002ad4:	f000 fbc4 	bl	8003260 <_sbrk_r>
 8002ad8:	4580      	cmp	r8, r0
 8002ada:	d13a      	bne.n	8002b52 <_malloc_r+0xd2>
 8002adc:	6821      	ldr	r1, [r4, #0]
 8002ade:	3503      	adds	r5, #3
 8002ae0:	1a6d      	subs	r5, r5, r1
 8002ae2:	f025 0503 	bic.w	r5, r5, #3
 8002ae6:	3508      	adds	r5, #8
 8002ae8:	2d0c      	cmp	r5, #12
 8002aea:	bf38      	it	cc
 8002aec:	250c      	movcc	r5, #12
 8002aee:	4638      	mov	r0, r7
 8002af0:	4629      	mov	r1, r5
 8002af2:	f7ff ffa5 	bl	8002a40 <sbrk_aligned>
 8002af6:	3001      	adds	r0, #1
 8002af8:	d02b      	beq.n	8002b52 <_malloc_r+0xd2>
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	442b      	add	r3, r5
 8002afe:	6023      	str	r3, [r4, #0]
 8002b00:	e00e      	b.n	8002b20 <_malloc_r+0xa0>
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	1b52      	subs	r2, r2, r5
 8002b06:	d41e      	bmi.n	8002b46 <_malloc_r+0xc6>
 8002b08:	2a0b      	cmp	r2, #11
 8002b0a:	d916      	bls.n	8002b3a <_malloc_r+0xba>
 8002b0c:	1961      	adds	r1, r4, r5
 8002b0e:	42a3      	cmp	r3, r4
 8002b10:	6025      	str	r5, [r4, #0]
 8002b12:	bf18      	it	ne
 8002b14:	6059      	strne	r1, [r3, #4]
 8002b16:	6863      	ldr	r3, [r4, #4]
 8002b18:	bf08      	it	eq
 8002b1a:	6031      	streq	r1, [r6, #0]
 8002b1c:	5162      	str	r2, [r4, r5]
 8002b1e:	604b      	str	r3, [r1, #4]
 8002b20:	4638      	mov	r0, r7
 8002b22:	f104 060b 	add.w	r6, r4, #11
 8002b26:	f000 fea3 	bl	8003870 <__malloc_unlock>
 8002b2a:	f026 0607 	bic.w	r6, r6, #7
 8002b2e:	1d23      	adds	r3, r4, #4
 8002b30:	1af2      	subs	r2, r6, r3
 8002b32:	d0b6      	beq.n	8002aa2 <_malloc_r+0x22>
 8002b34:	1b9b      	subs	r3, r3, r6
 8002b36:	50a3      	str	r3, [r4, r2]
 8002b38:	e7b3      	b.n	8002aa2 <_malloc_r+0x22>
 8002b3a:	6862      	ldr	r2, [r4, #4]
 8002b3c:	42a3      	cmp	r3, r4
 8002b3e:	bf0c      	ite	eq
 8002b40:	6032      	streq	r2, [r6, #0]
 8002b42:	605a      	strne	r2, [r3, #4]
 8002b44:	e7ec      	b.n	8002b20 <_malloc_r+0xa0>
 8002b46:	4623      	mov	r3, r4
 8002b48:	6864      	ldr	r4, [r4, #4]
 8002b4a:	e7b2      	b.n	8002ab2 <_malloc_r+0x32>
 8002b4c:	4634      	mov	r4, r6
 8002b4e:	6876      	ldr	r6, [r6, #4]
 8002b50:	e7b9      	b.n	8002ac6 <_malloc_r+0x46>
 8002b52:	230c      	movs	r3, #12
 8002b54:	4638      	mov	r0, r7
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	f000 fe8a 	bl	8003870 <__malloc_unlock>
 8002b5c:	e7a1      	b.n	8002aa2 <_malloc_r+0x22>
 8002b5e:	6025      	str	r5, [r4, #0]
 8002b60:	e7de      	b.n	8002b20 <_malloc_r+0xa0>
 8002b62:	bf00      	nop
 8002b64:	20000304 	.word	0x20000304

08002b68 <__sfputc_r>:
 8002b68:	6893      	ldr	r3, [r2, #8]
 8002b6a:	b410      	push	{r4}
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	6093      	str	r3, [r2, #8]
 8002b72:	da07      	bge.n	8002b84 <__sfputc_r+0x1c>
 8002b74:	6994      	ldr	r4, [r2, #24]
 8002b76:	42a3      	cmp	r3, r4
 8002b78:	db01      	blt.n	8002b7e <__sfputc_r+0x16>
 8002b7a:	290a      	cmp	r1, #10
 8002b7c:	d102      	bne.n	8002b84 <__sfputc_r+0x1c>
 8002b7e:	bc10      	pop	{r4}
 8002b80:	f000 bb7e 	b.w	8003280 <__swbuf_r>
 8002b84:	6813      	ldr	r3, [r2, #0]
 8002b86:	1c58      	adds	r0, r3, #1
 8002b88:	6010      	str	r0, [r2, #0]
 8002b8a:	7019      	strb	r1, [r3, #0]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	bc10      	pop	{r4}
 8002b90:	4770      	bx	lr

08002b92 <__sfputs_r>:
 8002b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b94:	4606      	mov	r6, r0
 8002b96:	460f      	mov	r7, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	18d5      	adds	r5, r2, r3
 8002b9c:	42ac      	cmp	r4, r5
 8002b9e:	d101      	bne.n	8002ba4 <__sfputs_r+0x12>
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	e007      	b.n	8002bb4 <__sfputs_r+0x22>
 8002ba4:	463a      	mov	r2, r7
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bac:	f7ff ffdc 	bl	8002b68 <__sfputc_r>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	d1f3      	bne.n	8002b9c <__sfputs_r+0xa>
 8002bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bb8 <_vfiprintf_r>:
 8002bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bbc:	460d      	mov	r5, r1
 8002bbe:	4614      	mov	r4, r2
 8002bc0:	4698      	mov	r8, r3
 8002bc2:	4606      	mov	r6, r0
 8002bc4:	b09d      	sub	sp, #116	; 0x74
 8002bc6:	b118      	cbz	r0, 8002bd0 <_vfiprintf_r+0x18>
 8002bc8:	6983      	ldr	r3, [r0, #24]
 8002bca:	b90b      	cbnz	r3, 8002bd0 <_vfiprintf_r+0x18>
 8002bcc:	f000 fd36 	bl	800363c <__sinit>
 8002bd0:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <_vfiprintf_r+0x240>)
 8002bd2:	429d      	cmp	r5, r3
 8002bd4:	d11b      	bne.n	8002c0e <_vfiprintf_r+0x56>
 8002bd6:	6875      	ldr	r5, [r6, #4]
 8002bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bda:	07d9      	lsls	r1, r3, #31
 8002bdc:	d405      	bmi.n	8002bea <_vfiprintf_r+0x32>
 8002bde:	89ab      	ldrh	r3, [r5, #12]
 8002be0:	059a      	lsls	r2, r3, #22
 8002be2:	d402      	bmi.n	8002bea <_vfiprintf_r+0x32>
 8002be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002be6:	f000 fdc7 	bl	8003778 <__retarget_lock_acquire_recursive>
 8002bea:	89ab      	ldrh	r3, [r5, #12]
 8002bec:	071b      	lsls	r3, r3, #28
 8002bee:	d501      	bpl.n	8002bf4 <_vfiprintf_r+0x3c>
 8002bf0:	692b      	ldr	r3, [r5, #16]
 8002bf2:	b9eb      	cbnz	r3, 8002c30 <_vfiprintf_r+0x78>
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	f000 fb94 	bl	8003324 <__swsetup_r>
 8002bfc:	b1c0      	cbz	r0, 8002c30 <_vfiprintf_r+0x78>
 8002bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c00:	07dc      	lsls	r4, r3, #31
 8002c02:	d50e      	bpl.n	8002c22 <_vfiprintf_r+0x6a>
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	b01d      	add	sp, #116	; 0x74
 8002c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c0e:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <_vfiprintf_r+0x244>)
 8002c10:	429d      	cmp	r5, r3
 8002c12:	d101      	bne.n	8002c18 <_vfiprintf_r+0x60>
 8002c14:	68b5      	ldr	r5, [r6, #8]
 8002c16:	e7df      	b.n	8002bd8 <_vfiprintf_r+0x20>
 8002c18:	4b79      	ldr	r3, [pc, #484]	; (8002e00 <_vfiprintf_r+0x248>)
 8002c1a:	429d      	cmp	r5, r3
 8002c1c:	bf08      	it	eq
 8002c1e:	68f5      	ldreq	r5, [r6, #12]
 8002c20:	e7da      	b.n	8002bd8 <_vfiprintf_r+0x20>
 8002c22:	89ab      	ldrh	r3, [r5, #12]
 8002c24:	0598      	lsls	r0, r3, #22
 8002c26:	d4ed      	bmi.n	8002c04 <_vfiprintf_r+0x4c>
 8002c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c2a:	f000 fda6 	bl	800377a <__retarget_lock_release_recursive>
 8002c2e:	e7e9      	b.n	8002c04 <_vfiprintf_r+0x4c>
 8002c30:	2300      	movs	r3, #0
 8002c32:	9309      	str	r3, [sp, #36]	; 0x24
 8002c34:	2320      	movs	r3, #32
 8002c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c3a:	2330      	movs	r3, #48	; 0x30
 8002c3c:	f04f 0901 	mov.w	r9, #1
 8002c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c44:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e04 <_vfiprintf_r+0x24c>
 8002c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	469a      	mov	sl, r3
 8002c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c54:	b10a      	cbz	r2, 8002c5a <_vfiprintf_r+0xa2>
 8002c56:	2a25      	cmp	r2, #37	; 0x25
 8002c58:	d1f9      	bne.n	8002c4e <_vfiprintf_r+0x96>
 8002c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8002c5e:	d00b      	beq.n	8002c78 <_vfiprintf_r+0xc0>
 8002c60:	465b      	mov	r3, fp
 8002c62:	4622      	mov	r2, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	4630      	mov	r0, r6
 8002c68:	f7ff ff93 	bl	8002b92 <__sfputs_r>
 8002c6c:	3001      	adds	r0, #1
 8002c6e:	f000 80aa 	beq.w	8002dc6 <_vfiprintf_r+0x20e>
 8002c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c74:	445a      	add	r2, fp
 8002c76:	9209      	str	r2, [sp, #36]	; 0x24
 8002c78:	f89a 3000 	ldrb.w	r3, [sl]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a2 	beq.w	8002dc6 <_vfiprintf_r+0x20e>
 8002c82:	2300      	movs	r3, #0
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c8c:	f10a 0a01 	add.w	sl, sl, #1
 8002c90:	9304      	str	r3, [sp, #16]
 8002c92:	9307      	str	r3, [sp, #28]
 8002c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c98:	931a      	str	r3, [sp, #104]	; 0x68
 8002c9a:	4654      	mov	r4, sl
 8002c9c:	2205      	movs	r2, #5
 8002c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ca2:	4858      	ldr	r0, [pc, #352]	; (8002e04 <_vfiprintf_r+0x24c>)
 8002ca4:	f000 fdd0 	bl	8003848 <memchr>
 8002ca8:	9a04      	ldr	r2, [sp, #16]
 8002caa:	b9d8      	cbnz	r0, 8002ce4 <_vfiprintf_r+0x12c>
 8002cac:	06d1      	lsls	r1, r2, #27
 8002cae:	bf44      	itt	mi
 8002cb0:	2320      	movmi	r3, #32
 8002cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cb6:	0713      	lsls	r3, r2, #28
 8002cb8:	bf44      	itt	mi
 8002cba:	232b      	movmi	r3, #43	; 0x2b
 8002cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc6:	d015      	beq.n	8002cf4 <_vfiprintf_r+0x13c>
 8002cc8:	4654      	mov	r4, sl
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f04f 0c0a 	mov.w	ip, #10
 8002cd0:	9a07      	ldr	r2, [sp, #28]
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cd8:	3b30      	subs	r3, #48	; 0x30
 8002cda:	2b09      	cmp	r3, #9
 8002cdc:	d94e      	bls.n	8002d7c <_vfiprintf_r+0x1c4>
 8002cde:	b1b0      	cbz	r0, 8002d0e <_vfiprintf_r+0x156>
 8002ce0:	9207      	str	r2, [sp, #28]
 8002ce2:	e014      	b.n	8002d0e <_vfiprintf_r+0x156>
 8002ce4:	eba0 0308 	sub.w	r3, r0, r8
 8002ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8002cec:	4313      	orrs	r3, r2
 8002cee:	46a2      	mov	sl, r4
 8002cf0:	9304      	str	r3, [sp, #16]
 8002cf2:	e7d2      	b.n	8002c9a <_vfiprintf_r+0xe2>
 8002cf4:	9b03      	ldr	r3, [sp, #12]
 8002cf6:	1d19      	adds	r1, r3, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	9103      	str	r1, [sp, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bfbb      	ittet	lt
 8002d00:	425b      	neglt	r3, r3
 8002d02:	f042 0202 	orrlt.w	r2, r2, #2
 8002d06:	9307      	strge	r3, [sp, #28]
 8002d08:	9307      	strlt	r3, [sp, #28]
 8002d0a:	bfb8      	it	lt
 8002d0c:	9204      	strlt	r2, [sp, #16]
 8002d0e:	7823      	ldrb	r3, [r4, #0]
 8002d10:	2b2e      	cmp	r3, #46	; 0x2e
 8002d12:	d10c      	bne.n	8002d2e <_vfiprintf_r+0x176>
 8002d14:	7863      	ldrb	r3, [r4, #1]
 8002d16:	2b2a      	cmp	r3, #42	; 0x2a
 8002d18:	d135      	bne.n	8002d86 <_vfiprintf_r+0x1ce>
 8002d1a:	9b03      	ldr	r3, [sp, #12]
 8002d1c:	3402      	adds	r4, #2
 8002d1e:	1d1a      	adds	r2, r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	9203      	str	r2, [sp, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bfb8      	it	lt
 8002d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d2c:	9305      	str	r3, [sp, #20]
 8002d2e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002e08 <_vfiprintf_r+0x250>
 8002d32:	2203      	movs	r2, #3
 8002d34:	4650      	mov	r0, sl
 8002d36:	7821      	ldrb	r1, [r4, #0]
 8002d38:	f000 fd86 	bl	8003848 <memchr>
 8002d3c:	b140      	cbz	r0, 8002d50 <_vfiprintf_r+0x198>
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	eba0 000a 	sub.w	r0, r0, sl
 8002d44:	fa03 f000 	lsl.w	r0, r3, r0
 8002d48:	9b04      	ldr	r3, [sp, #16]
 8002d4a:	3401      	adds	r4, #1
 8002d4c:	4303      	orrs	r3, r0
 8002d4e:	9304      	str	r3, [sp, #16]
 8002d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d54:	2206      	movs	r2, #6
 8002d56:	482d      	ldr	r0, [pc, #180]	; (8002e0c <_vfiprintf_r+0x254>)
 8002d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d5c:	f000 fd74 	bl	8003848 <memchr>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d03f      	beq.n	8002de4 <_vfiprintf_r+0x22c>
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <_vfiprintf_r+0x258>)
 8002d66:	bb1b      	cbnz	r3, 8002db0 <_vfiprintf_r+0x1f8>
 8002d68:	9b03      	ldr	r3, [sp, #12]
 8002d6a:	3307      	adds	r3, #7
 8002d6c:	f023 0307 	bic.w	r3, r3, #7
 8002d70:	3308      	adds	r3, #8
 8002d72:	9303      	str	r3, [sp, #12]
 8002d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d76:	443b      	add	r3, r7
 8002d78:	9309      	str	r3, [sp, #36]	; 0x24
 8002d7a:	e767      	b.n	8002c4c <_vfiprintf_r+0x94>
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	2001      	movs	r0, #1
 8002d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d84:	e7a5      	b.n	8002cd2 <_vfiprintf_r+0x11a>
 8002d86:	2300      	movs	r3, #0
 8002d88:	f04f 0c0a 	mov.w	ip, #10
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	3401      	adds	r4, #1
 8002d90:	9305      	str	r3, [sp, #20]
 8002d92:	4620      	mov	r0, r4
 8002d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d98:	3a30      	subs	r2, #48	; 0x30
 8002d9a:	2a09      	cmp	r2, #9
 8002d9c:	d903      	bls.n	8002da6 <_vfiprintf_r+0x1ee>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0c5      	beq.n	8002d2e <_vfiprintf_r+0x176>
 8002da2:	9105      	str	r1, [sp, #20]
 8002da4:	e7c3      	b.n	8002d2e <_vfiprintf_r+0x176>
 8002da6:	4604      	mov	r4, r0
 8002da8:	2301      	movs	r3, #1
 8002daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dae:	e7f0      	b.n	8002d92 <_vfiprintf_r+0x1da>
 8002db0:	ab03      	add	r3, sp, #12
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	462a      	mov	r2, r5
 8002db6:	4630      	mov	r0, r6
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <_vfiprintf_r+0x25c>)
 8002dba:	a904      	add	r1, sp, #16
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	4607      	mov	r7, r0
 8002dc2:	1c78      	adds	r0, r7, #1
 8002dc4:	d1d6      	bne.n	8002d74 <_vfiprintf_r+0x1bc>
 8002dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dc8:	07d9      	lsls	r1, r3, #31
 8002dca:	d405      	bmi.n	8002dd8 <_vfiprintf_r+0x220>
 8002dcc:	89ab      	ldrh	r3, [r5, #12]
 8002dce:	059a      	lsls	r2, r3, #22
 8002dd0:	d402      	bmi.n	8002dd8 <_vfiprintf_r+0x220>
 8002dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dd4:	f000 fcd1 	bl	800377a <__retarget_lock_release_recursive>
 8002dd8:	89ab      	ldrh	r3, [r5, #12]
 8002dda:	065b      	lsls	r3, r3, #25
 8002ddc:	f53f af12 	bmi.w	8002c04 <_vfiprintf_r+0x4c>
 8002de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002de2:	e711      	b.n	8002c08 <_vfiprintf_r+0x50>
 8002de4:	ab03      	add	r3, sp, #12
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	462a      	mov	r2, r5
 8002dea:	4630      	mov	r0, r6
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <_vfiprintf_r+0x25c>)
 8002dee:	a904      	add	r1, sp, #16
 8002df0:	f000 f882 	bl	8002ef8 <_printf_i>
 8002df4:	e7e4      	b.n	8002dc0 <_vfiprintf_r+0x208>
 8002df6:	bf00      	nop
 8002df8:	08003d04 	.word	0x08003d04
 8002dfc:	08003d24 	.word	0x08003d24
 8002e00:	08003ce4 	.word	0x08003ce4
 8002e04:	08003cb0 	.word	0x08003cb0
 8002e08:	08003cb6 	.word	0x08003cb6
 8002e0c:	08003cba 	.word	0x08003cba
 8002e10:	00000000 	.word	0x00000000
 8002e14:	08002b93 	.word	0x08002b93

08002e18 <_printf_common>:
 8002e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1c:	4616      	mov	r6, r2
 8002e1e:	4699      	mov	r9, r3
 8002e20:	688a      	ldr	r2, [r1, #8]
 8002e22:	690b      	ldr	r3, [r1, #16]
 8002e24:	4607      	mov	r7, r0
 8002e26:	4293      	cmp	r3, r2
 8002e28:	bfb8      	it	lt
 8002e2a:	4613      	movlt	r3, r2
 8002e2c:	6033      	str	r3, [r6, #0]
 8002e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e32:	460c      	mov	r4, r1
 8002e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e38:	b10a      	cbz	r2, 8002e3e <_printf_common+0x26>
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	6033      	str	r3, [r6, #0]
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	0699      	lsls	r1, r3, #26
 8002e42:	bf42      	ittt	mi
 8002e44:	6833      	ldrmi	r3, [r6, #0]
 8002e46:	3302      	addmi	r3, #2
 8002e48:	6033      	strmi	r3, [r6, #0]
 8002e4a:	6825      	ldr	r5, [r4, #0]
 8002e4c:	f015 0506 	ands.w	r5, r5, #6
 8002e50:	d106      	bne.n	8002e60 <_printf_common+0x48>
 8002e52:	f104 0a19 	add.w	sl, r4, #25
 8002e56:	68e3      	ldr	r3, [r4, #12]
 8002e58:	6832      	ldr	r2, [r6, #0]
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	42ab      	cmp	r3, r5
 8002e5e:	dc28      	bgt.n	8002eb2 <_printf_common+0x9a>
 8002e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e64:	1e13      	subs	r3, r2, #0
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	bf18      	it	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	0692      	lsls	r2, r2, #26
 8002e6e:	d42d      	bmi.n	8002ecc <_printf_common+0xb4>
 8002e70:	4649      	mov	r1, r9
 8002e72:	4638      	mov	r0, r7
 8002e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e78:	47c0      	blx	r8
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	d020      	beq.n	8002ec0 <_printf_common+0xa8>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	68e5      	ldr	r5, [r4, #12]
 8002e82:	f003 0306 	and.w	r3, r3, #6
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	bf18      	it	ne
 8002e8a:	2500      	movne	r5, #0
 8002e8c:	6832      	ldr	r2, [r6, #0]
 8002e8e:	f04f 0600 	mov.w	r6, #0
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	bf08      	it	eq
 8002e96:	1aad      	subeq	r5, r5, r2
 8002e98:	6922      	ldr	r2, [r4, #16]
 8002e9a:	bf08      	it	eq
 8002e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bfc4      	itt	gt
 8002ea4:	1a9b      	subgt	r3, r3, r2
 8002ea6:	18ed      	addgt	r5, r5, r3
 8002ea8:	341a      	adds	r4, #26
 8002eaa:	42b5      	cmp	r5, r6
 8002eac:	d11a      	bne.n	8002ee4 <_printf_common+0xcc>
 8002eae:	2000      	movs	r0, #0
 8002eb0:	e008      	b.n	8002ec4 <_printf_common+0xac>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	4652      	mov	r2, sl
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	4638      	mov	r0, r7
 8002eba:	47c0      	blx	r8
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d103      	bne.n	8002ec8 <_printf_common+0xb0>
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec8:	3501      	adds	r5, #1
 8002eca:	e7c4      	b.n	8002e56 <_printf_common+0x3e>
 8002ecc:	2030      	movs	r0, #48	; 0x30
 8002ece:	18e1      	adds	r1, r4, r3
 8002ed0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eda:	4422      	add	r2, r4
 8002edc:	3302      	adds	r3, #2
 8002ede:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ee2:	e7c5      	b.n	8002e70 <_printf_common+0x58>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	4649      	mov	r1, r9
 8002eea:	4638      	mov	r0, r7
 8002eec:	47c0      	blx	r8
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d0e6      	beq.n	8002ec0 <_printf_common+0xa8>
 8002ef2:	3601      	adds	r6, #1
 8002ef4:	e7d9      	b.n	8002eaa <_printf_common+0x92>
	...

08002ef8 <_printf_i>:
 8002ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002efc:	7e0f      	ldrb	r7, [r1, #24]
 8002efe:	4691      	mov	r9, r2
 8002f00:	2f78      	cmp	r7, #120	; 0x78
 8002f02:	4680      	mov	r8, r0
 8002f04:	460c      	mov	r4, r1
 8002f06:	469a      	mov	sl, r3
 8002f08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f0e:	d807      	bhi.n	8002f20 <_printf_i+0x28>
 8002f10:	2f62      	cmp	r7, #98	; 0x62
 8002f12:	d80a      	bhi.n	8002f2a <_printf_i+0x32>
 8002f14:	2f00      	cmp	r7, #0
 8002f16:	f000 80d9 	beq.w	80030cc <_printf_i+0x1d4>
 8002f1a:	2f58      	cmp	r7, #88	; 0x58
 8002f1c:	f000 80a4 	beq.w	8003068 <_printf_i+0x170>
 8002f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f28:	e03a      	b.n	8002fa0 <_printf_i+0xa8>
 8002f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f2e:	2b15      	cmp	r3, #21
 8002f30:	d8f6      	bhi.n	8002f20 <_printf_i+0x28>
 8002f32:	a101      	add	r1, pc, #4	; (adr r1, 8002f38 <_printf_i+0x40>)
 8002f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f38:	08002f91 	.word	0x08002f91
 8002f3c:	08002fa5 	.word	0x08002fa5
 8002f40:	08002f21 	.word	0x08002f21
 8002f44:	08002f21 	.word	0x08002f21
 8002f48:	08002f21 	.word	0x08002f21
 8002f4c:	08002f21 	.word	0x08002f21
 8002f50:	08002fa5 	.word	0x08002fa5
 8002f54:	08002f21 	.word	0x08002f21
 8002f58:	08002f21 	.word	0x08002f21
 8002f5c:	08002f21 	.word	0x08002f21
 8002f60:	08002f21 	.word	0x08002f21
 8002f64:	080030b3 	.word	0x080030b3
 8002f68:	08002fd5 	.word	0x08002fd5
 8002f6c:	08003095 	.word	0x08003095
 8002f70:	08002f21 	.word	0x08002f21
 8002f74:	08002f21 	.word	0x08002f21
 8002f78:	080030d5 	.word	0x080030d5
 8002f7c:	08002f21 	.word	0x08002f21
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002f21 	.word	0x08002f21
 8002f88:	08002f21 	.word	0x08002f21
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	1d1a      	adds	r2, r3, #4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	602a      	str	r2, [r5, #0]
 8002f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0a4      	b.n	80030ee <_printf_i+0x1f6>
 8002fa4:	6820      	ldr	r0, [r4, #0]
 8002fa6:	6829      	ldr	r1, [r5, #0]
 8002fa8:	0606      	lsls	r6, r0, #24
 8002faa:	f101 0304 	add.w	r3, r1, #4
 8002fae:	d50a      	bpl.n	8002fc6 <_printf_i+0xce>
 8002fb0:	680e      	ldr	r6, [r1, #0]
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	2e00      	cmp	r6, #0
 8002fb6:	da03      	bge.n	8002fc0 <_printf_i+0xc8>
 8002fb8:	232d      	movs	r3, #45	; 0x2d
 8002fba:	4276      	negs	r6, r6
 8002fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fc0:	230a      	movs	r3, #10
 8002fc2:	485e      	ldr	r0, [pc, #376]	; (800313c <_printf_i+0x244>)
 8002fc4:	e019      	b.n	8002ffa <_printf_i+0x102>
 8002fc6:	680e      	ldr	r6, [r1, #0]
 8002fc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fcc:	602b      	str	r3, [r5, #0]
 8002fce:	bf18      	it	ne
 8002fd0:	b236      	sxthne	r6, r6
 8002fd2:	e7ef      	b.n	8002fb4 <_printf_i+0xbc>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	1d19      	adds	r1, r3, #4
 8002fda:	6029      	str	r1, [r5, #0]
 8002fdc:	0601      	lsls	r1, r0, #24
 8002fde:	d501      	bpl.n	8002fe4 <_printf_i+0xec>
 8002fe0:	681e      	ldr	r6, [r3, #0]
 8002fe2:	e002      	b.n	8002fea <_printf_i+0xf2>
 8002fe4:	0646      	lsls	r6, r0, #25
 8002fe6:	d5fb      	bpl.n	8002fe0 <_printf_i+0xe8>
 8002fe8:	881e      	ldrh	r6, [r3, #0]
 8002fea:	2f6f      	cmp	r7, #111	; 0x6f
 8002fec:	bf0c      	ite	eq
 8002fee:	2308      	moveq	r3, #8
 8002ff0:	230a      	movne	r3, #10
 8002ff2:	4852      	ldr	r0, [pc, #328]	; (800313c <_printf_i+0x244>)
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ffa:	6865      	ldr	r5, [r4, #4]
 8002ffc:	2d00      	cmp	r5, #0
 8002ffe:	bfa8      	it	ge
 8003000:	6821      	ldrge	r1, [r4, #0]
 8003002:	60a5      	str	r5, [r4, #8]
 8003004:	bfa4      	itt	ge
 8003006:	f021 0104 	bicge.w	r1, r1, #4
 800300a:	6021      	strge	r1, [r4, #0]
 800300c:	b90e      	cbnz	r6, 8003012 <_printf_i+0x11a>
 800300e:	2d00      	cmp	r5, #0
 8003010:	d04d      	beq.n	80030ae <_printf_i+0x1b6>
 8003012:	4615      	mov	r5, r2
 8003014:	fbb6 f1f3 	udiv	r1, r6, r3
 8003018:	fb03 6711 	mls	r7, r3, r1, r6
 800301c:	5dc7      	ldrb	r7, [r0, r7]
 800301e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003022:	4637      	mov	r7, r6
 8003024:	42bb      	cmp	r3, r7
 8003026:	460e      	mov	r6, r1
 8003028:	d9f4      	bls.n	8003014 <_printf_i+0x11c>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d10b      	bne.n	8003046 <_printf_i+0x14e>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	07de      	lsls	r6, r3, #31
 8003032:	d508      	bpl.n	8003046 <_printf_i+0x14e>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	6861      	ldr	r1, [r4, #4]
 8003038:	4299      	cmp	r1, r3
 800303a:	bfde      	ittt	le
 800303c:	2330      	movle	r3, #48	; 0x30
 800303e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003042:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003046:	1b52      	subs	r2, r2, r5
 8003048:	6122      	str	r2, [r4, #16]
 800304a:	464b      	mov	r3, r9
 800304c:	4621      	mov	r1, r4
 800304e:	4640      	mov	r0, r8
 8003050:	f8cd a000 	str.w	sl, [sp]
 8003054:	aa03      	add	r2, sp, #12
 8003056:	f7ff fedf 	bl	8002e18 <_printf_common>
 800305a:	3001      	adds	r0, #1
 800305c:	d14c      	bne.n	80030f8 <_printf_i+0x200>
 800305e:	f04f 30ff 	mov.w	r0, #4294967295
 8003062:	b004      	add	sp, #16
 8003064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003068:	4834      	ldr	r0, [pc, #208]	; (800313c <_printf_i+0x244>)
 800306a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800306e:	6829      	ldr	r1, [r5, #0]
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	f851 6b04 	ldr.w	r6, [r1], #4
 8003076:	6029      	str	r1, [r5, #0]
 8003078:	061d      	lsls	r5, r3, #24
 800307a:	d514      	bpl.n	80030a6 <_printf_i+0x1ae>
 800307c:	07df      	lsls	r7, r3, #31
 800307e:	bf44      	itt	mi
 8003080:	f043 0320 	orrmi.w	r3, r3, #32
 8003084:	6023      	strmi	r3, [r4, #0]
 8003086:	b91e      	cbnz	r6, 8003090 <_printf_i+0x198>
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	f023 0320 	bic.w	r3, r3, #32
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	2310      	movs	r3, #16
 8003092:	e7af      	b.n	8002ff4 <_printf_i+0xfc>
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	f043 0320 	orr.w	r3, r3, #32
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	2378      	movs	r3, #120	; 0x78
 800309e:	4828      	ldr	r0, [pc, #160]	; (8003140 <_printf_i+0x248>)
 80030a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030a4:	e7e3      	b.n	800306e <_printf_i+0x176>
 80030a6:	0659      	lsls	r1, r3, #25
 80030a8:	bf48      	it	mi
 80030aa:	b2b6      	uxthmi	r6, r6
 80030ac:	e7e6      	b.n	800307c <_printf_i+0x184>
 80030ae:	4615      	mov	r5, r2
 80030b0:	e7bb      	b.n	800302a <_printf_i+0x132>
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	6826      	ldr	r6, [r4, #0]
 80030b6:	1d18      	adds	r0, r3, #4
 80030b8:	6961      	ldr	r1, [r4, #20]
 80030ba:	6028      	str	r0, [r5, #0]
 80030bc:	0635      	lsls	r5, r6, #24
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	d501      	bpl.n	80030c6 <_printf_i+0x1ce>
 80030c2:	6019      	str	r1, [r3, #0]
 80030c4:	e002      	b.n	80030cc <_printf_i+0x1d4>
 80030c6:	0670      	lsls	r0, r6, #25
 80030c8:	d5fb      	bpl.n	80030c2 <_printf_i+0x1ca>
 80030ca:	8019      	strh	r1, [r3, #0]
 80030cc:	2300      	movs	r3, #0
 80030ce:	4615      	mov	r5, r2
 80030d0:	6123      	str	r3, [r4, #16]
 80030d2:	e7ba      	b.n	800304a <_printf_i+0x152>
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	2100      	movs	r1, #0
 80030d8:	1d1a      	adds	r2, r3, #4
 80030da:	602a      	str	r2, [r5, #0]
 80030dc:	681d      	ldr	r5, [r3, #0]
 80030de:	6862      	ldr	r2, [r4, #4]
 80030e0:	4628      	mov	r0, r5
 80030e2:	f000 fbb1 	bl	8003848 <memchr>
 80030e6:	b108      	cbz	r0, 80030ec <_printf_i+0x1f4>
 80030e8:	1b40      	subs	r0, r0, r5
 80030ea:	6060      	str	r0, [r4, #4]
 80030ec:	6863      	ldr	r3, [r4, #4]
 80030ee:	6123      	str	r3, [r4, #16]
 80030f0:	2300      	movs	r3, #0
 80030f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f6:	e7a8      	b.n	800304a <_printf_i+0x152>
 80030f8:	462a      	mov	r2, r5
 80030fa:	4649      	mov	r1, r9
 80030fc:	4640      	mov	r0, r8
 80030fe:	6923      	ldr	r3, [r4, #16]
 8003100:	47d0      	blx	sl
 8003102:	3001      	adds	r0, #1
 8003104:	d0ab      	beq.n	800305e <_printf_i+0x166>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	079b      	lsls	r3, r3, #30
 800310a:	d413      	bmi.n	8003134 <_printf_i+0x23c>
 800310c:	68e0      	ldr	r0, [r4, #12]
 800310e:	9b03      	ldr	r3, [sp, #12]
 8003110:	4298      	cmp	r0, r3
 8003112:	bfb8      	it	lt
 8003114:	4618      	movlt	r0, r3
 8003116:	e7a4      	b.n	8003062 <_printf_i+0x16a>
 8003118:	2301      	movs	r3, #1
 800311a:	4632      	mov	r2, r6
 800311c:	4649      	mov	r1, r9
 800311e:	4640      	mov	r0, r8
 8003120:	47d0      	blx	sl
 8003122:	3001      	adds	r0, #1
 8003124:	d09b      	beq.n	800305e <_printf_i+0x166>
 8003126:	3501      	adds	r5, #1
 8003128:	68e3      	ldr	r3, [r4, #12]
 800312a:	9903      	ldr	r1, [sp, #12]
 800312c:	1a5b      	subs	r3, r3, r1
 800312e:	42ab      	cmp	r3, r5
 8003130:	dcf2      	bgt.n	8003118 <_printf_i+0x220>
 8003132:	e7eb      	b.n	800310c <_printf_i+0x214>
 8003134:	2500      	movs	r5, #0
 8003136:	f104 0619 	add.w	r6, r4, #25
 800313a:	e7f5      	b.n	8003128 <_printf_i+0x230>
 800313c:	08003cc1 	.word	0x08003cc1
 8003140:	08003cd2 	.word	0x08003cd2

08003144 <iprintf>:
 8003144:	b40f      	push	{r0, r1, r2, r3}
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <iprintf+0x2c>)
 8003148:	b513      	push	{r0, r1, r4, lr}
 800314a:	681c      	ldr	r4, [r3, #0]
 800314c:	b124      	cbz	r4, 8003158 <iprintf+0x14>
 800314e:	69a3      	ldr	r3, [r4, #24]
 8003150:	b913      	cbnz	r3, 8003158 <iprintf+0x14>
 8003152:	4620      	mov	r0, r4
 8003154:	f000 fa72 	bl	800363c <__sinit>
 8003158:	ab05      	add	r3, sp, #20
 800315a:	4620      	mov	r0, r4
 800315c:	9a04      	ldr	r2, [sp, #16]
 800315e:	68a1      	ldr	r1, [r4, #8]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	f7ff fd29 	bl	8002bb8 <_vfiprintf_r>
 8003166:	b002      	add	sp, #8
 8003168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800316c:	b004      	add	sp, #16
 800316e:	4770      	bx	lr
 8003170:	2000002c 	.word	0x2000002c

08003174 <_puts_r>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	460e      	mov	r6, r1
 8003178:	4605      	mov	r5, r0
 800317a:	b118      	cbz	r0, 8003184 <_puts_r+0x10>
 800317c:	6983      	ldr	r3, [r0, #24]
 800317e:	b90b      	cbnz	r3, 8003184 <_puts_r+0x10>
 8003180:	f000 fa5c 	bl	800363c <__sinit>
 8003184:	69ab      	ldr	r3, [r5, #24]
 8003186:	68ac      	ldr	r4, [r5, #8]
 8003188:	b913      	cbnz	r3, 8003190 <_puts_r+0x1c>
 800318a:	4628      	mov	r0, r5
 800318c:	f000 fa56 	bl	800363c <__sinit>
 8003190:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <_puts_r+0xd0>)
 8003192:	429c      	cmp	r4, r3
 8003194:	d120      	bne.n	80031d8 <_puts_r+0x64>
 8003196:	686c      	ldr	r4, [r5, #4]
 8003198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800319a:	07db      	lsls	r3, r3, #31
 800319c:	d405      	bmi.n	80031aa <_puts_r+0x36>
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	0598      	lsls	r0, r3, #22
 80031a2:	d402      	bmi.n	80031aa <_puts_r+0x36>
 80031a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031a6:	f000 fae7 	bl	8003778 <__retarget_lock_acquire_recursive>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	0719      	lsls	r1, r3, #28
 80031ae:	d51d      	bpl.n	80031ec <_puts_r+0x78>
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	b1db      	cbz	r3, 80031ec <_puts_r+0x78>
 80031b4:	3e01      	subs	r6, #1
 80031b6:	68a3      	ldr	r3, [r4, #8]
 80031b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031bc:	3b01      	subs	r3, #1
 80031be:	60a3      	str	r3, [r4, #8]
 80031c0:	bb39      	cbnz	r1, 8003212 <_puts_r+0x9e>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da38      	bge.n	8003238 <_puts_r+0xc4>
 80031c6:	4622      	mov	r2, r4
 80031c8:	210a      	movs	r1, #10
 80031ca:	4628      	mov	r0, r5
 80031cc:	f000 f858 	bl	8003280 <__swbuf_r>
 80031d0:	3001      	adds	r0, #1
 80031d2:	d011      	beq.n	80031f8 <_puts_r+0x84>
 80031d4:	250a      	movs	r5, #10
 80031d6:	e011      	b.n	80031fc <_puts_r+0x88>
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <_puts_r+0xd4>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d101      	bne.n	80031e2 <_puts_r+0x6e>
 80031de:	68ac      	ldr	r4, [r5, #8]
 80031e0:	e7da      	b.n	8003198 <_puts_r+0x24>
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <_puts_r+0xd8>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	bf08      	it	eq
 80031e8:	68ec      	ldreq	r4, [r5, #12]
 80031ea:	e7d5      	b.n	8003198 <_puts_r+0x24>
 80031ec:	4621      	mov	r1, r4
 80031ee:	4628      	mov	r0, r5
 80031f0:	f000 f898 	bl	8003324 <__swsetup_r>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d0dd      	beq.n	80031b4 <_puts_r+0x40>
 80031f8:	f04f 35ff 	mov.w	r5, #4294967295
 80031fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031fe:	07da      	lsls	r2, r3, #31
 8003200:	d405      	bmi.n	800320e <_puts_r+0x9a>
 8003202:	89a3      	ldrh	r3, [r4, #12]
 8003204:	059b      	lsls	r3, r3, #22
 8003206:	d402      	bmi.n	800320e <_puts_r+0x9a>
 8003208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320a:	f000 fab6 	bl	800377a <__retarget_lock_release_recursive>
 800320e:	4628      	mov	r0, r5
 8003210:	bd70      	pop	{r4, r5, r6, pc}
 8003212:	2b00      	cmp	r3, #0
 8003214:	da04      	bge.n	8003220 <_puts_r+0xac>
 8003216:	69a2      	ldr	r2, [r4, #24]
 8003218:	429a      	cmp	r2, r3
 800321a:	dc06      	bgt.n	800322a <_puts_r+0xb6>
 800321c:	290a      	cmp	r1, #10
 800321e:	d004      	beq.n	800322a <_puts_r+0xb6>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	6022      	str	r2, [r4, #0]
 8003226:	7019      	strb	r1, [r3, #0]
 8003228:	e7c5      	b.n	80031b6 <_puts_r+0x42>
 800322a:	4622      	mov	r2, r4
 800322c:	4628      	mov	r0, r5
 800322e:	f000 f827 	bl	8003280 <__swbuf_r>
 8003232:	3001      	adds	r0, #1
 8003234:	d1bf      	bne.n	80031b6 <_puts_r+0x42>
 8003236:	e7df      	b.n	80031f8 <_puts_r+0x84>
 8003238:	250a      	movs	r5, #10
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	6022      	str	r2, [r4, #0]
 8003240:	701d      	strb	r5, [r3, #0]
 8003242:	e7db      	b.n	80031fc <_puts_r+0x88>
 8003244:	08003d04 	.word	0x08003d04
 8003248:	08003d24 	.word	0x08003d24
 800324c:	08003ce4 	.word	0x08003ce4

08003250 <puts>:
 8003250:	4b02      	ldr	r3, [pc, #8]	; (800325c <puts+0xc>)
 8003252:	4601      	mov	r1, r0
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	f7ff bf8d 	b.w	8003174 <_puts_r>
 800325a:	bf00      	nop
 800325c:	2000002c 	.word	0x2000002c

08003260 <_sbrk_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	2300      	movs	r3, #0
 8003264:	4d05      	ldr	r5, [pc, #20]	; (800327c <_sbrk_r+0x1c>)
 8003266:	4604      	mov	r4, r0
 8003268:	4608      	mov	r0, r1
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	f7fd fd8e 	bl	8000d8c <_sbrk>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d102      	bne.n	800327a <_sbrk_r+0x1a>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	b103      	cbz	r3, 800327a <_sbrk_r+0x1a>
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	20000310 	.word	0x20000310

08003280 <__swbuf_r>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	460e      	mov	r6, r1
 8003284:	4614      	mov	r4, r2
 8003286:	4605      	mov	r5, r0
 8003288:	b118      	cbz	r0, 8003292 <__swbuf_r+0x12>
 800328a:	6983      	ldr	r3, [r0, #24]
 800328c:	b90b      	cbnz	r3, 8003292 <__swbuf_r+0x12>
 800328e:	f000 f9d5 	bl	800363c <__sinit>
 8003292:	4b21      	ldr	r3, [pc, #132]	; (8003318 <__swbuf_r+0x98>)
 8003294:	429c      	cmp	r4, r3
 8003296:	d12b      	bne.n	80032f0 <__swbuf_r+0x70>
 8003298:	686c      	ldr	r4, [r5, #4]
 800329a:	69a3      	ldr	r3, [r4, #24]
 800329c:	60a3      	str	r3, [r4, #8]
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	071a      	lsls	r2, r3, #28
 80032a2:	d52f      	bpl.n	8003304 <__swbuf_r+0x84>
 80032a4:	6923      	ldr	r3, [r4, #16]
 80032a6:	b36b      	cbz	r3, 8003304 <__swbuf_r+0x84>
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	6820      	ldr	r0, [r4, #0]
 80032ac:	b2f6      	uxtb	r6, r6
 80032ae:	1ac0      	subs	r0, r0, r3
 80032b0:	6963      	ldr	r3, [r4, #20]
 80032b2:	4637      	mov	r7, r6
 80032b4:	4283      	cmp	r3, r0
 80032b6:	dc04      	bgt.n	80032c2 <__swbuf_r+0x42>
 80032b8:	4621      	mov	r1, r4
 80032ba:	4628      	mov	r0, r5
 80032bc:	f000 f92a 	bl	8003514 <_fflush_r>
 80032c0:	bb30      	cbnz	r0, 8003310 <__swbuf_r+0x90>
 80032c2:	68a3      	ldr	r3, [r4, #8]
 80032c4:	3001      	adds	r0, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60a3      	str	r3, [r4, #8]
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	6022      	str	r2, [r4, #0]
 80032d0:	701e      	strb	r6, [r3, #0]
 80032d2:	6963      	ldr	r3, [r4, #20]
 80032d4:	4283      	cmp	r3, r0
 80032d6:	d004      	beq.n	80032e2 <__swbuf_r+0x62>
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	07db      	lsls	r3, r3, #31
 80032dc:	d506      	bpl.n	80032ec <__swbuf_r+0x6c>
 80032de:	2e0a      	cmp	r6, #10
 80032e0:	d104      	bne.n	80032ec <__swbuf_r+0x6c>
 80032e2:	4621      	mov	r1, r4
 80032e4:	4628      	mov	r0, r5
 80032e6:	f000 f915 	bl	8003514 <_fflush_r>
 80032ea:	b988      	cbnz	r0, 8003310 <__swbuf_r+0x90>
 80032ec:	4638      	mov	r0, r7
 80032ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <__swbuf_r+0x9c>)
 80032f2:	429c      	cmp	r4, r3
 80032f4:	d101      	bne.n	80032fa <__swbuf_r+0x7a>
 80032f6:	68ac      	ldr	r4, [r5, #8]
 80032f8:	e7cf      	b.n	800329a <__swbuf_r+0x1a>
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <__swbuf_r+0xa0>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	bf08      	it	eq
 8003300:	68ec      	ldreq	r4, [r5, #12]
 8003302:	e7ca      	b.n	800329a <__swbuf_r+0x1a>
 8003304:	4621      	mov	r1, r4
 8003306:	4628      	mov	r0, r5
 8003308:	f000 f80c 	bl	8003324 <__swsetup_r>
 800330c:	2800      	cmp	r0, #0
 800330e:	d0cb      	beq.n	80032a8 <__swbuf_r+0x28>
 8003310:	f04f 37ff 	mov.w	r7, #4294967295
 8003314:	e7ea      	b.n	80032ec <__swbuf_r+0x6c>
 8003316:	bf00      	nop
 8003318:	08003d04 	.word	0x08003d04
 800331c:	08003d24 	.word	0x08003d24
 8003320:	08003ce4 	.word	0x08003ce4

08003324 <__swsetup_r>:
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <__swsetup_r+0xcc>)
 8003326:	b570      	push	{r4, r5, r6, lr}
 8003328:	681d      	ldr	r5, [r3, #0]
 800332a:	4606      	mov	r6, r0
 800332c:	460c      	mov	r4, r1
 800332e:	b125      	cbz	r5, 800333a <__swsetup_r+0x16>
 8003330:	69ab      	ldr	r3, [r5, #24]
 8003332:	b913      	cbnz	r3, 800333a <__swsetup_r+0x16>
 8003334:	4628      	mov	r0, r5
 8003336:	f000 f981 	bl	800363c <__sinit>
 800333a:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <__swsetup_r+0xd0>)
 800333c:	429c      	cmp	r4, r3
 800333e:	d10f      	bne.n	8003360 <__swsetup_r+0x3c>
 8003340:	686c      	ldr	r4, [r5, #4]
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003348:	0719      	lsls	r1, r3, #28
 800334a:	d42c      	bmi.n	80033a6 <__swsetup_r+0x82>
 800334c:	06dd      	lsls	r5, r3, #27
 800334e:	d411      	bmi.n	8003374 <__swsetup_r+0x50>
 8003350:	2309      	movs	r3, #9
 8003352:	6033      	str	r3, [r6, #0]
 8003354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	81a3      	strh	r3, [r4, #12]
 800335e:	e03e      	b.n	80033de <__swsetup_r+0xba>
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <__swsetup_r+0xd4>)
 8003362:	429c      	cmp	r4, r3
 8003364:	d101      	bne.n	800336a <__swsetup_r+0x46>
 8003366:	68ac      	ldr	r4, [r5, #8]
 8003368:	e7eb      	b.n	8003342 <__swsetup_r+0x1e>
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <__swsetup_r+0xd8>)
 800336c:	429c      	cmp	r4, r3
 800336e:	bf08      	it	eq
 8003370:	68ec      	ldreq	r4, [r5, #12]
 8003372:	e7e6      	b.n	8003342 <__swsetup_r+0x1e>
 8003374:	0758      	lsls	r0, r3, #29
 8003376:	d512      	bpl.n	800339e <__swsetup_r+0x7a>
 8003378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800337a:	b141      	cbz	r1, 800338e <__swsetup_r+0x6a>
 800337c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003380:	4299      	cmp	r1, r3
 8003382:	d002      	beq.n	800338a <__swsetup_r+0x66>
 8003384:	4630      	mov	r0, r6
 8003386:	f7ff fb13 	bl	80029b0 <_free_r>
 800338a:	2300      	movs	r3, #0
 800338c:	6363      	str	r3, [r4, #52]	; 0x34
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003394:	81a3      	strh	r3, [r4, #12]
 8003396:	2300      	movs	r3, #0
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	6923      	ldr	r3, [r4, #16]
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	89a3      	ldrh	r3, [r4, #12]
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	81a3      	strh	r3, [r4, #12]
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	b94b      	cbnz	r3, 80033be <__swsetup_r+0x9a>
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b4:	d003      	beq.n	80033be <__swsetup_r+0x9a>
 80033b6:	4621      	mov	r1, r4
 80033b8:	4630      	mov	r0, r6
 80033ba:	f000 fa05 	bl	80037c8 <__smakebuf_r>
 80033be:	89a0      	ldrh	r0, [r4, #12]
 80033c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033c4:	f010 0301 	ands.w	r3, r0, #1
 80033c8:	d00a      	beq.n	80033e0 <__swsetup_r+0xbc>
 80033ca:	2300      	movs	r3, #0
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	6963      	ldr	r3, [r4, #20]
 80033d0:	425b      	negs	r3, r3
 80033d2:	61a3      	str	r3, [r4, #24]
 80033d4:	6923      	ldr	r3, [r4, #16]
 80033d6:	b943      	cbnz	r3, 80033ea <__swsetup_r+0xc6>
 80033d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033dc:	d1ba      	bne.n	8003354 <__swsetup_r+0x30>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	0781      	lsls	r1, r0, #30
 80033e2:	bf58      	it	pl
 80033e4:	6963      	ldrpl	r3, [r4, #20]
 80033e6:	60a3      	str	r3, [r4, #8]
 80033e8:	e7f4      	b.n	80033d4 <__swsetup_r+0xb0>
 80033ea:	2000      	movs	r0, #0
 80033ec:	e7f7      	b.n	80033de <__swsetup_r+0xba>
 80033ee:	bf00      	nop
 80033f0:	2000002c 	.word	0x2000002c
 80033f4:	08003d04 	.word	0x08003d04
 80033f8:	08003d24 	.word	0x08003d24
 80033fc:	08003ce4 	.word	0x08003ce4

08003400 <abort>:
 8003400:	2006      	movs	r0, #6
 8003402:	b508      	push	{r3, lr}
 8003404:	f000 fa62 	bl	80038cc <raise>
 8003408:	2001      	movs	r0, #1
 800340a:	f7fd fc67 	bl	8000cdc <_exit>
	...

08003410 <__sflush_r>:
 8003410:	898a      	ldrh	r2, [r1, #12]
 8003412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003414:	4605      	mov	r5, r0
 8003416:	0710      	lsls	r0, r2, #28
 8003418:	460c      	mov	r4, r1
 800341a:	d457      	bmi.n	80034cc <__sflush_r+0xbc>
 800341c:	684b      	ldr	r3, [r1, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	dc04      	bgt.n	800342c <__sflush_r+0x1c>
 8003422:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	dc01      	bgt.n	800342c <__sflush_r+0x1c>
 8003428:	2000      	movs	r0, #0
 800342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800342c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800342e:	2e00      	cmp	r6, #0
 8003430:	d0fa      	beq.n	8003428 <__sflush_r+0x18>
 8003432:	2300      	movs	r3, #0
 8003434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003438:	682f      	ldr	r7, [r5, #0]
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	d032      	beq.n	80034a4 <__sflush_r+0x94>
 800343e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	075a      	lsls	r2, r3, #29
 8003444:	d505      	bpl.n	8003452 <__sflush_r+0x42>
 8003446:	6863      	ldr	r3, [r4, #4]
 8003448:	1ac0      	subs	r0, r0, r3
 800344a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800344c:	b10b      	cbz	r3, 8003452 <__sflush_r+0x42>
 800344e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003450:	1ac0      	subs	r0, r0, r3
 8003452:	2300      	movs	r3, #0
 8003454:	4602      	mov	r2, r0
 8003456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003458:	4628      	mov	r0, r5
 800345a:	6a21      	ldr	r1, [r4, #32]
 800345c:	47b0      	blx	r6
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	d106      	bne.n	8003472 <__sflush_r+0x62>
 8003464:	6829      	ldr	r1, [r5, #0]
 8003466:	291d      	cmp	r1, #29
 8003468:	d82c      	bhi.n	80034c4 <__sflush_r+0xb4>
 800346a:	4a29      	ldr	r2, [pc, #164]	; (8003510 <__sflush_r+0x100>)
 800346c:	40ca      	lsrs	r2, r1
 800346e:	07d6      	lsls	r6, r2, #31
 8003470:	d528      	bpl.n	80034c4 <__sflush_r+0xb4>
 8003472:	2200      	movs	r2, #0
 8003474:	6062      	str	r2, [r4, #4]
 8003476:	6922      	ldr	r2, [r4, #16]
 8003478:	04d9      	lsls	r1, r3, #19
 800347a:	6022      	str	r2, [r4, #0]
 800347c:	d504      	bpl.n	8003488 <__sflush_r+0x78>
 800347e:	1c42      	adds	r2, r0, #1
 8003480:	d101      	bne.n	8003486 <__sflush_r+0x76>
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	b903      	cbnz	r3, 8003488 <__sflush_r+0x78>
 8003486:	6560      	str	r0, [r4, #84]	; 0x54
 8003488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800348a:	602f      	str	r7, [r5, #0]
 800348c:	2900      	cmp	r1, #0
 800348e:	d0cb      	beq.n	8003428 <__sflush_r+0x18>
 8003490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003494:	4299      	cmp	r1, r3
 8003496:	d002      	beq.n	800349e <__sflush_r+0x8e>
 8003498:	4628      	mov	r0, r5
 800349a:	f7ff fa89 	bl	80029b0 <_free_r>
 800349e:	2000      	movs	r0, #0
 80034a0:	6360      	str	r0, [r4, #52]	; 0x34
 80034a2:	e7c2      	b.n	800342a <__sflush_r+0x1a>
 80034a4:	6a21      	ldr	r1, [r4, #32]
 80034a6:	2301      	movs	r3, #1
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b0      	blx	r6
 80034ac:	1c41      	adds	r1, r0, #1
 80034ae:	d1c7      	bne.n	8003440 <__sflush_r+0x30>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0c4      	beq.n	8003440 <__sflush_r+0x30>
 80034b6:	2b1d      	cmp	r3, #29
 80034b8:	d001      	beq.n	80034be <__sflush_r+0xae>
 80034ba:	2b16      	cmp	r3, #22
 80034bc:	d101      	bne.n	80034c2 <__sflush_r+0xb2>
 80034be:	602f      	str	r7, [r5, #0]
 80034c0:	e7b2      	b.n	8003428 <__sflush_r+0x18>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	e7ae      	b.n	800342a <__sflush_r+0x1a>
 80034cc:	690f      	ldr	r7, [r1, #16]
 80034ce:	2f00      	cmp	r7, #0
 80034d0:	d0aa      	beq.n	8003428 <__sflush_r+0x18>
 80034d2:	0793      	lsls	r3, r2, #30
 80034d4:	bf18      	it	ne
 80034d6:	2300      	movne	r3, #0
 80034d8:	680e      	ldr	r6, [r1, #0]
 80034da:	bf08      	it	eq
 80034dc:	694b      	ldreq	r3, [r1, #20]
 80034de:	1bf6      	subs	r6, r6, r7
 80034e0:	600f      	str	r7, [r1, #0]
 80034e2:	608b      	str	r3, [r1, #8]
 80034e4:	2e00      	cmp	r6, #0
 80034e6:	dd9f      	ble.n	8003428 <__sflush_r+0x18>
 80034e8:	4633      	mov	r3, r6
 80034ea:	463a      	mov	r2, r7
 80034ec:	4628      	mov	r0, r5
 80034ee:	6a21      	ldr	r1, [r4, #32]
 80034f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80034f4:	47e0      	blx	ip
 80034f6:	2800      	cmp	r0, #0
 80034f8:	dc06      	bgt.n	8003508 <__sflush_r+0xf8>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	e790      	b.n	800342a <__sflush_r+0x1a>
 8003508:	4407      	add	r7, r0
 800350a:	1a36      	subs	r6, r6, r0
 800350c:	e7ea      	b.n	80034e4 <__sflush_r+0xd4>
 800350e:	bf00      	nop
 8003510:	20400001 	.word	0x20400001

08003514 <_fflush_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	4605      	mov	r5, r0
 800351a:	460c      	mov	r4, r1
 800351c:	b913      	cbnz	r3, 8003524 <_fflush_r+0x10>
 800351e:	2500      	movs	r5, #0
 8003520:	4628      	mov	r0, r5
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	b118      	cbz	r0, 800352e <_fflush_r+0x1a>
 8003526:	6983      	ldr	r3, [r0, #24]
 8003528:	b90b      	cbnz	r3, 800352e <_fflush_r+0x1a>
 800352a:	f000 f887 	bl	800363c <__sinit>
 800352e:	4b14      	ldr	r3, [pc, #80]	; (8003580 <_fflush_r+0x6c>)
 8003530:	429c      	cmp	r4, r3
 8003532:	d11b      	bne.n	800356c <_fflush_r+0x58>
 8003534:	686c      	ldr	r4, [r5, #4]
 8003536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ef      	beq.n	800351e <_fflush_r+0xa>
 800353e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003540:	07d0      	lsls	r0, r2, #31
 8003542:	d404      	bmi.n	800354e <_fflush_r+0x3a>
 8003544:	0599      	lsls	r1, r3, #22
 8003546:	d402      	bmi.n	800354e <_fflush_r+0x3a>
 8003548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354a:	f000 f915 	bl	8003778 <__retarget_lock_acquire_recursive>
 800354e:	4628      	mov	r0, r5
 8003550:	4621      	mov	r1, r4
 8003552:	f7ff ff5d 	bl	8003410 <__sflush_r>
 8003556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003558:	4605      	mov	r5, r0
 800355a:	07da      	lsls	r2, r3, #31
 800355c:	d4e0      	bmi.n	8003520 <_fflush_r+0xc>
 800355e:	89a3      	ldrh	r3, [r4, #12]
 8003560:	059b      	lsls	r3, r3, #22
 8003562:	d4dd      	bmi.n	8003520 <_fflush_r+0xc>
 8003564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003566:	f000 f908 	bl	800377a <__retarget_lock_release_recursive>
 800356a:	e7d9      	b.n	8003520 <_fflush_r+0xc>
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <_fflush_r+0x70>)
 800356e:	429c      	cmp	r4, r3
 8003570:	d101      	bne.n	8003576 <_fflush_r+0x62>
 8003572:	68ac      	ldr	r4, [r5, #8]
 8003574:	e7df      	b.n	8003536 <_fflush_r+0x22>
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <_fflush_r+0x74>)
 8003578:	429c      	cmp	r4, r3
 800357a:	bf08      	it	eq
 800357c:	68ec      	ldreq	r4, [r5, #12]
 800357e:	e7da      	b.n	8003536 <_fflush_r+0x22>
 8003580:	08003d04 	.word	0x08003d04
 8003584:	08003d24 	.word	0x08003d24
 8003588:	08003ce4 	.word	0x08003ce4

0800358c <std>:
 800358c:	2300      	movs	r3, #0
 800358e:	b510      	push	{r4, lr}
 8003590:	4604      	mov	r4, r0
 8003592:	e9c0 3300 	strd	r3, r3, [r0]
 8003596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800359a:	6083      	str	r3, [r0, #8]
 800359c:	8181      	strh	r1, [r0, #12]
 800359e:	6643      	str	r3, [r0, #100]	; 0x64
 80035a0:	81c2      	strh	r2, [r0, #14]
 80035a2:	6183      	str	r3, [r0, #24]
 80035a4:	4619      	mov	r1, r3
 80035a6:	2208      	movs	r2, #8
 80035a8:	305c      	adds	r0, #92	; 0x5c
 80035aa:	f7ff f9f9 	bl	80029a0 <memset>
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <std+0x38>)
 80035b0:	6224      	str	r4, [r4, #32]
 80035b2:	6263      	str	r3, [r4, #36]	; 0x24
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <std+0x3c>)
 80035b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <std+0x40>)
 80035ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <std+0x44>)
 80035be:	6323      	str	r3, [r4, #48]	; 0x30
 80035c0:	bd10      	pop	{r4, pc}
 80035c2:	bf00      	nop
 80035c4:	08003905 	.word	0x08003905
 80035c8:	08003927 	.word	0x08003927
 80035cc:	0800395f 	.word	0x0800395f
 80035d0:	08003983 	.word	0x08003983

080035d4 <_cleanup_r>:
 80035d4:	4901      	ldr	r1, [pc, #4]	; (80035dc <_cleanup_r+0x8>)
 80035d6:	f000 b8af 	b.w	8003738 <_fwalk_reent>
 80035da:	bf00      	nop
 80035dc:	08003515 	.word	0x08003515

080035e0 <__sfmoreglue>:
 80035e0:	2268      	movs	r2, #104	; 0x68
 80035e2:	b570      	push	{r4, r5, r6, lr}
 80035e4:	1e4d      	subs	r5, r1, #1
 80035e6:	4355      	muls	r5, r2
 80035e8:	460e      	mov	r6, r1
 80035ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035ee:	f7ff fa47 	bl	8002a80 <_malloc_r>
 80035f2:	4604      	mov	r4, r0
 80035f4:	b140      	cbz	r0, 8003608 <__sfmoreglue+0x28>
 80035f6:	2100      	movs	r1, #0
 80035f8:	e9c0 1600 	strd	r1, r6, [r0]
 80035fc:	300c      	adds	r0, #12
 80035fe:	60a0      	str	r0, [r4, #8]
 8003600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003604:	f7ff f9cc 	bl	80029a0 <memset>
 8003608:	4620      	mov	r0, r4
 800360a:	bd70      	pop	{r4, r5, r6, pc}

0800360c <__sfp_lock_acquire>:
 800360c:	4801      	ldr	r0, [pc, #4]	; (8003614 <__sfp_lock_acquire+0x8>)
 800360e:	f000 b8b3 	b.w	8003778 <__retarget_lock_acquire_recursive>
 8003612:	bf00      	nop
 8003614:	2000030d 	.word	0x2000030d

08003618 <__sfp_lock_release>:
 8003618:	4801      	ldr	r0, [pc, #4]	; (8003620 <__sfp_lock_release+0x8>)
 800361a:	f000 b8ae 	b.w	800377a <__retarget_lock_release_recursive>
 800361e:	bf00      	nop
 8003620:	2000030d 	.word	0x2000030d

08003624 <__sinit_lock_acquire>:
 8003624:	4801      	ldr	r0, [pc, #4]	; (800362c <__sinit_lock_acquire+0x8>)
 8003626:	f000 b8a7 	b.w	8003778 <__retarget_lock_acquire_recursive>
 800362a:	bf00      	nop
 800362c:	2000030e 	.word	0x2000030e

08003630 <__sinit_lock_release>:
 8003630:	4801      	ldr	r0, [pc, #4]	; (8003638 <__sinit_lock_release+0x8>)
 8003632:	f000 b8a2 	b.w	800377a <__retarget_lock_release_recursive>
 8003636:	bf00      	nop
 8003638:	2000030e 	.word	0x2000030e

0800363c <__sinit>:
 800363c:	b510      	push	{r4, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	f7ff fff0 	bl	8003624 <__sinit_lock_acquire>
 8003644:	69a3      	ldr	r3, [r4, #24]
 8003646:	b11b      	cbz	r3, 8003650 <__sinit+0x14>
 8003648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800364c:	f7ff bff0 	b.w	8003630 <__sinit_lock_release>
 8003650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003654:	6523      	str	r3, [r4, #80]	; 0x50
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <__sinit+0x68>)
 8003658:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <__sinit+0x6c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	62a2      	str	r2, [r4, #40]	; 0x28
 800365e:	42a3      	cmp	r3, r4
 8003660:	bf08      	it	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	4620      	mov	r0, r4
 8003666:	bf08      	it	eq
 8003668:	61a3      	streq	r3, [r4, #24]
 800366a:	f000 f81f 	bl	80036ac <__sfp>
 800366e:	6060      	str	r0, [r4, #4]
 8003670:	4620      	mov	r0, r4
 8003672:	f000 f81b 	bl	80036ac <__sfp>
 8003676:	60a0      	str	r0, [r4, #8]
 8003678:	4620      	mov	r0, r4
 800367a:	f000 f817 	bl	80036ac <__sfp>
 800367e:	2200      	movs	r2, #0
 8003680:	2104      	movs	r1, #4
 8003682:	60e0      	str	r0, [r4, #12]
 8003684:	6860      	ldr	r0, [r4, #4]
 8003686:	f7ff ff81 	bl	800358c <std>
 800368a:	2201      	movs	r2, #1
 800368c:	2109      	movs	r1, #9
 800368e:	68a0      	ldr	r0, [r4, #8]
 8003690:	f7ff ff7c 	bl	800358c <std>
 8003694:	2202      	movs	r2, #2
 8003696:	2112      	movs	r1, #18
 8003698:	68e0      	ldr	r0, [r4, #12]
 800369a:	f7ff ff77 	bl	800358c <std>
 800369e:	2301      	movs	r3, #1
 80036a0:	61a3      	str	r3, [r4, #24]
 80036a2:	e7d1      	b.n	8003648 <__sinit+0xc>
 80036a4:	08003cac 	.word	0x08003cac
 80036a8:	080035d5 	.word	0x080035d5

080036ac <__sfp>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	4607      	mov	r7, r0
 80036b0:	f7ff ffac 	bl	800360c <__sfp_lock_acquire>
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <__sfp+0x84>)
 80036b6:	681e      	ldr	r6, [r3, #0]
 80036b8:	69b3      	ldr	r3, [r6, #24]
 80036ba:	b913      	cbnz	r3, 80036c2 <__sfp+0x16>
 80036bc:	4630      	mov	r0, r6
 80036be:	f7ff ffbd 	bl	800363c <__sinit>
 80036c2:	3648      	adds	r6, #72	; 0x48
 80036c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	d503      	bpl.n	80036d4 <__sfp+0x28>
 80036cc:	6833      	ldr	r3, [r6, #0]
 80036ce:	b30b      	cbz	r3, 8003714 <__sfp+0x68>
 80036d0:	6836      	ldr	r6, [r6, #0]
 80036d2:	e7f7      	b.n	80036c4 <__sfp+0x18>
 80036d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036d8:	b9d5      	cbnz	r5, 8003710 <__sfp+0x64>
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <__sfp+0x88>)
 80036dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036e0:	60e3      	str	r3, [r4, #12]
 80036e2:	6665      	str	r5, [r4, #100]	; 0x64
 80036e4:	f000 f847 	bl	8003776 <__retarget_lock_init_recursive>
 80036e8:	f7ff ff96 	bl	8003618 <__sfp_lock_release>
 80036ec:	2208      	movs	r2, #8
 80036ee:	4629      	mov	r1, r5
 80036f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036f8:	6025      	str	r5, [r4, #0]
 80036fa:	61a5      	str	r5, [r4, #24]
 80036fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003700:	f7ff f94e 	bl	80029a0 <memset>
 8003704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800370c:	4620      	mov	r0, r4
 800370e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003710:	3468      	adds	r4, #104	; 0x68
 8003712:	e7d9      	b.n	80036c8 <__sfp+0x1c>
 8003714:	2104      	movs	r1, #4
 8003716:	4638      	mov	r0, r7
 8003718:	f7ff ff62 	bl	80035e0 <__sfmoreglue>
 800371c:	4604      	mov	r4, r0
 800371e:	6030      	str	r0, [r6, #0]
 8003720:	2800      	cmp	r0, #0
 8003722:	d1d5      	bne.n	80036d0 <__sfp+0x24>
 8003724:	f7ff ff78 	bl	8003618 <__sfp_lock_release>
 8003728:	230c      	movs	r3, #12
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	e7ee      	b.n	800370c <__sfp+0x60>
 800372e:	bf00      	nop
 8003730:	08003cac 	.word	0x08003cac
 8003734:	ffff0001 	.word	0xffff0001

08003738 <_fwalk_reent>:
 8003738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800373c:	4606      	mov	r6, r0
 800373e:	4688      	mov	r8, r1
 8003740:	2700      	movs	r7, #0
 8003742:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800374a:	f1b9 0901 	subs.w	r9, r9, #1
 800374e:	d505      	bpl.n	800375c <_fwalk_reent+0x24>
 8003750:	6824      	ldr	r4, [r4, #0]
 8003752:	2c00      	cmp	r4, #0
 8003754:	d1f7      	bne.n	8003746 <_fwalk_reent+0xe>
 8003756:	4638      	mov	r0, r7
 8003758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800375c:	89ab      	ldrh	r3, [r5, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d907      	bls.n	8003772 <_fwalk_reent+0x3a>
 8003762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003766:	3301      	adds	r3, #1
 8003768:	d003      	beq.n	8003772 <_fwalk_reent+0x3a>
 800376a:	4629      	mov	r1, r5
 800376c:	4630      	mov	r0, r6
 800376e:	47c0      	blx	r8
 8003770:	4307      	orrs	r7, r0
 8003772:	3568      	adds	r5, #104	; 0x68
 8003774:	e7e9      	b.n	800374a <_fwalk_reent+0x12>

08003776 <__retarget_lock_init_recursive>:
 8003776:	4770      	bx	lr

08003778 <__retarget_lock_acquire_recursive>:
 8003778:	4770      	bx	lr

0800377a <__retarget_lock_release_recursive>:
 800377a:	4770      	bx	lr

0800377c <__swhatbuf_r>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	460e      	mov	r6, r1
 8003780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003784:	4614      	mov	r4, r2
 8003786:	2900      	cmp	r1, #0
 8003788:	461d      	mov	r5, r3
 800378a:	b096      	sub	sp, #88	; 0x58
 800378c:	da08      	bge.n	80037a0 <__swhatbuf_r+0x24>
 800378e:	2200      	movs	r2, #0
 8003790:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003794:	602a      	str	r2, [r5, #0]
 8003796:	061a      	lsls	r2, r3, #24
 8003798:	d410      	bmi.n	80037bc <__swhatbuf_r+0x40>
 800379a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800379e:	e00e      	b.n	80037be <__swhatbuf_r+0x42>
 80037a0:	466a      	mov	r2, sp
 80037a2:	f000 f915 	bl	80039d0 <_fstat_r>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	dbf1      	blt.n	800378e <__swhatbuf_r+0x12>
 80037aa:	9a01      	ldr	r2, [sp, #4]
 80037ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037b4:	425a      	negs	r2, r3
 80037b6:	415a      	adcs	r2, r3
 80037b8:	602a      	str	r2, [r5, #0]
 80037ba:	e7ee      	b.n	800379a <__swhatbuf_r+0x1e>
 80037bc:	2340      	movs	r3, #64	; 0x40
 80037be:	2000      	movs	r0, #0
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	b016      	add	sp, #88	; 0x58
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080037c8 <__smakebuf_r>:
 80037c8:	898b      	ldrh	r3, [r1, #12]
 80037ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037cc:	079d      	lsls	r5, r3, #30
 80037ce:	4606      	mov	r6, r0
 80037d0:	460c      	mov	r4, r1
 80037d2:	d507      	bpl.n	80037e4 <__smakebuf_r+0x1c>
 80037d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	6123      	str	r3, [r4, #16]
 80037dc:	2301      	movs	r3, #1
 80037de:	6163      	str	r3, [r4, #20]
 80037e0:	b002      	add	sp, #8
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	466a      	mov	r2, sp
 80037e6:	ab01      	add	r3, sp, #4
 80037e8:	f7ff ffc8 	bl	800377c <__swhatbuf_r>
 80037ec:	9900      	ldr	r1, [sp, #0]
 80037ee:	4605      	mov	r5, r0
 80037f0:	4630      	mov	r0, r6
 80037f2:	f7ff f945 	bl	8002a80 <_malloc_r>
 80037f6:	b948      	cbnz	r0, 800380c <__smakebuf_r+0x44>
 80037f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037fc:	059a      	lsls	r2, r3, #22
 80037fe:	d4ef      	bmi.n	80037e0 <__smakebuf_r+0x18>
 8003800:	f023 0303 	bic.w	r3, r3, #3
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	e7e3      	b.n	80037d4 <__smakebuf_r+0xc>
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <__smakebuf_r+0x7c>)
 800380e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	6020      	str	r0, [r4, #0]
 8003814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	9b00      	ldr	r3, [sp, #0]
 800381c:	6120      	str	r0, [r4, #16]
 800381e:	6163      	str	r3, [r4, #20]
 8003820:	9b01      	ldr	r3, [sp, #4]
 8003822:	b15b      	cbz	r3, 800383c <__smakebuf_r+0x74>
 8003824:	4630      	mov	r0, r6
 8003826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800382a:	f000 f8e3 	bl	80039f4 <_isatty_r>
 800382e:	b128      	cbz	r0, 800383c <__smakebuf_r+0x74>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	81a3      	strh	r3, [r4, #12]
 800383c:	89a0      	ldrh	r0, [r4, #12]
 800383e:	4305      	orrs	r5, r0
 8003840:	81a5      	strh	r5, [r4, #12]
 8003842:	e7cd      	b.n	80037e0 <__smakebuf_r+0x18>
 8003844:	080035d5 	.word	0x080035d5

08003848 <memchr>:
 8003848:	4603      	mov	r3, r0
 800384a:	b510      	push	{r4, lr}
 800384c:	b2c9      	uxtb	r1, r1
 800384e:	4402      	add	r2, r0
 8003850:	4293      	cmp	r3, r2
 8003852:	4618      	mov	r0, r3
 8003854:	d101      	bne.n	800385a <memchr+0x12>
 8003856:	2000      	movs	r0, #0
 8003858:	e003      	b.n	8003862 <memchr+0x1a>
 800385a:	7804      	ldrb	r4, [r0, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	428c      	cmp	r4, r1
 8003860:	d1f6      	bne.n	8003850 <memchr+0x8>
 8003862:	bd10      	pop	{r4, pc}

08003864 <__malloc_lock>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__malloc_lock+0x8>)
 8003866:	f7ff bf87 	b.w	8003778 <__retarget_lock_acquire_recursive>
 800386a:	bf00      	nop
 800386c:	2000030c 	.word	0x2000030c

08003870 <__malloc_unlock>:
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <__malloc_unlock+0x8>)
 8003872:	f7ff bf82 	b.w	800377a <__retarget_lock_release_recursive>
 8003876:	bf00      	nop
 8003878:	2000030c 	.word	0x2000030c

0800387c <_raise_r>:
 800387c:	291f      	cmp	r1, #31
 800387e:	b538      	push	{r3, r4, r5, lr}
 8003880:	4604      	mov	r4, r0
 8003882:	460d      	mov	r5, r1
 8003884:	d904      	bls.n	8003890 <_raise_r+0x14>
 8003886:	2316      	movs	r3, #22
 8003888:	6003      	str	r3, [r0, #0]
 800388a:	f04f 30ff 	mov.w	r0, #4294967295
 800388e:	bd38      	pop	{r3, r4, r5, pc}
 8003890:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003892:	b112      	cbz	r2, 800389a <_raise_r+0x1e>
 8003894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003898:	b94b      	cbnz	r3, 80038ae <_raise_r+0x32>
 800389a:	4620      	mov	r0, r4
 800389c:	f000 f830 	bl	8003900 <_getpid_r>
 80038a0:	462a      	mov	r2, r5
 80038a2:	4601      	mov	r1, r0
 80038a4:	4620      	mov	r0, r4
 80038a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038aa:	f000 b817 	b.w	80038dc <_kill_r>
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d00a      	beq.n	80038c8 <_raise_r+0x4c>
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	d103      	bne.n	80038be <_raise_r+0x42>
 80038b6:	2316      	movs	r3, #22
 80038b8:	6003      	str	r3, [r0, #0]
 80038ba:	2001      	movs	r0, #1
 80038bc:	e7e7      	b.n	800388e <_raise_r+0x12>
 80038be:	2400      	movs	r4, #0
 80038c0:	4628      	mov	r0, r5
 80038c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80038c6:	4798      	blx	r3
 80038c8:	2000      	movs	r0, #0
 80038ca:	e7e0      	b.n	800388e <_raise_r+0x12>

080038cc <raise>:
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <raise+0xc>)
 80038ce:	4601      	mov	r1, r0
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	f7ff bfd3 	b.w	800387c <_raise_r>
 80038d6:	bf00      	nop
 80038d8:	2000002c 	.word	0x2000002c

080038dc <_kill_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	2300      	movs	r3, #0
 80038e0:	4d06      	ldr	r5, [pc, #24]	; (80038fc <_kill_r+0x20>)
 80038e2:	4604      	mov	r4, r0
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	f7fd f9e7 	bl	8000cbc <_kill>
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	d102      	bne.n	80038f8 <_kill_r+0x1c>
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	b103      	cbz	r3, 80038f8 <_kill_r+0x1c>
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	bd38      	pop	{r3, r4, r5, pc}
 80038fa:	bf00      	nop
 80038fc:	20000310 	.word	0x20000310

08003900 <_getpid_r>:
 8003900:	f7fd b9d5 	b.w	8000cae <_getpid>

08003904 <__sread>:
 8003904:	b510      	push	{r4, lr}
 8003906:	460c      	mov	r4, r1
 8003908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390c:	f000 f894 	bl	8003a38 <_read_r>
 8003910:	2800      	cmp	r0, #0
 8003912:	bfab      	itete	ge
 8003914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003916:	89a3      	ldrhlt	r3, [r4, #12]
 8003918:	181b      	addge	r3, r3, r0
 800391a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800391e:	bfac      	ite	ge
 8003920:	6563      	strge	r3, [r4, #84]	; 0x54
 8003922:	81a3      	strhlt	r3, [r4, #12]
 8003924:	bd10      	pop	{r4, pc}

08003926 <__swrite>:
 8003926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392a:	461f      	mov	r7, r3
 800392c:	898b      	ldrh	r3, [r1, #12]
 800392e:	4605      	mov	r5, r0
 8003930:	05db      	lsls	r3, r3, #23
 8003932:	460c      	mov	r4, r1
 8003934:	4616      	mov	r6, r2
 8003936:	d505      	bpl.n	8003944 <__swrite+0x1e>
 8003938:	2302      	movs	r3, #2
 800393a:	2200      	movs	r2, #0
 800393c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003940:	f000 f868 	bl	8003a14 <_lseek_r>
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	4632      	mov	r2, r6
 8003948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	4628      	mov	r0, r5
 8003950:	463b      	mov	r3, r7
 8003952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800395a:	f000 b817 	b.w	800398c <_write_r>

0800395e <__sseek>:
 800395e:	b510      	push	{r4, lr}
 8003960:	460c      	mov	r4, r1
 8003962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003966:	f000 f855 	bl	8003a14 <_lseek_r>
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	bf15      	itete	ne
 8003970:	6560      	strne	r0, [r4, #84]	; 0x54
 8003972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800397a:	81a3      	strheq	r3, [r4, #12]
 800397c:	bf18      	it	ne
 800397e:	81a3      	strhne	r3, [r4, #12]
 8003980:	bd10      	pop	{r4, pc}

08003982 <__sclose>:
 8003982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003986:	f000 b813 	b.w	80039b0 <_close_r>
	...

0800398c <_write_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4604      	mov	r4, r0
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	2200      	movs	r2, #0
 8003996:	4d05      	ldr	r5, [pc, #20]	; (80039ac <_write_r+0x20>)
 8003998:	602a      	str	r2, [r5, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f7fd fa73 	bl	8000e86 <_write>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_write_r+0x1e>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_write_r+0x1e>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000310 	.word	0x20000310

080039b0 <_close_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	2300      	movs	r3, #0
 80039b4:	4d05      	ldr	r5, [pc, #20]	; (80039cc <_close_r+0x1c>)
 80039b6:	4604      	mov	r4, r0
 80039b8:	4608      	mov	r0, r1
 80039ba:	602b      	str	r3, [r5, #0]
 80039bc:	f7fd f9b5 	bl	8000d2a <_close>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_close_r+0x1a>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_close_r+0x1a>
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	20000310 	.word	0x20000310

080039d0 <_fstat_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	2300      	movs	r3, #0
 80039d4:	4d06      	ldr	r5, [pc, #24]	; (80039f0 <_fstat_r+0x20>)
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	f7fd f9af 	bl	8000d40 <_fstat>
 80039e2:	1c43      	adds	r3, r0, #1
 80039e4:	d102      	bne.n	80039ec <_fstat_r+0x1c>
 80039e6:	682b      	ldr	r3, [r5, #0]
 80039e8:	b103      	cbz	r3, 80039ec <_fstat_r+0x1c>
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
 80039ee:	bf00      	nop
 80039f0:	20000310 	.word	0x20000310

080039f4 <_isatty_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	2300      	movs	r3, #0
 80039f8:	4d05      	ldr	r5, [pc, #20]	; (8003a10 <_isatty_r+0x1c>)
 80039fa:	4604      	mov	r4, r0
 80039fc:	4608      	mov	r0, r1
 80039fe:	602b      	str	r3, [r5, #0]
 8003a00:	f7fd f9ad 	bl	8000d5e <_isatty>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d102      	bne.n	8003a0e <_isatty_r+0x1a>
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	b103      	cbz	r3, 8003a0e <_isatty_r+0x1a>
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
 8003a10:	20000310 	.word	0x20000310

08003a14 <_lseek_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4d05      	ldr	r5, [pc, #20]	; (8003a34 <_lseek_r+0x20>)
 8003a20:	602a      	str	r2, [r5, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f7fd f9a5 	bl	8000d72 <_lseek>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_lseek_r+0x1e>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_lseek_r+0x1e>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20000310 	.word	0x20000310

08003a38 <_read_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	2200      	movs	r2, #0
 8003a42:	4d05      	ldr	r5, [pc, #20]	; (8003a58 <_read_r+0x20>)
 8003a44:	602a      	str	r2, [r5, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7fd f952 	bl	8000cf0 <_read>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_read_r+0x1e>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_read_r+0x1e>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	20000310 	.word	0x20000310

08003a5c <_init>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	bf00      	nop
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr

08003a68 <_fini>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	bf00      	nop
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr
