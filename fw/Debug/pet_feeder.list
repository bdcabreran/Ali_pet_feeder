
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005224  08005224  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005224  08005224  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005224  08005224  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800522c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200000e0  0800530c  000200e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800530c  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a45  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a12  00000000  00000000  00034b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b588  00000000  00000000  00039c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b266  00000000  00000000  00055198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096818  00000000  00000000  000703fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00106c16  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000014c8  00000000  00000000  00106c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006044  00000000  00000000  00108130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b7c 	.word	0x08004b7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004b7c 	.word	0x08004b7c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <btn_debounce_init>:
#include "printf_dbg.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4a1e      	ldr	r2, [pc, #120]	; (80001e0 <btn_debounce_init+0x84>)
 8000168:	615a      	str	r2, [r3, #20]
    btn->down.gpio.pin  = DOWN_Pin;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2220      	movs	r2, #32
 800016e:	831a      	strh	r2, [r3, #24]
    btn->up.gpio.port = UP_GPIO_Port;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4a1b      	ldr	r2, [pc, #108]	; (80001e0 <btn_debounce_init+0x84>)
 8000174:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2210      	movs	r2, #16
 800017a:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	4a19      	ldr	r2, [pc, #100]	; (80001e4 <btn_debounce_init+0x88>)
 8000180:	629a      	str	r2, [r3, #40]	; 0x28
    btn->left.gpio.pin = LEFT_Pin;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2220      	movs	r2, #32
 8000186:	859a      	strh	r2, [r3, #44]	; 0x2c
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a16      	ldr	r2, [pc, #88]	; (80001e4 <btn_debounce_init+0x88>)
 800018c:	63da      	str	r2, [r3, #60]	; 0x3c
    btn->right.gpio.pin = RIGHT_Pin;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2280      	movs	r2, #128	; 0x80
 8000192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4a13      	ldr	r2, [pc, #76]	; (80001e8 <btn_debounce_init+0x8c>)
 800019a:	651a      	str	r2, [r3, #80]	; 0x50
    btn->enter.gpio.pin = ENTER_Pin;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2201      	movs	r2, #1
 80001a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 80001a4:	2305      	movs	r3, #5
 80001a6:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 80001ac:	2300      	movs	r3, #0
 80001ae:	613b      	str	r3, [r7, #16]
 80001b0:	e00d      	b.n	80001ce <btn_debounce_init+0x72>
    {
        time_event_stop(&btn_ptr->debounce);
 80001b2:	697b      	ldr	r3, [r7, #20]
 80001b4:	3308      	adds	r3, #8
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fb09 	bl	80007ce <time_event_stop>
        btn_ptr->pressed = false;
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	2200      	movs	r2, #0
 80001c0:	741a      	strb	r2, [r3, #16]
        btn_ptr++;
 80001c2:	697b      	ldr	r3, [r7, #20]
 80001c4:	3314      	adds	r3, #20
 80001c6:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 80001c8:	693b      	ldr	r3, [r7, #16]
 80001ca:	3301      	adds	r3, #1
 80001cc:	613b      	str	r3, [r7, #16]
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	693a      	ldr	r2, [r7, #16]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d3ed      	bcc.n	80001b2 <btn_debounce_init+0x56>
    }
}
 80001d6:	bf00      	nop
 80001d8:	bf00      	nop
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40011000 	.word	0x40011000
 80001e4:	40010800 	.word	0x40010800
 80001e8:	40010c00 	.word	0x40010c00

080001ec <btn_debounce_run>:

void btn_debounce_run(navigation_btn_t *btn)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 80001f4:	2305      	movs	r3, #5
 80001f6:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	e020      	b.n	8000244 <btn_debounce_run+0x58>
    {
        if(time_event_is_raised(&btn_ptr->debounce))
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	3308      	adds	r3, #8
 8000206:	4618      	mov	r0, r3
 8000208:	f000 faf3 	bl	80007f2 <time_event_is_raised>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d012      	beq.n	8000238 <btn_debounce_run+0x4c>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	889b      	ldrh	r3, [r3, #4]
 800021a:	4619      	mov	r1, r3
 800021c:	4610      	mov	r0, r2
 800021e:	f003 fb7b 	bl	8003918 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d102      	bne.n	800022e <btn_debounce_run+0x42>
                btn_ptr->pressed = true;
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	2201      	movs	r2, #1
 800022c:	741a      	strb	r2, [r3, #16]
            
            time_event_stop(&btn_ptr->debounce);
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	3308      	adds	r3, #8
 8000232:	4618      	mov	r0, r3
 8000234:	f000 facb 	bl	80007ce <time_event_stop>
        }
        btn_ptr++;
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	3314      	adds	r3, #20
 800023c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	3301      	adds	r3, #1
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	693a      	ldr	r2, [r7, #16]
 8000248:	429a      	cmp	r2, r3
 800024a:	d3da      	bcc.n	8000202 <btn_debounce_run+0x16>
    }

    /*Notify events*/
    btn_ev_ext_t btn_ext_event = EVT_EXT_BTN_INVALID;
 800024c:	2300      	movs	r3, #0
 800024e:	73bb      	strb	r3, [r7, #14]

    if (btn->down.pressed)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000256:	2b00      	cmp	r3, #0
 8000258:	d00b      	beq.n	8000272 <btn_debounce_run+0x86>
    {
        if (btn->enter.pressed)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000260:	2b00      	cmp	r3, #0
 8000262:	d003      	beq.n	800026c <btn_debounce_run+0x80>
        {
            printf("btn down + enter pressed\r\n");
 8000264:	4822      	ldr	r0, [pc, #136]	; (80002f0 <btn_debounce_run+0x104>)
 8000266:	f001 faef 	bl	8001848 <puts>
 800026a:	e002      	b.n	8000272 <btn_debounce_run+0x86>
        }
        else
        {
            printf("btn down pressed\r\n");
 800026c:	4821      	ldr	r0, [pc, #132]	; (80002f4 <btn_debounce_run+0x108>)
 800026e:	f001 faeb 	bl	8001848 <puts>
        }
    }

    if (btn->up.pressed)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	7c1b      	ldrb	r3, [r3, #16]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d00b      	beq.n	8000292 <btn_debounce_run+0xa6>
    {
        if (btn->enter.pressed)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000280:	2b00      	cmp	r3, #0
 8000282:	d003      	beq.n	800028c <btn_debounce_run+0xa0>
        {
            printf("btn up + enter pressed\r\n");
 8000284:	481c      	ldr	r0, [pc, #112]	; (80002f8 <btn_debounce_run+0x10c>)
 8000286:	f001 fadf 	bl	8001848 <puts>
 800028a:	e002      	b.n	8000292 <btn_debounce_run+0xa6>
        }
        else
        {
            printf("btn up pressed\r\n");
 800028c:	481b      	ldr	r0, [pc, #108]	; (80002fc <btn_debounce_run+0x110>)
 800028e:	f001 fadb 	bl	8001848 <puts>
        }
    }

    if (btn->left.pressed)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00b      	beq.n	80002b4 <btn_debounce_run+0xc8>
    {
        if (btn->enter.pressed)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <btn_debounce_run+0xc2>
        {
            printf("btn left + enter pressed\r\n");
 80002a6:	4816      	ldr	r0, [pc, #88]	; (8000300 <btn_debounce_run+0x114>)
 80002a8:	f001 face 	bl	8001848 <puts>
 80002ac:	e002      	b.n	80002b4 <btn_debounce_run+0xc8>
        }
        else 
        {
            printf("btn left pressed\r\n");
 80002ae:	4815      	ldr	r0, [pc, #84]	; (8000304 <btn_debounce_run+0x118>)
 80002b0:	f001 faca 	bl	8001848 <puts>
        }
    }

    if (btn->right.pressed)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00b      	beq.n	80002d6 <btn_debounce_run+0xea>
    {
        if (btn->enter.pressed)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d003      	beq.n	80002d0 <btn_debounce_run+0xe4>
        {
            printf("btn right + enter pressed\r\n");
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <btn_debounce_run+0x11c>)
 80002ca:	f001 fabd 	bl	8001848 <puts>
 80002ce:	e002      	b.n	80002d6 <btn_debounce_run+0xea>

        }
        else
        {
            printf("btn right pressed\r\n");
 80002d0:	480e      	ldr	r0, [pc, #56]	; (800030c <btn_debounce_run+0x120>)
 80002d2:	f001 fab9 	bl	8001848 <puts>
        }
    }

    if (btn->enter.pressed)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d002      	beq.n	80002e6 <btn_debounce_run+0xfa>
    {
        printf("btn enter pressed\r\n");
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <btn_debounce_run+0x124>)
 80002e2:	f001 fab1 	bl	8001848 <puts>
    }
}
 80002e6:	bf00      	nop
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	08004b94 	.word	0x08004b94
 80002f4:	08004bb0 	.word	0x08004bb0
 80002f8:	08004bc4 	.word	0x08004bc4
 80002fc:	08004bdc 	.word	0x08004bdc
 8000300:	08004bec 	.word	0x08004bec
 8000304:	08004c08 	.word	0x08004c08
 8000308:	08004c1c 	.word	0x08004c1c
 800030c:	08004c38 	.word	0x08004c38
 8000310:	08004c4c 	.word	0x08004c4c

08000314 <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm_src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm_dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->evt);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->header.payload_len);

    if(evt->header.payload_len)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	78db      	ldrb	r3, [r3, #3]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d007      	beq.n	8000334 <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->payload.buff, evt->header.payload_len);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	1d19      	adds	r1, r3, #4
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	78db      	ldrb	r3, [r3, #3]
 800032c:	461a      	mov	r2, r3
 800032e:	2058      	movs	r0, #88	; 0x58
 8000330:	f000 f8d6 	bl	80004e0 <print_buffer>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	4613      	mov	r3, r2
 8000348:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4619      	mov	r1, r3
 800034e:	68b8      	ldr	r0, [r7, #8]
 8000350:	f000 f958 	bl	8000604 <ring_buffer_init>
 8000354:	4602      	mov	r2, r0
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	2200      	movs	r2, #0
 800035e:	711a      	strb	r2, [r3, #4]
}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	791b      	ldrb	r3, [r3, #4]
}
 8000374:	4618      	mov	r0, r3
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
	...

08000380 <event_queue_read>:

    return write_st;
}

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 800038a:	2300      	movs	r3, #0
 800038c:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f7ff ffea 	bl	8000368 <event_queue_get_pending>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d031      	beq.n	80003fe <event_queue_read+0x7e>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6839      	ldr	r1, [r7, #0]
 80003a0:	2204      	movs	r2, #4
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f9c8 	bl	8000738 <ring_buffer_read>
 80003a8:	4603      	mov	r3, r0
 80003aa:	73fb      	strb	r3, [r7, #15]
        if (evt->header.payload_len)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	78db      	ldrb	r3, [r3, #3]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d00a      	beq.n	80003ca <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6818      	ldr	r0, [r3, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	1d19      	adds	r1, r3, #4
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	78db      	ldrb	r3, [r3, #3]
 80003c0:	461a      	mov	r2, r3
 80003c2:	f000 f9b9 	bl	8000738 <ring_buffer_read>
 80003c6:	4603      	mov	r3, r0
 80003c8:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d109      	bne.n	80003e4 <event_queue_read+0x64>
        {
            queue->pending_cnt--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 80003dc:	6838      	ldr	r0, [r7, #0]
 80003de:	f7ff ff99 	bl	8000314 <event_print_info>
 80003e2:	e00c      	b.n	80003fe <event_queue_read+0x7e>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <event_queue_read+0x88>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 f9de 	bl	80017aa <iprintf>
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <event_queue_read+0x8c>)
 80003f0:	f001 fa2a 	bl	8001848 <puts>
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <event_queue_read+0x88>)
 80003f6:	69db      	ldr	r3, [r3, #28]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 f9d6 	bl	80017aa <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000008 	.word	0x20000008
 800040c:	08004c80 	.word	0x08004c80

08000410 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000418:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800041c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d013      	beq.n	8000450 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000428:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800042c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000430:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00b      	beq.n	8000450 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000438:	e000      	b.n	800043c <ITM_SendChar+0x2c>
    {
      __NOP();
 800043a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800043c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f9      	beq.n	800043a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000446:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000450:	687b      	ldr	r3, [r7, #4]
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <itm_enable>:

#include "itm_dbg.h"
#include "stdio.h"

void itm_enable(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <itm_enable+0x2c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a08      	ldr	r2, [pc, #32]	; (8000488 <itm_enable+0x2c>)
 8000466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800046a:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 800046c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000470:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000474:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	e000edfc 	.word	0xe000edfc

0800048c <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	e009      	b.n	80004b0 <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffb3 	bl	8000410 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fa      	ldr	r2, [r7, #12]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	dbf1      	blt.n	800049c <itm_write+0x10>
	}
	return len;
 80004b8:	683b      	ldr	r3, [r7, #0]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	68b8      	ldr	r0, [r7, #8]
 80004d2:	f7ff ffdb 	bl	800048c <itm_write>
 80004d6:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 80004f0:	481a      	ldr	r0, [pc, #104]	; (800055c <print_buffer+0x7c>)
 80004f2:	f001 f9a9 	bl	8001848 <puts>
	for (size_t i = 0; i < len; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e023      	b.n	8000544 <print_buffer+0x64>
	{
		switch (format)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b43      	cmp	r3, #67	; 0x43
 8000500:	d002      	beq.n	8000508 <print_buffer+0x28>
 8000502:	2b58      	cmp	r3, #88	; 0x58
 8000504:	d009      	beq.n	800051a <print_buffer+0x3a>
 8000506:	e011      	b.n	800052c <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <print_buffer+0x80>)
 8000514:	f001 f949 	bl	80017aa <iprintf>
 8000518:	e011      	b.n	800053e <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <print_buffer+0x84>)
 8000526:	f001 f940 	bl	80017aa <iprintf>
 800052a:	e008      	b.n	800053e <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	4413      	add	r3, r2
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	480b      	ldr	r0, [pc, #44]	; (8000564 <print_buffer+0x84>)
 8000538:	f001 f937 	bl	80017aa <iprintf>
 800053c:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	d3d7      	bcc.n	80004fc <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <print_buffer+0x88>)
 800054e:	f001 f97b 	bl	8001848 <puts>
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	08004d00 	.word	0x08004d00
 8000560:	08004d0c 	.word	0x08004d0c
 8000564:	08004d14 	.word	0x08004d14
 8000568:	08004d1c 	.word	0x08004d1c

0800056c <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d105      	bne.n	8000586 <tail_ptr_retreat+0x1a>
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <tail_ptr_retreat+0x40>)
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <tail_ptr_retreat+0x44>)
 800057e:	2139      	movs	r1, #57	; 0x39
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <tail_ptr_retreat+0x48>)
 8000582:	f004 f9a5 	bl	80048d0 <__assert_func>

    rb->full = 0;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	3301      	adds	r3, #1
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	68d2      	ldr	r2, [r2, #12]
 8000596:	fbb3 f1f2 	udiv	r1, r3, r2
 800059a:	fb01 f202 	mul.w	r2, r1, r2
 800059e:	1a9a      	subs	r2, r3, r2
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	609a      	str	r2, [r3, #8]
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	08004d20 	.word	0x08004d20
 80005b0:	08005158 	.word	0x08005158
 80005b4:	08004d24 	.word	0x08004d24

080005b8 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    assert(rb);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d105      	bne.n	80005d2 <is_ring_buffer_empty+0x1a>
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <is_ring_buffer_empty+0x40>)
 80005c8:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <is_ring_buffer_empty+0x44>)
 80005ca:	214e      	movs	r1, #78	; 0x4e
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <is_ring_buffer_empty+0x48>)
 80005ce:	f004 f97f 	bl	80048d0 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7c1b      	ldrb	r3, [r3, #16]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d107      	bne.n	80005ea <is_ring_buffer_empty+0x32>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d101      	bne.n	80005ea <is_ring_buffer_empty+0x32>
 80005e6:	2301      	movs	r3, #1
 80005e8:	e000      	b.n	80005ec <is_ring_buffer_empty+0x34>
 80005ea:	2300      	movs	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08004d20 	.word	0x08004d20
 80005fc:	0800516c 	.word	0x0800516c
 8000600:	08004d24 	.word	0x08004d24

08000604 <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <ring_buffer_init+0x16>
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d105      	bne.n	8000626 <ring_buffer_init+0x22>
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <ring_buffer_init+0x74>)
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <ring_buffer_init+0x78>)
 800061e:	2169      	movs	r1, #105	; 0x69
 8000620:	4817      	ldr	r0, [pc, #92]	; (8000680 <ring_buffer_init+0x7c>)
 8000622:	f004 f955 	bl	80048d0 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 8000626:	2014      	movs	r0, #20
 8000628:	f004 f99a 	bl	8004960 <malloc>
 800062c:	4603      	mov	r3, r0
 800062e:	60fb      	str	r3, [r7, #12]
    assert(rb);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d105      	bne.n	8000642 <ring_buffer_init+0x3e>
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <ring_buffer_init+0x80>)
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <ring_buffer_init+0x78>)
 800063a:	216c      	movs	r1, #108	; 0x6c
 800063c:	4810      	ldr	r0, [pc, #64]	; (8000680 <ring_buffer_init+0x7c>)
 800063e:	f004 f947 	bl	80048d0 <__assert_func>

    rb->buffer = buffer;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f000 f81c 	bl	800068c <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f7ff ffaf 	bl	80005b8 <is_ring_buffer_empty>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d105      	bne.n	800066c <ring_buffer_init+0x68>
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <ring_buffer_init+0x84>)
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <ring_buffer_init+0x78>)
 8000664:	2172      	movs	r1, #114	; 0x72
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <ring_buffer_init+0x7c>)
 8000668:	f004 f932 	bl	80048d0 <__assert_func>

    return rb;
 800066c:	68fb      	ldr	r3, [r7, #12]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08004d50 	.word	0x08004d50
 800067c:	08005184 	.word	0x08005184
 8000680:	08004d24 	.word	0x08004d24
 8000684:	08004d20 	.word	0x08004d20
 8000688:	08004d60 	.word	0x08004d60

0800068c <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d105      	bne.n	80006a6 <ring_buffer_reset+0x1a>
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <ring_buffer_reset+0x34>)
 800069c:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <ring_buffer_reset+0x38>)
 800069e:	2189      	movs	r1, #137	; 0x89
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <ring_buffer_reset+0x3c>)
 80006a2:	f004 f915 	bl	80048d0 <__assert_func>
    rb->head = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	741a      	strb	r2, [r3, #16]
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08004d20 	.word	0x08004d20
 80006c4:	08005198 	.word	0x08005198
 80006c8:	08004d24 	.word	0x08004d24

080006cc <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d006      	beq.n	80006ea <ring_buffer_get+0x1e>
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d003      	beq.n	80006ea <ring_buffer_get+0x1e>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d105      	bne.n	80006f6 <ring_buffer_get+0x2a>
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <ring_buffer_get+0x60>)
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <ring_buffer_get+0x64>)
 80006ee:	21da      	movs	r1, #218	; 0xda
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <ring_buffer_get+0x68>)
 80006f2:	f004 f8ed 	bl	80048d0 <__assert_func>

    int r = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff5c 	bl	80005b8 <is_ring_buffer_empty>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10c      	bne.n	8000720 <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	4413      	add	r3, r2
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff28 	bl	800056c <tail_ptr_retreat>

        r = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	b2db      	uxtb	r3, r3
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	08004d90 	.word	0x08004d90
 8000730:	080051ac 	.word	0x080051ac
 8000734:	08004d24 	.word	0x08004d24

08000738 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <ring_buffer_read+0x20>
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <ring_buffer_read+0x20>
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d106      	bne.n	8000766 <ring_buffer_read+0x2e>
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <ring_buffer_read+0x64>)
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <ring_buffer_read+0x68>)
 800075c:	f240 1115 	movw	r1, #277	; 0x115
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <ring_buffer_read+0x6c>)
 8000762:	f004 f8b5 	bl	80048d0 <__assert_func>

    size_t data_counter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 800076a:	e00d      	b.n	8000788 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	617a      	str	r2, [r7, #20]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	4619      	mov	r1, r3
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff ffa7 	bl	80006cc <ring_buffer_get>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 8000784:	2303      	movs	r3, #3
 8000786:	e004      	b.n	8000792 <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3ed      	bcc.n	800076c <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08004dac 	.word	0x08004dac
 80007a0:	080051bc 	.word	0x080051bc
 80007a4:	08004d24 	.word	0x08004d24

080007a8 <time_event_start>:
#include <assert.h>

bool volatile pending_time_update = false;

void time_event_start(time_event_t *time_event, const uint32_t time_ms)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
    time_event->tick_cnt = time_ms;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	601a      	str	r2, [r3, #0]
    time_event->active = true;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	711a      	strb	r2, [r3, #4]
    time_event->raised = false;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	715a      	strb	r2, [r3, #5]
}   
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
    time_event->active = false;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
    time_event->raised = false;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	715a      	strb	r2, [r3, #5]
    time_event->tick_cnt = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <time_event_is_raised>:
    }
    return false;
}

bool time_event_is_raised(time_event_t *time_event)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	795b      	ldrb	r3, [r3, #5]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <time_event_set_pending_update>:

void time_event_set_pending_update(bool status)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <time_event_set_pending_update+0x1c>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	7013      	strb	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000160 	.word	0x20000160

08000828 <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
    return pending_time_update;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <time_event_get_pending_update+0x14>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000160 	.word	0x20000160

08000840 <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff ffdf 	bl	8000808 <time_event_set_pending_update>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8000854:	f7ff ffe8 	bl	8000828 <time_event_get_pending_update>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <time_events_poll_update+0x1a>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <time_events_poll_update+0x20>)
 8000860:	f7ff fcc4 	bl	80001ec <btn_debounce_run>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff ffcf 	bl	8000808 <time_event_set_pending_update>
    }
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000fc 	.word	0x200000fc

08000874 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 8000878:	4b02      	ldr	r3, [pc, #8]	; (8000884 <event_manager_fsm_get+0x10>)
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2000022c 	.word	0x2000022c

08000888 <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	78fa      	ldrb	r2, [r7, #3]
 8000898:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	705a      	strb	r2, [r3, #1]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d002      	beq.n	80008c0 <event_manager_fsm_run+0x16>
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d004      	beq.n	80008c8 <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 80008be:	e007      	b.n	80008d0 <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f84d 	bl	8000960 <wait_event_on_react>
 80008c6:	e003      	b.n	80008d0 <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 f885 	bl	80009d8 <notify_event_on_react>
 80008ce:	bf00      	nop
    }
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3358      	adds	r3, #88	; 0x58
 80008e4:	22c8      	movs	r2, #200	; 0xc8
 80008e6:	4905      	ldr	r1, [pc, #20]	; (80008fc <event_manager_fsm_init+0x24>)
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fd27 	bl	800033c <event_queue_init>
    enter_seq_wait_event(handle);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f806 	bl	8000900 <enter_seq_wait_event>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000164 	.word	0x20000164

08000900 <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 8000908:	2101      	movs	r1, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffbc 	bl	8000888 <fsm_set_next_state>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3304      	adds	r3, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4610      	mov	r0, r2
 800092e:	f7ff fd27 	bl	8000380 <event_queue_read>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3358      	adds	r3, #88	; 0x58
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fd0e 	bl	8000368 <event_queue_get_pending>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d002      	beq.n	8000958 <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	705a      	strb	r2, [r3, #1]
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 8000968:	2301      	movs	r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d106      	bne.n	8000982 <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ffcf 	bl	8000918 <exit_action_wait_event>
        enter_seq_notify_event(handle);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f810 	bl	80009a0 <enter_seq_notify_event>
 8000980:	e001      	b.n	8000986 <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	f083 0301 	eor.w	r3, r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffd1 	bl	800093a <during_action_wait_event>
    }
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 80009a8:	2102      	movs	r1, #2
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff6c 	bl	8000888 <fsm_set_next_state>
    entry_action_notify_event(handle);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f804 	bl	80009be <entry_action_notify_event>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
        temp_ctrl_fsm_write_evt(&temp_fsm, &handle->iface.event);
    break;
    */
    
    default:
        break;
 80009c6:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2202      	movs	r2, #2
 80009cc:	705a      	strb	r2, [r3, #1]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d102      	bne.n	80009ee <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff89 	bl	8000900 <enter_seq_wait_event>
    }
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	2b80      	cmp	r3, #128	; 0x80
 8000a06:	d02b      	beq.n	8000a60 <HAL_GPIO_EXTI_Callback+0x68>
 8000a08:	2b80      	cmp	r3, #128	; 0x80
 8000a0a:	dc2e      	bgt.n	8000a6a <HAL_GPIO_EXTI_Callback+0x72>
 8000a0c:	2b20      	cmp	r3, #32
 8000a0e:	d010      	beq.n	8000a32 <HAL_GPIO_EXTI_Callback+0x3a>
 8000a10:	2b20      	cmp	r3, #32
 8000a12:	dc2a      	bgt.n	8000a6a <HAL_GPIO_EXTI_Callback+0x72>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d002      	beq.n	8000a1e <HAL_GPIO_EXTI_Callback+0x26>
 8000a18:	2b10      	cmp	r3, #16
 8000a1a:	d005      	beq.n	8000a28 <HAL_GPIO_EXTI_Callback+0x30>
        case GPIO_PIN_7: {
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
         }break;
    
    default:
        break;
 8000a1c:	e025      	b.n	8000a6a <HAL_GPIO_EXTI_Callback+0x72>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 8000a1e:	2132      	movs	r1, #50	; 0x32
 8000a20:	4815      	ldr	r0, [pc, #84]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a22:	f7ff fec1 	bl	80007a8 <time_event_start>
        }break;
 8000a26:	e023      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x78>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8000a28:	2132      	movs	r1, #50	; 0x32
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a2c:	f7ff febc 	bl	80007a8 <time_event_start>
        }break;
 8000a30:	e01e      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x78>
            if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_RESET)
 8000a32:	2120      	movs	r1, #32
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x88>)
 8000a36:	f002 ff6f 	bl	8003918 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d103      	bne.n	8000a48 <HAL_GPIO_EXTI_Callback+0x50>
                time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 8000a40:	2132      	movs	r1, #50	; 0x32
 8000a42:	4810      	ldr	r0, [pc, #64]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a44:	f7ff feb0 	bl	80007a8 <time_event_start>
            if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) == GPIO_PIN_RESET)
 8000a48:	2120      	movs	r1, #32
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a4c:	f002 ff64 	bl	8003918 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10b      	bne.n	8000a6e <HAL_GPIO_EXTI_Callback+0x76>
                  time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 8000a56:	2132      	movs	r1, #50	; 0x32
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x94>)
 8000a5a:	f7ff fea5 	bl	80007a8 <time_event_start>
         }break;
 8000a5e:	e006      	b.n	8000a6e <HAL_GPIO_EXTI_Callback+0x76>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 8000a60:	2132      	movs	r1, #50	; 0x32
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a64:	f7ff fea0 	bl	80007a8 <time_event_start>
         }break;
 8000a68:	e002      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x78>
        break;
 8000a6a:	bf00      	nop
 8000a6c:	e000      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x78>
         }break;
 8000a6e:	bf00      	nop
    }

}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000154 	.word	0x20000154
 8000a7c:	20000104 	.word	0x20000104
 8000a80:	40010800 	.word	0x40010800
 8000a84:	2000012c 	.word	0x2000012c
 8000a88:	40011000 	.word	0x40011000
 8000a8c:	20000118 	.word	0x20000118
 8000a90:	20000140 	.word	0x20000140

08000a94 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f002 ff6d 	bl	8003978 <HAL_GPIO_EXTI_IRQHandler>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 8000aa6:	2010      	movs	r0, #16
 8000aa8:	f002 ff66 	bl	8003978 <HAL_GPIO_EXTI_IRQHandler>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5), Down (C5)
 8000ab4:	2020      	movs	r0, #32
 8000ab6:	f002 ff5f 	bl	8003978 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 8000aba:	2080      	movs	r0, #128	; 0x80
 8000abc:	f002 ff5c 	bl	8003978 <HAL_GPIO_EXTI_IRQHandler>
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	2228      	movs	r2, #40	; 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 ff4c 	bl	8004970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b04:	2300      	movs	r3, #0
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000b08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 f88c 	bl	8003c30 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b1e:	f000 fa47 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 faf9 	bl	8004134 <HAL_RCC_ClockConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b48:	f000 fa32 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fc70 	bl	800443c <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b62:	f000 fa25 	bl	8000fb0 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000b82:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <MX_ADC1_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000b9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000bae:	f002 f9b5 	bl	8002f1c <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bb8:	f000 f9fa 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_ADC1_Init+0x74>)
 8000bce:	f002 fa7d 	bl	80030cc <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bd8:	f000 f9ea 	bl	8000fb0 <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000028c 	.word	0x2000028c
 8000be8:	40012400 	.word	0x40012400

08000bec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <MX_I2C1_Init+0x54>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000bf8:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_I2C1_Init+0x58>)
 8000bfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c2a:	f002 febd 	bl	80039a8 <HAL_I2C_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c34:	f000 f9bc 	bl	8000fb0 <Error_Handler>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200002bc 	.word	0x200002bc
 8000c40:	40005400 	.word	0x40005400
 8000c44:	000186a0 	.word	0x000186a0

08000c48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <MX_SPI2_Init+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c94:	220a      	movs	r2, #10
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_SPI2_Init+0x64>)
 8000c9a:	f003 fc85 	bl	80045a8 <HAL_SPI_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ca4:	f000 f984 	bl	8000fb0 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000310 	.word	0x20000310
 8000cb0:	40003800 	.word	0x40003800

08000cb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <MX_TIM1_Init+0x74>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000cee:	2108      	movs	r1, #8
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000cf2:	f003 fcdd 	bl	80046b0 <HAL_TIM_OnePulse_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8000cfc:	f000 f958 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_TIM1_Init+0x70>)
 8000d0e:	f003 fd81 	bl	8004814 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000d18:	f000 f94a 	bl	8000fb0 <Error_Handler>
  }


}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200003f0 	.word	0x200003f0
 8000d28:	40012c00 	.word	0x40012c00

08000d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_DMA_Init+0x48>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <MX_DMA_Init+0x48>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6153      	str	r3, [r2, #20]
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_DMA_Init+0x48>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200e      	movs	r0, #14
 8000d50:	f002 fbcd 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d54:	200e      	movs	r0, #14
 8000d56:	f002 fbe6 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f002 fbc5 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d64:	200f      	movs	r0, #15
 8000d66:	f002 fbde 	bl	8003526 <HAL_NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a67      	ldr	r2, [pc, #412]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a61      	ldr	r2, [pc, #388]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000daa:	f043 0320 	orr.w	r3, r3, #32
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b5f      	ldr	r3, [pc, #380]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0320 	and.w	r3, r3, #32
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a5b      	ldr	r2, [pc, #364]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b59      	ldr	r3, [pc, #356]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a55      	ldr	r2, [pc, #340]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b53      	ldr	r3, [pc, #332]	; (8000f30 <MX_GPIO_Init+0x1b8>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2102      	movs	r1, #2
 8000df0:	4850      	ldr	r0, [pc, #320]	; (8000f34 <MX_GPIO_Init+0x1bc>)
 8000df2:	f002 fda8 	bl	8003946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8000df6:	2200      	movs	r2, #0
 8000df8:	f640 715f 	movw	r1, #3935	; 0xf5f
 8000dfc:	484e      	ldr	r0, [pc, #312]	; (8000f38 <MX_GPIO_Init+0x1c0>)
 8000dfe:	f002 fda2 	bl	8003946 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000e08:	484c      	ldr	r0, [pc, #304]	; (8000f3c <MX_GPIO_Init+0x1c4>)
 8000e0a:	f002 fd9c 	bl	8003946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4843      	ldr	r0, [pc, #268]	; (8000f34 <MX_GPIO_Init+0x1bc>)
 8000e26:	f002 fbf3 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 8000e2a:	f241 338c 	movw	r3, #5004	; 0x138c
 8000e2e:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	483d      	ldr	r0, [pc, #244]	; (8000f34 <MX_GPIO_Init+0x1bc>)
 8000e40:	f002 fbe6 	bl	8003610 <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8000e44:	f640 735f 	movw	r3, #3935	; 0xf5f
 8000e48:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4836      	ldr	r0, [pc, #216]	; (8000f38 <MX_GPIO_Init+0x1c0>)
 8000e5e:	f002 fbd7 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4830      	ldr	r0, [pc, #192]	; (8000f38 <MX_GPIO_Init+0x1c0>)
 8000e78:	f002 fbca 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000e7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	4829      	ldr	r0, [pc, #164]	; (8000f3c <MX_GPIO_Init+0x1c4>)
 8000e96:	f002 fbbb 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 8000e9a:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <MX_GPIO_Init+0x1c8>)
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4821      	ldr	r0, [pc, #132]	; (8000f34 <MX_GPIO_Init+0x1bc>)
 8000eb0:	f002 fbae 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 8000eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_GPIO_Init+0x1c8>)
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_GPIO_Init+0x1c0>)
 8000eca:	f002 fba1 	bl	8003610 <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8000ece:	2330      	movs	r3, #48	; 0x30
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_GPIO_Init+0x1cc>)
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_GPIO_Init+0x1bc>)
 8000ee2:	f002 fb95 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8000ee6:	23a0      	movs	r3, #160	; 0xa0
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_GPIO_Init+0x1cc>)
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <MX_GPIO_Init+0x1c0>)
 8000efa:	f002 fb89 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8000efe:	2301      	movs	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_GPIO_Init+0x1cc>)
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <MX_GPIO_Init+0x1c4>)
 8000f12:	f002 fb7d 	bl	8003610 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 8000f16:	2006      	movs	r0, #6
 8000f18:	f002 fb05 	bl	8003526 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, down -> C5, right -> A7
 8000f1c:	2017      	movs	r0, #23
 8000f1e:	f002 fb02 	bl	8003526 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 8000f22:	200a      	movs	r0, #10
 8000f24:	f002 faff 	bl	8003526 <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40010800 	.word	0x40010800
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	10110000 	.word	0x10110000
 8000f44:	10210000 	.word	0x10210000

08000f48 <init_peripherals>:

void init_peripherals(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f001 ff60 	bl	8002e10 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f7ff fdb8 	bl	8000ac4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f7ff ff10 	bl	8000d78 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f58:	f7ff fe0a 	bl	8000b70 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000f5c:	f7ff fe74 	bl	8000c48 <MX_SPI2_Init>
  MX_DMA_Init();
 8000f60:	f7ff fee4 	bl	8000d2c <MX_DMA_Init>
  MX_TIM1_Init();
 8000f64:	f7ff fea6 	bl	8000cb4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f68:	f7ff fe40 	bl	8000bec <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 8000f6c:	f7ff fa76 	bl	800045c <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 8000f70:	f001 f932 	bl	80021d8 <BSP_LCD_Init>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  init_peripherals();
 8000f7e:	f7ff ffe3 	bl	8000f48 <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <main+0x30>)
 8000f84:	f7ff f8ea 	bl	800015c <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 8000f88:	f7ff fc74 	bl	8000874 <event_manager_fsm_get>
 8000f8c:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fca2 	bl	80008d8 <event_manager_fsm_init>

  printf("Ali Pet Feeder Project\r\n");
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <main+0x34>)
 8000f96:	f000 fc57 	bl	8001848 <puts>

  /* Infinite loop */
  while (1)
  {
    event_manager_fsm_run(evm_fsm);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fc85 	bl	80008aa <event_manager_fsm_run>
    time_events_poll_update();
 8000fa0:	f7ff fc56 	bl	8000850 <time_events_poll_update>
    event_manager_fsm_run(evm_fsm);
 8000fa4:	e7f9      	b.n	8000f9a <main+0x22>
 8000fa6:	bf00      	nop
 8000fa8:	200000fc 	.word	0x200000fc
 8000fac:	08004dc8 	.word	0x08004dc8

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>
	...

08000fbc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_MspInit+0x5c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x5c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x60>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_MspInit+0x60>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_ADC_MspInit+0x6c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d121      	bne.n	8001084 <HAL_ADC_MspInit+0x64>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_ADC_MspInit+0x70>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <HAL_ADC_MspInit+0x70>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_ADC_MspInit+0x70>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_ADC_MspInit+0x70>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <HAL_ADC_MspInit+0x70>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_ADC_MspInit+0x70>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001074:	2303      	movs	r3, #3
 8001076:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_ADC_MspInit+0x74>)
 8001080:	f002 fac6 	bl	8003610 <HAL_GPIO_Init>
  }

}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012400 	.word	0x40012400
 8001090:	40021000 	.word	0x40021000
 8001094:	40011000 	.word	0x40011000

08001098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <HAL_I2C_MspInit+0x70>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d123      	bne.n	8001100 <HAL_I2C_MspInit+0x68>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_I2C_MspInit+0x74>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <HAL_I2C_MspInit+0x74>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_I2C_MspInit+0x74>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d4:	2312      	movs	r3, #18
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <HAL_I2C_MspInit+0x78>)
 80010e4:	f002 fa94 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_I2C_MspInit+0x74>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_I2C_MspInit+0x74>)
 80010ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f2:	61d3      	str	r3, [r2, #28]
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_I2C_MspInit+0x74>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]

  }

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40005400 	.word	0x40005400
 800110c:	40021000 	.word	0x40021000
 8001110:	40010c00 	.word	0x40010c00

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a42      	ldr	r2, [pc, #264]	; (8001238 <HAL_SPI_MspInit+0x124>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d17d      	bne.n	8001230 <HAL_SPI_MspInit+0x11c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001134:	4b41      	ldr	r3, [pc, #260]	; (800123c <HAL_SPI_MspInit+0x128>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	4a40      	ldr	r2, [pc, #256]	; (800123c <HAL_SPI_MspInit+0x128>)
 800113a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113e:	61d3      	str	r3, [r2, #28]
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <HAL_SPI_MspInit+0x128>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <HAL_SPI_MspInit+0x128>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a3a      	ldr	r2, [pc, #232]	; (800123c <HAL_SPI_MspInit+0x128>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b38      	ldr	r3, [pc, #224]	; (800123c <HAL_SPI_MspInit+0x128>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8001164:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	4831      	ldr	r0, [pc, #196]	; (8001240 <HAL_SPI_MspInit+0x12c>)
 800117a:	f002 fa49 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 800117e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	482b      	ldr	r0, [pc, #172]	; (8001240 <HAL_SPI_MspInit+0x12c>)
 8001194:	f002 fa3c 	bl	8003610 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <HAL_SPI_MspInit+0x130>)
 800119a:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <HAL_SPI_MspInit+0x134>)
 800119c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80011c8:	481e      	ldr	r0, [pc, #120]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011ca:	f002 f9c7 	bl	800355c <HAL_DMA_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80011d4:	f7ff feec 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_SPI_MspInit+0x130>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_SPI_MspInit+0x138>)
 80011e6:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <HAL_SPI_MspInit+0x13c>)
 80011e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_SPI_MspInit+0x138>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_SPI_MspInit+0x138>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_SPI_MspInit+0x138>)
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_SPI_MspInit+0x138>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_SPI_MspInit+0x138>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_SPI_MspInit+0x138>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_SPI_MspInit+0x138>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <HAL_SPI_MspInit+0x138>)
 8001216:	f002 f9a1 	bl	800355c <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8001220:	f7ff fec6 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_SPI_MspInit+0x138>)
 8001228:	649a      	str	r2, [r3, #72]	; 0x48
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_SPI_MspInit+0x138>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6253      	str	r3, [r2, #36]	; 0x24


  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40003800 	.word	0x40003800
 800123c:	40021000 	.word	0x40021000
 8001240:	40010c00 	.word	0x40010c00
 8001244:	20000368 	.word	0x20000368
 8001248:	40020044 	.word	0x40020044
 800124c:	200003ac 	.word	0x200003ac
 8001250:	40020058 	.word	0x40020058

08001254 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_TIM_OnePulse_MspInit+0x34>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10b      	bne.n	800127e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_TIM_OnePulse_MspInit+0x38>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_TIM_OnePulse_MspInit+0x38>)
 800126c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_TIM_OnePulse_MspInit+0x38>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  }

}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40012c00 	.word	0x40012c00
 800128c:	40021000 	.word	0x40021000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80012d6:	f7ff fab3 	bl	8000840 <HAL_SYSTICK_Callback>
  HAL_IncTick();
 80012da:	f001 fddf 	bl	8002e9c <HAL_IncTick>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
	return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <_kill>:

int _kill(int pid, int sig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012fa:	f003 fb07 	bl	800490c <__errno>
 80012fe:	4603      	mov	r3, r0
 8001300:	2216      	movs	r2, #22
 8001302:	601a      	str	r2, [r3, #0]
	return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_exit>:

void _exit (int status)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffe7 	bl	80012f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001322:	e7fe      	b.n	8001322 <_exit+0x12>

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f003 fada 	bl	800490c <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20005000 	.word	0x20005000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000438 	.word	0x20000438
 800138c:	20000578 	.word	0x20000578

08001390 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80013ac:	e004      	b.n	80013b8 <ts_itoa+0x1c>
		div *= base;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d2f3      	bcs.n	80013ae <ts_itoa+0x12>

	while (div != 0)
 80013c6:	e029      	b.n	800141c <ts_itoa+0x80>
	{
		int num = d/div;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80013da:	fb01 f202 	mul.w	r2, r1, r2
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b09      	cmp	r3, #9
 80013f0:	dd0a      	ble.n	8001408 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1c58      	adds	r0, r3, #1
 80013fc:	68f9      	ldr	r1, [r7, #12]
 80013fe:	6008      	str	r0, [r1, #0]
 8001400:	3237      	adds	r2, #55	; 0x37
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e009      	b.n	800141c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	1c58      	adds	r0, r3, #1
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	6008      	str	r0, [r1, #0]
 8001416:	3230      	adds	r2, #48	; 0x30
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1d2      	bne.n	80013c8 <ts_itoa+0x2c>
	}
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
	...

08001430 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001440:	e0bc      	b.n	80015bc <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b25      	cmp	r3, #37	; 0x25
 8001448:	f040 80b0 	bne.w	80015ac <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b25      	cmp	r3, #37	; 0x25
 8001458:	f000 809e 	beq.w	8001598 <ts_formatstring+0x168>
 800145c:	2b25      	cmp	r3, #37	; 0x25
 800145e:	f2c0 80a1 	blt.w	80015a4 <ts_formatstring+0x174>
 8001462:	2b78      	cmp	r3, #120	; 0x78
 8001464:	f300 809e 	bgt.w	80015a4 <ts_formatstring+0x174>
 8001468:	2b58      	cmp	r3, #88	; 0x58
 800146a:	f2c0 809b 	blt.w	80015a4 <ts_formatstring+0x174>
 800146e:	3b58      	subs	r3, #88	; 0x58
 8001470:	2b20      	cmp	r3, #32
 8001472:	f200 8097 	bhi.w	80015a4 <ts_formatstring+0x174>
 8001476:	a201      	add	r2, pc, #4	; (adr r2, 800147c <ts_formatstring+0x4c>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	08001581 	.word	0x08001581
 8001480:	080015a5 	.word	0x080015a5
 8001484:	080015a5 	.word	0x080015a5
 8001488:	080015a5 	.word	0x080015a5
 800148c:	080015a5 	.word	0x080015a5
 8001490:	080015a5 	.word	0x080015a5
 8001494:	080015a5 	.word	0x080015a5
 8001498:	080015a5 	.word	0x080015a5
 800149c:	080015a5 	.word	0x080015a5
 80014a0:	080015a5 	.word	0x080015a5
 80014a4:	080015a5 	.word	0x080015a5
 80014a8:	08001501 	.word	0x08001501
 80014ac:	08001515 	.word	0x08001515
 80014b0:	080015a5 	.word	0x080015a5
 80014b4:	080015a5 	.word	0x080015a5
 80014b8:	080015a5 	.word	0x080015a5
 80014bc:	080015a5 	.word	0x080015a5
 80014c0:	08001515 	.word	0x08001515
 80014c4:	080015a5 	.word	0x080015a5
 80014c8:	080015a5 	.word	0x080015a5
 80014cc:	080015a5 	.word	0x080015a5
 80014d0:	080015a5 	.word	0x080015a5
 80014d4:	080015a5 	.word	0x080015a5
 80014d8:	080015a5 	.word	0x080015a5
 80014dc:	080015a5 	.word	0x080015a5
 80014e0:	080015a5 	.word	0x080015a5
 80014e4:	080015a5 	.word	0x080015a5
 80014e8:	08001545 	.word	0x08001545
 80014ec:	080015a5 	.word	0x080015a5
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	080015a5 	.word	0x080015a5
 80014f8:	080015a5 	.word	0x080015a5
 80014fc:	08001581 	.word	0x08001581
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1d1a      	adds	r2, r3, #4
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	6819      	ldr	r1, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60fa      	str	r2, [r7, #12]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
				break;
 8001512:	e047      	b.n	80015a4 <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1d1a      	adds	r2, r3, #4
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b00      	cmp	r3, #0
 8001522:	da07      	bge.n	8001534 <ts_formatstring+0x104>
					{
						val *= -1;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	425b      	negs	r3, r3
 8001528:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	60fa      	str	r2, [r7, #12]
 8001530:	222d      	movs	r2, #45	; 0x2d
 8001532:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001534:	69f9      	ldr	r1, [r7, #28]
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	220a      	movs	r2, #10
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff2d 	bl	800139c <ts_itoa>
				}
				break;
 8001542:	e02f      	b.n	80015a4 <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1d1a      	adds	r2, r3, #4
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800154e:	e007      	b.n	8001560 <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	1c53      	adds	r3, r2, #1
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1c59      	adds	r1, r3, #1
 800155a:	60f9      	str	r1, [r7, #12]
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f3      	bne.n	8001550 <ts_formatstring+0x120>
					}
				}
				break;
 8001568:	e01c      	b.n	80015a4 <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	1d1a      	adds	r2, r3, #4
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	220a      	movs	r2, #10
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff0f 	bl	800139c <ts_itoa>
				break;
 800157e:	e011      	b.n	80015a4 <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1d1a      	adds	r2, r3, #4
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2210      	movs	r2, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff03 	bl	800139c <ts_itoa>
				break;
 8001596:	e005      	b.n	80015a4 <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60fa      	str	r2, [r7, #12]
 800159e:	2225      	movs	r2, #37	; 0x25
 80015a0:	701a      	strb	r2, [r3, #0]
				  break;
 80015a2:	bf00      	nop
			}
			fmt++;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	e007      	b.n	80015bc <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	1c53      	adds	r3, r2, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1c59      	adds	r1, r3, #1
 80015b6:	60f9      	str	r1, [r7, #12]
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f af3e 	bne.w	8001442 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1ad3      	subs	r3, r2, r3
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	int length = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80015ea:	e080      	b.n	80016ee <ts_formatlength+0x112>
	{
		if (*fmt == '%')
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b25      	cmp	r3, #37	; 0x25
 80015f2:	d176      	bne.n	80016e2 <ts_formatlength+0x106>
		{
			++fmt;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3b58      	subs	r3, #88	; 0x58
 8001600:	2b20      	cmp	r3, #32
 8001602:	d86a      	bhi.n	80016da <ts_formatlength+0xfe>
 8001604:	a201      	add	r2, pc, #4	; (adr r2, 800160c <ts_formatlength+0x30>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	080016cd 	.word	0x080016cd
 8001610:	080016db 	.word	0x080016db
 8001614:	080016db 	.word	0x080016db
 8001618:	080016db 	.word	0x080016db
 800161c:	080016db 	.word	0x080016db
 8001620:	080016db 	.word	0x080016db
 8001624:	080016db 	.word	0x080016db
 8001628:	080016db 	.word	0x080016db
 800162c:	080016db 	.word	0x080016db
 8001630:	080016db 	.word	0x080016db
 8001634:	080016db 	.word	0x080016db
 8001638:	08001691 	.word	0x08001691
 800163c:	0800169f 	.word	0x0800169f
 8001640:	080016db 	.word	0x080016db
 8001644:	080016db 	.word	0x080016db
 8001648:	080016db 	.word	0x080016db
 800164c:	080016db 	.word	0x080016db
 8001650:	0800169f 	.word	0x0800169f
 8001654:	080016db 	.word	0x080016db
 8001658:	080016db 	.word	0x080016db
 800165c:	080016db 	.word	0x080016db
 8001660:	080016db 	.word	0x080016db
 8001664:	080016db 	.word	0x080016db
 8001668:	080016db 	.word	0x080016db
 800166c:	080016db 	.word	0x080016db
 8001670:	080016db 	.word	0x080016db
 8001674:	080016db 	.word	0x080016db
 8001678:	080016ad 	.word	0x080016ad
 800167c:	080016db 	.word	0x080016db
 8001680:	0800169f 	.word	0x0800169f
 8001684:	080016db 	.word	0x080016db
 8001688:	080016db 	.word	0x080016db
 800168c:	080016cd 	.word	0x080016cd
			{
			  case 'c':
		  		  va_arg(va, int);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3304      	adds	r3, #4
 8001694:	603b      	str	r3, [r7, #0]
				  ++length;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
				  break;
 800169c:	e024      	b.n	80016e8 <ts_formatlength+0x10c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	330b      	adds	r3, #11
 80016a2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3304      	adds	r3, #4
 80016a8:	603b      	str	r3, [r7, #0]
				  break;
 80016aa:	e01d      	b.n	80016e8 <ts_formatlength+0x10c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	1d1a      	adds	r2, r3, #4
 80016b0:	603a      	str	r2, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80016b6:	e002      	b.n	80016be <ts_formatlength+0xe2>
			  			  ++length;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	60ba      	str	r2, [r7, #8]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f6      	bne.n	80016b8 <ts_formatlength+0xdc>
			  	  }
				  break;
 80016ca:	e00d      	b.n	80016e8 <ts_formatlength+0x10c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3308      	adds	r3, #8
 80016d0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3304      	adds	r3, #4
 80016d6:	603b      	str	r3, [r7, #0]
				  break;
 80016d8:	e006      	b.n	80016e8 <ts_formatlength+0x10c>
			  default:
				  ++length;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
				  break;
 80016e0:	e002      	b.n	80016e8 <ts_formatlength+0x10c>
			}
		}
		else
		{
			++length;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f af7a 	bne.w	80015ec <ts_formatlength+0x10>
	}
	return length;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 8001704:	b40e      	push	{r1, r2, r3}
 8001706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	int length = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 8001714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001718:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800171e:	f7ff ff5d 	bl	80015dc <ts_formatlength>
 8001722:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 8001724:	466b      	mov	r3, sp
 8001726:	461e      	mov	r6, r3
		char buf[length];
 8001728:	6979      	ldr	r1, [r7, #20]
 800172a:	1e4b      	subs	r3, r1, #1
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	460a      	mov	r2, r1
 8001730:	2300      	movs	r3, #0
 8001732:	4690      	mov	r8, r2
 8001734:	4699      	mov	r9, r3
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800174a:	460a      	mov	r2, r1
 800174c:	2300      	movs	r3, #0
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	00eb      	lsls	r3, r5, #3
 800175c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001760:	00e2      	lsls	r2, r4, #3
 8001762:	460b      	mov	r3, r1
 8001764:	3307      	adds	r3, #7
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	ebad 0d03 	sub.w	sp, sp, r3
 800176e:	466b      	mov	r3, sp
 8001770:	3300      	adds	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 8001774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001778:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fe56 	bl	8001430 <ts_formatstring>
 8001784:	6178      	str	r0, [r7, #20]
		length = _write(stream->_file, buf, length);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe96 	bl	80004c2 <_write>
 8001796:	6178      	str	r0, [r7, #20]
 8001798:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800179a:	697b      	ldr	r3, [r7, #20]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017a6:	b003      	add	sp, #12
 80017a8:	4770      	bx	lr

080017aa <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80017aa:	b40f      	push	{r0, r1, r2, r3}
 80017ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
	int length = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80017b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017bc:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017c2:	f7ff ff0b 	bl	80015dc <ts_formatlength>
 80017c6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80017c8:	466b      	mov	r3, sp
 80017ca:	461e      	mov	r6, r3
		char buf[length];
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	1e4b      	subs	r3, r1, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	460a      	mov	r2, r1
 80017d4:	2300      	movs	r3, #0
 80017d6:	4690      	mov	r8, r2
 80017d8:	4699      	mov	r9, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ee:	460a      	mov	r2, r1
 80017f0:	2300      	movs	r3, #0
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	00eb      	lsls	r3, r5, #3
 8001800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001804:	00e2      	lsls	r2, r4, #3
 8001806:	460b      	mov	r3, r1
 8001808:	3307      	adds	r3, #7
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	ebad 0d03 	sub.w	sp, sp, r3
 8001812:	466b      	mov	r3, sp
 8001814:	3300      	adds	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8001818:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800181c:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fe04 	bl	8001430 <ts_formatstring>
 8001828:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	2001      	movs	r0, #1
 8001830:	f7fe fe47 	bl	80004c2 <_write>
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8001838:	68fb      	ldr	r3, [r7, #12]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001844:	b004      	add	sp, #16
 8001846:	4770      	bx	lr

08001848 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7fe fc7b 	bl	800014c <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	2001      	movs	r0, #1
 8001864:	f7fe fe2d 	bl	80004c2 <_write>
 8001868:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 800186a:	2201      	movs	r2, #1
 800186c:	490b      	ldr	r1, [pc, #44]	; (800189c <puts+0x54>)
 800186e:	2001      	movs	r0, #1
 8001870:	f7fe fe27 	bl	80004c2 <_write>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	3301      	adds	r3, #1
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d102      	bne.n	800188c <puts+0x44>
	{
		res = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e002      	b.n	8001892 <puts+0x4a>
	}
	else
	{
		res = EOF;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	617b      	str	r3, [r7, #20]
	}

	return res;
 8001892:	697b      	ldr	r3, [r7, #20]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	08004de0 	.word	0x08004de0

080018a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018a2:	490d      	ldr	r1, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b8:	4c0a      	ldr	r4, [pc, #40]	; (80018e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018c6:	f7ff fd63 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f003 f825 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ce:	f7ff fb53 	bl	8000f78 <main>
  bx lr
 80018d2:	4770      	bx	lr
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80018dc:	0800522c 	.word	0x0800522c
  ldr r2, =_sbss
 80018e0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80018e4:	20000574 	.word	0x20000574

080018e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC1_2_IRQHandler>

080018ea <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f001 f8da 	bl	8002aa8 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80018f4:	2011      	movs	r0, #17
 80018f6:	f001 f981 	bl	8002bfc <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}

080018fe <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 8001902:	2010      	movs	r0, #16
 8001904:	f001 f97a 	bl	8002bfc <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 8001908:	2000      	movs	r0, #0
 800190a:	f001 f8cd 	bl	8002aa8 <LCD_IO_Bl_OnOff>
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}

08001912 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8001916:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8001926:	23f0      	movs	r3, #240	; 0xf0
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 800193a:	1d39      	adds	r1, r7, #4
 800193c:	2301      	movs	r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	20d3      	movs	r0, #211	; 0xd3
 8001942:	f001 fa19 	bl	8002d78 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <ili9341_ReadID+0x30>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d102      	bne.n	8001954 <ili9341_ReadID+0x24>
    return 0x9341;
 800194e:	f249 3341 	movw	r3, #37697	; 0x9341
 8001952:	e000      	b.n	8001956 <ili9341_ReadID+0x26>
  else
    return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	00419300 	.word	0x00419300

08001964 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800196a:	4b52      	ldr	r3, [pc, #328]	; (8001ab4 <ili9341_Init+0x150>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8001976:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <ili9341_Init+0x150>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <ili9341_Init+0x150>)
 8001982:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <ili9341_Init+0x150>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <ili9341_Init+0x30>
      LCD_IO_Init();
 8001990:	f001 f8a0 	bl	8002ad4 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <ili9341_Init+0x150>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <ili9341_Init+0x150>)
 80019a0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80019a2:	200a      	movs	r0, #10
 80019a4:	f001 f874 	bl	8002a90 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f001 f927 	bl	8002bfc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80019ae:	200a      	movs	r0, #10
 80019b0:	f001 f86e 	bl	8002a90 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80019b4:	2203      	movs	r2, #3
 80019b6:	4940      	ldr	r1, [pc, #256]	; (8001ab8 <ili9341_Init+0x154>)
 80019b8:	20ef      	movs	r0, #239	; 0xef
 80019ba:	f001 f999 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80019be:	2203      	movs	r2, #3
 80019c0:	493e      	ldr	r1, [pc, #248]	; (8001abc <ili9341_Init+0x158>)
 80019c2:	20cf      	movs	r0, #207	; 0xcf
 80019c4:	f001 f994 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80019c8:	2204      	movs	r2, #4
 80019ca:	493d      	ldr	r1, [pc, #244]	; (8001ac0 <ili9341_Init+0x15c>)
 80019cc:	20ed      	movs	r0, #237	; 0xed
 80019ce:	f001 f98f 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80019d2:	2203      	movs	r2, #3
 80019d4:	493b      	ldr	r1, [pc, #236]	; (8001ac4 <ili9341_Init+0x160>)
 80019d6:	20e8      	movs	r0, #232	; 0xe8
 80019d8:	f001 f98a 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80019dc:	2205      	movs	r2, #5
 80019de:	493a      	ldr	r1, [pc, #232]	; (8001ac8 <ili9341_Init+0x164>)
 80019e0:	20cb      	movs	r0, #203	; 0xcb
 80019e2:	f001 f985 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80019e6:	2201      	movs	r2, #1
 80019e8:	4938      	ldr	r1, [pc, #224]	; (8001acc <ili9341_Init+0x168>)
 80019ea:	20f7      	movs	r0, #247	; 0xf7
 80019ec:	f001 f980 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 80019f0:	2202      	movs	r2, #2
 80019f2:	4937      	ldr	r1, [pc, #220]	; (8001ad0 <ili9341_Init+0x16c>)
 80019f4:	20ea      	movs	r0, #234	; 0xea
 80019f6:	f001 f97b 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	4935      	ldr	r1, [pc, #212]	; (8001ad4 <ili9341_Init+0x170>)
 80019fe:	20c0      	movs	r0, #192	; 0xc0
 8001a00:	f001 f976 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8001a04:	2201      	movs	r2, #1
 8001a06:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <ili9341_Init+0x174>)
 8001a08:	20c1      	movs	r0, #193	; 0xc1
 8001a0a:	f001 f971 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4932      	ldr	r1, [pc, #200]	; (8001adc <ili9341_Init+0x178>)
 8001a12:	20c5      	movs	r0, #197	; 0xc5
 8001a14:	f001 f96c 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4931      	ldr	r1, [pc, #196]	; (8001ae0 <ili9341_Init+0x17c>)
 8001a1c:	20c7      	movs	r0, #199	; 0xc7
 8001a1e:	f001 f967 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	492f      	ldr	r1, [pc, #188]	; (8001ae4 <ili9341_Init+0x180>)
 8001a26:	2037      	movs	r0, #55	; 0x37
 8001a28:	f001 f962 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	492e      	ldr	r1, [pc, #184]	; (8001ae8 <ili9341_Init+0x184>)
 8001a30:	203a      	movs	r0, #58	; 0x3a
 8001a32:	f001 f95d 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8001a36:	2202      	movs	r2, #2
 8001a38:	492c      	ldr	r1, [pc, #176]	; (8001aec <ili9341_Init+0x188>)
 8001a3a:	20b1      	movs	r0, #177	; 0xb1
 8001a3c:	f001 f958 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8001a40:	2203      	movs	r2, #3
 8001a42:	492b      	ldr	r1, [pc, #172]	; (8001af0 <ili9341_Init+0x18c>)
 8001a44:	20b6      	movs	r0, #182	; 0xb6
 8001a46:	f001 f953 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4925      	ldr	r1, [pc, #148]	; (8001ae4 <ili9341_Init+0x180>)
 8001a4e:	20f2      	movs	r0, #242	; 0xf2
 8001a50:	f001 f94e 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8001a54:	2201      	movs	r2, #1
 8001a56:	4927      	ldr	r1, [pc, #156]	; (8001af4 <ili9341_Init+0x190>)
 8001a58:	2026      	movs	r0, #38	; 0x26
 8001a5a:	f001 f949 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8001a5e:	220f      	movs	r2, #15
 8001a60:	4925      	ldr	r1, [pc, #148]	; (8001af8 <ili9341_Init+0x194>)
 8001a62:	20e0      	movs	r0, #224	; 0xe0
 8001a64:	f001 f944 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8001a68:	220f      	movs	r2, #15
 8001a6a:	4924      	ldr	r1, [pc, #144]	; (8001afc <ili9341_Init+0x198>)
 8001a6c:	20e1      	movs	r0, #225	; 0xe1
 8001a6e:	f001 f93f 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8001a72:	2036      	movs	r0, #54	; 0x36
 8001a74:	f001 f8c2 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001a78:	20e8      	movs	r0, #232	; 0xe8
 8001a7a:	f001 f8db 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8001a7e:	2011      	movs	r0, #17
 8001a80:	f001 f8bc 	bl	8002bfc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001a84:	200a      	movs	r0, #10
 8001a86:	f001 f803 	bl	8002a90 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	23f0      	movs	r3, #240	; 0xf0
 8001a90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a94:	2100      	movs	r1, #0
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 fa2c 	bl	8001ef4 <ili9341_FillRect>
  LCD_Delay(10);
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f000 fff7 	bl	8002a90 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8001aa2:	2029      	movs	r0, #41	; 0x29
 8001aa4:	f001 f8aa 	bl	8002bfc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	f000 fff1 	bl	8002a90 <LCD_Delay>
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000043c 	.word	0x2000043c
 8001ab8:	08004de4 	.word	0x08004de4
 8001abc:	08004de8 	.word	0x08004de8
 8001ac0:	08004dec 	.word	0x08004dec
 8001ac4:	08004df4 	.word	0x08004df4
 8001ac8:	08004df8 	.word	0x08004df8
 8001acc:	08004e00 	.word	0x08004e00
 8001ad0:	08004e04 	.word	0x08004e04
 8001ad4:	08004e08 	.word	0x08004e08
 8001ad8:	08004e0c 	.word	0x08004e0c
 8001adc:	08004e10 	.word	0x08004e10
 8001ae0:	08004e14 	.word	0x08004e14
 8001ae4:	08004e18 	.word	0x08004e18
 8001ae8:	08004e1c 	.word	0x08004e1c
 8001aec:	08004e20 	.word	0x08004e20
 8001af0:	08004e24 	.word	0x08004e24
 8001af4:	08004e28 	.word	0x08004e28
 8001af8:	08004e2c 	.word	0x08004e2c
 8001afc:	08004e3c 	.word	0x08004e3c

08001b00 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	80fb      	strh	r3, [r7, #6]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001b10:	202a      	movs	r0, #42	; 0x2a
 8001b12:	f001 f873 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 f888 	bl	8002c34 <LCD_IO_WriteData8>
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 f883 	bl	8002c34 <LCD_IO_WriteData8>
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 f87c 	bl	8002c34 <LCD_IO_WriteData8>
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 f877 	bl	8002c34 <LCD_IO_WriteData8>
 8001b46:	202b      	movs	r0, #43	; 0x2b
 8001b48:	f001 f858 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 f86d 	bl	8002c34 <LCD_IO_WriteData8>
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 f868 	bl	8002c34 <LCD_IO_WriteData8>
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 f861 	bl	8002c34 <LCD_IO_WriteData8>
 8001b72:	88bb      	ldrh	r3, [r7, #4]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 f85c 	bl	8002c34 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	80bb      	strh	r3, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001b96:	202a      	movs	r0, #42	; 0x2a
 8001b98:	f001 f830 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 f845 	bl	8002c34 <LCD_IO_WriteData8>
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 f840 	bl	8002c34 <LCD_IO_WriteData8>
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 f839 	bl	8002c34 <LCD_IO_WriteData8>
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 f834 	bl	8002c34 <LCD_IO_WriteData8>
 8001bcc:	202b      	movs	r0, #43	; 0x2b
 8001bce:	f001 f815 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 f82a 	bl	8002c34 <LCD_IO_WriteData8>
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 f825 	bl	8002c34 <LCD_IO_WriteData8>
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 f81e 	bl	8002c34 <LCD_IO_WriteData8>
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 f819 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8001c02:	202c      	movs	r0, #44	; 0x2c
 8001c04:	f000 fffa 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 f82e 	bl	8002c6c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	80fb      	strh	r3, [r7, #6]
 8001c24:	4613      	mov	r3, r2
 8001c26:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4925      	ldr	r1, [pc, #148]	; (8001cc0 <ili9341_ReadPixel+0xa8>)
 8001c2c:	203a      	movs	r0, #58	; 0x3a
 8001c2e:	f001 f85f 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001c32:	202a      	movs	r0, #42	; 0x2a
 8001c34:	f000 ffe2 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fff7 	bl	8002c34 <LCD_IO_WriteData8>
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fff2 	bl	8002c34 <LCD_IO_WriteData8>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 ffeb 	bl	8002c34 <LCD_IO_WriteData8>
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 ffe6 	bl	8002c34 <LCD_IO_WriteData8>
 8001c68:	202b      	movs	r0, #43	; 0x2b
 8001c6a:	f000 ffc7 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 ffdc 	bl	8002c34 <LCD_IO_WriteData8>
 8001c7c:	88bb      	ldrh	r3, [r7, #4]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 ffd7 	bl	8002c34 <LCD_IO_WriteData8>
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 ffd0 	bl	8002c34 <LCD_IO_WriteData8>
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 ffcb 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 8001c9e:	f107 010e 	add.w	r1, r7, #14
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	202e      	movs	r0, #46	; 0x2e
 8001ca8:	f001 f88c 	bl	8002dc4 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8001cac:	2201      	movs	r2, #1
 8001cae:	4905      	ldr	r1, [pc, #20]	; (8001cc4 <ili9341_ReadPixel+0xac>)
 8001cb0:	203a      	movs	r0, #58	; 0x3a
 8001cb2:	f001 f81d 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08004e4c 	.word	0x08004e4c
 8001cc4:	08004e1c 	.word	0x08004e1c

08001cc8 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4604      	mov	r4, r0
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	80fb      	strh	r3, [r7, #6]
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80bb      	strh	r3, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	807b      	strh	r3, [r7, #2]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8001ce6:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <ili9341_SetDisplayWindow+0xc8>)
 8001ce8:	88bb      	ldrh	r3, [r7, #4]
 8001cea:	8013      	strh	r3, [r2, #0]
 8001cec:	88ba      	ldrh	r2, [r7, #4]
 8001cee:	883b      	ldrh	r3, [r7, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <ili9341_SetDisplayWindow+0xcc>)
 8001cfa:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8001cfc:	202a      	movs	r0, #42	; 0x2a
 8001cfe:	f000 ff7d 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 ff92 	bl	8002c34 <LCD_IO_WriteData8>
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 ff8d 	bl	8002c34 <LCD_IO_WriteData8>
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b01      	subs	r3, #1
 8001d22:	121b      	asrs	r3, r3, #8
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 ff84 	bl	8002c34 <LCD_IO_WriteData8>
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 ff79 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001d42:	202b      	movs	r0, #43	; 0x2b
 8001d44:	f000 ff5a 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001d48:	88bb      	ldrh	r3, [r7, #4]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 ff6f 	bl	8002c34 <LCD_IO_WriteData8>
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 ff6a 	bl	8002c34 <LCD_IO_WriteData8>
 8001d60:	88ba      	ldrh	r2, [r7, #4]
 8001d62:	883b      	ldrh	r3, [r7, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	3b01      	subs	r3, #1
 8001d68:	121b      	asrs	r3, r3, #8
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 ff61 	bl	8002c34 <LCD_IO_WriteData8>
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	883b      	ldrh	r3, [r7, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 ff56 	bl	8002c34 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	2000043e 	.word	0x2000043e
 8001d94:	20000440 	.word	0x20000440

08001d98 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4604      	mov	r4, r0
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	80fb      	strh	r3, [r7, #6]
 8001daa:	4603      	mov	r3, r0
 8001dac:	80bb      	strh	r3, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	807b      	strh	r3, [r7, #2]
 8001db2:	4613      	mov	r3, r2
 8001db4:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8001db6:	202a      	movs	r0, #42	; 0x2a
 8001db8:	f000 ff20 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 ff35 	bl	8002c34 <LCD_IO_WriteData8>
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 ff30 	bl	8002c34 <LCD_IO_WriteData8>
 8001dd4:	88ba      	ldrh	r2, [r7, #4]
 8001dd6:	883b      	ldrh	r3, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	121b      	asrs	r3, r3, #8
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 ff27 	bl	8002c34 <LCD_IO_WriteData8>
 8001de6:	88bb      	ldrh	r3, [r7, #4]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	883b      	ldrh	r3, [r7, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 ff1c 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8001dfc:	202b      	movs	r0, #43	; 0x2b
 8001dfe:	f000 fefd 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 ff12 	bl	8002c34 <LCD_IO_WriteData8>
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 ff0d 	bl	8002c34 <LCD_IO_WriteData8>
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 ff06 	bl	8002c34 <LCD_IO_WriteData8>
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 ff01 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8001e32:	883a      	ldrh	r2, [r7, #0]
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	4619      	mov	r1, r3
 8001e38:	202c      	movs	r0, #44	; 0x2c
 8001e3a:	f000 ff33 	bl	8002ca4 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}

08001e46 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e46:	b590      	push	{r4, r7, lr}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	4608      	mov	r0, r1
 8001e50:	4611      	mov	r1, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4623      	mov	r3, r4
 8001e56:	80fb      	strh	r3, [r7, #6]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	80bb      	strh	r3, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8001e64:	202a      	movs	r0, #42	; 0x2a
 8001e66:	f000 fec9 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001e6a:	88bb      	ldrh	r3, [r7, #4]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fede 	bl	8002c34 <LCD_IO_WriteData8>
 8001e78:	88bb      	ldrh	r3, [r7, #4]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fed9 	bl	8002c34 <LCD_IO_WriteData8>
 8001e82:	88bb      	ldrh	r3, [r7, #4]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fed2 	bl	8002c34 <LCD_IO_WriteData8>
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fecd 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8001e9a:	202b      	movs	r0, #43	; 0x2b
 8001e9c:	f000 feae 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fec3 	bl	8002c34 <LCD_IO_WriteData8>
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 febe 	bl	8002c34 <LCD_IO_WriteData8>
 8001eb8:	887a      	ldrh	r2, [r7, #2]
 8001eba:	883b      	ldrh	r3, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	121b      	asrs	r3, r3, #8
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 feb5 	bl	8002c34 <LCD_IO_WriteData8>
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	883b      	ldrh	r3, [r7, #0]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 feaa 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8001ee0:	883a      	ldrh	r2, [r7, #0]
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	202c      	movs	r0, #44	; 0x2c
 8001ee8:	f000 fedc 	bl	8002ca4 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4604      	mov	r4, r0
 8001efc:	4608      	mov	r0, r1
 8001efe:	4611      	mov	r1, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	80fb      	strh	r3, [r7, #6]
 8001f06:	4603      	mov	r3, r0
 8001f08:	80bb      	strh	r3, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	807b      	strh	r3, [r7, #2]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8001f12:	202a      	movs	r0, #42	; 0x2a
 8001f14:	f000 fe72 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fe87 	bl	8002c34 <LCD_IO_WriteData8>
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fe82 	bl	8002c34 <LCD_IO_WriteData8>
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	4413      	add	r3, r2
 8001f36:	3b01      	subs	r3, #1
 8001f38:	121b      	asrs	r3, r3, #8
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fe79 	bl	8002c34 <LCD_IO_WriteData8>
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fe6e 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8001f58:	202b      	movs	r0, #43	; 0x2b
 8001f5a:	f000 fe4f 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001f5e:	88bb      	ldrh	r3, [r7, #4]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fe64 	bl	8002c34 <LCD_IO_WriteData8>
 8001f6c:	88bb      	ldrh	r3, [r7, #4]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fe5f 	bl	8002c34 <LCD_IO_WriteData8>
 8001f76:	88ba      	ldrh	r2, [r7, #4]
 8001f78:	883b      	ldrh	r3, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	121b      	asrs	r3, r3, #8
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fe56 	bl	8002c34 <LCD_IO_WriteData8>
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	883b      	ldrh	r3, [r7, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fe4b 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	883a      	ldrh	r2, [r7, #0]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	8b3b      	ldrh	r3, [r7, #24]
 8001faa:	4619      	mov	r1, r3
 8001fac:	202c      	movs	r0, #44	; 0x2c
 8001fae:	f000 fe79 	bl	8002ca4 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
	...

08001fbc <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	603a      	str	r2, [r7, #0]
 8001fc6:	80fb      	strh	r3, [r7, #6]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001fd2:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8001fda:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4413      	add	r3, r2
 8001fec:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 8001fee:	2036      	movs	r0, #54	; 0x36
 8001ff0:	f000 fe04 	bl	8002bfc <LCD_IO_WriteCmd8>
 8001ff4:	20a8      	movs	r0, #168	; 0xa8
 8001ff6:	f000 fe1d 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 8001ffa:	202b      	movs	r0, #43	; 0x2b
 8001ffc:	f000 fdfe 	bl	8002bfc <LCD_IO_WriteCmd8>
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <ili9341_DrawBitmap+0xb0>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002008:	121b      	asrs	r3, r3, #8
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fe11 	bl	8002c34 <LCD_IO_WriteData8>
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <ili9341_DrawBitmap+0xb0>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	f06f 0310 	mvn.w	r3, #16
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fe07 	bl	8002c34 <LCD_IO_WriteData8>
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <ili9341_DrawBitmap+0xb4>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800202e:	121b      	asrs	r3, r3, #8
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fdfe 	bl	8002c34 <LCD_IO_WriteData8>
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <ili9341_DrawBitmap+0xb4>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	f06f 0310 	mvn.w	r3, #16
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fdf4 	bl	8002c34 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	202c      	movs	r0, #44	; 0x2c
 8002052:	f000 fe6d 	bl	8002d30 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002056:	2036      	movs	r0, #54	; 0x36
 8002058:	f000 fdd0 	bl	8002bfc <LCD_IO_WriteCmd8>
 800205c:	20e8      	movs	r0, #232	; 0xe8
 800205e:	f000 fde9 	bl	8002c34 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000440 	.word	0x20000440
 8002070:	2000043e 	.word	0x2000043e

08002074 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4604      	mov	r4, r0
 800207c:	4608      	mov	r0, r1
 800207e:	4611      	mov	r1, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4623      	mov	r3, r4
 8002084:	80fb      	strh	r3, [r7, #6]
 8002086:	4603      	mov	r3, r0
 8002088:	80bb      	strh	r3, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	807b      	strh	r3, [r7, #2]
 800208e:	4613      	mov	r3, r2
 8002090:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002092:	883b      	ldrh	r3, [r7, #0]
 8002094:	887a      	ldrh	r2, [r7, #2]
 8002096:	88b9      	ldrh	r1, [r7, #4]
 8002098:	88f8      	ldrh	r0, [r7, #6]
 800209a:	f7ff fe15 	bl	8001cc8 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	883a      	ldrh	r2, [r7, #0]
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	69b9      	ldr	r1, [r7, #24]
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	f000 fe40 	bl	8002d30 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}

080020b8 <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4604      	mov	r4, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4623      	mov	r3, r4
 80020c8:	80fb      	strh	r3, [r7, #6]
 80020ca:	4603      	mov	r3, r0
 80020cc:	80bb      	strh	r3, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	807b      	strh	r3, [r7, #2]
 80020d2:	4613      	mov	r3, r2
 80020d4:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80020d6:	883b      	ldrh	r3, [r7, #0]
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	88b9      	ldrh	r1, [r7, #4]
 80020dc:	88f8      	ldrh	r0, [r7, #6]
 80020de:	f7ff fdf3 	bl	8001cc8 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 80020e2:	2201      	movs	r2, #1
 80020e4:	490b      	ldr	r1, [pc, #44]	; (8002114 <ili9341_ReadRGBImage+0x5c>)
 80020e6:	203a      	movs	r0, #58	; 0x3a
 80020e8:	f000 fe02 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	883a      	ldrh	r2, [r7, #0]
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	202e      	movs	r0, #46	; 0x2e
 80020fc:	f000 fe62 	bl	8002dc4 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8002100:	2201      	movs	r2, #1
 8002102:	4905      	ldr	r1, [pc, #20]	; (8002118 <ili9341_ReadRGBImage+0x60>)
 8002104:	203a      	movs	r0, #58	; 0x3a
 8002106:	f000 fdf3 	bl	8002cf0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	08004e4c 	.word	0x08004e4c
 8002118:	08004e1c 	.word	0x08004e1c

0800211c <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
 8002126:	460b      	mov	r3, r1
 8002128:	80bb      	strh	r3, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <ili9341_Scroll+0xb4>)
 8002130:	88db      	ldrh	r3, [r3, #6]
 8002132:	88ba      	ldrh	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d104      	bne.n	8002142 <ili9341_Scroll+0x26>
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <ili9341_Scroll+0xb4>)
 800213a:	885b      	ldrh	r3, [r3, #2]
 800213c:	887a      	ldrh	r2, [r7, #2]
 800213e:	429a      	cmp	r2, r3
 8002140:	d013      	beq.n	800216a <ili9341_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8002142:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <ili9341_Scroll+0xb4>)
 8002144:	88bb      	ldrh	r3, [r7, #4]
 8002146:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <ili9341_Scroll+0xb4>)
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 800214e:	88ba      	ldrh	r2, [r7, #4]
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	4413      	add	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <ili9341_Scroll+0xb4>)
 800215e:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 8002160:	2203      	movs	r2, #3
 8002162:	491c      	ldr	r1, [pc, #112]	; (80021d4 <ili9341_Scroll+0xb8>)
 8002164:	2033      	movs	r0, #51	; 0x33
 8002166:	f000 fde3 	bl	8002d30 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <ili9341_Scroll+0xb4>)
 8002170:	8892      	ldrh	r2, [r2, #4]
 8002172:	fb93 f1f2 	sdiv	r1, r3, r2
 8002176:	fb01 f202 	mul.w	r2, r1, r2
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 800217e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002182:	2b00      	cmp	r3, #0
 8002184:	da0a      	bge.n	800219c <ili9341_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <ili9341_Scroll+0xb4>)
 8002188:	889a      	ldrh	r2, [r3, #4]
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4413      	add	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <ili9341_Scroll+0xb4>)
 8002192:	885b      	ldrh	r3, [r3, #2]
 8002194:	4413      	add	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	e005      	b.n	80021a8 <ili9341_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <ili9341_Scroll+0xb4>)
 800219e:	885a      	ldrh	r2, [r3, #2]
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	4413      	add	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 80021a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ac:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <ili9341_Scroll+0xb4>)
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d009      	beq.n	80021c8 <ili9341_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 80021b4:	88fa      	ldrh	r2, [r7, #6]
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <ili9341_Scroll+0xb4>)
 80021b8:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <ili9341_Scroll+0xb4>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4619      	mov	r1, r3
 80021c2:	2037      	movs	r0, #55	; 0x37
 80021c4:	f000 fd6e 	bl	8002ca4 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000444 	.word	0x20000444
 80021d4:	20000446 	.word	0x20000446

080021d8 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <BSP_LCD_Init+0x3c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <BSP_LCD_Init+0x40>)
 80021ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f0:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <BSP_LCD_Init+0x40>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <BSP_LCD_Init+0x40>)
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <BSP_LCD_Init+0x44>)
 80021fc:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 80021fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002202:	f000 f825 	bl	8002250 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800220a:	79fb      	ldrb	r3, [r7, #7]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000070 	.word	0x20000070
 8002218:	2000044c 	.word	0x2000044c
 800221c:	20000000 	.word	0x20000000

08002220 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <BSP_LCD_GetXSize+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	4798      	blx	r3
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000070 	.word	0x20000070

08002238 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <BSP_LCD_GetYSize+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	4798      	blx	r3
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000070 	.word	0x20000070

08002250 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af02      	add	r7, sp, #8
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <BSP_LCD_Clear+0x38>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002260:	f7ff ffde 	bl	8002220 <BSP_LCD_GetXSize>
 8002264:	4603      	mov	r3, r0
 8002266:	461d      	mov	r5, r3
 8002268:	f7ff ffe6 	bl	8002238 <BSP_LCD_GetYSize>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	462a      	mov	r2, r5
 8002278:	2100      	movs	r1, #0
 800227a:	2000      	movs	r0, #0
 800227c:	47a0      	blx	r4
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bdb0      	pop	{r4, r5, r7, pc}
 8002286:	bf00      	nop
 8002288:	20000070 	.word	0x20000070

0800228c <__NVIC_EnableIRQ>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4906      	ldr	r1, [pc, #24]	; (80022c0 <__NVIC_EnableIRQ+0x34>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	; (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	; (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <LcdDirRead+0x70>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002328:	4a17      	ldr	r2, [pc, #92]	; (8002388 <LcdDirRead+0x70>)
 800232a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800232e:	6013      	str	r3, [r2, #0]
  while(d--)
 8002330:	e008      	b.n	8002344 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <LcdDirRead+0x74>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8002338:	2000      	movs	r0, #0
 800233a:	f000 fb99 	bl	8002a70 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <LcdDirRead+0x74>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  while(d--)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f1      	bne.n	8002332 <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <LcdDirRead+0x70>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002356:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <LcdDirRead+0x70>)
 8002358:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 800235c:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800235e:	e002      	b.n	8002366 <LcdDirRead+0x4e>
    d = SPIX->DR;
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <LcdDirRead+0x78>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <LcdDirRead+0x7c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f8      	bne.n	8002360 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <LcdDirRead+0x78>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8002376:	4a06      	ldr	r2, [pc, #24]	; (8002390 <LcdDirRead+0x78>)
 8002378:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 800237c:	6013      	str	r3, [r2, #0]
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40010c04 	.word	0x40010c04
 800238c:	422181b4 	.word	0x422181b4
 8002390:	40003800 	.word	0x40003800
 8002394:	42070100 	.word	0x42070100

08002398 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <LcdDirWrite+0x5c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <LcdDirWrite+0x5c>)
 80023a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a8:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80023aa:	e002      	b.n	80023b2 <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <LcdDirWrite+0x5c>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <LcdDirWrite+0x60>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f8      	bne.n	80023ac <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <LcdDirWrite+0x5c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <LcdDirWrite+0x5c>)
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f000 fb50 	bl	8002a70 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80023d0:	e002      	b.n	80023d8 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <LcdDirWrite+0x5c>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <LcdDirWrite+0x60>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f8      	bne.n	80023d2 <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <LcdDirWrite+0x5c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <LcdDirWrite+0x5c>)
 80023e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40003800 	.word	0x40003800
 80023f8:	42070100 	.word	0x42070100

080023fc <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <LcdWrite8+0x2c>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 800240c:	2002      	movs	r0, #2
 800240e:	f000 fb2f 	bl	8002a70 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8002412:	bf00      	nop
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <LcdWrite8+0x30>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1fb      	bne.n	8002414 <LcdWrite8+0x18>
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40003800 	.word	0x40003800
 800242c:	4207011c 	.word	0x4207011c

08002430 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <LcdCmdWrite8+0x34>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <LcdCmdWrite8+0x38>)
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8002446:	2002      	movs	r0, #2
 8002448:	f000 fb12 	bl	8002a70 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800244c:	bf00      	nop
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <LcdCmdWrite8+0x3c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1fb      	bne.n	800244e <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8002456:	4b03      	ldr	r3, [pc, #12]	; (8002464 <LcdCmdWrite8+0x34>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	422181ac 	.word	0x422181ac
 8002468:	40003800 	.word	0x40003800
 800246c:	4207011c 	.word	0x4207011c

08002470 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <LcdWrite16+0x2c>)
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 8002480:	2001      	movs	r0, #1
 8002482:	f000 faf5 	bl	8002a70 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8002486:	bf00      	nop
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <LcdWrite16+0x30>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1fb      	bne.n	8002488 <LcdWrite16+0x18>
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40003800 	.word	0x40003800
 80024a0:	4207011c 	.word	0x4207011c

080024a4 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 80024a8:	bf00      	nop
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <WaitForDmaEnd+0x18>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1fb      	bne.n	80024aa <WaitForDmaEnd+0x6>
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	20000458 	.word	0x20000458

080024c0 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <DMA1_Channel5_IRQHandler+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d023      	beq.n	8002518 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <DMA1_Channel5_IRQHandler+0x64>)
 80024d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d6:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <DMA1_Channel5_IRQHandler+0x68>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 80024de:	bf00      	nop
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <DMA1_Channel5_IRQHandler+0x68>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f9      	bne.n	80024e0 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <DMA1_Channel5_IRQHandler+0x6c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80024f2:	bf00      	nop
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <DMA1_Channel5_IRQHandler+0x70>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1fb      	bne.n	80024f4 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 80024fc:	2003      	movs	r0, #3
 80024fe:	f000 fab7 	bl	8002a70 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <DMA1_Channel5_IRQHandler+0x74>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d102      	bne.n	8002510 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <DMA1_Channel5_IRQHandler+0x78>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <DMA1_Channel5_IRQHandler+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8002516:	e003      	b.n	8002520 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <DMA1_Channel5_IRQHandler+0x64>)
 800251a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800251e:	605a      	str	r2, [r3, #4]
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40020000 	.word	0x40020000
 8002528:	40020058 	.word	0x40020058
 800252c:	42070084 	.word	0x42070084
 8002530:	4207011c 	.word	0x4207011c
 8002534:	20000458 	.word	0x20000458
 8002538:	422181b0 	.word	0x422181b0

0800253c <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <LCD_IO_WriteMultiData+0x74>)
 800254a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800254e:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <LCD_IO_WriteMultiData+0x78>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <LCD_IO_WriteMultiData+0x78>)
 8002556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800255a:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8002562:	bf00      	nop
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f9      	bne.n	8002564 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 8002578:	4a10      	ldr	r2, [pc, #64]	; (80025bc <LCD_IO_WriteMultiData+0x80>)
 800257a:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8002582:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <LCD_IO_WriteMultiData+0x84>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <LCD_IO_WriteMultiData+0x78>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <LCD_IO_WriteMultiData+0x78>)
 8002594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002598:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <LCD_IO_WriteMultiData+0x7c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40003800 	.word	0x40003800
 80025b8:	40020058 	.word	0x40020058
 80025bc:	4000380c 	.word	0x4000380c
 80025c0:	42070084 	.word	0x42070084

080025c4 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <LCD_IO_WriteMultiData8+0x98>)
 80025dc:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <LCD_IO_WriteMultiData8+0x98>)
 80025e0:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 80025e2:	f241 0312 	movw	r3, #4114	; 0x1012
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e030      	b.n	800264c <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 80025ea:	f241 0392 	movw	r3, #4242	; 0x1092
 80025ee:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 80025f0:	e02c      	b.n	800264c <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d80f      	bhi.n	800261c <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <LCD_IO_WriteMultiData8+0x9c>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff ff98 	bl	800253c <LCD_IO_WriteMultiData>
      Size = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01a      	beq.n	800264c <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8002616:	f7ff ff45 	bl	80024a4 <WaitForDmaEnd>
 800261a:	e017      	b.n	800264c <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <LCD_IO_WriteMultiData8+0x9c>)
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff ff87 	bl	800253c <LCD_IO_WriteMultiData>
      if(dinc)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800263a:	33fe      	adds	r3, #254	; 0xfe
 800263c:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002644:	3bfe      	subs	r3, #254	; 0xfe
 8002646:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8002648:	f7ff ff2c 	bl	80024a4 <WaitForDmaEnd>
  while(Size)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1cf      	bne.n	80025f2 <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000045c 	.word	0x2000045c
 8002660:	20000458 	.word	0x20000458

08002664 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <LCD_IO_WriteMultiData16+0xdc>)
 800267c:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <LCD_IO_WriteMultiData16+0xdc>)
 8002680:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8002682:	f241 5312 	movw	r3, #5394	; 0x1512
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e051      	b.n	800272e <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 800268a:	f241 5392 	movw	r3, #5522	; 0x1592
 800268e:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8002690:	e04d      	b.n	800272e <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002698:	4293      	cmp	r3, r2
 800269a:	d80f      	bhi.n	80026bc <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <LCD_IO_WriteMultiData16+0xe0>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f7ff ff48 	bl	800253c <LCD_IO_WriteMultiData>
      Size = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d03b      	beq.n	800272e <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 80026b6:	f7ff fef5 	bl	80024a4 <WaitForDmaEnd>
 80026ba:	e038      	b.n	800272e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <LCD_IO_WriteMultiData16+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d81b      	bhi.n	80026fc <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <LCD_IO_WriteMultiData16+0xe0>)
 80026c6:	2202      	movs	r2, #2
 80026c8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80026d0:	3bfe      	subs	r3, #254	; 0xfe
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4619      	mov	r1, r3
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff ff30 	bl	800253c <LCD_IO_WriteMultiData>
      if(dinc)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <LCD_IO_WriteMultiData16+0xe8>)
 80026e6:	4413      	add	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 80026f0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80026f4:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 80026f6:	f7ff fed5 	bl	80024a4 <WaitForDmaEnd>
 80026fa:	e018      	b.n	800272e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <LCD_IO_WriteMultiData16+0xe0>)
 80026fe:	2202      	movs	r2, #2
 8002700:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff ff17 	bl	800253c <LCD_IO_WriteMultiData>
      if(dinc)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800271a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800271e:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002726:	3bfe      	subs	r3, #254	; 0xfe
 8002728:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 800272a:	f7ff febb 	bl	80024a4 <WaitForDmaEnd>
  while(Size)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ae      	bne.n	8002692 <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000045e 	.word	0x2000045e
 8002744:	20000458 	.word	0x20000458
 8002748:	0001fffb 	.word	0x0001fffb
 800274c:	7fff0002 	.word	0x7fff0002

08002750 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <DMA1_Channel4_IRQHandler+0x98>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03a      	beq.n	80027d8 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <DMA1_Channel4_IRQHandler+0x98>)
 8002764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002768:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <DMA1_Channel4_IRQHandler+0x9c>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002770:	e002      	b.n	8002778 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <DMA1_Channel4_IRQHandler+0xa0>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <DMA1_Channel4_IRQHandler+0xa4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f8      	bne.n	8002772 <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <DMA1_Channel4_IRQHandler+0xa8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002788:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800278c:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <DMA1_Channel4_IRQHandler+0xa8>)
 800278e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002792:	f043 0318 	orr.w	r3, r3, #24
 8002796:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002798:	2001      	movs	r0, #1
 800279a:	f000 f969 	bl	8002a70 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800279e:	e003      	b.n	80027a8 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <DMA1_Channel4_IRQHandler+0xa8>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <DMA1_Channel4_IRQHandler+0xa4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f7      	bne.n	80027a0 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <DMA1_Channel4_IRQHandler+0xa8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <DMA1_Channel4_IRQHandler+0xa8>)
 80027b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ba:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <DMA1_Channel4_IRQHandler+0xac>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80027c2:	bf00      	nop
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <DMA1_Channel4_IRQHandler+0xac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <DMA1_Channel4_IRQHandler+0xb0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 80027d6:	e003      	b.n	80027e0 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <DMA1_Channel4_IRQHandler+0x98>)
 80027da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027de:	605a      	str	r2, [r3, #4]
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40020000 	.word	0x40020000
 80027ec:	42070080 	.word	0x42070080
 80027f0:	4000380c 	.word	0x4000380c
 80027f4:	42070100 	.word	0x42070100
 80027f8:	40003800 	.word	0x40003800
 80027fc:	40020044 	.word	0x40020044
 8002800:	20000458 	.word	0x20000458

08002804 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <LCD_IO_ReadMultiData+0x5c>)
 8002812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002816:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800281e:	bf00      	nop
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 8002834:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <LCD_IO_ReadMultiData+0x64>)
 8002836:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a06      	ldr	r2, [pc, #24]	; (8002864 <LCD_IO_ReadMultiData+0x60>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <LCD_IO_ReadMultiData+0x68>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40020000 	.word	0x40020000
 8002864:	40020044 	.word	0x40020044
 8002868:	4000380c 	.word	0x4000380c
 800286c:	42070080 	.word	0x42070080

08002870 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 800287a:	f241 0382 	movw	r3, #4226	; 0x1082
 800287e:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8002880:	e024      	b.n	80028cc <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002888:	4293      	cmp	r3, r2
 800288a:	d913      	bls.n	80028b4 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800288c:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <LCD_IO_ReadMultiData8+0x74>)
 800288e:	2202      	movs	r2, #2
 8002890:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ffb3 	bl	8002804 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80028a4:	3bfe      	subs	r3, #254	; 0xfe
 80028a6:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80028ae:	33fe      	adds	r3, #254	; 0xfe
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	e009      	b.n	80028c8 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <LCD_IO_ReadMultiData8+0x74>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	6839      	ldr	r1, [r7, #0]
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffa0 	bl	8002804 <LCD_IO_ReadMultiData>
      Size = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 80028c8:	f7ff fdec 	bl	80024a4 <WaitForDmaEnd>
  while(Size)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1d7      	bne.n	8002882 <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <LCD_IO_ReadMultiData8+0x78>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 80028d8:	f7ff fd5e 	bl	8002398 <LcdDirWrite>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000458 	.word	0x20000458
 80028e8:	422181b0 	.word	0x422181b0

080028ec <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <LCD_IO_ReadMultiData16to24+0x164>)
 8002900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002904:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8002906:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800290c:	bf00      	nop
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 800291c:	4a4e      	ldr	r2, [pc, #312]	; (8002a58 <LCD_IO_ReadMultiData16to24+0x16c>)
 800291e:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8002920:	4b4c      	ldr	r3, [pc, #304]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002922:	4a4e      	ldr	r2, [pc, #312]	; (8002a5c <LCD_IO_ReadMultiData16to24+0x170>)
 8002924:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8002926:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800292c:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 800292e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002932:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8002934:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002936:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 800293a:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 800293c:	4b45      	ldr	r3, [pc, #276]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a44      	ldr	r2, [pc, #272]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 8002948:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <LCD_IO_ReadMultiData16to24+0x174>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]
  while(Size)
 800294e:	e044      	b.n	80029da <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8002950:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	429a      	cmp	r2, r3
 8002958:	d03f      	beq.n	80029da <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8002966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296a:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	1c53      	adds	r3, r2, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1c59      	adds	r1, r3, #1
 800297c:	6139      	str	r1, [r7, #16]
 800297e:	4936      	ldr	r1, [pc, #216]	; (8002a58 <LCD_IO_ReadMultiData16to24+0x16c>)
 8002980:	5c8a      	ldrb	r2, [r1, r2]
 8002982:	3318      	adds	r3, #24
 8002984:	443b      	add	r3, r7
 8002986:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2bff      	cmp	r3, #255	; 0xff
 800298e:	d901      	bls.n	8002994 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d11f      	bne.n	80029da <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
        Size--;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 80029a4:	7a3b      	ldrb	r3, [r7, #8]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029ae:	f023 0307 	bic.w	r3, r3, #7
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	7a7b      	ldrb	r3, [r7, #9]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	7abb      	ldrb	r3, [r7, #10]
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b219      	sxth	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	b28a      	uxth	r2, r1
 80029d8:	801a      	strh	r2, [r3, #0]
  while(Size)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1b7      	bne.n	8002950 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <LCD_IO_ReadMultiData16to24+0x174>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80029e6:	e003      	b.n	80029f0 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <LCD_IO_ReadMultiData16to24+0x178>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <LCD_IO_ReadMultiData16to24+0x17c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f7      	bne.n	80029e8 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <LCD_IO_ReadMultiData16to24+0x178>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a00:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <LCD_IO_ReadMultiData16to24+0x178>)
 8002a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002a10:	2001      	movs	r0, #1
 8002a12:	f000 f82d 	bl	8002a70 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a16:	e003      	b.n	8002a20 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <LCD_IO_ReadMultiData16to24+0x178>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f7      	bne.n	8002a18 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002a2e:	bf00      	nop
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <LCD_IO_ReadMultiData16to24+0x168>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <LCD_IO_ReadMultiData16to24+0x180>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8002a42:	f7ff fca9 	bl	8002398 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020044 	.word	0x40020044
 8002a58:	20000460 	.word	0x20000460
 8002a5c:	4000380c 	.word	0x4000380c
 8002a60:	42070080 	.word	0x42070080
 8002a64:	40003800 	.word	0x40003800
 8002a68:	42070100 	.word	0x42070100
 8002a6c:	422181b0 	.word	0x422181b0

08002a70 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  while(c--);
 8002a78:	bf00      	nop
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	1e5a      	subs	r2, r3, #1
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1fa      	bne.n	8002a7a <LCD_IO_Delay+0xa>
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa1b 	bl	8002ed4 <HAL_Delay>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <LCD_IO_Bl_OnOff+0x28>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8002abe:	e002      	b.n	8002ac6 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <LCD_IO_Bl_OnOff+0x28>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	42220198 	.word	0x42220198

08002ad4 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8002ad8:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <LCD_IO_Init+0x104>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <LCD_IO_Init+0x104>)
 8002ade:	f043 0318 	orr.w	r3, r3, #24
 8002ae2:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 8002ae4:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <LCD_IO_Init+0x104>)
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <LCD_IO_Init+0x104>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8002af0:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <LCD_IO_Init+0x108>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <LCD_IO_Init+0x108>)
 8002afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002afe:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8002b00:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <LCD_IO_Init+0x10c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002b08:	4a35      	ldr	r2, [pc, #212]	; (8002be0 <LCD_IO_Init+0x10c>)
 8002b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f7ff ffc9 	bl	8002aa8 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b1e:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b24:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8002b26:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <LCD_IO_Init+0x110>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <LCD_IO_Init+0x114>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <LCD_IO_Init+0x118>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8002b38:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b42:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002b46:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002b50:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b52:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002b56:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <LCD_IO_Init+0x11c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8002b5e:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <LCD_IO_Init+0x120>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b6e:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8002b72:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b7c:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <LCD_IO_Init+0x108>)
 8002b7e:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8002b82:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <LCD_IO_Init+0x124>)
 8002b86:	f240 324f 	movw	r2, #847	; 0x34f
 8002b8a:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <LCD_IO_Init+0x124>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <LCD_IO_Init+0x124>)
 8002b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b96:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8002b98:	200a      	movs	r0, #10
 8002b9a:	f7ff ff79 	bl	8002a90 <LCD_Delay>
  LCD_RST_ON;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <LCD_IO_Init+0x110>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f7ff ff73 	bl	8002a90 <LCD_Delay>
  LCD_RST_OFF;
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <LCD_IO_Init+0x110>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8002bb0:	200a      	movs	r0, #10
 8002bb2:	f7ff ff6d 	bl	8002a90 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	200f      	movs	r0, #15
 8002bba:	f7ff fb83 	bl	80022c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8002bbe:	200f      	movs	r0, #15
 8002bc0:	f7ff fb64 	bl	800228c <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8002bc4:	210f      	movs	r1, #15
 8002bc6:	200e      	movs	r0, #14
 8002bc8:	f7ff fb7c 	bl	80022c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8002bcc:	200e      	movs	r0, #14
 8002bce:	f7ff fb5d 	bl	800228c <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010c04 	.word	0x40010c04
 8002be0:	40011000 	.word	0x40011000
 8002be4:	422181a8 	.word	0x422181a8
 8002be8:	422181ac 	.word	0x422181ac
 8002bec:	422181b0 	.word	0x422181b0
 8002bf0:	422181b4 	.word	0x422181b4
 8002bf4:	424203b8 	.word	0x424203b8
 8002bf8:	40003800 	.word	0x40003800

08002bfc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8002c06:	f7ff fc4d 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode8();
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <LCD_IO_WriteCmd8+0x30>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <LCD_IO_WriteCmd8+0x34>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fc09 	bl	8002430 <LcdCmdWrite8>
  LCD_CS_OFF;
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <LCD_IO_WriteCmd8+0x34>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	4207002c 	.word	0x4207002c
 8002c30:	422181b0 	.word	0x422181b0

08002c34 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8002c3e:	f7ff fc31 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode8();
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <LCD_IO_WriteData8+0x30>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <LCD_IO_WriteData8+0x34>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fbd3 	bl	80023fc <LcdWrite8>
  LCD_CS_OFF;
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <LCD_IO_WriteData8+0x34>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	4207002c 	.word	0x4207002c
 8002c68:	422181b0 	.word	0x422181b0

08002c6c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
 8002c76:	f7ff fc15 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode16();
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <LCD_IO_WriteData16+0x30>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <LCD_IO_WriteData16+0x34>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fbf1 	bl	8002470 <LcdWrite16>
  LCD_CS_OFF;
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <LCD_IO_WriteData16+0x34>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	4207002c 	.word	0x4207002c
 8002ca0:	422181b0 	.word	0x422181b0

08002ca4 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	603a      	str	r2, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8002cb4:	f7ff fbf6 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode8();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <LCD_IO_WriteCmd8DataFill16+0x48>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fbb2 	bl	8002430 <LcdCmdWrite8>
  LcdSpiMode16();
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	6839      	ldr	r1, [r7, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fcc3 	bl	8002664 <LCD_IO_WriteMultiData16>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	4207002c 	.word	0x4207002c
 8002cec:	422181b0 	.word	0x422181b0

08002cf0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002cfe:	f7ff fbd1 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode8();
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fb8d 	bl	8002430 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8002d16:	2201      	movs	r2, #1
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68b8      	ldr	r0, [r7, #8]
 8002d1c:	f7ff fc52 	bl	80025c4 <LCD_IO_WriteMultiData8>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	4207002c 	.word	0x4207002c
 8002d2c:	422181b0 	.word	0x422181b0

08002d30 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002d3e:	f7ff fbb1 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode8();
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fb6d 	bl	8002430 <LcdCmdWrite8>
  LcdSpiMode16();
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68b8      	ldr	r0, [r7, #8]
 8002d62:	f7ff fc7f 	bl	8002664 <LCD_IO_WriteMultiData16>
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	4207002c 	.word	0x4207002c
 8002d74:	422181b0 	.word	0x422181b0

08002d78 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002d88:	f7ff fb8c 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode8();
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fb48 	bl	8002430 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8002da6:	6838      	ldr	r0, [r7, #0]
 8002da8:	f7ff fab6 	bl	8002318 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68b8      	ldr	r0, [r7, #8]
 8002db0:	f7ff fd5e 	bl	8002870 <LCD_IO_ReadMultiData8>
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	4207002c 	.word	0x4207002c
 8002dc0:	422181b0 	.word	0x422181b0

08002dc4 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002dd4:	f7ff fb66 	bl	80024a4 <WaitForDmaEnd>
  LcdSpiMode8();
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fb22 	bl	8002430 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8002df2:	6838      	ldr	r0, [r7, #0]
 8002df4:	f7ff fa90 	bl	8002318 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	68b8      	ldr	r0, [r7, #8]
 8002dfc:	f7ff fd76 	bl	80028ec <LCD_IO_ReadMultiData16to24>
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	4207002c 	.word	0x4207002c
 8002e0c:	422181b0 	.word	0x422181b0

08002e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_Init+0x28>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_Init+0x28>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f000 fb59 	bl	80034d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e26:	200f      	movs	r0, #15
 8002e28:	f000 f808 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2c:	f7fe f8c6 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_InitTick+0x54>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_InitTick+0x58>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fb71 	bl	8003542 <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00e      	b.n	8002e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d80a      	bhi.n	8002e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f000 fb39 	bl	80034ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <HAL_InitTick+0x5c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000028 	.word	0x20000028
 8002e94:	20000078 	.word	0x20000078
 8002e98:	20000074 	.word	0x20000074

08002e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_IncTick+0x1c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_IncTick+0x20>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <HAL_IncTick+0x20>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000078 	.word	0x20000078
 8002ebc:	20000560 	.word	0x20000560

08002ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_GetTick+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	20000560 	.word	0x20000560

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffe0 	bl	8002ec0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000078 	.word	0x20000078

08002f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0be      	b.n	80030bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f860 	bl	8001020 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9ab 	bl	80032bc <ADC_ConversionStop_Disable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8099 	bne.w	80030aa <HAL_ADC_Init+0x18e>
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 8095 	bne.w	80030aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f88:	f023 0302 	bic.w	r3, r3, #2
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b1b      	ldrb	r3, [r3, #12]
 8002fa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d003      	beq.n	8002fbe <HAL_ADC_Init+0xa2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_Init+0xa8>
 8002fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_Init+0xaa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7d1b      	ldrb	r3, [r3, #20]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d119      	bne.n	8003008 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7b1b      	ldrb	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	035a      	lsls	r2, r3, #13
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e00b      	b.n	8003008 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_ADC_Init+0x1a8>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d003      	beq.n	8003042 <HAL_ADC_Init+0x126>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d104      	bne.n	800304c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	3b01      	subs	r3, #1
 8003048:	051b      	lsls	r3, r3, #20
 800304a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_ADC_Init+0x1ac>)
 8003068:	4013      	ands	r3, r2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003086:	e018      	b.n	80030ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f023 0312 	bic.w	r3, r3, #18
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	ffe1f7fd 	.word	0xffe1f7fd
 80030c8:	ff1f0efe 	.word	0xff1f0efe

080030cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x20>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0dc      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x1da>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d81c      	bhi.n	8003136 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3b05      	subs	r3, #5
 800310e:	221f      	movs	r2, #31
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	4019      	ands	r1, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	3b05      	subs	r3, #5
 8003128:	fa00 f203 	lsl.w	r2, r0, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	635a      	str	r2, [r3, #52]	; 0x34
 8003134:	e03c      	b.n	80031b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d81c      	bhi.n	8003178 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	3b23      	subs	r3, #35	; 0x23
 8003150:	221f      	movs	r2, #31
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	4019      	ands	r1, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	3b23      	subs	r3, #35	; 0x23
 800316a:	fa00 f203 	lsl.w	r2, r0, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
 8003176:	e01b      	b.n	80031b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b41      	subs	r3, #65	; 0x41
 800318a:	221f      	movs	r2, #31
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	4019      	ands	r1, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b41      	subs	r3, #65	; 0x41
 80031a4:	fa00 f203 	lsl.w	r2, r0, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	d91c      	bls.n	80031f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68d9      	ldr	r1, [r3, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	3b1e      	subs	r3, #30
 80031ca:	2207      	movs	r2, #7
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4019      	ands	r1, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6898      	ldr	r0, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	3b1e      	subs	r3, #30
 80031e4:	fa00 f203 	lsl.w	r2, r0, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	e019      	b.n	8003226 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6919      	ldr	r1, [r3, #16]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	2207      	movs	r2, #7
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	4019      	ands	r1, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6898      	ldr	r0, [r3, #8]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	fa00 f203 	lsl.w	r2, r0, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b10      	cmp	r3, #16
 800322c:	d003      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003232:	2b11      	cmp	r3, #17
 8003234:	d132      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d125      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d126      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800325c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b10      	cmp	r3, #16
 8003264:	d11a      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	0c9a      	lsrs	r2, r3, #18
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800327c:	e002      	b.n	8003284 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3b01      	subs	r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f9      	bne.n	800327e <HAL_ADC_ConfigChannel+0x1b2>
 800328a:	e007      	b.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40012400 	.word	0x40012400
 80032b4:	20000028 	.word	0x20000028
 80032b8:	431bde83 	.word	0x431bde83

080032bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d12e      	bne.n	8003334 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032e6:	f7ff fdeb 	bl	8002ec0 <HAL_GetTick>
 80032ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ec:	e01b      	b.n	8003326 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ee:	f7ff fde7 	bl	8002ec0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d914      	bls.n	8003326 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d10d      	bne.n	8003326 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e007      	b.n	8003336 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d0dc      	beq.n	80032ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <__NVIC_SetPriorityGrouping>:
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4906      	ldr	r1, [pc, #24]	; (80033d8 <__NVIC_EnableIRQ+0x34>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <SysTick_Config>:
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a4:	d301      	bcc.n	80034aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00f      	b.n	80034ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <SysTick_Config+0x40>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b2:	210f      	movs	r1, #15
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	f7ff ff90 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <SysTick_Config+0x40>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <SysTick_Config+0x40>)
 80034c4:	2207      	movs	r2, #7
 80034c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000e010 	.word	0xe000e010

080034d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff2d 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff42 	bl	8003388 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff90 	bl	8003430 <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5f 	bl	80033dc <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff35 	bl	80033a4 <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffa2 	bl	8003494 <SysTick_Config>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e043      	b.n	80035fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_DMA_Init+0xa8>)
 800357a:	4413      	add	r3, r2
 800357c:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_DMA_Init+0xac>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_DMA_Init+0xb0>)
 800358e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	bffdfff8 	.word	0xbffdfff8
 8003608:	cccccccd 	.word	0xcccccccd
 800360c:	40020000 	.word	0x40020000

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b08b      	sub	sp, #44	; 0x2c
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	e169      	b.n	80038f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003624:	2201      	movs	r2, #1
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 8158 	bne.w	80038f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a9a      	ldr	r2, [pc, #616]	; (80038b0 <HAL_GPIO_Init+0x2a0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d05e      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 800364c:	4a98      	ldr	r2, [pc, #608]	; (80038b0 <HAL_GPIO_Init+0x2a0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d875      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003652:	4a98      	ldr	r2, [pc, #608]	; (80038b4 <HAL_GPIO_Init+0x2a4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d058      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003658:	4a96      	ldr	r2, [pc, #600]	; (80038b4 <HAL_GPIO_Init+0x2a4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d86f      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800365e:	4a96      	ldr	r2, [pc, #600]	; (80038b8 <HAL_GPIO_Init+0x2a8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d052      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003664:	4a94      	ldr	r2, [pc, #592]	; (80038b8 <HAL_GPIO_Init+0x2a8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d869      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800366a:	4a94      	ldr	r2, [pc, #592]	; (80038bc <HAL_GPIO_Init+0x2ac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d04c      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003670:	4a92      	ldr	r2, [pc, #584]	; (80038bc <HAL_GPIO_Init+0x2ac>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d863      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003676:	4a92      	ldr	r2, [pc, #584]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d046      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 800367c:	4a90      	ldr	r2, [pc, #576]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d85d      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003682:	2b12      	cmp	r3, #18
 8003684:	d82a      	bhi.n	80036dc <HAL_GPIO_Init+0xcc>
 8003686:	2b12      	cmp	r3, #18
 8003688:	d859      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <HAL_GPIO_Init+0x80>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	0800370b 	.word	0x0800370b
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036f7 	.word	0x080036f7
 800369c:	08003739 	.word	0x08003739
 80036a0:	0800373f 	.word	0x0800373f
 80036a4:	0800373f 	.word	0x0800373f
 80036a8:	0800373f 	.word	0x0800373f
 80036ac:	0800373f 	.word	0x0800373f
 80036b0:	0800373f 	.word	0x0800373f
 80036b4:	0800373f 	.word	0x0800373f
 80036b8:	0800373f 	.word	0x0800373f
 80036bc:	0800373f 	.word	0x0800373f
 80036c0:	0800373f 	.word	0x0800373f
 80036c4:	0800373f 	.word	0x0800373f
 80036c8:	0800373f 	.word	0x0800373f
 80036cc:	0800373f 	.word	0x0800373f
 80036d0:	0800373f 	.word	0x0800373f
 80036d4:	080036ed 	.word	0x080036ed
 80036d8:	08003701 	.word	0x08003701
 80036dc:	4a79      	ldr	r2, [pc, #484]	; (80038c4 <HAL_GPIO_Init+0x2b4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036e2:	e02c      	b.n	800373e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	623b      	str	r3, [r7, #32]
          break;
 80036ea:	e029      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	3304      	adds	r3, #4
 80036f2:	623b      	str	r3, [r7, #32]
          break;
 80036f4:	e024      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	3308      	adds	r3, #8
 80036fc:	623b      	str	r3, [r7, #32]
          break;
 80036fe:	e01f      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	330c      	adds	r3, #12
 8003706:	623b      	str	r3, [r7, #32]
          break;
 8003708:	e01a      	b.n	8003740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003712:	2304      	movs	r3, #4
 8003714:	623b      	str	r3, [r7, #32]
          break;
 8003716:	e013      	b.n	8003740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003720:	2308      	movs	r3, #8
 8003722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	611a      	str	r2, [r3, #16]
          break;
 800372a:	e009      	b.n	8003740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800372c:	2308      	movs	r3, #8
 800372e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	615a      	str	r2, [r3, #20]
          break;
 8003736:	e003      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
          break;
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x130>
          break;
 800373e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2bff      	cmp	r3, #255	; 0xff
 8003744:	d801      	bhi.n	800374a <HAL_GPIO_Init+0x13a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	e001      	b.n	800374e <HAL_GPIO_Init+0x13e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2bff      	cmp	r3, #255	; 0xff
 8003754:	d802      	bhi.n	800375c <HAL_GPIO_Init+0x14c>
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	e002      	b.n	8003762 <HAL_GPIO_Init+0x152>
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	3b08      	subs	r3, #8
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	210f      	movs	r1, #15
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	6a39      	ldr	r1, [r7, #32]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	431a      	orrs	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80b1 	beq.w	80038f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003790:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <HAL_GPIO_Init+0x2b8>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a4c      	ldr	r2, [pc, #304]	; (80038c8 <HAL_GPIO_Init+0x2b8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6193      	str	r3, [r2, #24]
 800379c:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <HAL_GPIO_Init+0x2b8>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037a8:	4a48      	ldr	r2, [pc, #288]	; (80038cc <HAL_GPIO_Init+0x2bc>)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3302      	adds	r3, #2
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	220f      	movs	r2, #15
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <HAL_GPIO_Init+0x2c0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_GPIO_Init+0x1ec>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <HAL_GPIO_Init+0x2c4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_GPIO_Init+0x1e8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3e      	ldr	r2, [pc, #248]	; (80038d8 <HAL_GPIO_Init+0x2c8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <HAL_GPIO_Init+0x1e4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3d      	ldr	r2, [pc, #244]	; (80038dc <HAL_GPIO_Init+0x2cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_GPIO_Init+0x1e0>
 80037ec:	2303      	movs	r3, #3
 80037ee:	e006      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f0:	2304      	movs	r3, #4
 80037f2:	e004      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e002      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037fc:	2300      	movs	r3, #0
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	f002 0203 	and.w	r2, r2, #3
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	4093      	lsls	r3, r2
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800380e:	492f      	ldr	r1, [pc, #188]	; (80038cc <HAL_GPIO_Init+0x2bc>)
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	492c      	ldr	r1, [pc, #176]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e006      	b.n	8003844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	43db      	mvns	r3, r3
 800383e:	4928      	ldr	r1, [pc, #160]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003840:	4013      	ands	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	4922      	ldr	r1, [pc, #136]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	43db      	mvns	r3, r3
 8003866:	491e      	ldr	r1, [pc, #120]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003868:	4013      	ands	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d006      	beq.n	8003886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4918      	ldr	r1, [pc, #96]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	43db      	mvns	r3, r3
 800388e:	4914      	ldr	r1, [pc, #80]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003890:	4013      	ands	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d021      	beq.n	80038e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
 80038ac:	e021      	b.n	80038f2 <HAL_GPIO_Init+0x2e2>
 80038ae:	bf00      	nop
 80038b0:	10320000 	.word	0x10320000
 80038b4:	10310000 	.word	0x10310000
 80038b8:	10220000 	.word	0x10220000
 80038bc:	10210000 	.word	0x10210000
 80038c0:	10120000 	.word	0x10120000
 80038c4:	10110000 	.word	0x10110000
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40010800 	.word	0x40010800
 80038d4:	40010c00 	.word	0x40010c00
 80038d8:	40011000 	.word	0x40011000
 80038dc:	40011400 	.word	0x40011400
 80038e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_GPIO_Init+0x304>)
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4909      	ldr	r1, [pc, #36]	; (8003914 <HAL_GPIO_Init+0x304>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f47f ae8e 	bne.w	8003624 <HAL_GPIO_Init+0x14>
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	372c      	adds	r7, #44	; 0x2c
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40010400 	.word	0x40010400

08003918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
 8003934:	e001      	b.n	800393a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	807b      	strh	r3, [r7, #2]
 8003952:	4613      	mov	r3, r2
 8003954:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003956:	787b      	ldrb	r3, [r7, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800395c:	887a      	ldrh	r2, [r7, #2]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003962:	e003      	b.n	800396c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	041a      	lsls	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	611a      	str	r2, [r3, #16]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
	...

08003978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800398e:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f82e 	bl	80009f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40010400 	.word	0x40010400

080039a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e12b      	b.n	8003c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fb62 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f000 fce4 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a81      	ldr	r2, [pc, #516]	; (8003c1c <HAL_I2C_Init+0x274>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d807      	bhi.n	8003a2c <HAL_I2C_Init+0x84>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a80      	ldr	r2, [pc, #512]	; (8003c20 <HAL_I2C_Init+0x278>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e006      	b.n	8003a3a <HAL_I2C_Init+0x92>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a7d      	ldr	r2, [pc, #500]	; (8003c24 <HAL_I2C_Init+0x27c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	bf94      	ite	ls
 8003a34:	2301      	movls	r3, #1
 8003a36:	2300      	movhi	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0e7      	b.n	8003c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a78      	ldr	r2, [pc, #480]	; (8003c28 <HAL_I2C_Init+0x280>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0c9b      	lsrs	r3, r3, #18
 8003a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <HAL_I2C_Init+0x274>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d802      	bhi.n	8003a7c <HAL_I2C_Init+0xd4>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	e009      	b.n	8003a90 <HAL_I2C_Init+0xe8>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	4a69      	ldr	r2, [pc, #420]	; (8003c2c <HAL_I2C_Init+0x284>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	3301      	adds	r3, #1
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	495c      	ldr	r1, [pc, #368]	; (8003c1c <HAL_I2C_Init+0x274>)
 8003aac:	428b      	cmp	r3, r1
 8003aae:	d819      	bhi.n	8003ae4 <HAL_I2C_Init+0x13c>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e59      	subs	r1, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003abe:	1c59      	adds	r1, r3, #1
 8003ac0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_I2C_Init+0x138>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e59      	subs	r1, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ade:	e051      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	e04f      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d111      	bne.n	8003b10 <HAL_I2C_Init+0x168>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e012      	b.n	8003b36 <HAL_I2C_Init+0x18e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	0099      	lsls	r1, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Init+0x196>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e022      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10e      	bne.n	8003b64 <HAL_I2C_Init+0x1bc>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e58      	subs	r0, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	440b      	add	r3, r1
 8003b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	e00f      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1e58      	subs	r0, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	0099      	lsls	r1, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	6809      	ldr	r1, [r1, #0]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6911      	ldr	r1, [r2, #16]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	4311      	orrs	r1, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	000186a0 	.word	0x000186a0
 8003c20:	001e847f 	.word	0x001e847f
 8003c24:	003d08ff 	.word	0x003d08ff
 8003c28:	431bde83 	.word	0x431bde83
 8003c2c:	10624dd3 	.word	0x10624dd3

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e272      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8087 	beq.w	8003d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c50:	4b92      	ldr	r3, [pc, #584]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d00c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d112      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
 8003c68:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d10b      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d06c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x12c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d168      	bne.n	8003d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e24c      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x76>
 8003c98:	4b80      	ldr	r3, [pc, #512]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7f      	ldr	r2, [pc, #508]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e02e      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b7b      	ldr	r3, [pc, #492]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7a      	ldr	r2, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b78      	ldr	r3, [pc, #480]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a77      	ldr	r2, [pc, #476]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0xbc>
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a71      	ldr	r2, [pc, #452]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6e      	ldr	r2, [pc, #440]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cec:	4b6b      	ldr	r3, [pc, #428]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a67      	ldr	r2, [pc, #412]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7ff f8d8 	bl	8002ec0 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7ff f8d4 	bl	8002ec0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e200      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xe4>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7ff f8c4 	bl	8002ec0 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7ff f8c0 	bl	8002ec0 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1ec      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x10c>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6a:	4b4c      	ldr	r3, [pc, #304]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
 8003d82:	4b46      	ldr	r3, [pc, #280]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1c0      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4939      	ldr	r1, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7ff f879 	bl	8002ec0 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7ff f875 	bl	8002ec0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1a1      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4927      	ldr	r1, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7ff f858 	bl	8002ec0 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e14:	f7ff f854 	bl	8002ec0 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e180      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03a      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d019      	beq.n	8003e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7ff f838 	bl	8002ec0 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e54:	f7ff f834 	bl	8002ec0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e160      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f000 fac4 	bl	8004400 <RCC_Delay>
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7ff f81e 	bl	8002ec0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e86:	e00f      	b.n	8003ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e88:	f7ff f81a 	bl	8002ec0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d908      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e146      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	42420000 	.word	0x42420000
 8003ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b92      	ldr	r3, [pc, #584]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e9      	bne.n	8003e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a6 	beq.w	800400e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec6:	4b8b      	ldr	r3, [pc, #556]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4a87      	ldr	r2, [pc, #540]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	61d3      	str	r3, [r2, #28]
 8003ede:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b82      	ldr	r3, [pc, #520]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7e      	ldr	r2, [pc, #504]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fe ffdb 	bl	8002ec0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe ffd7 	bl	8002ec0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e103      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x312>
 8003f34:	4b6f      	ldr	r3, [pc, #444]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4a6e      	ldr	r2, [pc, #440]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6213      	str	r3, [r2, #32]
 8003f40:	e02d      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f4a:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4a69      	ldr	r2, [pc, #420]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6213      	str	r3, [r2, #32]
 8003f56:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a66      	ldr	r2, [pc, #408]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6213      	str	r3, [r2, #32]
 8003f62:	e01c      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x356>
 8003f6c:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a60      	ldr	r2, [pc, #384]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	e00b      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f86:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a5a      	ldr	r2, [pc, #360]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	4b58      	ldr	r3, [pc, #352]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe ff8b 	bl	8002ec0 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe ff87 	bl	8002ec0 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0b1      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCC_OscConfig+0x37e>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe ff75 	bl	8002ec0 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe ff71 	bl	8002ec0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e09b      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b3c      	ldr	r3, [pc, #240]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4a3b      	ldr	r2, [pc, #236]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8087 	beq.w	8004126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d061      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d146      	bne.n	80040ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402c:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_RCC_OscConfig+0x4cc>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe ff45 	bl	8002ec0 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe ff41 	bl	8002ec0 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e06d      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d108      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4921      	ldr	r1, [pc, #132]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a19      	ldr	r1, [r3, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	430b      	orrs	r3, r1
 8004086:	491b      	ldr	r1, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x4cc>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe ff15 	bl	8002ec0 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe ff11 	bl	8002ec0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e03d      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x46a>
 80040b8:	e035      	b.n	8004126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCC_OscConfig+0x4cc>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fefe 	bl	8002ec0 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fefa 	bl	8002ec0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e026      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x498>
 80040e6:	e01e      	b.n	8004126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e019      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_OscConfig+0x500>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	429a      	cmp	r2, r3
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000

08004134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d0      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4965      	ldr	r1, [pc, #404]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a58      	ldr	r2, [pc, #352]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800419a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a52      	ldr	r2, [pc, #328]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d040      	beq.n	8004254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d115      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e073      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06b      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4936      	ldr	r1, [pc, #216]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fe fe4c 	bl	8002ec0 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fe fe48 	bl	8002ec0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e053      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d210      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4922      	ldr	r1, [pc, #136]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	; (80042fc <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1cc>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1d0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fdaa 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40022000 	.word	0x40022000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	080051d0 	.word	0x080051d0
 8004300:	20000028 	.word	0x20000028
 8004304:	20000074 	.word	0x20000074

08004308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	b490      	push	{r4, r7}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800430e:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004310:	1d3c      	adds	r4, r7, #4
 8004312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004318:	f240 2301 	movw	r3, #513	; 0x201
 800431c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	2300      	movs	r3, #0
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b04      	cmp	r3, #4
 8004340:	d002      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x40>
 8004342:	2b08      	cmp	r3, #8
 8004344:	d003      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x46>
 8004346:	e02b      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004348:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800434a:	623b      	str	r3, [r7, #32]
      break;
 800434c:	e02b      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	0c9b      	lsrs	r3, r3, #18
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	3328      	adds	r3, #40	; 0x28
 8004358:	443b      	add	r3, r7
 800435a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800435e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	0c5b      	lsrs	r3, r3, #17
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	3328      	adds	r3, #40	; 0x28
 8004376:	443b      	add	r3, r7
 8004378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800437c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004382:	fb03 f202 	mul.w	r2, r3, r2
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e004      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	623b      	str	r3, [r7, #32]
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80043a2:	623b      	str	r3, [r7, #32]
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc90      	pop	{r4, r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	08004e50 	.word	0x08004e50
 80043b8:	40021000 	.word	0x40021000
 80043bc:	007a1200 	.word	0x007a1200
 80043c0:	003d0900 	.word	0x003d0900

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000028 	.word	0x20000028

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff2 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	080051e0 	.word	0x080051e0

08004400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <RCC_Delay+0x34>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <RCC_Delay+0x38>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	0a5b      	lsrs	r3, r3, #9
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800441c:	bf00      	nop
  }
  while (Delay --);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1e5a      	subs	r2, r3, #1
 8004422:	60fa      	str	r2, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f9      	bne.n	800441c <RCC_Delay+0x1c>
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr
 8004434:	20000028 	.word	0x20000028
 8004438:	10624dd3 	.word	0x10624dd3

0800443c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d07d      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445c:	4b4f      	ldr	r3, [pc, #316]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	4b4c      	ldr	r3, [pc, #304]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4a4b      	ldr	r2, [pc, #300]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	61d3      	str	r3, [r2, #28]
 8004474:	4b49      	ldr	r3, [pc, #292]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d118      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004490:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449c:	f7fe fd10 	bl	8002ec0 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	e008      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fe fd0c 	bl	8002ec0 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e06d      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044c2:	4b36      	ldr	r3, [pc, #216]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d02e      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d027      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e0:	4b2e      	ldr	r3, [pc, #184]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f0:	4b2c      	ldr	r3, [pc, #176]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044f6:	4a29      	ldr	r2, [pc, #164]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d014      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fe fcdb 	bl	8002ec0 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe fcd7 	bl	8002ec0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e036      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4917      	ldr	r1, [pc, #92]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	4313      	orrs	r3, r2
 8004540:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	4a13      	ldr	r2, [pc, #76]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004552:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	490b      	ldr	r1, [pc, #44]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4904      	ldr	r1, [pc, #16]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	40007000 	.word	0x40007000
 80045a4:	42420440 	.word	0x42420440

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e076      	b.n	80046a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d009      	beq.n	80045e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fd8a 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	0c1a      	lsrs	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f002 0204 	and.w	r2, r2, #4
 8004686:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004696:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e041      	b.n	8004748 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fc fdbb 	bl	8001254 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f000 f82d 	bl	8004750 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0208 	bic.w	r2, r2, #8
 8004704:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6819      	ldr	r1, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a29      	ldr	r2, [pc, #164]	; (8004808 <TIM_Base_SetConfig+0xb8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a26      	ldr	r2, [pc, #152]	; (800480c <TIM_Base_SetConfig+0xbc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a25      	ldr	r2, [pc, #148]	; (8004810 <TIM_Base_SetConfig+0xc0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <TIM_Base_SetConfig+0xb8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <TIM_Base_SetConfig+0xbc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a18      	ldr	r2, [pc, #96]	; (8004810 <TIM_Base_SetConfig+0xc0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <TIM_Base_SetConfig+0xb8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	615a      	str	r2, [r3, #20]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800

08004814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004828:	2302      	movs	r3, #2
 800482a:	e046      	b.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d009      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a12      	ldr	r2, [pc, #72]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a10      	ldr	r2, [pc, #64]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10c      	bne.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800

080048d0 <__assert_func>:
 80048d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048d2:	4614      	mov	r4, r2
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <__assert_func+0x2c>)
 80048d8:	4605      	mov	r5, r0
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68d8      	ldr	r0, [r3, #12]
 80048de:	b14c      	cbz	r4, 80048f4 <__assert_func+0x24>
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <__assert_func+0x30>)
 80048e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80048e6:	9100      	str	r1, [sp, #0]
 80048e8:	462b      	mov	r3, r5
 80048ea:	4906      	ldr	r1, [pc, #24]	; (8004904 <__assert_func+0x34>)
 80048ec:	f7fc ff0a 	bl	8001704 <fiprintf>
 80048f0:	f000 f8ea 	bl	8004ac8 <abort>
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <__assert_func+0x38>)
 80048f6:	461c      	mov	r4, r3
 80048f8:	e7f3      	b.n	80048e2 <__assert_func+0x12>
 80048fa:	bf00      	nop
 80048fc:	2000007c 	.word	0x2000007c
 8004900:	080051e8 	.word	0x080051e8
 8004904:	080051f5 	.word	0x080051f5
 8004908:	08005223 	.word	0x08005223

0800490c <__errno>:
 800490c:	4b01      	ldr	r3, [pc, #4]	; (8004914 <__errno+0x8>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000007c 	.word	0x2000007c

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	2600      	movs	r6, #0
 800491c:	4d0c      	ldr	r5, [pc, #48]	; (8004950 <__libc_init_array+0x38>)
 800491e:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	f000 f928 	bl	8004b7c <_init>
 800492c:	2600      	movs	r6, #0
 800492e:	4d0a      	ldr	r5, [pc, #40]	; (8004958 <__libc_init_array+0x40>)
 8004930:	4c0a      	ldr	r4, [pc, #40]	; (800495c <__libc_init_array+0x44>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08005224 	.word	0x08005224
 8004954:	08005224 	.word	0x08005224
 8004958:	08005224 	.word	0x08005224
 800495c:	08005228 	.word	0x08005228

08004960 <malloc>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <malloc+0xc>)
 8004962:	4601      	mov	r1, r0
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f000 b82b 	b.w	80049c0 <_malloc_r>
 800496a:	bf00      	nop
 800496c:	2000007c 	.word	0x2000007c

08004970 <memset>:
 8004970:	4603      	mov	r3, r0
 8004972:	4402      	add	r2, r0
 8004974:	4293      	cmp	r3, r2
 8004976:	d100      	bne.n	800497a <memset+0xa>
 8004978:	4770      	bx	lr
 800497a:	f803 1b01 	strb.w	r1, [r3], #1
 800497e:	e7f9      	b.n	8004974 <memset+0x4>

08004980 <sbrk_aligned>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4e0e      	ldr	r6, [pc, #56]	; (80049bc <sbrk_aligned+0x3c>)
 8004984:	460c      	mov	r4, r1
 8004986:	6831      	ldr	r1, [r6, #0]
 8004988:	4605      	mov	r5, r0
 800498a:	b911      	cbnz	r1, 8004992 <sbrk_aligned+0x12>
 800498c:	f000 f88c 	bl	8004aa8 <_sbrk_r>
 8004990:	6030      	str	r0, [r6, #0]
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f887 	bl	8004aa8 <_sbrk_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d00a      	beq.n	80049b4 <sbrk_aligned+0x34>
 800499e:	1cc4      	adds	r4, r0, #3
 80049a0:	f024 0403 	bic.w	r4, r4, #3
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d007      	beq.n	80049b8 <sbrk_aligned+0x38>
 80049a8:	1a21      	subs	r1, r4, r0
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 f87c 	bl	8004aa8 <_sbrk_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d101      	bne.n	80049b8 <sbrk_aligned+0x38>
 80049b4:	f04f 34ff 	mov.w	r4, #4294967295
 80049b8:	4620      	mov	r0, r4
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	20000568 	.word	0x20000568

080049c0 <_malloc_r>:
 80049c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c4:	1ccd      	adds	r5, r1, #3
 80049c6:	f025 0503 	bic.w	r5, r5, #3
 80049ca:	3508      	adds	r5, #8
 80049cc:	2d0c      	cmp	r5, #12
 80049ce:	bf38      	it	cc
 80049d0:	250c      	movcc	r5, #12
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	4607      	mov	r7, r0
 80049d6:	db01      	blt.n	80049dc <_malloc_r+0x1c>
 80049d8:	42a9      	cmp	r1, r5
 80049da:	d905      	bls.n	80049e8 <_malloc_r+0x28>
 80049dc:	230c      	movs	r3, #12
 80049de:	2600      	movs	r6, #0
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	4630      	mov	r0, r6
 80049e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e8:	4e2e      	ldr	r6, [pc, #184]	; (8004aa4 <_malloc_r+0xe4>)
 80049ea:	f000 f875 	bl	8004ad8 <__malloc_lock>
 80049ee:	6833      	ldr	r3, [r6, #0]
 80049f0:	461c      	mov	r4, r3
 80049f2:	bb34      	cbnz	r4, 8004a42 <_malloc_r+0x82>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4638      	mov	r0, r7
 80049f8:	f7ff ffc2 	bl	8004980 <sbrk_aligned>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	4604      	mov	r4, r0
 8004a00:	d14d      	bne.n	8004a9e <_malloc_r+0xde>
 8004a02:	6834      	ldr	r4, [r6, #0]
 8004a04:	4626      	mov	r6, r4
 8004a06:	2e00      	cmp	r6, #0
 8004a08:	d140      	bne.n	8004a8c <_malloc_r+0xcc>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4638      	mov	r0, r7
 8004a10:	eb04 0803 	add.w	r8, r4, r3
 8004a14:	f000 f848 	bl	8004aa8 <_sbrk_r>
 8004a18:	4580      	cmp	r8, r0
 8004a1a:	d13a      	bne.n	8004a92 <_malloc_r+0xd2>
 8004a1c:	6821      	ldr	r1, [r4, #0]
 8004a1e:	3503      	adds	r5, #3
 8004a20:	1a6d      	subs	r5, r5, r1
 8004a22:	f025 0503 	bic.w	r5, r5, #3
 8004a26:	3508      	adds	r5, #8
 8004a28:	2d0c      	cmp	r5, #12
 8004a2a:	bf38      	it	cc
 8004a2c:	250c      	movcc	r5, #12
 8004a2e:	4638      	mov	r0, r7
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7ff ffa5 	bl	8004980 <sbrk_aligned>
 8004a36:	3001      	adds	r0, #1
 8004a38:	d02b      	beq.n	8004a92 <_malloc_r+0xd2>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	442b      	add	r3, r5
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	e00e      	b.n	8004a60 <_malloc_r+0xa0>
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	1b52      	subs	r2, r2, r5
 8004a46:	d41e      	bmi.n	8004a86 <_malloc_r+0xc6>
 8004a48:	2a0b      	cmp	r2, #11
 8004a4a:	d916      	bls.n	8004a7a <_malloc_r+0xba>
 8004a4c:	1961      	adds	r1, r4, r5
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	6025      	str	r5, [r4, #0]
 8004a52:	bf18      	it	ne
 8004a54:	6059      	strne	r1, [r3, #4]
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	bf08      	it	eq
 8004a5a:	6031      	streq	r1, [r6, #0]
 8004a5c:	5162      	str	r2, [r4, r5]
 8004a5e:	604b      	str	r3, [r1, #4]
 8004a60:	4638      	mov	r0, r7
 8004a62:	f104 060b 	add.w	r6, r4, #11
 8004a66:	f000 f83d 	bl	8004ae4 <__malloc_unlock>
 8004a6a:	f026 0607 	bic.w	r6, r6, #7
 8004a6e:	1d23      	adds	r3, r4, #4
 8004a70:	1af2      	subs	r2, r6, r3
 8004a72:	d0b6      	beq.n	80049e2 <_malloc_r+0x22>
 8004a74:	1b9b      	subs	r3, r3, r6
 8004a76:	50a3      	str	r3, [r4, r2]
 8004a78:	e7b3      	b.n	80049e2 <_malloc_r+0x22>
 8004a7a:	6862      	ldr	r2, [r4, #4]
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	bf0c      	ite	eq
 8004a80:	6032      	streq	r2, [r6, #0]
 8004a82:	605a      	strne	r2, [r3, #4]
 8004a84:	e7ec      	b.n	8004a60 <_malloc_r+0xa0>
 8004a86:	4623      	mov	r3, r4
 8004a88:	6864      	ldr	r4, [r4, #4]
 8004a8a:	e7b2      	b.n	80049f2 <_malloc_r+0x32>
 8004a8c:	4634      	mov	r4, r6
 8004a8e:	6876      	ldr	r6, [r6, #4]
 8004a90:	e7b9      	b.n	8004a06 <_malloc_r+0x46>
 8004a92:	230c      	movs	r3, #12
 8004a94:	4638      	mov	r0, r7
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	f000 f824 	bl	8004ae4 <__malloc_unlock>
 8004a9c:	e7a1      	b.n	80049e2 <_malloc_r+0x22>
 8004a9e:	6025      	str	r5, [r4, #0]
 8004aa0:	e7de      	b.n	8004a60 <_malloc_r+0xa0>
 8004aa2:	bf00      	nop
 8004aa4:	20000564 	.word	0x20000564

08004aa8 <_sbrk_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4d05      	ldr	r5, [pc, #20]	; (8004ac4 <_sbrk_r+0x1c>)
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	f7fc fc36 	bl	8001324 <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_sbrk_r+0x1a>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_sbrk_r+0x1a>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	2000056c 	.word	0x2000056c

08004ac8 <abort>:
 8004ac8:	2006      	movs	r0, #6
 8004aca:	b508      	push	{r3, lr}
 8004acc:	f000 f838 	bl	8004b40 <raise>
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f7fc fc1d 	bl	8001310 <_exit>
	...

08004ad8 <__malloc_lock>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__malloc_lock+0x8>)
 8004ada:	f000 b84d 	b.w	8004b78 <__retarget_lock_acquire_recursive>
 8004ade:	bf00      	nop
 8004ae0:	20000570 	.word	0x20000570

08004ae4 <__malloc_unlock>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	; (8004aec <__malloc_unlock+0x8>)
 8004ae6:	f000 b848 	b.w	8004b7a <__retarget_lock_release_recursive>
 8004aea:	bf00      	nop
 8004aec:	20000570 	.word	0x20000570

08004af0 <_raise_r>:
 8004af0:	291f      	cmp	r1, #31
 8004af2:	b538      	push	{r3, r4, r5, lr}
 8004af4:	4604      	mov	r4, r0
 8004af6:	460d      	mov	r5, r1
 8004af8:	d904      	bls.n	8004b04 <_raise_r+0x14>
 8004afa:	2316      	movs	r3, #22
 8004afc:	6003      	str	r3, [r0, #0]
 8004afe:	f04f 30ff 	mov.w	r0, #4294967295
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b06:	b112      	cbz	r2, 8004b0e <_raise_r+0x1e>
 8004b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b0c:	b94b      	cbnz	r3, 8004b22 <_raise_r+0x32>
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 f830 	bl	8004b74 <_getpid_r>
 8004b14:	462a      	mov	r2, r5
 8004b16:	4601      	mov	r1, r0
 8004b18:	4620      	mov	r0, r4
 8004b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1e:	f000 b817 	b.w	8004b50 <_kill_r>
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d00a      	beq.n	8004b3c <_raise_r+0x4c>
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	d103      	bne.n	8004b32 <_raise_r+0x42>
 8004b2a:	2316      	movs	r3, #22
 8004b2c:	6003      	str	r3, [r0, #0]
 8004b2e:	2001      	movs	r0, #1
 8004b30:	e7e7      	b.n	8004b02 <_raise_r+0x12>
 8004b32:	2400      	movs	r4, #0
 8004b34:	4628      	mov	r0, r5
 8004b36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b3a:	4798      	blx	r3
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e7e0      	b.n	8004b02 <_raise_r+0x12>

08004b40 <raise>:
 8004b40:	4b02      	ldr	r3, [pc, #8]	; (8004b4c <raise+0xc>)
 8004b42:	4601      	mov	r1, r0
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	f7ff bfd3 	b.w	8004af0 <_raise_r>
 8004b4a:	bf00      	nop
 8004b4c:	2000007c 	.word	0x2000007c

08004b50 <_kill_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	2300      	movs	r3, #0
 8004b54:	4d06      	ldr	r5, [pc, #24]	; (8004b70 <_kill_r+0x20>)
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	f7fc fbc7 	bl	80012f0 <_kill>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d102      	bne.n	8004b6c <_kill_r+0x1c>
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	b103      	cbz	r3, 8004b6c <_kill_r+0x1c>
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	bd38      	pop	{r3, r4, r5, pc}
 8004b6e:	bf00      	nop
 8004b70:	2000056c 	.word	0x2000056c

08004b74 <_getpid_r>:
 8004b74:	f7fc bbb5 	b.w	80012e2 <_getpid>

08004b78 <__retarget_lock_acquire_recursive>:
 8004b78:	4770      	bx	lr

08004b7a <__retarget_lock_release_recursive>:
 8004b7a:	4770      	bx	lr

08004b7c <_init>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	bf00      	nop
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr

08004b88 <_fini>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr
