
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e4  080064e4  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  080064e4  080064e4  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064e4  080064e4  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080064ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200000e8  080065d0  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  080065d0  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a87  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab6  00000000  00000000  00034b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00038650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b8aa  00000000  00000000  00039d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c64d  00000000  00000000  0005560a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000967c7  00000000  00000000  00071c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010841e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001518  00000000  00000000  00108470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006800  00000000  00000000  00109988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005cf8 	.word	0x08005cf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08005cf8 	.word	0x08005cf8

0800014c <btn_debounce_init>:
#include "event_manager_fsm.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a1e      	ldr	r2, [pc, #120]	; (80001d0 <btn_debounce_init+0x84>)
 8000158:	611a      	str	r2, [r3, #16]
    btn->down.gpio.pin  = DOWN_Pin;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2220      	movs	r2, #32
 800015e:	829a      	strh	r2, [r3, #20]
    btn->up.gpio.port = UP_GPIO_Port;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	4a1b      	ldr	r2, [pc, #108]	; (80001d0 <btn_debounce_init+0x84>)
 8000164:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2210      	movs	r2, #16
 800016a:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <btn_debounce_init+0x88>)
 8000170:	621a      	str	r2, [r3, #32]
    btn->left.gpio.pin = LEFT_Pin;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2220      	movs	r2, #32
 8000176:	849a      	strh	r2, [r3, #36]	; 0x24
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <btn_debounce_init+0x88>)
 800017c:	631a      	str	r2, [r3, #48]	; 0x30
    btn->right.gpio.pin = RIGHT_Pin;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2280      	movs	r2, #128	; 0x80
 8000182:	869a      	strh	r2, [r3, #52]	; 0x34
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <btn_debounce_init+0x8c>)
 8000188:	641a      	str	r2, [r3, #64]	; 0x40
    btn->enter.gpio.pin = ENTER_Pin;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2201      	movs	r2, #1
 800018e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000192:	2305      	movs	r3, #5
 8000194:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 800019a:	2300      	movs	r3, #0
 800019c:	613b      	str	r3, [r7, #16]
 800019e:	e00d      	b.n	80001bc <btn_debounce_init+0x70>
    {
        time_event_stop(&btn_ptr->debounce);
 80001a0:	697b      	ldr	r3, [r7, #20]
 80001a2:	3308      	adds	r3, #8
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 fdaf 	bl	8000d08 <time_event_stop>
        btn_ptr->pressed = false;
 80001aa:	697b      	ldr	r3, [r7, #20]
 80001ac:	2200      	movs	r2, #0
 80001ae:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 80001b0:	697b      	ldr	r3, [r7, #20]
 80001b2:	3310      	adds	r3, #16
 80001b4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	3301      	adds	r3, #1
 80001ba:	613b      	str	r3, [r7, #16]
 80001bc:	7bfb      	ldrb	r3, [r7, #15]
 80001be:	693a      	ldr	r2, [r7, #16]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d3ed      	bcc.n	80001a0 <btn_debounce_init+0x54>
    }
}
 80001c4:	bf00      	nop
 80001c6:	bf00      	nop
 80001c8:	3718      	adds	r7, #24
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40011000 	.word	0x40011000
 80001d4:	40010800 	.word	0x40010800
 80001d8:	40010c00 	.word	0x40010c00

080001dc <btn_key_enter_combination>:

static btn_ev_ext_t btn_key_enter_combination(navigation_btn_t *btn)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
    if (btn->down.pressed)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	7f1b      	ldrb	r3, [r3, #28]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d022      	beq.n	8000232 <btn_key_enter_combination+0x56>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80001f6:	4619      	mov	r1, r3
 80001f8:	4610      	mov	r0, r2
 80001fa:	f003 fce1 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d111      	bne.n	8000228 <btn_key_enter_combination+0x4c>
        {
            if(time_event_is_active(&btn->enter.debounce))
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3348      	adds	r3, #72	; 0x48
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fd8f 	bl	8000d2c <time_event_is_active>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d004      	beq.n	800021e <btn_key_enter_combination+0x42>
                time_event_stop(&btn->enter.debounce);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3348      	adds	r3, #72	; 0x48
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fd75 	bl	8000d08 <time_event_stop>

            printf("btn down + enter pressed\r\n");
 800021e:	4843      	ldr	r0, [pc, #268]	; (800032c <btn_key_enter_combination+0x150>)
 8000220:	f005 f964 	bl	80054ec <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000224:	2307      	movs	r3, #7
 8000226:	e07c      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn down pressed\r\n");
 8000228:	4841      	ldr	r0, [pc, #260]	; (8000330 <btn_key_enter_combination+0x154>)
 800022a:	f005 f95f 	bl	80054ec <puts>
            return EVT_EXT_BTN_DOWN_PRESSED;
 800022e:	2302      	movs	r3, #2
 8000230:	e077      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    if (btn->up.pressed)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	7b1b      	ldrb	r3, [r3, #12]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d022      	beq.n	8000280 <btn_key_enter_combination+0xa4>
    {
        if (HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000244:	4619      	mov	r1, r3
 8000246:	4610      	mov	r0, r2
 8000248:	f003 fcba 	bl	8003bc0 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d111      	bne.n	8000276 <btn_key_enter_combination+0x9a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3348      	adds	r3, #72	; 0x48
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fd68 	bl	8000d2c <time_event_is_active>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d004      	beq.n	800026c <btn_key_enter_combination+0x90>
                time_event_stop(&btn->enter.debounce);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3348      	adds	r3, #72	; 0x48
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fd4e 	bl	8000d08 <time_event_stop>

            printf("btn up + enter pressed\r\n");
 800026c:	4831      	ldr	r0, [pc, #196]	; (8000334 <btn_key_enter_combination+0x158>)
 800026e:	f005 f93d 	bl	80054ec <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000272:	2306      	movs	r3, #6
 8000274:	e055      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn up pressed\r\n");
 8000276:	4830      	ldr	r0, [pc, #192]	; (8000338 <btn_key_enter_combination+0x15c>)
 8000278:	f005 f938 	bl	80054ec <puts>
            return EVT_EXT_BTN_UP_PRESSED;
 800027c:	2301      	movs	r3, #1
 800027e:	e050      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    if (btn->left.pressed)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000286:	2b00      	cmp	r3, #0
 8000288:	d022      	beq.n	80002d0 <btn_key_enter_combination+0xf4>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000294:	4619      	mov	r1, r3
 8000296:	4610      	mov	r0, r2
 8000298:	f003 fc92 	bl	8003bc0 <HAL_GPIO_ReadPin>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <btn_key_enter_combination+0xea>
        {
            if (time_event_is_active(&btn->enter.debounce))
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3348      	adds	r3, #72	; 0x48
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fd40 	bl	8000d2c <time_event_is_active>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d004      	beq.n	80002bc <btn_key_enter_combination+0xe0>
                time_event_stop(&btn->enter.debounce);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3348      	adds	r3, #72	; 0x48
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fd26 	bl	8000d08 <time_event_stop>
            
            printf("btn left + enter pressed\r\n");
 80002bc:	481f      	ldr	r0, [pc, #124]	; (800033c <btn_key_enter_combination+0x160>)
 80002be:	f005 f915 	bl	80054ec <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 80002c2:	2308      	movs	r3, #8
 80002c4:	e02d      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else 
        {
            printf("btn left pressed\r\n");
 80002c6:	481e      	ldr	r0, [pc, #120]	; (8000340 <btn_key_enter_combination+0x164>)
 80002c8:	f005 f910 	bl	80054ec <puts>
            return EVT_EXT_BTN_LEFT_PRESSED;
 80002cc:	2303      	movs	r3, #3
 80002ce:	e028      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    if (btn->right.pressed)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d022      	beq.n	8000320 <btn_key_enter_combination+0x144>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80002e4:	4619      	mov	r1, r3
 80002e6:	4610      	mov	r0, r2
 80002e8:	f003 fc6a 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d111      	bne.n	8000316 <btn_key_enter_combination+0x13a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3348      	adds	r3, #72	; 0x48
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fd18 	bl	8000d2c <time_event_is_active>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d004      	beq.n	800030c <btn_key_enter_combination+0x130>
                time_event_stop(&btn->enter.debounce);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3348      	adds	r3, #72	; 0x48
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fcfe 	bl	8000d08 <time_event_stop>
            
            printf("btn right + enter pressed\r\n");
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <btn_key_enter_combination+0x168>)
 800030e:	f005 f8ed 	bl	80054ec <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000312:	2309      	movs	r3, #9
 8000314:	e005      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn right pressed\r\n");
 8000316:	480c      	ldr	r0, [pc, #48]	; (8000348 <btn_key_enter_combination+0x16c>)
 8000318:	f005 f8e8 	bl	80054ec <puts>
            return EVT_EXT_BTN_RIGHT_PRESSED;
 800031c:	2304      	movs	r3, #4
 800031e:	e000      	b.n	8000322 <btn_key_enter_combination+0x146>
        }
    }

    return EVT_EXT_BTN_INVALID;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	08005d10 	.word	0x08005d10
 8000330:	08005d2c 	.word	0x08005d2c
 8000334:	08005d40 	.word	0x08005d40
 8000338:	08005d58 	.word	0x08005d58
 800033c:	08005d68 	.word	0x08005d68
 8000340:	08005d84 	.word	0x08005d84
 8000344:	08005d98 	.word	0x08005d98
 8000348:	08005db4 	.word	0x08005db4

0800034c <btn_enter_key_combination>:


static btn_ev_ext_t btn_enter_key_combination(navigation_btn_t *btn)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
    if (btn->enter.pressed)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800035a:	2b00      	cmp	r3, #0
 800035c:	d078      	beq.n	8000450 <btn_enter_key_combination+0x104>
    {
        if (HAL_GPIO_ReadPin(btn->down.gpio.port, btn->down.gpio.pin) == GPIO_PIN_RESET)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	691a      	ldr	r2, [r3, #16]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	8a9b      	ldrh	r3, [r3, #20]
 8000366:	4619      	mov	r1, r3
 8000368:	4610      	mov	r0, r2
 800036a:	f003 fc29 	bl	8003bc0 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d111      	bne.n	8000398 <btn_enter_key_combination+0x4c>
        {
            if (time_event_is_active(&btn->down.debounce))
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3318      	adds	r3, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fcd7 	bl	8000d2c <time_event_is_active>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d004      	beq.n	800038e <btn_enter_key_combination+0x42>
                time_event_stop(&btn->down.debounce);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3318      	adds	r3, #24
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fcbd 	bl	8000d08 <time_event_stop>
            printf("btn enter + down pressed\r\n");
 800038e:	4833      	ldr	r0, [pc, #204]	; (800045c <btn_enter_key_combination+0x110>)
 8000390:	f005 f8ac 	bl	80054ec <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000394:	2307      	movs	r3, #7
 8000396:	e05c      	b.n	8000452 <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->up.gpio.port, btn->up.gpio.pin) == GPIO_PIN_RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	889b      	ldrh	r3, [r3, #4]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4610      	mov	r0, r2
 80003a4:	f003 fc0c 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d111      	bne.n	80003d2 <btn_enter_key_combination+0x86>
        {
            if (time_event_is_active(&btn->up.debounce))
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3308      	adds	r3, #8
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fcba 	bl	8000d2c <time_event_is_active>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d004      	beq.n	80003c8 <btn_enter_key_combination+0x7c>
                time_event_stop(&btn->up.debounce);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3308      	adds	r3, #8
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fca0 	bl	8000d08 <time_event_stop>
            printf("btn enter + up pressed\r\n");
 80003c8:	4825      	ldr	r0, [pc, #148]	; (8000460 <btn_enter_key_combination+0x114>)
 80003ca:	f005 f88f 	bl	80054ec <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 80003ce:	2306      	movs	r3, #6
 80003d0:	e03f      	b.n	8000452 <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->left.gpio.port, btn->left.gpio.pin) == GPIO_PIN_RESET)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6a1a      	ldr	r2, [r3, #32]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003da:	4619      	mov	r1, r3
 80003dc:	4610      	mov	r0, r2
 80003de:	f003 fbef 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d111      	bne.n	800040c <btn_enter_key_combination+0xc0>
        {
            if (time_event_is_active(&btn->left.debounce))
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3328      	adds	r3, #40	; 0x28
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fc9d 	bl	8000d2c <time_event_is_active>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <btn_enter_key_combination+0xb6>
                time_event_stop(&btn->left.debounce);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3328      	adds	r3, #40	; 0x28
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fc83 	bl	8000d08 <time_event_stop>
            printf("btn enter + left pressed\r\n");
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <btn_enter_key_combination+0x118>)
 8000404:	f005 f872 	bl	80054ec <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000408:	2308      	movs	r3, #8
 800040a:	e022      	b.n	8000452 <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->right.gpio.port, btn->right.gpio.pin) == GPIO_PIN_RESET)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000414:	4619      	mov	r1, r3
 8000416:	4610      	mov	r0, r2
 8000418:	f003 fbd2 	bl	8003bc0 <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d111      	bne.n	8000446 <btn_enter_key_combination+0xfa>
        {
            if (time_event_is_active(&btn->right.debounce))
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3338      	adds	r3, #56	; 0x38
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fc80 	bl	8000d2c <time_event_is_active>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d004      	beq.n	800043c <btn_enter_key_combination+0xf0>
                time_event_stop(&btn->right.debounce);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3338      	adds	r3, #56	; 0x38
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fc66 	bl	8000d08 <time_event_stop>
            printf("btn enter + right pressed\r\n");
 800043c:	480a      	ldr	r0, [pc, #40]	; (8000468 <btn_enter_key_combination+0x11c>)
 800043e:	f005 f855 	bl	80054ec <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000442:	2309      	movs	r3, #9
 8000444:	e005      	b.n	8000452 <btn_enter_key_combination+0x106>
        }
        else
        {
            printf("btn enter pressed\r\n");
 8000446:	4809      	ldr	r0, [pc, #36]	; (800046c <btn_enter_key_combination+0x120>)
 8000448:	f005 f850 	bl	80054ec <puts>
            return EVT_EXT_BTN_ENTER_PRESSED;
 800044c:	2305      	movs	r3, #5
 800044e:	e000      	b.n	8000452 <btn_enter_key_combination+0x106>
        }
    }
    return EVT_EXT_BTN_INVALID;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	08005dc8 	.word	0x08005dc8
 8000460:	08005de4 	.word	0x08005de4
 8000464:	08005dfc 	.word	0x08005dfc
 8000468:	08005e18 	.word	0x08005e18
 800046c:	08005e34 	.word	0x08005e34

08000470 <poll_down_key_pressed>:

static void poll_down_key_pressed(navigation_btn_t *btn)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    static GPIO_PinState pin_st = GPIO_PIN_SET;
    if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) != pin_st)
 8000478:	2120      	movs	r1, #32
 800047a:	4812      	ldr	r0, [pc, #72]	; (80004c4 <poll_down_key_pressed+0x54>)
 800047c:	f003 fba0 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000480:	4603      	mov	r3, r0
 8000482:	461a      	mov	r2, r3
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <poll_down_key_pressed+0x58>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	429a      	cmp	r2, r3
 800048a:	d016      	beq.n	80004ba <poll_down_key_pressed+0x4a>
    {
        pin_st = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 800048c:	2120      	movs	r1, #32
 800048e:	480d      	ldr	r0, [pc, #52]	; (80004c4 <poll_down_key_pressed+0x54>)
 8000490:	f003 fb96 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	461a      	mov	r2, r3
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <poll_down_key_pressed+0x58>)
 800049a:	701a      	strb	r2, [r3, #0]
        if(!time_event_is_active(&btn->down.debounce))
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3318      	adds	r3, #24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fc43 	bl	8000d2c <time_event_is_active>
 80004a6:	4603      	mov	r3, r0
 80004a8:	f083 0301 	eor.w	r3, r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d003      	beq.n	80004ba <poll_down_key_pressed+0x4a>
            time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 80004b2:	2132      	movs	r1, #50	; 0x32
 80004b4:	4805      	ldr	r0, [pc, #20]	; (80004cc <poll_down_key_pressed+0x5c>)
 80004b6:	f000 fc13 	bl	8000ce0 <time_event_start>
    }
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40011000 	.word	0x40011000
 80004c8:	20000008 	.word	0x20000008
 80004cc:	2000011c 	.word	0x2000011c

080004d0 <btn_debounce_run>:

void btn_debounce_run(navigation_btn_t *btn)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b092      	sub	sp, #72	; 0x48
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    /*down button cannot be set IT mode, we have to do polling*/
    poll_down_key_pressed(btn);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ffc9 	bl	8000470 <poll_down_key_pressed>

    /*update debounce time for all buttons */
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 80004de:	2305      	movs	r3, #5
 80004e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    push_button_t *btn_ptr = &btn->up;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < btn_cnt; i++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	643b      	str	r3, [r7, #64]	; 0x40
 80004ec:	e025      	b.n	800053a <btn_debounce_run+0x6a>
    {
        time_event_update(&btn_ptr->debounce);
 80004ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004f0:	3308      	adds	r3, #8
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fc25 	bl	8000d42 <time_event_update>
        if(time_event_is_raised(&btn_ptr->debounce))
 80004f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004fa:	3308      	adds	r3, #8
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fc41 	bl	8000d84 <time_event_is_raised>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d012      	beq.n	800052e <btn_debounce_run+0x5e>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 8000508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800050e:	889b      	ldrh	r3, [r3, #4]
 8000510:	4619      	mov	r1, r3
 8000512:	4610      	mov	r0, r2
 8000514:	f003 fb54 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d102      	bne.n	8000524 <btn_debounce_run+0x54>
                btn_ptr->pressed = true;
 800051e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000520:	2201      	movs	r2, #1
 8000522:	731a      	strb	r2, [r3, #12]
            
            time_event_stop(&btn_ptr->debounce);
 8000524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000526:	3308      	adds	r3, #8
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fbed 	bl	8000d08 <time_event_stop>
        }
        btn_ptr++;
 800052e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000530:	3310      	adds	r3, #16
 8000532:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 8000534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000536:	3301      	adds	r3, #1
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
 800053a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800053e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000540:	429a      	cmp	r2, r3
 8000542:	d3d4      	bcc.n	80004ee <btn_debounce_run+0x1e>
    }

    /*Notify events*/
    event_t event;
    event.name = EVT_EXT_BTN_INVALID;
 8000544:	2300      	movs	r3, #0
 8000546:	733b      	strb	r3, [r7, #12]
    event.fsm.src = BTN_FSM;
 8000548:	2301      	movs	r3, #1
 800054a:	737b      	strb	r3, [r7, #13]
    event.fsm.dst = UI_FSM;
 800054c:	2300      	movs	r3, #0
 800054e:	73bb      	strb	r3, [r7, #14]
    event.data.len = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]

    event.name = btn_key_enter_combination(btn);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe41 	bl	80001dc <btn_key_enter_combination>
 800055a:	4603      	mov	r3, r0
 800055c:	733b      	strb	r3, [r7, #12]
    if(event.name != EVT_EXT_BTN_INVALID)
 800055e:	7b3b      	ldrb	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d008      	beq.n	8000576 <btn_debounce_run+0xa6>
        event_manager_write(event_manager_fsm_get(), &event);
 8000564:	f000 fc64 	bl	8000e30 <event_manager_fsm_get>
 8000568:	4602      	mov	r2, r0
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4619      	mov	r1, r3
 8000570:	4610      	mov	r0, r2
 8000572:	f000 fd33 	bl	8000fdc <event_manager_write>

    event.name = btn_enter_key_combination(btn);
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff fee8 	bl	800034c <btn_enter_key_combination>
 800057c:	4603      	mov	r3, r0
 800057e:	733b      	strb	r3, [r7, #12]
    if(event.name != EVT_EXT_BTN_INVALID)
 8000580:	7b3b      	ldrb	r3, [r7, #12]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d008      	beq.n	8000598 <btn_debounce_run+0xc8>
        event_manager_write(event_manager_fsm_get(), &event);
 8000586:	f000 fc53 	bl	8000e30 <event_manager_fsm_get>
 800058a:	4602      	mov	r2, r0
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4610      	mov	r0, r2
 8000594:	f000 fd22 	bl	8000fdc <event_manager_write>

    btn_ptr = &btn->up;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005a0:	e008      	b.n	80005b4 <btn_debounce_run+0xe4>
    {
        btn_ptr->pressed = false;
 80005a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005a4:	2200      	movs	r2, #0
 80005a6:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 80005a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005aa:	3310      	adds	r3, #16
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 80005ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005b0:	3301      	adds	r3, #1
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80005b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3f1      	bcc.n	80005a2 <btn_debounce_run+0xd2>
    }
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	3748      	adds	r7, #72	; 0x48
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm.src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm.dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->name);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->data.len);

    if(evt->data.len)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d007      	beq.n	80005e8 <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->data.buff, evt->data.len);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	1d19      	adds	r1, r3, #4
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	78db      	ldrb	r3, [r3, #3]
 80005e0:	461a      	mov	r2, r3
 80005e2:	2058      	movs	r0, #88	; 0x58
 80005e4:	f000 f91c 	bl	8000820 <print_buffer>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	4613      	mov	r3, r2
 80005fc:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4619      	mov	r1, r3
 8000602:	68b8      	ldr	r0, [r7, #8]
 8000604:	f000 f9de 	bl	80009c4 <ring_buffer_init>
 8000608:	4602      	mov	r2, r0
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <event_queue_write>:

uint8_t event_queue_write(event_queue_t *queue, event_t *evt)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t write_st = RING_BUFF_OK;
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
    evt_queue_dbg("writing event \r\n");
    event_print_info(evt);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffbf 	bl	80005c8 <event_print_info>

    write_st = ring_buffer_write(queue->rb, (uint8_t *)&evt, EVENT_HEADER_SIZE);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4639      	mov	r1, r7
 8000650:	2204      	movs	r2, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f000 facc 	bl	8000bf0 <ring_buffer_write>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]
    if (evt->data.len)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00a      	beq.n	800067a <event_queue_write+0x46>
        write_st = ring_buffer_write(queue->rb, (uint8_t *)evt->data.buff, evt->data.len);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1d19      	adds	r1, r3, #4
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	78db      	ldrb	r3, [r3, #3]
 8000670:	461a      	mov	r2, r3
 8000672:	f000 fabd 	bl	8000bf0 <ring_buffer_write>
 8000676:	4603      	mov	r3, r0
 8000678:	73fb      	strb	r3, [r7, #15]

    if (write_st == RING_BUFF_OK)
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d106      	bne.n	800068e <event_queue_write+0x5a>
        queue->pending_cnt++;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	711a      	strb	r2, [r3, #4]
 800068c:	e00c      	b.n	80006a8 <event_queue_write+0x74>
    else
        printf_dbg_error("could not write on evt queue\r\n");
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <event_queue_write+0x80>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fea4 	bl	80053e0 <iprintf>
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <event_queue_write+0x84>)
 800069a:	f004 ff27 	bl	80054ec <puts>
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <event_queue_write+0x80>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fe9c 	bl	80053e0 <iprintf>

    return write_st;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000000c 	.word	0x2000000c
 80006b8:	08005e48 	.word	0x08005e48

080006bc <event_queue_read>:

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffa6 	bl	800061c <event_queue_get_pending>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d032      	beq.n	800073c <event_queue_read+0x80>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt, EVENT_HEADER_SIZE);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4639      	mov	r1, r7
 80006dc:	2204      	movs	r2, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fac6 	bl	8000c70 <ring_buffer_read>
 80006e4:	4603      	mov	r3, r0
 80006e6:	73fb      	strb	r3, [r7, #15]
        if (evt->data.len)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00a      	beq.n	8000706 <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->data.buff, evt->data.len);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	1d19      	adds	r1, r3, #4
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	78db      	ldrb	r3, [r3, #3]
 80006fc:	461a      	mov	r2, r3
 80006fe:	f000 fab7 	bl	8000c70 <ring_buffer_read>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10a      	bne.n	8000722 <event_queue_read+0x66>
        {
            queue->pending_cnt--;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	3b01      	subs	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff54 	bl	80005c8 <event_print_info>
 8000720:	e00c      	b.n	800073c <event_queue_read+0x80>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <event_queue_read+0x8c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fe5a 	bl	80053e0 <iprintf>
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <event_queue_read+0x90>)
 800072e:	f004 fedd 	bl	80054ec <puts>
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <event_queue_read+0x8c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4618      	mov	r0, r3
 8000738:	f004 fe52 	bl	80053e0 <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000000c 	.word	0x2000000c
 800074c:	08005e68 	.word	0x08005e68

08000750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800075c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d013      	beq.n	8000790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000778:	e000      	b.n	800077c <ITM_SendChar+0x2c>
    {
      __NOP();
 800077a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800077c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000786:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <itm_enable>:

#include "itm_dbg.h"
#include "stdio.h"

void itm_enable(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <itm_enable+0x2c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <itm_enable+0x2c>)
 80007a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007aa:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 80007ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007b4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	e000edfc 	.word	0xe000edfc

080007cc <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e009      	b.n	80007f0 <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffb3 	bl	8000750 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf1      	blt.n	80007dc <itm_write+0x10>
	}
	return len;
 80007f8:	683b      	ldr	r3, [r7, #0]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b084      	sub	sp, #16
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f7ff ffdb 	bl	80007cc <itm_write>
 8000816:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 8000830:	481a      	ldr	r0, [pc, #104]	; (800089c <print_buffer+0x7c>)
 8000832:	f004 fe5b 	bl	80054ec <puts>
	for (size_t i = 0; i < len; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e023      	b.n	8000884 <print_buffer+0x64>
	{
		switch (format)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b43      	cmp	r3, #67	; 0x43
 8000840:	d002      	beq.n	8000848 <print_buffer+0x28>
 8000842:	2b58      	cmp	r3, #88	; 0x58
 8000844:	d009      	beq.n	800085a <print_buffer+0x3a>
 8000846:	e011      	b.n	800086c <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4413      	add	r3, r2
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <print_buffer+0x80>)
 8000854:	f004 fdc4 	bl	80053e0 <iprintf>
 8000858:	e011      	b.n	800087e <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	480f      	ldr	r0, [pc, #60]	; (80008a4 <print_buffer+0x84>)
 8000866:	f004 fdbb 	bl	80053e0 <iprintf>
 800086a:	e008      	b.n	800087e <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <print_buffer+0x84>)
 8000878:	f004 fdb2 	bl	80053e0 <iprintf>
 800087c:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3301      	adds	r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3d7      	bcc.n	800083c <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <print_buffer+0x88>)
 800088e:	f004 fe2d 	bl	80054ec <puts>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08005ee8 	.word	0x08005ee8
 80008a0:	08005ef4 	.word	0x08005ef4
 80008a4:	08005efc 	.word	0x08005efc
 80008a8:	08005f04 	.word	0x08005f04

080008ac <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    assert(rb);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d105      	bne.n	80008c6 <head_ptr_advance+0x1a>
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <head_ptr_advance+0x74>)
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <head_ptr_advance+0x78>)
 80008be:	2126      	movs	r1, #38	; 0x26
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <head_ptr_advance+0x7c>)
 80008c2:	f004 f959 	bl	8004b78 <__assert_func>

    if (rb->full)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7c1b      	ldrb	r3, [r3, #16]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00b      	beq.n	80008e6 <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	3301      	adds	r3, #1
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	68d2      	ldr	r2, [r2, #12]
 80008d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80008dc:	fb01 f202 	mul.w	r2, r1, r2
 80008e0:	1a9a      	subs	r2, r3, r2
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	68d2      	ldr	r2, [r2, #12]
 80008f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80008f4:	fb01 f202 	mul.w	r2, r1, r2
 80008f8:	1a9a      	subs	r2, r3, r2
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	429a      	cmp	r2, r3
 8000908:	bf0c      	ite	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	2300      	movne	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	741a      	strb	r2, [r3, #16]
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	08005f08 	.word	0x08005f08
 8000924:	08006310 	.word	0x08006310
 8000928:	08005f0c 	.word	0x08005f0c

0800092c <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d105      	bne.n	8000946 <tail_ptr_retreat+0x1a>
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <tail_ptr_retreat+0x40>)
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <tail_ptr_retreat+0x44>)
 800093e:	2139      	movs	r1, #57	; 0x39
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <tail_ptr_retreat+0x48>)
 8000942:	f004 f919 	bl	8004b78 <__assert_func>

    rb->full = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68d2      	ldr	r2, [r2, #12]
 8000956:	fbb3 f1f2 	udiv	r1, r3, r2
 800095a:	fb01 f202 	mul.w	r2, r1, r2
 800095e:	1a9a      	subs	r2, r3, r2
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	609a      	str	r2, [r3, #8]
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	08005f08 	.word	0x08005f08
 8000970:	08006324 	.word	0x08006324
 8000974:	08005f0c 	.word	0x08005f0c

08000978 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d105      	bne.n	8000992 <is_ring_buffer_empty+0x1a>
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <is_ring_buffer_empty+0x40>)
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <is_ring_buffer_empty+0x44>)
 800098a:	214e      	movs	r1, #78	; 0x4e
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <is_ring_buffer_empty+0x48>)
 800098e:	f004 f8f3 	bl	8004b78 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7c1b      	ldrb	r3, [r3, #16]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d107      	bne.n	80009aa <is_ring_buffer_empty+0x32>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d101      	bne.n	80009aa <is_ring_buffer_empty+0x32>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <is_ring_buffer_empty+0x34>
 80009aa:	2300      	movs	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08005f08 	.word	0x08005f08
 80009bc:	08006338 	.word	0x08006338
 80009c0:	08005f0c 	.word	0x08005f0c

080009c4 <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <ring_buffer_init+0x16>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <ring_buffer_init+0x22>
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <ring_buffer_init+0x74>)
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <ring_buffer_init+0x78>)
 80009de:	2169      	movs	r1, #105	; 0x69
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <ring_buffer_init+0x7c>)
 80009e2:	f004 f8c9 	bl	8004b78 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80009e6:	2014      	movs	r0, #20
 80009e8:	f004 f920 	bl	8004c2c <malloc>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d105      	bne.n	8000a02 <ring_buffer_init+0x3e>
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <ring_buffer_init+0x80>)
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <ring_buffer_init+0x78>)
 80009fa:	216c      	movs	r1, #108	; 0x6c
 80009fc:	4810      	ldr	r0, [pc, #64]	; (8000a40 <ring_buffer_init+0x7c>)
 80009fe:	f004 f8bb 	bl	8004b78 <__assert_func>

    rb->buffer = buffer;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f81c 	bl	8000a4c <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff ffaf 	bl	8000978 <is_ring_buffer_empty>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d105      	bne.n	8000a2c <ring_buffer_init+0x68>
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <ring_buffer_init+0x84>)
 8000a22:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <ring_buffer_init+0x78>)
 8000a24:	2172      	movs	r1, #114	; 0x72
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <ring_buffer_init+0x7c>)
 8000a28:	f004 f8a6 	bl	8004b78 <__assert_func>

    return rb;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	08005f38 	.word	0x08005f38
 8000a3c:	08006350 	.word	0x08006350
 8000a40:	08005f0c 	.word	0x08005f0c
 8000a44:	08005f08 	.word	0x08005f08
 8000a48:	08005f48 	.word	0x08005f48

08000a4c <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d105      	bne.n	8000a66 <ring_buffer_reset+0x1a>
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <ring_buffer_reset+0x34>)
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <ring_buffer_reset+0x38>)
 8000a5e:	2189      	movs	r1, #137	; 0x89
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <ring_buffer_reset+0x3c>)
 8000a62:	f004 f889 	bl	8004b78 <__assert_func>
    rb->head = 0;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	741a      	strb	r2, [r3, #16]
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08005f08 	.word	0x08005f08
 8000a84:	08006364 	.word	0x08006364
 8000a88:	08005f0c 	.word	0x08005f0c

08000a8c <ring_buffer_get_data_len>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return number of bytes in buffer.
 */
size_t ring_buffer_get_data_len(ring_buffer_handle_t rb)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <ring_buffer_get_data_len+0x1a>
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <ring_buffer_get_data_len+0x60>)
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <ring_buffer_get_data_len+0x64>)
 8000a9e:	2197      	movs	r1, #151	; 0x97
 8000aa0:	4814      	ldr	r0, [pc, #80]	; (8000af4 <ring_buffer_get_data_len+0x68>)
 8000aa2:	f004 f869 	bl	8004b78 <__assert_func>

    size_t size = rb->length;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	60fb      	str	r3, [r7, #12]

    if (!rb->full)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7c1b      	ldrb	r3, [r3, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d115      	bne.n	8000ae0 <ring_buffer_get_data_len+0x54>
    {
        if (rb->head >= rb->tail)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d306      	bcc.n	8000ace <ring_buffer_get_data_len+0x42>
        {
            size = (rb->head - rb->tail);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e008      	b.n	8000ae0 <ring_buffer_get_data_len+0x54>
        }
        else
        {
            size = (rb->length + rb->head - rb->tail);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	441a      	add	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	60fb      	str	r3, [r7, #12]
        }
    }

    return size;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	08005f08 	.word	0x08005f08
 8000af0:	08006378 	.word	0x08006378
 8000af4:	08005f0c 	.word	0x08005f0c

08000af8 <ring_buffer_get_free_space>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return the number of bytes available in ring buffer 
 */
size_t ring_buffer_get_free_space(ring_buffer_handle_t rb)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <ring_buffer_get_free_space+0x1a>
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <ring_buffer_get_free_space+0x30>)
 8000b08:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <ring_buffer_get_free_space+0x34>)
 8000b0a:	21be      	movs	r1, #190	; 0xbe
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <ring_buffer_get_free_space+0x38>)
 8000b0e:	f004 f833 	bl	8004b78 <__assert_func>
    return (rb->length - ring_buffer_get_data_len(rb));
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68dc      	ldr	r4, [r3, #12]
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb8 	bl	8000a8c <ring_buffer_get_data_len>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	1ae3      	subs	r3, r4, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	08005f08 	.word	0x08005f08
 8000b2c:	08006394 	.word	0x08006394
 8000b30:	08005f0c 	.word	0x08005f0c

08000b34 <ring_buffer_put>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint8_t data)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
    assert(rb && rb->buffer);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <ring_buffer_put+0x1a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d105      	bne.n	8000b5a <ring_buffer_put+0x26>
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <ring_buffer_put+0x44>)
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <ring_buffer_put+0x48>)
 8000b52:	21ca      	movs	r1, #202	; 0xca
 8000b54:	480a      	ldr	r0, [pc, #40]	; (8000b80 <ring_buffer_put+0x4c>)
 8000b56:	f004 f80f 	bl	8004b78 <__assert_func>

    rb->buffer[rb->head] = data;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	78fa      	ldrb	r2, [r7, #3]
 8000b66:	701a      	strb	r2, [r3, #0]

    head_ptr_advance(rb);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fe9f 	bl	80008ac <head_ptr_advance>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	08005f64 	.word	0x08005f64
 8000b7c:	080063b0 	.word	0x080063b0
 8000b80:	08005f0c 	.word	0x08005f0c

08000b84 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <ring_buffer_get+0x1e>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <ring_buffer_get+0x1e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <ring_buffer_get+0x2a>
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <ring_buffer_get+0x60>)
 8000ba4:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <ring_buffer_get+0x64>)
 8000ba6:	21da      	movs	r1, #218	; 0xda
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <ring_buffer_get+0x68>)
 8000baa:	f003 ffe5 	bl	8004b78 <__assert_func>

    int r = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fee0 	bl	8000978 <is_ring_buffer_empty>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10c      	bne.n	8000bd8 <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff feac 	bl	800092c <tail_ptr_retreat>

        r = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	b2db      	uxtb	r3, r3
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	08005f78 	.word	0x08005f78
 8000be8:	080063c0 	.word	0x080063c0
 8000bec:	08005f0c 	.word	0x08005f0c

08000bf0 <ring_buffer_write>:
 * @param data   pointer to a buffer that contains the data to be written in buffer
 * @param data_len number of bytes of data to be written in buffer
 * @return ring_buffer_st_t  return status of buffer.
 */
ring_buffer_st_t ring_buffer_write(ring_buffer_handle_t rb, uint8_t *data, uint8_t data_len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	71fb      	strb	r3, [r7, #7]
    assert(rb && rb->buffer);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <ring_buffer_write+0x1c>
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d105      	bne.n	8000c18 <ring_buffer_write+0x28>
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <ring_buffer_write+0x74>)
 8000c0e:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <ring_buffer_write+0x78>)
 8000c10:	21f3      	movs	r1, #243	; 0xf3
 8000c12:	4816      	ldr	r0, [pc, #88]	; (8000c6c <ring_buffer_write+0x7c>)
 8000c14:	f003 ffb0 	bl	8004b78 <__assert_func>

    if (rb->full)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	7c1b      	ldrb	r3, [r3, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <ring_buffer_write+0x34>
    {
        return RING_BUFF_FULL;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e01a      	b.n	8000c5a <ring_buffer_write+0x6a>
    }

    if (ring_buffer_get_free_space(rb) < data_len)
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff ff67 	bl	8000af8 <ring_buffer_get_free_space>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d201      	bcs.n	8000c36 <ring_buffer_write+0x46>
    {
        return RING_BUFF_NOT_ENOUGH_SPACE;
 8000c32:	2302      	movs	r3, #2
 8000c34:	e011      	b.n	8000c5a <ring_buffer_write+0x6a>
    }
    else
    {
        size_t data_counter = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]

        while (data_counter < data_len)
 8000c3a:	e009      	b.n	8000c50 <ring_buffer_write+0x60>
        {
            ring_buffer_put(rb, data[data_counter++]);
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	617a      	str	r2, [r7, #20]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff ff72 	bl	8000b34 <ring_buffer_put>
        while (data_counter < data_len)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3f1      	bcc.n	8000c3c <ring_buffer_write+0x4c>
        }

        return RING_BUFF_OK;
 8000c58:	2300      	movs	r3, #0
    }
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	08005f64 	.word	0x08005f64
 8000c68:	080063d0 	.word	0x080063d0
 8000c6c:	08005f0c 	.word	0x08005f0c

08000c70 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <ring_buffer_read+0x20>
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <ring_buffer_read+0x20>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d106      	bne.n	8000c9e <ring_buffer_read+0x2e>
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <ring_buffer_read+0x64>)
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <ring_buffer_read+0x68>)
 8000c94:	f240 1115 	movw	r1, #277	; 0x115
 8000c98:	4810      	ldr	r0, [pc, #64]	; (8000cdc <ring_buffer_read+0x6c>)
 8000c9a:	f003 ff6d 	bl	8004b78 <__assert_func>

    size_t data_counter = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 8000ca2:	e00d      	b.n	8000cc0 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	617a      	str	r2, [r7, #20]
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff ff67 	bl	8000b84 <ring_buffer_get>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e004      	b.n	8000cca <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d3ed      	bcc.n	8000ca4 <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	08005f94 	.word	0x08005f94
 8000cd8:	080063e4 	.word	0x080063e4
 8000cdc:	08005f0c 	.word	0x08005f0c

08000ce0 <time_event_start>:
#include <assert.h>

bool volatile pending_time_update = false;

void time_event_start(time_event_t *time_event, const uint16_t time_ms)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
    time_event->tick_cnt = time_ms;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	801a      	strh	r2, [r3, #0]
    time_event->active = true;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	70da      	strb	r2, [r3, #3]
}   
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    time_event->active = false;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	70da      	strb	r2, [r3, #3]
    time_event->tick_cnt = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	801a      	strh	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <time_event_is_active>:

bool time_event_is_active(time_event_t *time_event)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    return time_event->active;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	789b      	ldrb	r3, [r3, #2]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <time_event_update>:

bool time_event_update(time_event_t *time_event)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
    if (time_event->active == true)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	789b      	ldrb	r3, [r3, #2]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d012      	beq.n	8000d78 <time_event_update+0x36>
    {
        if (time_event->tick_cnt > 0)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <time_event_update+0x24>
            time_event->tick_cnt--;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	801a      	strh	r2, [r3, #0]

        if(!time_event->tick_cnt)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <time_event_update+0x32>
            time_event->raised = true;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	70da      	strb	r2, [r3, #3]
        
        return true;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <time_event_update+0x38>
    }
    return false;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <time_event_is_raised>:

bool time_event_is_raised(time_event_t *time_event)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	78db      	ldrb	r3, [r3, #3]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
	...

08000d9c <time_event_set_pending_update>:

void time_event_set_pending_update(bool status)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <time_event_set_pending_update+0x1c>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	7013      	strb	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000154 	.word	0x20000154

08000dbc <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
    return pending_time_update;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <time_event_get_pending_update+0x14>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000154 	.word	0x20000154

08000dd4 <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ffdf 	bl	8000d9c <time_event_set_pending_update>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8000de8:	f7ff ffe8 	bl	8000dbc <time_event_get_pending_update>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <time_events_poll_update+0x1a>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <time_events_poll_update+0x20>)
 8000df4:	f7ff fb6c 	bl	80004d0 <btn_debounce_run>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ffcf 	bl	8000d9c <time_event_set_pending_update>
    }
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000104 	.word	0x20000104

08000e08 <drawer_fsm_get_info>:
#include "drawer_fsm.h"

drawer_ctrl_info *drawer_fsm_get_info(drawer_no_t no)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]


}
 8000e12:	bf00      	nop
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <drawer_fsm_set_ext_evt>:

void drawer_fsm_set_ext_evt(event_t *event)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
    
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <event_manager_fsm_get+0x10>)
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000220 	.word	0x20000220

08000e44 <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	705a      	strb	r2, [r3, #1]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d002      	beq.n	8000e7c <event_manager_fsm_run+0x16>
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d004      	beq.n	8000e84 <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 8000e7a:	e007      	b.n	8000e8c <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f84d 	bl	8000f1c <wait_event_on_react>
 8000e82:	e003      	b.n	8000e8c <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f89a 	bl	8000fbe <notify_event_on_react>
 8000e8a:	bf00      	nop
    }
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3330      	adds	r3, #48	; 0x30
 8000ea0:	22c8      	movs	r2, #200	; 0xc8
 8000ea2:	4905      	ldr	r1, [pc, #20]	; (8000eb8 <event_manager_fsm_init+0x24>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fba3 	bl	80005f0 <event_queue_init>
    enter_seq_wait_event(handle);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f806 	bl	8000ebc <enter_seq_wait_event>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000158 	.word	0x20000158

08000ebc <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffbc 	bl	8000e44 <fsm_set_next_state>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4610      	mov	r0, r2
 8000eea:	f7ff fbe7 	bl	80006bc <event_queue_read>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3330      	adds	r3, #48	; 0x30
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb8a 	bl	800061c <event_queue_get_pending>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	705a      	strb	r2, [r3, #1]
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	785b      	ldrb	r3, [r3, #1]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffcf 	bl	8000ed4 <exit_action_wait_event>
        enter_seq_notify_event(handle);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f810 	bl	8000f5c <enter_seq_notify_event>
 8000f3c:	e001      	b.n	8000f42 <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffd1 	bl	8000ef6 <during_action_wait_event>
    }
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 8000f64:	2102      	movs	r1, #2
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff6c 	bl	8000e44 <fsm_set_next_state>
    entry_action_notify_event(handle);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f804 	bl	8000f7a <entry_action_notify_event>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
    event_manager_dbg("\t notify evt = [0x%X], from [0x%X] to [0x%X]\r\n",
                 handle->iface.event.name,
                 handle->iface.event.fsm.src,
                 handle->iface.event.fsm.dst);

    switch (handle->iface.event.fsm.dst)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	799b      	ldrb	r3, [r3, #6]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <entry_action_notify_event+0x16>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d00a      	beq.n	8000fa4 <entry_action_notify_event+0x2a>




    default:
        break;
 8000f8e:	e00f      	b.n	8000fb0 <entry_action_notify_event+0x36>
            ui_fsm_write_event(ui_fsm_get(), &handle->iface.event);
 8000f90:	f000 f834 	bl	8000ffc <ui_fsm_get>
 8000f94:	4602      	mov	r2, r0
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	f000 f87b 	bl	8001098 <ui_fsm_write_event>
        }break; 
 8000fa2:	e005      	b.n	8000fb0 <entry_action_notify_event+0x36>
            drawer_fsm_set_ext_evt(&handle->iface.event);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff38 	bl	8000e1e <drawer_fsm_set_ext_evt>
        }break; 
 8000fae:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	705a      	strb	r2, [r3, #1]
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d102      	bne.n	8000fd4 <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff74 	bl	8000ebc <enter_seq_wait_event>
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <event_manager_write>:

//------------------ Event Manager Function Definition ---------------------------------------//

uint8_t event_manager_write(event_manager_handle_t handle, event_t *event)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
    return event_queue_write(&handle->iface.queue, event);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3330      	adds	r3, #48	; 0x30
 8000fea:	6839      	ldr	r1, [r7, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fb21 	bl	8000634 <event_queue_write>
 8000ff2:	4603      	mov	r3, r0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <ui_fsm_get>:
static void drawer_request_on_react(ui_handle_t handle);

////////////////////////////// Public function declaration //////////////////////////////////////

ui_handle_t ui_fsm_get(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
    return &ui_fsm;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <ui_fsm_get+0x10>)
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000258 	.word	0x20000258

08001010 <ui_fsm_init>:

void ui_fsm_init(ui_handle_t handle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	enter_seq_main_menu(handle);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f84f 	bl	80010bc <enter_seq_main_menu>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <ui_fsm_run>:

void ui_fsm_run(ui_handle_t handle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	2b04      	cmp	r3, #4
 8001038:	d814      	bhi.n	8001064 <ui_fsm_run+0x3c>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <ui_fsm_run+0x18>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001055 	.word	0x08001055
 8001044:	08001065 	.word	0x08001065
 8001048:	08001065 	.word	0x08001065
 800104c:	08001065 	.word	0x08001065
 8001050:	0800105d 	.word	0x0800105d
    {
        case ST_UI_MAIN_MENU:  main_menu_on_react(handle); break;
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f84f 	bl	80010f8 <main_menu_on_react>
 800105a:	e004      	b.n	8001066 <ui_fsm_run+0x3e>
        case ST_UI_DATE_TIME_CONFIG: break;
        case ST_UI_PET_CALL_CONFIG: break;
        case ST_UI_FEEDER_CONFIG: break;
        case ST_UI_DRAWER_ST_REQUEST: drawer_request_on_react(handle); break;
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f8db 	bl	8001218 <drawer_request_on_react>
 8001062:	e000      	b.n	8001066 <ui_fsm_run+0x3e>
    default:
        break;
 8001064:	bf00      	nop
    }

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop

08001070 <fsm_set_next_state>:

static void fsm_set_next_state(ui_handle_t handle, ui_state_t next_st)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
    handle->state = next_st;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	78fa      	ldrb	r2, [r7, #3]
 8001080:	701a      	strb	r2, [r3, #0]
    handle->event.btn = EVT_EXT_BTN_INVALID;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	709a      	strb	r2, [r3, #2]
    handle->event.internal = EVT_INT_UI_INVALID;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	70da      	strb	r2, [r3, #3]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <ui_fsm_write_event>:
		time_event++;
	}
}

void ui_fsm_write_event(ui_handle_t handle, event_t *event)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    if(event->fsm.src == BTN_FSM)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <ui_fsm_write_event+0x1a>
    {
        ui_fsm_dbg("btn event detected\r\n");
        handle->event.btn = event->name;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	709a      	strb	r2, [r3, #2]
    }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <enter_seq_main_menu>:


/////////////////////////////////// Main Menu State  ///////////////////////////////////////////

static void enter_seq_main_menu(ui_handle_t handle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ main menu ]");
    fsm_set_next_state(handle, ST_UI_MAIN_MENU);
 80010c4:	2101      	movs	r1, #1
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffd2 	bl	8001070 <fsm_set_next_state>
    entry_action_main_menu(handle);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f804 	bl	80010da <entry_action_main_menu>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <entry_action_main_menu>:

static void entry_action_main_menu(ui_handle_t handle)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
    time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3304      	adds	r3, #4
 80010e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fdf8 	bl	8000ce0 <time_event_start>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <main_menu_on_react>:


static void main_menu_on_react(ui_handle_t handle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    /*navigation key update item selection*/
    switch (handle->event.btn)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	789b      	ldrb	r3, [r3, #2]
 8001104:	3b01      	subs	r3, #1
 8001106:	2b08      	cmp	r3, #8
 8001108:	d830      	bhi.n	800116c <main_menu_on_react+0x74>
 800110a:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <main_menu_on_react+0x18>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	0800116d 	.word	0x0800116d
 8001114:	0800116d 	.word	0x0800116d
 8001118:	0800116d 	.word	0x0800116d
 800111c:	0800116d 	.word	0x0800116d
 8001120:	0800116d 	.word	0x0800116d
 8001124:	08001135 	.word	0x08001135
 8001128:	08001143 	.word	0x08001143
 800112c:	08001151 	.word	0x08001151
 8001130:	0800115f 	.word	0x0800115f
        case EVT_EXT_BTN_UP_PRESSED:               break;
        case EVT_EXT_BTN_DOWN_PRESSED:             break;
        case EVT_EXT_BTN_LEFT_PRESSED:             break;
        case EVT_EXT_BTN_RIGHT_PRESSED:            break;
        case EVT_EXT_BTN_ENTER_PRESSED:            break;
        case EVT_EXT_BTN_UP_AND_ENTER_PRESSED:     { handle->iface.drawer = DRAWER_NO_1; drawer_request_enter_seq(handle);} break;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	741a      	strb	r2, [r3, #16]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f820 	bl	8001180 <drawer_request_enter_seq>
 8001140:	e015      	b.n	800116e <main_menu_on_react+0x76>
        case EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED:   { handle->iface.drawer = DRAWER_NO_2; drawer_request_enter_seq(handle);} break;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	741a      	strb	r2, [r3, #16]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f819 	bl	8001180 <drawer_request_enter_seq>
 800114e:	e00e      	b.n	800116e <main_menu_on_react+0x76>
        case EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED:   { handle->iface.drawer = DRAWER_NO_3; drawer_request_enter_seq(handle);} break; 
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	741a      	strb	r2, [r3, #16]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f812 	bl	8001180 <drawer_request_enter_seq>
 800115c:	e007      	b.n	800116e <main_menu_on_react+0x76>
        case EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED:  { handle->iface.drawer = DRAWER_NO_4; drawer_request_enter_seq(handle);} break;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	741a      	strb	r2, [r3, #16]
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f80b 	bl	8001180 <drawer_request_enter_seq>
 800116a:	e000      	b.n	800116e <main_menu_on_react+0x76>

        default: break;
 800116c:	bf00      	nop
    };

    if(time_event_is_raised(&handle->event.time.update_gui)== true)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fe06 	bl	8000d84 <time_event_is_raised>
    {
        /*Update GUI*/
    }
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <drawer_request_enter_seq>:

/////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// Drawer Request State  ///////////////////////////////////////////
void drawer_request_enter_seq(ui_handle_t handle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ drawer request ]");
    fsm_set_next_state(handle, ST_UI_DRAWER_ST_REQUEST);
 8001188:	2105      	movs	r1, #5
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff70 	bl	8001070 <fsm_set_next_state>
    entry_action_drawer_request(handle);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f804 	bl	800119e <entry_action_drawer_request>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <entry_action_drawer_request>:

void entry_action_drawer_request(ui_handle_t handle)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b08e      	sub	sp, #56	; 0x38
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
    drawer_ctrl_info *info = drawer_fsm_get_info(handle->iface.drawer);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7c1b      	ldrb	r3, [r3, #16]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fe2c 	bl	8000e08 <drawer_fsm_get_info>
 80011b0:	6378      	str	r0, [r7, #52]	; 0x34
    event_t event;

    event.name = EVT_EXT_DRW_INVALID;
 80011b2:	2300      	movs	r3, #0
 80011b4:	723b      	strb	r3, [r7, #8]
    event.fsm.src = UI_FSM;
 80011b6:	2300      	movs	r3, #0
 80011b8:	727b      	strb	r3, [r7, #9]
    event.fsm.dst = DRAWER_FSM;
 80011ba:	2302      	movs	r3, #2
 80011bc:	72bb      	strb	r3, [r7, #10]
    event.data.len = sizeof(drawer_ev_ext_data_t);
 80011be:	2301      	movs	r3, #1
 80011c0:	72fb      	strb	r3, [r7, #11]
    ((drawer_ev_ext_data_t*)event.data.buff)->no = handle->iface.drawer;
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	3304      	adds	r3, #4
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	7c12      	ldrb	r2, [r2, #16]
 80011cc:	701a      	strb	r2, [r3, #0]

    if (info->status.curr == DRAWER_ST_CLOSE || info->status.curr == DRAWER_ST_CLOSING)
 80011ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d003      	beq.n	80011de <entry_action_drawer_request+0x40>
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d102      	bne.n	80011e4 <entry_action_drawer_request+0x46>
    {
        ui_fsm_dbg("manual opening to drawer no [%d]\r\n", handle->iface.drawer + 1);
        event.name = EVT_EXT_DRW_OPEN;
 80011de:	2301      	movs	r3, #1
 80011e0:	723b      	strb	r3, [r7, #8]
 80011e2:	e009      	b.n	80011f8 <entry_action_drawer_request+0x5a>
    }

    else if (info->status.curr == DRAWER_ST_OPEN || info->status.curr == DRAWER_ST_OPENING)
 80011e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d003      	beq.n	80011f4 <entry_action_drawer_request+0x56>
 80011ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d101      	bne.n	80011f8 <entry_action_drawer_request+0x5a>
    {
        ui_fsm_dbg("manual closing to drawer no [%d]\r\n", handle->iface.drawer + 1);
        event.name = EVT_EXT_DRW_CLOSE;
 80011f4:	2302      	movs	r3, #2
 80011f6:	723b      	strb	r3, [r7, #8]
    }

    if(event.name != EVT_EXT_DRW_INVALID)
 80011f8:	7a3b      	ldrb	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d008      	beq.n	8001210 <entry_action_drawer_request+0x72>
        event_manager_write(event_manager_fsm_get(), &event);
 80011fe:	f7ff fe17 	bl	8000e30 <event_manager_fsm_get>
 8001202:	4602      	mov	r2, r0
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f7ff fee6 	bl	8000fdc <event_manager_write>
}
 8001210:	bf00      	nop
 8001212:	3738      	adds	r7, #56	; 0x38
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <drawer_request_on_react>:

void drawer_request_on_react(ui_handle_t handle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    // no required actions 
    enter_seq_main_menu(handle);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff4b 	bl	80010bc <enter_seq_main_menu>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	2b80      	cmp	r3, #128	; 0x80
 800123e:	d034      	beq.n	80012aa <HAL_GPIO_EXTI_Callback+0x7a>
 8001240:	2b80      	cmp	r3, #128	; 0x80
 8001242:	dc40      	bgt.n	80012c6 <HAL_GPIO_EXTI_Callback+0x96>
 8001244:	2b20      	cmp	r3, #32
 8001246:	d022      	beq.n	800128e <HAL_GPIO_EXTI_Callback+0x5e>
 8001248:	2b20      	cmp	r3, #32
 800124a:	dc3c      	bgt.n	80012c6 <HAL_GPIO_EXTI_Callback+0x96>
 800124c:	2b01      	cmp	r3, #1
 800124e:	d002      	beq.n	8001256 <HAL_GPIO_EXTI_Callback+0x26>
 8001250:	2b10      	cmp	r3, #16
 8001252:	d00e      	beq.n	8001272 <HAL_GPIO_EXTI_Callback+0x42>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
    }
    break;

    default:
        break;
 8001254:	e037      	b.n	80012c6 <HAL_GPIO_EXTI_Callback+0x96>
        if (!time_event_is_active(&navigation_btn.enter.debounce))
 8001256:	4822      	ldr	r0, [pc, #136]	; (80012e0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001258:	f7ff fd68 	bl	8000d2c <time_event_is_active>
 800125c:	4603      	mov	r3, r0
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d030      	beq.n	80012ca <HAL_GPIO_EXTI_Callback+0x9a>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 8001268:	2132      	movs	r1, #50	; 0x32
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800126c:	f7ff fd38 	bl	8000ce0 <time_event_start>
    break;
 8001270:	e02b      	b.n	80012ca <HAL_GPIO_EXTI_Callback+0x9a>
        if (!time_event_is_active(&navigation_btn.up.debounce))
 8001272:	481c      	ldr	r0, [pc, #112]	; (80012e4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001274:	f7ff fd5a 	bl	8000d2c <time_event_is_active>
 8001278:	4603      	mov	r3, r0
 800127a:	f083 0301 	eor.w	r3, r3, #1
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d024      	beq.n	80012ce <HAL_GPIO_EXTI_Callback+0x9e>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8001284:	2132      	movs	r1, #50	; 0x32
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001288:	f7ff fd2a 	bl	8000ce0 <time_event_start>
    break;
 800128c:	e01f      	b.n	80012ce <HAL_GPIO_EXTI_Callback+0x9e>
        if (!time_event_is_active(&navigation_btn.left.debounce))
 800128e:	4816      	ldr	r0, [pc, #88]	; (80012e8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001290:	f7ff fd4c 	bl	8000d2c <time_event_is_active>
 8001294:	4603      	mov	r3, r0
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d018      	beq.n	80012d2 <HAL_GPIO_EXTI_Callback+0xa2>
            time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 80012a0:	2132      	movs	r1, #50	; 0x32
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <HAL_GPIO_EXTI_Callback+0xb8>)
 80012a4:	f7ff fd1c 	bl	8000ce0 <time_event_start>
    break;
 80012a8:	e013      	b.n	80012d2 <HAL_GPIO_EXTI_Callback+0xa2>
        if (!time_event_is_active(&navigation_btn.right.debounce))
 80012aa:	4810      	ldr	r0, [pc, #64]	; (80012ec <HAL_GPIO_EXTI_Callback+0xbc>)
 80012ac:	f7ff fd3e 	bl	8000d2c <time_event_is_active>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00c      	beq.n	80012d6 <HAL_GPIO_EXTI_Callback+0xa6>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 80012bc:	2132      	movs	r1, #50	; 0x32
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <HAL_GPIO_EXTI_Callback+0xbc>)
 80012c0:	f7ff fd0e 	bl	8000ce0 <time_event_start>
    break;
 80012c4:	e007      	b.n	80012d6 <HAL_GPIO_EXTI_Callback+0xa6>
        break;
 80012c6:	bf00      	nop
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 80012ca:	bf00      	nop
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 80012ce:	bf00      	nop
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 80012d6:	bf00      	nop
    }

}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000014c 	.word	0x2000014c
 80012e4:	2000010c 	.word	0x2000010c
 80012e8:	2000012c 	.word	0x2000012c
 80012ec:	2000013c 	.word	0x2000013c

080012f0 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 80012f4:	2001      	movs	r0, #1
 80012f6:	f002 fc93 	bl	8003c20 <HAL_GPIO_EXTI_IRQHandler>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}

080012fe <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 8001302:	2010      	movs	r0, #16
 8001304:	f002 fc8c 	bl	8003c20 <HAL_GPIO_EXTI_IRQHandler>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5)
 8001310:	2020      	movs	r0, #32
 8001312:	f002 fc85 	bl	8003c20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 8001316:	2080      	movs	r0, #128	; 0x80
 8001318:	f002 fc82 	bl	8003c20 <HAL_GPIO_EXTI_IRQHandler>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	2228      	movs	r2, #40	; 0x28
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fc84 	bl	8004c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001350:	2301      	movs	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135e:	2301      	movs	r3, #1
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800136c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001370:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fdae 	bl	8003ed8 <HAL_RCC_OscConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0x66>
  {
	Error_Handler();
 8001382:	f000 fa61 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001386:	230f      	movs	r3, #15
 8001388:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2102      	movs	r1, #2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f81a 	bl	80043dc <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x92>
  {
	Error_Handler();
 80013ae:	f000 fa4b 	bl	8001848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013b2:	2302      	movs	r3, #2
 80013b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 f990 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xae>
  {
	Error_Handler();
 80013ca:	f000 fa3d 	bl	8001848 <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_ADC1_Init+0x74>)
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <MX_ADC1_Init+0x78>)
 80013ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_ADC1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_ADC1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_ADC1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_ADC1_Init+0x74>)
 8001402:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_ADC1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_ADC1_Init+0x74>)
 8001410:	2201      	movs	r2, #1
 8001412:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_ADC1_Init+0x74>)
 8001416:	f001 fed5 	bl	80031c4 <HAL_ADC_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 fa12 	bl	8001848 <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 8001424:	230a      	movs	r3, #10
 8001426:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001428:	2301      	movs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_ADC1_Init+0x74>)
 8001436:	f001 ff9d 	bl	8003374 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001440:	f000 fa02 	bl	8001848 <Error_Handler>
  }
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000026c 	.word	0x2000026c
 8001450:	40012400 	.word	0x40012400

08001454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_I2C1_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_I2C1_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_I2C1_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001492:	f002 fbdd 	bl	8003c50 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 f9d4 	bl	8001848 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000029c 	.word	0x2000029c
 80014a8:	40005400 	.word	0x40005400
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_SPI2_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <MX_SPI2_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI2_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI2_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI2_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI2_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI2_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_SPI2_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI2_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_SPI2_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI2_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_SPI2_Init+0x64>)
 8001502:	f003 f9a5 	bl	8004850 <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800150c:	f000 f99c 	bl	8001848 <Error_Handler>
  }
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002f0 	.word	0x200002f0
 8001518:	40003800 	.word	0x40003800

0800151c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_TIM1_Init+0x70>)
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <MX_TIM1_Init+0x74>)
 800152e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_TIM1_Init+0x70>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_TIM1_Init+0x70>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_TIM1_Init+0x70>)
 800153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_TIM1_Init+0x70>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_TIM1_Init+0x70>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_TIM1_Init+0x70>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001556:	2108      	movs	r1, #8
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <MX_TIM1_Init+0x70>)
 800155a:	f003 f9fd 	bl	8004958 <HAL_TIM_OnePulse_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f970 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_TIM1_Init+0x70>)
 8001576:	f003 faa1 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001580:	f000 f962 	bl	8001848 <Error_Handler>
  }


}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200003d0 	.word	0x200003d0
 8001590:	40012c00 	.word	0x40012c00

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_DMA_Init+0x48>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <MX_DMA_Init+0x48>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_DMA_Init+0x48>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	200e      	movs	r0, #14
 80015b8:	f002 f8ed 	bl	8003796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015bc:	200e      	movs	r0, #14
 80015be:	f002 f906 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	200f      	movs	r0, #15
 80015c8:	f002 f8e5 	bl	8003796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015cc:	200f      	movs	r0, #15
 80015ce:	f002 f8fe 	bl	80037ce <HAL_NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f4:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a6d      	ldr	r2, [pc, #436]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b6b      	ldr	r3, [pc, #428]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160c:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a67      	ldr	r2, [pc, #412]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 8001612:	f043 0320 	orr.w	r3, r3, #32
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a61      	ldr	r2, [pc, #388]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b5c      	ldr	r3, [pc, #368]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a5b      	ldr	r2, [pc, #364]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <MX_GPIO_Init+0x1d0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2102      	movs	r1, #2
 8001658:	4856      	ldr	r0, [pc, #344]	; (80017b4 <MX_GPIO_Init+0x1d4>)
 800165a:	f002 fac8 	bl	8003bee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 800165e:	2200      	movs	r2, #0
 8001660:	f640 715f 	movw	r1, #3935	; 0xf5f
 8001664:	4854      	ldr	r0, [pc, #336]	; (80017b8 <MX_GPIO_Init+0x1d8>)
 8001666:	f002 fac2 	bl	8003bee <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001670:	4852      	ldr	r0, [pc, #328]	; (80017bc <MX_GPIO_Init+0x1dc>)
 8001672:	f002 fabc 	bl	8003bee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8001676:	2302      	movs	r3, #2
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4619      	mov	r1, r3
 800168c:	4849      	ldr	r0, [pc, #292]	; (80017b4 <MX_GPIO_Init+0x1d4>)
 800168e:	f002 f913 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 8001692:	f241 338c 	movw	r3, #5004	; 0x138c
 8001696:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	4619      	mov	r1, r3
 80016a6:	4843      	ldr	r0, [pc, #268]	; (80017b4 <MX_GPIO_Init+0x1d4>)
 80016a8:	f002 f906 	bl	80038b8 <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 80016ac:	f640 735f 	movw	r3, #3935	; 0xf5f
 80016b0:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4619      	mov	r1, r3
 80016c4:	483c      	ldr	r0, [pc, #240]	; (80017b8 <MX_GPIO_Init+0x1d8>)
 80016c6:	f002 f8f7 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 80016ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	4836      	ldr	r0, [pc, #216]	; (80017b8 <MX_GPIO_Init+0x1d8>)
 80016e0:	f002 f8ea 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80016e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	482f      	ldr	r0, [pc, #188]	; (80017bc <MX_GPIO_Init+0x1dc>)
 80016fe:	f002 f8db 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 8001702:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <MX_GPIO_Init+0x1e0>)
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	4827      	ldr	r0, [pc, #156]	; (80017b4 <MX_GPIO_Init+0x1d4>)
 8001718:	f002 f8ce 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 800171c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <MX_GPIO_Init+0x1e0>)
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	4821      	ldr	r0, [pc, #132]	; (80017b8 <MX_GPIO_Init+0x1d8>)
 8001732:	f002 f8c1 	bl	80038b8 <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8001736:	2330      	movs	r3, #48	; 0x30
 8001738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <MX_GPIO_Init+0x1e4>)
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4619      	mov	r1, r3
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <MX_GPIO_Init+0x1d4>)
 800174a:	f002 f8b5 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin =  DOWN_Pin;
 800174e:	2320      	movs	r3, #32
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4619      	mov	r1, r3
 8001760:	4814      	ldr	r0, [pc, #80]	; (80017b4 <MX_GPIO_Init+0x1d4>)
 8001762:	f002 f8a9 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001766:	23a0      	movs	r3, #160	; 0xa0
 8001768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_GPIO_Init+0x1e4>)
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	480f      	ldr	r0, [pc, #60]	; (80017b8 <MX_GPIO_Init+0x1d8>)
 800177a:	f002 f89d 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 800177e:	2301      	movs	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_GPIO_Init+0x1e4>)
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	4619      	mov	r1, r3
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <MX_GPIO_Init+0x1dc>)
 8001792:	f002 f891 	bl	80038b8 <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 8001796:	2006      	movs	r0, #6
 8001798:	f002 f819 	bl	80037ce <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, right -> A7
 800179c:	2017      	movs	r0, #23
 800179e:	f002 f816 	bl	80037ce <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 80017a2:	200a      	movs	r0, #10
 80017a4:	f002 f813 	bl	80037ce <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40011000 	.word	0x40011000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	10110000 	.word	0x10110000
 80017c4:	10210000 	.word	0x10210000

080017c8 <init_peripherals>:

void init_peripherals(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017cc:	f001 fc74 	bl	80030b8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80017d0:	f7ff fda6 	bl	8001320 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d4:	f7ff ff04 	bl	80015e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80017d8:	f7ff fdfe 	bl	80013d8 <MX_ADC1_Init>
  MX_SPI2_Init();
 80017dc:	f7ff fe68 	bl	80014b0 <MX_SPI2_Init>
  MX_DMA_Init();
 80017e0:	f7ff fed8 	bl	8001594 <MX_DMA_Init>
  MX_TIM1_Init();
 80017e4:	f7ff fe9a 	bl	800151c <MX_TIM1_Init>
  MX_I2C1_Init();
 80017e8:	f7ff fe34 	bl	8001454 <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 80017ec:	f7fe ffd6 	bl	800079c <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 80017f0:	f000 fe7c 	bl	80024ec <BSP_LCD_Init>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  init_peripherals();
 80017fe:	f7ff ffe3 	bl	80017c8 <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <main+0x44>)
 8001804:	f7fe fca2 	bl	800014c <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 8001808:	f7ff fb12 	bl	8000e30 <event_manager_fsm_get>
 800180c:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fb40 	bl	8000e94 <event_manager_fsm_init>

  /*Init UI */
  ui_handle_t ui_fsm = ui_fsm_get();
 8001814:	f7ff fbf2 	bl	8000ffc <ui_fsm_get>
 8001818:	6038      	str	r0, [r7, #0]
  ui_fsm_init(ui_fsm);
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f7ff fbf8 	bl	8001010 <ui_fsm_init>

  printf("Pet Feeder V%s\r\n", FW_VERSION);
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <main+0x48>)
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <main+0x4c>)
 8001824:	f003 fddc 	bl	80053e0 <iprintf>

  /* Infinite loop */
  while (1)
  {
    ui_fsm_run(ui_fsm);
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7ff fbfd 	bl	8001028 <ui_fsm_run>
    event_manager_fsm_run(evm_fsm);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fb19 	bl	8000e66 <event_manager_fsm_run>
    time_events_poll_update();
 8001834:	f7ff fad6 	bl	8000de4 <time_events_poll_update>
    ui_fsm_run(ui_fsm);
 8001838:	e7f6      	b.n	8001828 <main+0x30>
 800183a:	bf00      	nop
 800183c:	20000104 	.word	0x20000104
 8001840:	08005fb0 	.word	0x08005fb0
 8001844:	08005fc0 	.word	0x08005fc0

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_MspInit+0x5c>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <HAL_MspInit+0x5c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_MspInit+0x5c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x5c>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_MspInit+0x5c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_MspInit+0x5c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_MspInit+0x60>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_MspInit+0x60>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6053      	str	r3, [r2, #4]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000

080018b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_ADC_MspInit+0x6c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d121      	bne.n	800191c <HAL_ADC_MspInit+0x64>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_ADC_MspInit+0x70>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_ADC_MspInit+0x70>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_ADC_MspInit+0x70>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_ADC_MspInit+0x70>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_ADC_MspInit+0x70>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_ADC_MspInit+0x70>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190c:	2303      	movs	r3, #3
 800190e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_ADC_MspInit+0x74>)
 8001918:	f001 ffce 	bl	80038b8 <HAL_GPIO_Init>
  }

}
 800191c:	bf00      	nop
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40012400 	.word	0x40012400
 8001928:	40021000 	.word	0x40021000
 800192c:	40011000 	.word	0x40011000

08001930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <HAL_I2C_MspInit+0x70>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d123      	bne.n	8001998 <HAL_I2C_MspInit+0x68>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8001968:	23c0      	movs	r3, #192	; 0xc0
 800196a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196c:	2312      	movs	r3, #18
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4619      	mov	r1, r3
 800197a:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_I2C_MspInit+0x78>)
 800197c:	f001 ff9c 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800198a:	61d3      	str	r3, [r2, #28]
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]

  }

}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010c00 	.word	0x40010c00

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <HAL_SPI_MspInit+0x124>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d17d      	bne.n	8001ac8 <HAL_SPI_MspInit+0x11c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019cc:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <HAL_SPI_MspInit+0x128>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <HAL_SPI_MspInit+0x128>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	61d3      	str	r3, [r2, #28]
 80019d8:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_SPI_MspInit+0x128>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e4:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_SPI_MspInit+0x128>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a3a      	ldr	r2, [pc, #232]	; (8001ad4 <HAL_SPI_MspInit+0x128>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_SPI_MspInit+0x128>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80019fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4831      	ldr	r0, [pc, #196]	; (8001ad8 <HAL_SPI_MspInit+0x12c>)
 8001a12:	f001 ff51 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8001a16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	482b      	ldr	r0, [pc, #172]	; (8001ad8 <HAL_SPI_MspInit+0x12c>)
 8001a2c:	f001 ff44 	bl	80038b8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a32:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <HAL_SPI_MspInit+0x134>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001a60:	481e      	ldr	r0, [pc, #120]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a62:	f001 fecf 	bl	8003804 <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001a6c:	f7ff feec 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a74:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_SPI_MspInit+0x130>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001a7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <HAL_SPI_MspInit+0x13c>)
 8001a80:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001a84:	2210      	movs	r2, #16
 8001a86:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001aae:	f001 fea9 	bl	8003804 <HAL_DMA_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8001ab8:	f7ff fec6 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001ac0:	649a      	str	r2, [r3, #72]	; 0x48
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_SPI_MspInit+0x138>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6253      	str	r3, [r2, #36]	; 0x24


  }

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	20000348 	.word	0x20000348
 8001ae0:	40020044 	.word	0x40020044
 8001ae4:	2000038c 	.word	0x2000038c
 8001ae8:	40020058 	.word	0x40020058

08001aec <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_TIM_OnePulse_MspInit+0x34>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10b      	bne.n	8001b16 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_TIM_OnePulse_MspInit+0x38>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_TIM_OnePulse_MspInit+0x38>)
 8001b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_TIM_OnePulse_MspInit+0x38>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  }

}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40021000 	.word	0x40021000

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b6e:	f7ff f931 	bl	8000dd4 <HAL_SYSTICK_Callback>
  HAL_IncTick();
 8001b72:	f001 fae7 	bl	8003144 <HAL_IncTick>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
	return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <_kill>:

int _kill(int pid, int sig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b92:	f003 f80f 	bl	8004bb4 <__errno>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2216      	movs	r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_exit>:

void _exit (int status)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffe7 	bl	8001b88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bba:	e7fe      	b.n	8001bba <_exit+0x12>

08001bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e00a      	b.n	8001be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bce:	f3af 8000 	nop.w
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	60ba      	str	r2, [r7, #8]
 8001bda:	b2ca      	uxtb	r2, r1
 8001bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf0      	blt.n	8001bce <_read+0x12>
	}

return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1c:	605a      	str	r2, [r3, #4]
	return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_isatty>:

int _isatty(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
	return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f002 ff94 	bl	8004bb4 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20005000 	.word	0x20005000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000418 	.word	0x20000418
 8001cc0:	20000558 	.word	0x20000558

08001cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	; (8001d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	; (8001d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cf6:	f7ff ffe5 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f002 ff73 	bl	8004be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7ff fd7b 	bl	80017f8 <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001d0c:	080064ec 	.word	0x080064ec
  ldr r2, =_sbss
 8001d10:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001d14:	20000554 	.word	0x20000554

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8001d20:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <ili9488_Init+0x114>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d115      	bne.n	8001d58 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8001d2c:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <ili9488_Init+0x114>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <ili9488_Init+0x114>)
 8001d38:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <ili9488_Init+0x114>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <ili9488_Init+0x2e>
      LCD_IO_Init();
 8001d46:	f001 f835 	bl	8002db4 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8001d4a:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <ili9488_Init+0x114>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <ili9488_Init+0x114>)
 8001d56:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8001d58:	2069      	movs	r0, #105	; 0x69
 8001d5a:	f001 f809 	bl	8002d70 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f001 f8bc 	bl	8002edc <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8001d64:	2005      	movs	r0, #5
 8001d66:	f001 f803 	bl	8002d70 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	4931      	ldr	r1, [pc, #196]	; (8001e34 <ili9488_Init+0x118>)
 8001d6e:	20e0      	movs	r0, #224	; 0xe0
 8001d70:	f001 f912 	bl	8002f98 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8001d74:	220f      	movs	r2, #15
 8001d76:	4930      	ldr	r1, [pc, #192]	; (8001e38 <ili9488_Init+0x11c>)
 8001d78:	20e1      	movs	r0, #225	; 0xe1
 8001d7a:	f001 f90d 	bl	8002f98 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8001d7e:	2202      	movs	r2, #2
 8001d80:	492e      	ldr	r1, [pc, #184]	; (8001e3c <ili9488_Init+0x120>)
 8001d82:	20c0      	movs	r0, #192	; 0xc0
 8001d84:	f001 f908 	bl	8002f98 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8001d88:	2005      	movs	r0, #5
 8001d8a:	f000 fff1 	bl	8002d70 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8001d8e:	20c1      	movs	r0, #193	; 0xc1
 8001d90:	f001 f8a4 	bl	8002edc <LCD_IO_WriteCmd8>
 8001d94:	2041      	movs	r0, #65	; 0x41
 8001d96:	f001 f8bd 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8001d9a:	2005      	movs	r0, #5
 8001d9c:	f000 ffe8 	bl	8002d70 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8001da0:	2203      	movs	r2, #3
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <ili9488_Init+0x124>)
 8001da4:	20c5      	movs	r0, #197	; 0xc5
 8001da6:	f001 f8f7 	bl	8002f98 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8001daa:	2005      	movs	r0, #5
 8001dac:	f000 ffe0 	bl	8002d70 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8001db0:	203a      	movs	r0, #58	; 0x3a
 8001db2:	f001 f893 	bl	8002edc <LCD_IO_WriteCmd8>
 8001db6:	2066      	movs	r0, #102	; 0x66
 8001db8:	f001 f8ac 	bl	8002f14 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 8001dbc:	20b0      	movs	r0, #176	; 0xb0
 8001dbe:	f001 f88d 	bl	8002edc <LCD_IO_WriteCmd8>
 8001dc2:	2080      	movs	r0, #128	; 0x80
 8001dc4:	f001 f8a6 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8001dc8:	20b1      	movs	r0, #177	; 0xb1
 8001dca:	f001 f887 	bl	8002edc <LCD_IO_WriteCmd8>
 8001dce:	20a0      	movs	r0, #160	; 0xa0
 8001dd0:	f001 f8a0 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8001dd4:	20b4      	movs	r0, #180	; 0xb4
 8001dd6:	f001 f881 	bl	8002edc <LCD_IO_WriteCmd8>
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f001 f89a 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8001de0:	2202      	movs	r2, #2
 8001de2:	4918      	ldr	r1, [pc, #96]	; (8001e44 <ili9488_Init+0x128>)
 8001de4:	20b6      	movs	r0, #182	; 0xb6
 8001de6:	f001 f8d7 	bl	8002f98 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8001dea:	20e9      	movs	r0, #233	; 0xe9
 8001dec:	f001 f876 	bl	8002edc <LCD_IO_WriteCmd8>
 8001df0:	2000      	movs	r0, #0
 8001df2:	f001 f88f 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8001df6:	2204      	movs	r2, #4
 8001df8:	4913      	ldr	r1, [pc, #76]	; (8001e48 <ili9488_Init+0x12c>)
 8001dfa:	20f7      	movs	r0, #247	; 0xf7
 8001dfc:	f001 f8cc 	bl	8002f98 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8001e00:	2005      	movs	r0, #5
 8001e02:	f000 ffb5 	bl	8002d70 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8001e06:	2011      	movs	r0, #17
 8001e08:	f001 f868 	bl	8002edc <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8001e0c:	2078      	movs	r0, #120	; 0x78
 8001e0e:	f000 ffaf 	bl	8002d70 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8001e12:	2029      	movs	r0, #41	; 0x29
 8001e14:	f001 f862 	bl	8002edc <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8001e18:	2005      	movs	r0, #5
 8001e1a:	f000 ffa9 	bl	8002d70 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8001e1e:	2036      	movs	r0, #54	; 0x36
 8001e20:	f001 f85c 	bl	8002edc <LCD_IO_WriteCmd8>
 8001e24:	20e8      	movs	r0, #232	; 0xe8
 8001e26:	f001 f875 	bl	8002f14 <LCD_IO_WriteData8>
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000041c 	.word	0x2000041c
 8001e34:	08005fd4 	.word	0x08005fd4
 8001e38:	08005fe4 	.word	0x08005fe4
 8001e3c:	08005ff4 	.word	0x08005ff4
 8001e40:	08005ff8 	.word	0x08005ff8
 8001e44:	08005ffc 	.word	0x08005ffc
 8001e48:	08006000 	.word	0x08006000

08001e4c <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8001e50:	2011      	movs	r0, #17
 8001e52:	f001 f843 	bl	8002edc <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f000 ff96 	bl	8002d88 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8001e64:	2010      	movs	r0, #16
 8001e66:	f001 f839 	bl	8002edc <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 ff8c 	bl	8002d88 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8001e78:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8001e88:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <ili9488_ReadID+0x40>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8001ea6:	f7ff ff39 	bl	8001d1c <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8001eaa:	1d39      	adds	r1, r7, #4
 8001eac:	2300      	movs	r3, #0
 8001eae:	2203      	movs	r2, #3
 8001eb0:	2004      	movs	r0, #4
 8001eb2:	f001 f8b5 	bl	8003020 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <ili9488_ReadID+0x44>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d102      	bne.n	8001eca <ili9488_ReadID+0x36>
    return 0x9488;
 8001ec4:	f249 4388 	movw	r3, #38024	; 0x9488
 8001ec8:	e000      	b.n	8001ecc <ili9488_ReadID+0x38>
  return 0;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	2000041c 	.word	0x2000041c
 8001ed8:	00668054 	.word	0x00668054

08001edc <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	80fb      	strh	r3, [r7, #6]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8001eec:	202a      	movs	r0, #42	; 0x2a
 8001eee:	f000 fff5 	bl	8002edc <LCD_IO_WriteCmd8>
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 f80a 	bl	8002f14 <LCD_IO_WriteData8>
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 f805 	bl	8002f14 <LCD_IO_WriteData8>
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fffe 	bl	8002f14 <LCD_IO_WriteData8>
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fff9 	bl	8002f14 <LCD_IO_WriteData8>
 8001f22:	202b      	movs	r0, #43	; 0x2b
 8001f24:	f000 ffda 	bl	8002edc <LCD_IO_WriteCmd8>
 8001f28:	88bb      	ldrh	r3, [r7, #4]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 ffef 	bl	8002f14 <LCD_IO_WriteData8>
 8001f36:	88bb      	ldrh	r3, [r7, #4]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 ffea 	bl	8002f14 <LCD_IO_WriteData8>
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 ffe3 	bl	8002f14 <LCD_IO_WriteData8>
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 ffde 	bl	8002f14 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	121b      	asrs	r3, r3, #8
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f023 0307 	bic.w	r3, r3, #7
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 ffcc 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	10db      	asrs	r3, r3, #3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 ffc3 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 ffbd 	bl	8002f14 <LCD_IO_WriteData8>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	80fb      	strh	r3, [r7, #6]
 8001fac:	460b      	mov	r3, r1
 8001fae:	80bb      	strh	r3, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8001fb4:	202a      	movs	r0, #42	; 0x2a
 8001fb6:	f000 ff91 	bl	8002edc <LCD_IO_WriteCmd8>
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 ffa6 	bl	8002f14 <LCD_IO_WriteData8>
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 ffa1 	bl	8002f14 <LCD_IO_WriteData8>
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 ff9a 	bl	8002f14 <LCD_IO_WriteData8>
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 ff95 	bl	8002f14 <LCD_IO_WriteData8>
 8001fea:	202b      	movs	r0, #43	; 0x2b
 8001fec:	f000 ff76 	bl	8002edc <LCD_IO_WriteCmd8>
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 ff8b 	bl	8002f14 <LCD_IO_WriteData8>
 8001ffe:	88bb      	ldrh	r3, [r7, #4]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 ff86 	bl	8002f14 <LCD_IO_WriteData8>
 8002008:	88bb      	ldrh	r3, [r7, #4]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	b29b      	uxth	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	f000 ff7f 	bl	8002f14 <LCD_IO_WriteData8>
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 ff7a 	bl	8002f14 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002020:	202c      	movs	r0, #44	; 0x2c
 8002022:	f000 ff5b 	bl	8002edc <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff99 	bl	8001f60 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	460a      	mov	r2, r1
 8002040:	80fb      	strh	r3, [r7, #6]
 8002042:	4613      	mov	r3, r2
 8002044:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002046:	202a      	movs	r0, #42	; 0x2a
 8002048:	f000 ff48 	bl	8002edc <LCD_IO_WriteCmd8>
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	b29b      	uxth	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f000 ff5d 	bl	8002f14 <LCD_IO_WriteData8>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 ff58 	bl	8002f14 <LCD_IO_WriteData8>
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29b      	uxth	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	f000 ff51 	bl	8002f14 <LCD_IO_WriteData8>
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f000 ff4c 	bl	8002f14 <LCD_IO_WriteData8>
 800207c:	202b      	movs	r0, #43	; 0x2b
 800207e:	f000 ff2d 	bl	8002edc <LCD_IO_WriteCmd8>
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 ff42 	bl	8002f14 <LCD_IO_WriteData8>
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	f000 ff3d 	bl	8002f14 <LCD_IO_WriteData8>
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 ff36 	bl	8002f14 <LCD_IO_WriteData8>
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 ff31 	bl	8002f14 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 80020b2:	f107 010e 	add.w	r1, r7, #14
 80020b6:	2301      	movs	r3, #1
 80020b8:	2201      	movs	r2, #1
 80020ba:	202e      	movs	r0, #46	; 0x2e
 80020bc:	f000 ffd6 	bl	800306c <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 80020c0:	89fb      	ldrh	r3, [r7, #14]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4604      	mov	r4, r0
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	80fb      	strh	r3, [r7, #6]
 80020de:	4603      	mov	r3, r0
 80020e0:	80bb      	strh	r3, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	807b      	strh	r3, [r7, #2]
 80020e6:	4613      	mov	r3, r2
 80020e8:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80020ea:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <ili9488_SetDisplayWindow+0xc8>)
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	8013      	strh	r3, [r2, #0]
 80020f0:	88ba      	ldrh	r2, [r7, #4]
 80020f2:	883b      	ldrh	r3, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b26      	ldr	r3, [pc, #152]	; (8002198 <ili9488_SetDisplayWindow+0xcc>)
 80020fe:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8002100:	202a      	movs	r0, #42	; 0x2a
 8002102:	f000 feeb 	bl	8002edc <LCD_IO_WriteCmd8>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	b29b      	uxth	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f000 ff00 	bl	8002f14 <LCD_IO_WriteData8>
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fefb 	bl	8002f14 <LCD_IO_WriteData8>
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	4413      	add	r3, r2
 8002124:	3b01      	subs	r3, #1
 8002126:	121b      	asrs	r3, r3, #8
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fef2 	bl	8002f14 <LCD_IO_WriteData8>
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fee7 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8002146:	202b      	movs	r0, #43	; 0x2b
 8002148:	f000 fec8 	bl	8002edc <LCD_IO_WriteCmd8>
 800214c:	88bb      	ldrh	r3, [r7, #4]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fedd 	bl	8002f14 <LCD_IO_WriteData8>
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fed8 	bl	8002f14 <LCD_IO_WriteData8>
 8002164:	88ba      	ldrh	r2, [r7, #4]
 8002166:	883b      	ldrh	r3, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	3b01      	subs	r3, #1
 800216c:	121b      	asrs	r3, r3, #8
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fecf 	bl	8002f14 <LCD_IO_WriteData8>
 8002176:	88bb      	ldrh	r3, [r7, #4]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	883b      	ldrh	r3, [r7, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4413      	add	r3, r2
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fec4 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	2000041e 	.word	0x2000041e
 8002198:	20000420 	.word	0x20000420

0800219c <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b085      	sub	sp, #20
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	4604      	mov	r4, r0
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4623      	mov	r3, r4
 80021ac:	80fb      	strh	r3, [r7, #6]
 80021ae:	4603      	mov	r3, r0
 80021b0:	80bb      	strh	r3, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	807b      	strh	r3, [r7, #2]
 80021b6:	4613      	mov	r3, r2
 80021b8:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 80021ba:	883a      	ldrh	r2, [r7, #0]
 80021bc:	8879      	ldrh	r1, [r7, #2]
 80021be:	88b8      	ldrh	r0, [r7, #4]
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	f000 f820 	bl	800220a <ili9488_FillRect>
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}

080021d2 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80021d2:	b590      	push	{r4, r7, lr}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af02      	add	r7, sp, #8
 80021d8:	4604      	mov	r4, r0
 80021da:	4608      	mov	r0, r1
 80021dc:	4611      	mov	r1, r2
 80021de:	461a      	mov	r2, r3
 80021e0:	4623      	mov	r3, r4
 80021e2:	80fb      	strh	r3, [r7, #6]
 80021e4:	4603      	mov	r3, r0
 80021e6:	80bb      	strh	r3, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 80021f0:	883a      	ldrh	r2, [r7, #0]
 80021f2:	8879      	ldrh	r1, [r7, #2]
 80021f4:	88b8      	ldrh	r0, [r7, #4]
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	2201      	movs	r2, #1
 80021fe:	f000 f804 	bl	800220a <ili9488_FillRect>
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bd90      	pop	{r4, r7, pc}

0800220a <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 800220a:	b590      	push	{r4, r7, lr}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	4604      	mov	r4, r0
 8002212:	4608      	mov	r0, r1
 8002214:	4611      	mov	r1, r2
 8002216:	461a      	mov	r2, r3
 8002218:	4623      	mov	r3, r4
 800221a:	80fb      	strh	r3, [r7, #6]
 800221c:	4603      	mov	r3, r0
 800221e:	80bb      	strh	r3, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002228:	883b      	ldrh	r3, [r7, #0]
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	88b9      	ldrh	r1, [r7, #4]
 800222e:	88f8      	ldrh	r0, [r7, #6]
 8002230:	f7ff ff4c 	bl	80020cc <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002234:	202c      	movs	r0, #44	; 0x2c
 8002236:	f000 fe51 	bl	8002edc <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	883a      	ldrh	r2, [r7, #0]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 8002244:	e003      	b.n	800224e <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 8002246:	8c3b      	ldrh	r3, [r7, #32]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fe89 	bl	8001f60 <ili9488_write16to24>
  while(XYsize--)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	60fa      	str	r2, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f6      	bne.n	8002246 <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
	...

08002264 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	603a      	str	r2, [r7, #0]
 800226e:	80fb      	strh	r3, [r7, #6]
 8002270:	460b      	mov	r3, r1
 8002272:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	3316      	adds	r3, #22
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3317      	adds	r3, #23
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b29b      	uxth	r3, r3
 8002290:	4413      	add	r3, r2
 8002292:	b29a      	uxth	r2, r3
 8002294:	88bb      	ldrh	r3, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	3302      	adds	r3, #2
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	3304      	adds	r3, #4
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	330a      	adds	r3, #10
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4413      	add	r3, r2
 80022e6:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 80022e8:	2036      	movs	r0, #54	; 0x36
 80022ea:	f000 fdf7 	bl	8002edc <LCD_IO_WriteCmd8>
 80022ee:	20a8      	movs	r0, #168	; 0xa8
 80022f0:	f000 fe10 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 80022f4:	202b      	movs	r0, #43	; 0x2b
 80022f6:	f000 fdf1 	bl	8002edc <LCD_IO_WriteCmd8>
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <ili9488_DrawBitmap+0x118>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002302:	3301      	adds	r3, #1
 8002304:	121b      	asrs	r3, r3, #8
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fe03 	bl	8002f14 <LCD_IO_WriteData8>
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <ili9488_DrawBitmap+0x118>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fdfa 	bl	8002f14 <LCD_IO_WriteData8>
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <ili9488_DrawBitmap+0x11c>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002328:	3301      	adds	r3, #1
 800232a:	121b      	asrs	r3, r3, #8
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fdf0 	bl	8002f14 <LCD_IO_WriteData8>
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <ili9488_DrawBitmap+0x11c>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fde7 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002346:	202c      	movs	r0, #44	; 0x2c
 8002348:	f000 fdc8 	bl	8002edc <LCD_IO_WriteCmd8>
  while(size--)
 800234c:	e007      	b.n	800235e <ili9488_DrawBitmap+0xfa>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe04 	bl	8001f60 <ili9488_write16to24>
    pbmp+= 2;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3302      	adds	r3, #2
 800235c:	603b      	str	r3, [r7, #0]
  while(size--)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f2      	bne.n	800234e <ili9488_DrawBitmap+0xea>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8002368:	2036      	movs	r0, #54	; 0x36
 800236a:	f000 fdb7 	bl	8002edc <LCD_IO_WriteCmd8>
 800236e:	20e8      	movs	r0, #232	; 0xe8
 8002370:	f000 fdd0 	bl	8002f14 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000420 	.word	0x20000420
 8002380:	2000041e 	.word	0x2000041e

08002384 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4623      	mov	r3, r4
 8002394:	80fb      	strh	r3, [r7, #6]
 8002396:	4603      	mov	r3, r0
 8002398:	80bb      	strh	r3, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]
 800239e:	4613      	mov	r3, r2
 80023a0:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 80023a2:	887b      	ldrh	r3, [r7, #2]
 80023a4:	883a      	ldrh	r2, [r7, #0]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80023ac:	883b      	ldrh	r3, [r7, #0]
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	88b9      	ldrh	r1, [r7, #4]
 80023b2:	88f8      	ldrh	r0, [r7, #6]
 80023b4:	f7ff fe8a 	bl	80020cc <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80023b8:	202c      	movs	r0, #44	; 0x2c
 80023ba:	f000 fd8f 	bl	8002edc <LCD_IO_WriteCmd8>
  while(size--)
 80023be:	e007      	b.n	80023d0 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fdcb 	bl	8001f60 <ili9488_write16to24>
    pdata++;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	3302      	adds	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
  while(size--)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e5a      	subs	r2, r3, #1
 80023d4:	60fa      	str	r2, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f2      	bne.n	80023c0 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}

080023e4 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4604      	mov	r4, r0
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	80fb      	strh	r3, [r7, #6]
 80023f6:	4603      	mov	r3, r0
 80023f8:	80bb      	strh	r3, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]
 80023fe:	4613      	mov	r3, r2
 8002400:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	883a      	ldrh	r2, [r7, #0]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002410:	883b      	ldrh	r3, [r7, #0]
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	88b9      	ldrh	r1, [r7, #4]
 8002416:	88f8      	ldrh	r0, [r7, #6]
 8002418:	f7ff fe58 	bl	80020cc <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 800241c:	2301      	movs	r3, #1
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	6a39      	ldr	r1, [r7, #32]
 8002422:	202e      	movs	r0, #46	; 0x2e
 8002424:	f000 fe22 	bl	800306c <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bd90      	pop	{r4, r7, pc}

08002430 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
 800243a:	460b      	mov	r3, r1
 800243c:	80bb      	strh	r3, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 8002442:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <ili9488_Scroll+0xb4>)
 8002444:	88db      	ldrh	r3, [r3, #6]
 8002446:	88ba      	ldrh	r2, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d104      	bne.n	8002456 <ili9488_Scroll+0x26>
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <ili9488_Scroll+0xb4>)
 800244e:	885b      	ldrh	r3, [r3, #2]
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	429a      	cmp	r2, r3
 8002454:	d013      	beq.n	800247e <ili9488_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8002456:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <ili9488_Scroll+0xb4>)
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 800245c:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <ili9488_Scroll+0xb4>)
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8002462:	88ba      	ldrh	r2, [r7, #4]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	4413      	add	r3, r2
 8002468:	b29b      	uxth	r3, r3
 800246a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <ili9488_Scroll+0xb4>)
 8002472:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8002474:	2203      	movs	r2, #3
 8002476:	491c      	ldr	r1, [pc, #112]	; (80024e8 <ili9488_Scroll+0xb8>)
 8002478:	2033      	movs	r0, #51	; 0x33
 800247a:	f000 fdad 	bl	8002fd8 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 800247e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <ili9488_Scroll+0xb4>)
 8002484:	8892      	ldrh	r2, [r2, #4]
 8002486:	fb93 f1f2 	sdiv	r1, r3, r2
 800248a:	fb01 f202 	mul.w	r2, r1, r2
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8002492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da0a      	bge.n	80024b0 <ili9488_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <ili9488_Scroll+0xb4>)
 800249c:	889a      	ldrh	r2, [r3, #4]
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	4413      	add	r3, r2
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <ili9488_Scroll+0xb4>)
 80024a6:	885b      	ldrh	r3, [r3, #2]
 80024a8:	4413      	add	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	80fb      	strh	r3, [r7, #6]
 80024ae:	e005      	b.n	80024bc <ili9488_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <ili9488_Scroll+0xb4>)
 80024b2:	885a      	ldrh	r2, [r3, #2]
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	4413      	add	r3, r2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 80024bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <ili9488_Scroll+0xb4>)
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d009      	beq.n	80024dc <ili9488_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <ili9488_Scroll+0xb4>)
 80024cc:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <ili9488_Scroll+0xb4>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4619      	mov	r1, r3
 80024d6:	2037      	movs	r0, #55	; 0x37
 80024d8:	f000 fd38 	bl	8002f4c <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000424 	.word	0x20000424
 80024e8:	20000426 	.word	0x20000426

080024ec <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <BSP_LCD_Init+0x3c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <BSP_LCD_Init+0x40>)
 8002500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002504:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <BSP_LCD_Init+0x40>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <BSP_LCD_Init+0x40>)
 800250e:	4a08      	ldr	r2, [pc, #32]	; (8002530 <BSP_LCD_Init+0x44>)
 8002510:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8002512:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002516:	f000 f825 	bl	8002564 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800251e:	79fb      	ldrb	r3, [r7, #7]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000074 	.word	0x20000074
 800252c:	2000042c 	.word	0x2000042c
 8002530:	20000000 	.word	0x20000000

08002534 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <BSP_LCD_GetXSize+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	4798      	blx	r3
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000074 	.word	0x20000074

0800254c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <BSP_LCD_GetYSize+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	4798      	blx	r3
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000074 	.word	0x20000074

08002564 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af02      	add	r7, sp, #8
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <BSP_LCD_Clear+0x38>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002574:	f7ff ffde 	bl	8002534 <BSP_LCD_GetXSize>
 8002578:	4603      	mov	r3, r0
 800257a:	461d      	mov	r5, r3
 800257c:	f7ff ffe6 	bl	800254c <BSP_LCD_GetYSize>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	462a      	mov	r2, r5
 800258c:	2100      	movs	r1, #0
 800258e:	2000      	movs	r0, #0
 8002590:	47a0      	blx	r4
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bdb0      	pop	{r4, r5, r7, pc}
 800259a:	bf00      	nop
 800259c:	20000074 	.word	0x20000074

080025a0 <__NVIC_EnableIRQ>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4906      	ldr	r1, [pc, #24]	; (80025d4 <__NVIC_EnableIRQ+0x34>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <LcdDirRead+0x70>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <LcdDirRead+0x70>)
 800263e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002642:	6013      	str	r3, [r2, #0]
  while(d--)
 8002644:	e008      	b.n	8002658 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <LcdDirRead+0x74>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 800264c:	2000      	movs	r0, #0
 800264e:	f000 fb7f 	bl	8002d50 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <LcdDirRead+0x74>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]
  while(d--)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1e5a      	subs	r2, r3, #1
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f1      	bne.n	8002646 <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <LcdDirRead+0x70>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <LcdDirRead+0x70>)
 800266c:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8002670:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002672:	e002      	b.n	800267a <LcdDirRead+0x4e>
    d = SPIX->DR;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <LcdDirRead+0x78>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <LcdDirRead+0x7c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f8      	bne.n	8002674 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <LcdDirRead+0x78>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 800268a:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <LcdDirRead+0x78>)
 800268c:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 8002690:	6013      	str	r3, [r2, #0]
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40010c04 	.word	0x40010c04
 80026a0:	422181b4 	.word	0x422181b4
 80026a4:	40003800 	.word	0x40003800
 80026a8:	42070100 	.word	0x42070100

080026ac <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <LcdDirWrite+0x5c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <LcdDirWrite+0x5c>)
 80026b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026bc:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80026be:	e002      	b.n	80026c6 <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <LcdDirWrite+0x5c>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <LcdDirWrite+0x60>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f8      	bne.n	80026c0 <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <LcdDirWrite+0x5c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 80026d6:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <LcdDirWrite+0x5c>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 fb36 	bl	8002d50 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80026e4:	e002      	b.n	80026ec <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <LcdDirWrite+0x5c>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <LcdDirWrite+0x60>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f8      	bne.n	80026e6 <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <LcdDirWrite+0x5c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a03      	ldr	r2, [pc, #12]	; (8002708 <LcdDirWrite+0x5c>)
 80026fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40003800 	.word	0x40003800
 800270c:	42070100 	.word	0x42070100

08002710 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <LcdWrite8+0x2c>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8002720:	2002      	movs	r0, #2
 8002722:	f000 fb15 	bl	8002d50 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8002726:	bf00      	nop
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <LcdWrite8+0x30>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1fb      	bne.n	8002728 <LcdWrite8+0x18>
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40003800 	.word	0x40003800
 8002740:	4207011c 	.word	0x4207011c

08002744 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <LcdCmdWrite8+0x34>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8002754:	4a09      	ldr	r2, [pc, #36]	; (800277c <LcdCmdWrite8+0x38>)
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 800275a:	2002      	movs	r0, #2
 800275c:	f000 faf8 	bl	8002d50 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8002760:	bf00      	nop
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <LcdCmdWrite8+0x3c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1fb      	bne.n	8002762 <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 800276a:	4b03      	ldr	r3, [pc, #12]	; (8002778 <LcdCmdWrite8+0x34>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	422181ac 	.word	0x422181ac
 800277c:	40003800 	.word	0x40003800
 8002780:	4207011c 	.word	0x4207011c

08002784 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8002788:	bf00      	nop
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <WaitForDmaEnd+0x18>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1fb      	bne.n	800278a <WaitForDmaEnd+0x6>
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	20000438 	.word	0x20000438

080027a0 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <DMA1_Channel5_IRQHandler+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d023      	beq.n	80027f8 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <DMA1_Channel5_IRQHandler+0x64>)
 80027b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b6:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <DMA1_Channel5_IRQHandler+0x68>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 80027be:	bf00      	nop
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <DMA1_Channel5_IRQHandler+0x68>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f9      	bne.n	80027c0 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <DMA1_Channel5_IRQHandler+0x6c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80027d2:	bf00      	nop
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <DMA1_Channel5_IRQHandler+0x70>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1fb      	bne.n	80027d4 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 80027dc:	2003      	movs	r0, #3
 80027de:	f000 fab7 	bl	8002d50 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <DMA1_Channel5_IRQHandler+0x74>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <DMA1_Channel5_IRQHandler+0x78>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <DMA1_Channel5_IRQHandler+0x74>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 80027f6:	e003      	b.n	8002800 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 80027f8:	4b02      	ldr	r3, [pc, #8]	; (8002804 <DMA1_Channel5_IRQHandler+0x64>)
 80027fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027fe:	605a      	str	r2, [r3, #4]
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40020000 	.word	0x40020000
 8002808:	40020058 	.word	0x40020058
 800280c:	42070084 	.word	0x42070084
 8002810:	4207011c 	.word	0x4207011c
 8002814:	20000438 	.word	0x20000438
 8002818:	422181b0 	.word	0x422181b0

0800281c <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <LCD_IO_WriteMultiData+0x74>)
 800282a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800282e:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <LCD_IO_WriteMultiData+0x78>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <LCD_IO_WriteMultiData+0x78>)
 8002836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283a:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8002842:	bf00      	nop
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f9      	bne.n	8002844 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 8002858:	4a10      	ldr	r2, [pc, #64]	; (800289c <LCD_IO_WriteMultiData+0x80>)
 800285a:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 800285c:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8002862:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <LCD_IO_WriteMultiData+0x84>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <LCD_IO_WriteMultiData+0x78>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <LCD_IO_WriteMultiData+0x78>)
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a06      	ldr	r2, [pc, #24]	; (8002898 <LCD_IO_WriteMultiData+0x7c>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6013      	str	r3, [r2, #0]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40020000 	.word	0x40020000
 8002894:	40003800 	.word	0x40003800
 8002898:	40020058 	.word	0x40020058
 800289c:	4000380c 	.word	0x4000380c
 80028a0:	42070084 	.word	0x42070084

080028a4 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <LCD_IO_WriteMultiData8+0x98>)
 80028bc:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 80028be:	4b1f      	ldr	r3, [pc, #124]	; (800293c <LCD_IO_WriteMultiData8+0x98>)
 80028c0:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 80028c2:	f241 0312 	movw	r3, #4114	; 0x1012
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e030      	b.n	800292c <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 80028ca:	f241 0392 	movw	r3, #4242	; 0x1092
 80028ce:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 80028d0:	e02c      	b.n	800292c <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80028d8:	4293      	cmp	r3, r2
 80028da:	d80f      	bhi.n	80028fc <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <LCD_IO_WriteMultiData8+0x9c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff ff98 	bl	800281c <LCD_IO_WriteMultiData>
      Size = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01a      	beq.n	800292c <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 80028f6:	f7ff ff45 	bl	8002784 <WaitForDmaEnd>
 80028fa:	e017      	b.n	800292c <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <LCD_IO_WriteMultiData8+0x9c>)
 80028fe:	2202      	movs	r2, #2
 8002900:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff ff87 	bl	800281c <LCD_IO_WriteMultiData>
      if(dinc)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800291a:	33fe      	adds	r3, #254	; 0xfe
 800291c:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002924:	3bfe      	subs	r3, #254	; 0xfe
 8002926:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8002928:	f7ff ff2c 	bl	8002784 <WaitForDmaEnd>
  while(Size)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1cf      	bne.n	80028d2 <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000043c 	.word	0x2000043c
 8002940:	20000438 	.word	0x20000438

08002944 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <LCD_IO_WriteMultiData16+0xdc>)
 800295c:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 800295e:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <LCD_IO_WriteMultiData16+0xdc>)
 8002960:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8002962:	f241 5312 	movw	r3, #5394	; 0x1512
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e051      	b.n	8002a0e <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 800296a:	f241 5392 	movw	r3, #5522	; 0x1592
 800296e:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8002970:	e04d      	b.n	8002a0e <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002978:	4293      	cmp	r3, r2
 800297a:	d80f      	bhi.n	800299c <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <LCD_IO_WriteMultiData16+0xe0>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff ff48 	bl	800281c <LCD_IO_WriteMultiData>
      Size = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d03b      	beq.n	8002a0e <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 8002996:	f7ff fef5 	bl	8002784 <WaitForDmaEnd>
 800299a:	e038      	b.n	8002a0e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <LCD_IO_WriteMultiData16+0xe4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d81b      	bhi.n	80029dc <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <LCD_IO_WriteMultiData16+0xe0>)
 80029a6:	2202      	movs	r2, #2
 80029a8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80029b0:	3bfe      	subs	r3, #254	; 0xfe
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4619      	mov	r1, r3
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff ff30 	bl	800281c <LCD_IO_WriteMultiData>
      if(dinc)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <LCD_IO_WriteMultiData16+0xe8>)
 80029c6:	4413      	add	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 80029d0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80029d4:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 80029d6:	f7ff fed5 	bl	8002784 <WaitForDmaEnd>
 80029da:	e018      	b.n	8002a0e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <LCD_IO_WriteMultiData16+0xe0>)
 80029de:	2202      	movs	r2, #2
 80029e0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff ff17 	bl	800281c <LCD_IO_WriteMultiData>
      if(dinc)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80029fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029fe:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002a06:	3bfe      	subs	r3, #254	; 0xfe
 8002a08:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8002a0a:	f7ff febb 	bl	8002784 <WaitForDmaEnd>
  while(Size)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ae      	bne.n	8002972 <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	2000043e 	.word	0x2000043e
 8002a24:	20000438 	.word	0x20000438
 8002a28:	0001fffb 	.word	0x0001fffb
 8002a2c:	7fff0002 	.word	0x7fff0002

08002a30 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <DMA1_Channel4_IRQHandler+0x98>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03a      	beq.n	8002ab8 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8002a42:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <DMA1_Channel4_IRQHandler+0x98>)
 8002a44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a48:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <DMA1_Channel4_IRQHandler+0x9c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a50:	e002      	b.n	8002a58 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <DMA1_Channel4_IRQHandler+0xa0>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <DMA1_Channel4_IRQHandler+0xa4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f8      	bne.n	8002a52 <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <DMA1_Channel4_IRQHandler+0xa8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a68:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <DMA1_Channel4_IRQHandler+0xa8>)
 8002a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a72:	f043 0318 	orr.w	r3, r3, #24
 8002a76:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f000 f969 	bl	8002d50 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a7e:	e003      	b.n	8002a88 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <DMA1_Channel4_IRQHandler+0xa8>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <DMA1_Channel4_IRQHandler+0xa4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f7      	bne.n	8002a80 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <DMA1_Channel4_IRQHandler+0xa8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <DMA1_Channel4_IRQHandler+0xa8>)
 8002a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9a:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <DMA1_Channel4_IRQHandler+0xac>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002aa2:	bf00      	nop
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <DMA1_Channel4_IRQHandler+0xac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f9      	bne.n	8002aa4 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <DMA1_Channel4_IRQHandler+0xb0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8002ab6:	e003      	b.n	8002ac0 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <DMA1_Channel4_IRQHandler+0x98>)
 8002aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002abe:	605a      	str	r2, [r3, #4]
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	42070080 	.word	0x42070080
 8002ad0:	4000380c 	.word	0x4000380c
 8002ad4:	42070100 	.word	0x42070100
 8002ad8:	40003800 	.word	0x40003800
 8002adc:	40020044 	.word	0x40020044
 8002ae0:	20000438 	.word	0x20000438

08002ae4 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <LCD_IO_ReadMultiData+0x5c>)
 8002af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002af6:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002afe:	bf00      	nop
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f9      	bne.n	8002b00 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002b14:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <LCD_IO_ReadMultiData+0x64>)
 8002b16:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <LCD_IO_ReadMultiData+0x60>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <LCD_IO_ReadMultiData+0x68>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020044 	.word	0x40020044
 8002b48:	4000380c 	.word	0x4000380c
 8002b4c:	42070080 	.word	0x42070080

08002b50 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8002b5a:	f241 0382 	movw	r3, #4226	; 0x1082
 8002b5e:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8002b60:	e024      	b.n	8002bac <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d913      	bls.n	8002b94 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <LCD_IO_ReadMultiData8+0x74>)
 8002b6e:	2202      	movs	r2, #2
 8002b70:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffb3 	bl	8002ae4 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002b84:	3bfe      	subs	r3, #254	; 0xfe
 8002b86:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002b8e:	33fe      	adds	r3, #254	; 0xfe
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	e009      	b.n	8002ba8 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <LCD_IO_ReadMultiData8+0x74>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa0 	bl	8002ae4 <LCD_IO_ReadMultiData>
      Size = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8002ba8:	f7ff fdec 	bl	8002784 <WaitForDmaEnd>
  while(Size)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1d7      	bne.n	8002b62 <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <LCD_IO_ReadMultiData8+0x78>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8002bb8:	f7ff fd78 	bl	80026ac <LcdDirWrite>
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000438 	.word	0x20000438
 8002bc8:	422181b0 	.word	0x422181b0

08002bcc <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <LCD_IO_ReadMultiData16to24+0x164>)
 8002be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002be4:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8002be6:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002bec:	bf00      	nop
 8002bee:	4b51      	ldr	r3, [pc, #324]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8002bfa:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002bfc:	4a4e      	ldr	r2, [pc, #312]	; (8002d38 <LCD_IO_ReadMultiData16to24+0x16c>)
 8002bfe:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8002c00:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002c02:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <LCD_IO_ReadMultiData16to24+0x170>)
 8002c04:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8002c06:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0c:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8002c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c12:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8002c14:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002c16:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 8002c1a:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8002c1c:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a44      	ldr	r2, [pc, #272]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 8002c28:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <LCD_IO_ReadMultiData16to24+0x174>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
  while(Size)
 8002c2e:	e044      	b.n	8002cba <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8002c30:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d03f      	beq.n	8002cba <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8002c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4a:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	1c53      	adds	r3, r2, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	6139      	str	r1, [r7, #16]
 8002c5e:	4936      	ldr	r1, [pc, #216]	; (8002d38 <LCD_IO_ReadMultiData16to24+0x16c>)
 8002c60:	5c8a      	ldrb	r2, [r1, r2]
 8002c62:	3318      	adds	r3, #24
 8002c64:	443b      	add	r3, r7
 8002c66:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2bff      	cmp	r3, #255	; 0xff
 8002c6e:	d901      	bls.n	8002c74 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d11f      	bne.n	8002cba <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
        Size--;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8002c84:	7a3b      	ldrb	r3, [r7, #8]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c8e:	f023 0307 	bic.w	r3, r3, #7
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	7a7b      	ldrb	r3, [r7, #9]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b21a      	sxth	r2, r3
 8002ca4:	7abb      	ldrb	r3, [r7, #10]
 8002ca6:	08db      	lsrs	r3, r3, #3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	b21b      	sxth	r3, r3
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b219      	sxth	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	1c9a      	adds	r2, r3, #2
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	b28a      	uxth	r2, r1
 8002cb8:	801a      	strh	r2, [r3, #0]
  while(Size)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1b7      	bne.n	8002c30 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <LCD_IO_ReadMultiData16to24+0x174>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002cc6:	e003      	b.n	8002cd0 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <LCD_IO_ReadMultiData16to24+0x178>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f7      	bne.n	8002cc8 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <LCD_IO_ReadMultiData16to24+0x178>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002ce4:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <LCD_IO_ReadMultiData16to24+0x178>)
 8002ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f000 f82d 	bl	8002d50 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002cf6:	e003      	b.n	8002d00 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <LCD_IO_ReadMultiData16to24+0x178>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f7      	bne.n	8002cf8 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002d0e:	bf00      	nop
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <LCD_IO_ReadMultiData16to24+0x168>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f9      	bne.n	8002d10 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <LCD_IO_ReadMultiData16to24+0x180>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8002d22:	f7ff fcc3 	bl	80026ac <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40020000 	.word	0x40020000
 8002d34:	40020044 	.word	0x40020044
 8002d38:	20000440 	.word	0x20000440
 8002d3c:	4000380c 	.word	0x4000380c
 8002d40:	42070080 	.word	0x42070080
 8002d44:	40003800 	.word	0x40003800
 8002d48:	42070100 	.word	0x42070100
 8002d4c:	422181b0 	.word	0x422181b0

08002d50 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  while(c--);
 8002d58:	bf00      	nop
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1fa      	bne.n	8002d5a <LCD_IO_Delay+0xa>
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f9ff 	bl	800317c <HAL_Delay>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <LCD_IO_Bl_OnOff+0x28>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8002d9e:	e002      	b.n	8002da6 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <LCD_IO_Bl_OnOff+0x28>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	42220198 	.word	0x42220198

08002db4 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8002db8:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <LCD_IO_Init+0x104>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4a3e      	ldr	r2, [pc, #248]	; (8002eb8 <LCD_IO_Init+0x104>)
 8002dbe:	f043 0318 	orr.w	r3, r3, #24
 8002dc2:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 8002dc4:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <LCD_IO_Init+0x104>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <LCD_IO_Init+0x104>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <LCD_IO_Init+0x108>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002dd8:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <LCD_IO_Init+0x108>)
 8002dda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dde:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8002de0:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <LCD_IO_Init+0x10c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002de8:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <LCD_IO_Init+0x10c>)
 8002dea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dee:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7ff ffc9 	bl	8002d88 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8002df6:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <LCD_IO_Init+0x108>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dfe:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e04:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <LCD_IO_Init+0x110>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <LCD_IO_Init+0x114>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002e12:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <LCD_IO_Init+0x118>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e22:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002e26:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e32:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002e36:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <LCD_IO_Init+0x11c>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <LCD_IO_Init+0x120>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e4e:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8002e52:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <LCD_IO_Init+0x108>)
 8002e5e:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8002e62:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8002e64:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <LCD_IO_Init+0x124>)
 8002e66:	f240 324f 	movw	r2, #847	; 0x34f
 8002e6a:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <LCD_IO_Init+0x124>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <LCD_IO_Init+0x124>)
 8002e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e76:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8002e78:	200a      	movs	r0, #10
 8002e7a:	f7ff ff79 	bl	8002d70 <LCD_Delay>
  LCD_RST_ON;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <LCD_IO_Init+0x110>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8002e84:	200a      	movs	r0, #10
 8002e86:	f7ff ff73 	bl	8002d70 <LCD_Delay>
  LCD_RST_OFF;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <LCD_IO_Init+0x110>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8002e90:	200a      	movs	r0, #10
 8002e92:	f7ff ff6d 	bl	8002d70 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8002e96:	210f      	movs	r1, #15
 8002e98:	200f      	movs	r0, #15
 8002e9a:	f7ff fb9d 	bl	80025d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8002e9e:	200f      	movs	r0, #15
 8002ea0:	f7ff fb7e 	bl	80025a0 <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8002ea4:	210f      	movs	r1, #15
 8002ea6:	200e      	movs	r0, #14
 8002ea8:	f7ff fb96 	bl	80025d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8002eac:	200e      	movs	r0, #14
 8002eae:	f7ff fb77 	bl	80025a0 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40010c04 	.word	0x40010c04
 8002ec0:	40011000 	.word	0x40011000
 8002ec4:	422181a8 	.word	0x422181a8
 8002ec8:	422181ac 	.word	0x422181ac
 8002ecc:	422181b0 	.word	0x422181b0
 8002ed0:	422181b4 	.word	0x422181b4
 8002ed4:	424203b8 	.word	0x424203b8
 8002ed8:	40003800 	.word	0x40003800

08002edc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8002ee6:	f7ff fc4d 	bl	8002784 <WaitForDmaEnd>
  LcdSpiMode8();
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <LCD_IO_WriteCmd8+0x30>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <LCD_IO_WriteCmd8+0x34>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fc23 	bl	8002744 <LcdCmdWrite8>
  LCD_CS_OFF;
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <LCD_IO_WriteCmd8+0x34>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	4207002c 	.word	0x4207002c
 8002f10:	422181b0 	.word	0x422181b0

08002f14 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8002f1e:	f7ff fc31 	bl	8002784 <WaitForDmaEnd>
  LcdSpiMode8();
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <LCD_IO_WriteData8+0x30>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <LCD_IO_WriteData8+0x34>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fbed 	bl	8002710 <LcdWrite8>
  LCD_CS_OFF;
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <LCD_IO_WriteData8+0x34>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	4207002c 	.word	0x4207002c
 8002f48:	422181b0 	.word	0x422181b0

08002f4c <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	603a      	str	r2, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8002f5c:	f7ff fc12 	bl	8002784 <WaitForDmaEnd>
  LcdSpiMode8();
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fbe8 	bl	8002744 <LcdCmdWrite8>
  LcdSpiMode16();
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6839      	ldr	r1, [r7, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fcdf 	bl	8002944 <LCD_IO_WriteMultiData16>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	4207002c 	.word	0x4207002c
 8002f94:	422181b0 	.word	0x422181b0

08002f98 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002fa6:	f7ff fbed 	bl	8002784 <WaitForDmaEnd>
  LcdSpiMode8();
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fbc3 	bl	8002744 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	68b8      	ldr	r0, [r7, #8]
 8002fc4:	f7ff fc6e 	bl	80028a4 <LCD_IO_WriteMultiData8>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	4207002c 	.word	0x4207002c
 8002fd4:	422181b0 	.word	0x422181b0

08002fd8 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002fe6:	f7ff fbcd 	bl	8002784 <WaitForDmaEnd>
  LcdSpiMode8();
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fba3 	bl	8002744 <LcdCmdWrite8>
  LcdSpiMode16();
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8003004:	2201      	movs	r2, #1
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f7ff fc9b 	bl	8002944 <LCD_IO_WriteMultiData16>
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	4207002c 	.word	0x4207002c
 800301c:	422181b0 	.word	0x422181b0

08003020 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8003030:	f7ff fba8 	bl	8002784 <WaitForDmaEnd>
  LcdSpiMode8();
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fb7e 	bl	8002744 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	f7ff faec 	bl	800262c <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68b8      	ldr	r0, [r7, #8]
 8003058:	f7ff fd7a 	bl	8002b50 <LCD_IO_ReadMultiData8>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	4207002c 	.word	0x4207002c
 8003068:	422181b0 	.word	0x422181b0

0800306c <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800307c:	f7ff fb82 	bl	8002784 <WaitForDmaEnd>
  LcdSpiMode8();
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fb58 	bl	8002744 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 800309a:	6838      	ldr	r0, [r7, #0]
 800309c:	f7ff fac6 	bl	800262c <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	68b8      	ldr	r0, [r7, #8]
 80030a4:	f7ff fd92 	bl	8002bcc <LCD_IO_ReadMultiData16to24>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	4207002c 	.word	0x4207002c
 80030b4:	422181b0 	.word	0x422181b0

080030b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_Init+0x28>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_Init+0x28>)
 80030c2:	f043 0310 	orr.w	r3, r3, #16
 80030c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c8:	2003      	movs	r0, #3
 80030ca:	f000 fb59 	bl	8003780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ce:	200f      	movs	r0, #15
 80030d0:	f000 f808 	bl	80030e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d4:	f7fe fbbe 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40022000 	.word	0x40022000

080030e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_InitTick+0x54>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_InitTick+0x58>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fb71 	bl	80037ea <HAL_SYSTICK_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e00e      	b.n	8003130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d80a      	bhi.n	800312e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003118:	2200      	movs	r2, #0
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f000 fb39 	bl	8003796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003124:	4a06      	ldr	r2, [pc, #24]	; (8003140 <HAL_InitTick+0x5c>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	2000002c 	.word	0x2000002c
 800313c:	2000007c 	.word	0x2000007c
 8003140:	20000078 	.word	0x20000078

08003144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_IncTick+0x1c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_IncTick+0x20>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4413      	add	r3, r2
 8003154:	4a03      	ldr	r2, [pc, #12]	; (8003164 <HAL_IncTick+0x20>)
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	2000007c 	.word	0x2000007c
 8003164:	20000540 	.word	0x20000540

08003168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return uwTick;
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <HAL_GetTick+0x10>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000540 	.word	0x20000540

0800317c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fff0 	bl	8003168 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d005      	beq.n	80031a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_Delay+0x44>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031a2:	bf00      	nop
 80031a4:	f7ff ffe0 	bl	8003168 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d8f7      	bhi.n	80031a4 <HAL_Delay+0x28>
  {
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2000007c 	.word	0x2000007c

080031c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0be      	b.n	8003364 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe fb58 	bl	80018b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f9ab 	bl	8003564 <ADC_ConversionStop_Disable>
 800320e:	4603      	mov	r3, r0
 8003210:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 8099 	bne.w	8003352 <HAL_ADC_Init+0x18e>
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 8095 	bne.w	8003352 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003230:	f023 0302 	bic.w	r3, r3, #2
 8003234:	f043 0202 	orr.w	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003244:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7b1b      	ldrb	r3, [r3, #12]
 800324a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800324c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4313      	orrs	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d003      	beq.n	8003266 <HAL_ADC_Init+0xa2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_ADC_Init+0xa8>
 8003266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326a:	e000      	b.n	800326e <HAL_ADC_Init+0xaa>
 800326c:	2300      	movs	r3, #0
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7d1b      	ldrb	r3, [r3, #20]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d119      	bne.n	80032b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7b1b      	ldrb	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	3b01      	subs	r3, #1
 800328a:	035a      	lsls	r2, r3, #13
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	e00b      	b.n	80032b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_ADC_Init+0x1a8>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e0:	d003      	beq.n	80032ea <HAL_ADC_Init+0x126>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d104      	bne.n	80032f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	051b      	lsls	r3, r3, #20
 80032f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	430a      	orrs	r2, r1
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_ADC_Init+0x1ac>)
 8003310:	4013      	ands	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d10b      	bne.n	8003330 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800332e:	e018      	b.n	8003362 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f023 0312 	bic.w	r3, r3, #18
 8003338:	f043 0210 	orr.w	r2, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003350:	e007      	b.n	8003362 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003362:	7dfb      	ldrb	r3, [r7, #23]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	ffe1f7fd 	.word	0xffe1f7fd
 8003370:	ff1f0efe 	.word	0xff1f0efe

08003374 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x20>
 8003390:	2302      	movs	r3, #2
 8003392:	e0dc      	b.n	800354e <HAL_ADC_ConfigChannel+0x1da>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d81c      	bhi.n	80033de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	3b05      	subs	r3, #5
 80033b6:	221f      	movs	r2, #31
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	4019      	ands	r1, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	3b05      	subs	r3, #5
 80033d0:	fa00 f203 	lsl.w	r2, r0, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	635a      	str	r2, [r3, #52]	; 0x34
 80033dc:	e03c      	b.n	8003458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d81c      	bhi.n	8003420 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	3b23      	subs	r3, #35	; 0x23
 80033f8:	221f      	movs	r2, #31
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	4019      	ands	r1, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3b23      	subs	r3, #35	; 0x23
 8003412:	fa00 f203 	lsl.w	r2, r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
 800341e:	e01b      	b.n	8003458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	3b41      	subs	r3, #65	; 0x41
 8003432:	221f      	movs	r2, #31
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	4019      	ands	r1, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	3b41      	subs	r3, #65	; 0x41
 800344c:	fa00 f203 	lsl.w	r2, r0, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b09      	cmp	r3, #9
 800345e:	d91c      	bls.n	800349a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	3b1e      	subs	r3, #30
 8003472:	2207      	movs	r2, #7
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	4019      	ands	r1, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6898      	ldr	r0, [r3, #8]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	3b1e      	subs	r3, #30
 800348c:	fa00 f203 	lsl.w	r2, r0, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e019      	b.n	80034ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6919      	ldr	r1, [r3, #16]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	2207      	movs	r2, #7
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	4019      	ands	r1, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6898      	ldr	r0, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	fa00 f203 	lsl.w	r2, r0, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d003      	beq.n	80034de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034da:	2b11      	cmp	r3, #17
 80034dc:	d132      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_ADC_ConfigChannel+0x1e4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d125      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d126      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003504:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b10      	cmp	r3, #16
 800350c:	d11a      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_ADC_ConfigChannel+0x1e8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <HAL_ADC_ConfigChannel+0x1ec>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	0c9a      	lsrs	r2, r3, #18
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003524:	e002      	b.n	800352c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f9      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x1b2>
 8003532:	e007      	b.n	8003544 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	40012400 	.word	0x40012400
 800355c:	2000002c 	.word	0x2000002c
 8003560:	431bde83 	.word	0x431bde83

08003564 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d12e      	bne.n	80035dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800358e:	f7ff fdeb 	bl	8003168 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003594:	e01b      	b.n	80035ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003596:	f7ff fde7 	bl	8003168 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d914      	bls.n	80035ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10d      	bne.n	80035ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	f043 0210 	orr.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e007      	b.n	80035de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d0dc      	beq.n	8003596 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <__NVIC_SetPriorityGrouping>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361a:	4a04      	ldr	r2, [pc, #16]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	60d3      	str	r3, [r2, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_GetPriorityGrouping>:
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <__NVIC_GetPriorityGrouping+0x18>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0307 	and.w	r3, r3, #7
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_EnableIRQ>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db0b      	blt.n	8003676 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4906      	ldr	r1, [pc, #24]	; (8003680 <__NVIC_EnableIRQ+0x34>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2001      	movs	r0, #1
 800366e:	fa00 f202 	lsl.w	r2, r0, r2
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	2b00      	cmp	r3, #0
 8003696:	db0a      	blt.n	80036ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	490c      	ldr	r1, [pc, #48]	; (80036d0 <__NVIC_SetPriority+0x4c>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036ac:	e00a      	b.n	80036c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4908      	ldr	r1, [pc, #32]	; (80036d4 <__NVIC_SetPriority+0x50>)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3b04      	subs	r3, #4
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	761a      	strb	r2, [r3, #24]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e100 	.word	0xe000e100
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <NVIC_EncodePriority>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	bf28      	it	cs
 80036f6:	2304      	movcs	r3, #4
 80036f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d902      	bls.n	8003708 <NVIC_EncodePriority+0x30>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3b03      	subs	r3, #3
 8003706:	e000      	b.n	800370a <NVIC_EncodePriority+0x32>
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	401a      	ands	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003720:	f04f 31ff 	mov.w	r1, #4294967295
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43d9      	mvns	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	4313      	orrs	r3, r2
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <SysTick_Config>:
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800374c:	d301      	bcc.n	8003752 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800374e:	2301      	movs	r3, #1
 8003750:	e00f      	b.n	8003772 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <SysTick_Config+0x40>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3b01      	subs	r3, #1
 8003758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375a:	210f      	movs	r1, #15
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	f7ff ff90 	bl	8003684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <SysTick_Config+0x40>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <SysTick_Config+0x40>)
 800376c:	2207      	movs	r2, #7
 800376e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	e000e010 	.word	0xe000e010

08003780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff2d 	bl	80035e8 <__NVIC_SetPriorityGrouping>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	4603      	mov	r3, r0
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a8:	f7ff ff42 	bl	8003630 <__NVIC_GetPriorityGrouping>
 80037ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7ff ff90 	bl	80036d8 <NVIC_EncodePriority>
 80037b8:	4602      	mov	r2, r0
 80037ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff5f 	bl	8003684 <__NVIC_SetPriority>
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff35 	bl	800364c <__NVIC_EnableIRQ>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ffa2 	bl	800373c <SysTick_Config>
 80037f8:	4603      	mov	r3, r0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e043      	b.n	80038a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_DMA_Init+0xa8>)
 8003822:	4413      	add	r3, r2
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_DMA_Init+0xac>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	009a      	lsls	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <HAL_DMA_Init+0xb0>)
 8003836:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800384e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003852:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800385c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	bffdfff8 	.word	0xbffdfff8
 80038b0:	cccccccd 	.word	0xcccccccd
 80038b4:	40020000 	.word	0x40020000

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b08b      	sub	sp, #44	; 0x2c
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ca:	e169      	b.n	8003ba0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038cc:	2201      	movs	r2, #1
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	f040 8158 	bne.w	8003b9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a9a      	ldr	r2, [pc, #616]	; (8003b58 <HAL_GPIO_Init+0x2a0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d05e      	beq.n	80039b2 <HAL_GPIO_Init+0xfa>
 80038f4:	4a98      	ldr	r2, [pc, #608]	; (8003b58 <HAL_GPIO_Init+0x2a0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d875      	bhi.n	80039e6 <HAL_GPIO_Init+0x12e>
 80038fa:	4a98      	ldr	r2, [pc, #608]	; (8003b5c <HAL_GPIO_Init+0x2a4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d058      	beq.n	80039b2 <HAL_GPIO_Init+0xfa>
 8003900:	4a96      	ldr	r2, [pc, #600]	; (8003b5c <HAL_GPIO_Init+0x2a4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d86f      	bhi.n	80039e6 <HAL_GPIO_Init+0x12e>
 8003906:	4a96      	ldr	r2, [pc, #600]	; (8003b60 <HAL_GPIO_Init+0x2a8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d052      	beq.n	80039b2 <HAL_GPIO_Init+0xfa>
 800390c:	4a94      	ldr	r2, [pc, #592]	; (8003b60 <HAL_GPIO_Init+0x2a8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d869      	bhi.n	80039e6 <HAL_GPIO_Init+0x12e>
 8003912:	4a94      	ldr	r2, [pc, #592]	; (8003b64 <HAL_GPIO_Init+0x2ac>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d04c      	beq.n	80039b2 <HAL_GPIO_Init+0xfa>
 8003918:	4a92      	ldr	r2, [pc, #584]	; (8003b64 <HAL_GPIO_Init+0x2ac>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d863      	bhi.n	80039e6 <HAL_GPIO_Init+0x12e>
 800391e:	4a92      	ldr	r2, [pc, #584]	; (8003b68 <HAL_GPIO_Init+0x2b0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d046      	beq.n	80039b2 <HAL_GPIO_Init+0xfa>
 8003924:	4a90      	ldr	r2, [pc, #576]	; (8003b68 <HAL_GPIO_Init+0x2b0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d85d      	bhi.n	80039e6 <HAL_GPIO_Init+0x12e>
 800392a:	2b12      	cmp	r3, #18
 800392c:	d82a      	bhi.n	8003984 <HAL_GPIO_Init+0xcc>
 800392e:	2b12      	cmp	r3, #18
 8003930:	d859      	bhi.n	80039e6 <HAL_GPIO_Init+0x12e>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_GPIO_Init+0x80>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	080039b3 	.word	0x080039b3
 800393c:	0800398d 	.word	0x0800398d
 8003940:	0800399f 	.word	0x0800399f
 8003944:	080039e1 	.word	0x080039e1
 8003948:	080039e7 	.word	0x080039e7
 800394c:	080039e7 	.word	0x080039e7
 8003950:	080039e7 	.word	0x080039e7
 8003954:	080039e7 	.word	0x080039e7
 8003958:	080039e7 	.word	0x080039e7
 800395c:	080039e7 	.word	0x080039e7
 8003960:	080039e7 	.word	0x080039e7
 8003964:	080039e7 	.word	0x080039e7
 8003968:	080039e7 	.word	0x080039e7
 800396c:	080039e7 	.word	0x080039e7
 8003970:	080039e7 	.word	0x080039e7
 8003974:	080039e7 	.word	0x080039e7
 8003978:	080039e7 	.word	0x080039e7
 800397c:	08003995 	.word	0x08003995
 8003980:	080039a9 	.word	0x080039a9
 8003984:	4a79      	ldr	r2, [pc, #484]	; (8003b6c <HAL_GPIO_Init+0x2b4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800398a:	e02c      	b.n	80039e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	623b      	str	r3, [r7, #32]
          break;
 8003992:	e029      	b.n	80039e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	3304      	adds	r3, #4
 800399a:	623b      	str	r3, [r7, #32]
          break;
 800399c:	e024      	b.n	80039e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	3308      	adds	r3, #8
 80039a4:	623b      	str	r3, [r7, #32]
          break;
 80039a6:	e01f      	b.n	80039e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	330c      	adds	r3, #12
 80039ae:	623b      	str	r3, [r7, #32]
          break;
 80039b0:	e01a      	b.n	80039e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ba:	2304      	movs	r3, #4
 80039bc:	623b      	str	r3, [r7, #32]
          break;
 80039be:	e013      	b.n	80039e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039c8:	2308      	movs	r3, #8
 80039ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	611a      	str	r2, [r3, #16]
          break;
 80039d2:	e009      	b.n	80039e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039d4:	2308      	movs	r3, #8
 80039d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	615a      	str	r2, [r3, #20]
          break;
 80039de:	e003      	b.n	80039e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039e0:	2300      	movs	r3, #0
 80039e2:	623b      	str	r3, [r7, #32]
          break;
 80039e4:	e000      	b.n	80039e8 <HAL_GPIO_Init+0x130>
          break;
 80039e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2bff      	cmp	r3, #255	; 0xff
 80039ec:	d801      	bhi.n	80039f2 <HAL_GPIO_Init+0x13a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	e001      	b.n	80039f6 <HAL_GPIO_Init+0x13e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2bff      	cmp	r3, #255	; 0xff
 80039fc:	d802      	bhi.n	8003a04 <HAL_GPIO_Init+0x14c>
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	e002      	b.n	8003a0a <HAL_GPIO_Init+0x152>
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	3b08      	subs	r3, #8
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	210f      	movs	r1, #15
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	6a39      	ldr	r1, [r7, #32]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	431a      	orrs	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80b1 	beq.w	8003b9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a38:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	4a4c      	ldr	r2, [pc, #304]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6193      	str	r3, [r2, #24]
 8003a44:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a50:	4a48      	ldr	r2, [pc, #288]	; (8003b74 <HAL_GPIO_Init+0x2bc>)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	220f      	movs	r2, #15
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4013      	ands	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <HAL_GPIO_Init+0x2c0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <HAL_GPIO_Init+0x1ec>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a3f      	ldr	r2, [pc, #252]	; (8003b7c <HAL_GPIO_Init+0x2c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00d      	beq.n	8003aa0 <HAL_GPIO_Init+0x1e8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a3e      	ldr	r2, [pc, #248]	; (8003b80 <HAL_GPIO_Init+0x2c8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a3d      	ldr	r2, [pc, #244]	; (8003b84 <HAL_GPIO_Init+0x2cc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <HAL_GPIO_Init+0x1e0>
 8003a94:	2303      	movs	r3, #3
 8003a96:	e006      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	e004      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e002      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	f002 0203 	and.w	r2, r2, #3
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	4093      	lsls	r3, r2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ab6:	492f      	ldr	r1, [pc, #188]	; (8003b74 <HAL_GPIO_Init+0x2bc>)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	3302      	adds	r3, #2
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	492c      	ldr	r1, [pc, #176]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e006      	b.n	8003aec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ade:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4928      	ldr	r1, [pc, #160]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d006      	beq.n	8003b06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4922      	ldr	r1, [pc, #136]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
 8003b04:	e006      	b.n	8003b14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	491e      	ldr	r1, [pc, #120]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	4918      	ldr	r1, [pc, #96]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]
 8003b2c:	e006      	b.n	8003b3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	4914      	ldr	r1, [pc, #80]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d021      	beq.n	8003b8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60cb      	str	r3, [r1, #12]
 8003b54:	e021      	b.n	8003b9a <HAL_GPIO_Init+0x2e2>
 8003b56:	bf00      	nop
 8003b58:	10320000 	.word	0x10320000
 8003b5c:	10310000 	.word	0x10310000
 8003b60:	10220000 	.word	0x10220000
 8003b64:	10210000 	.word	0x10210000
 8003b68:	10120000 	.word	0x10120000
 8003b6c:	10110000 	.word	0x10110000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40010800 	.word	0x40010800
 8003b7c:	40010c00 	.word	0x40010c00
 8003b80:	40011000 	.word	0x40011000
 8003b84:	40011400 	.word	0x40011400
 8003b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f47f ae8e 	bne.w	80038cc <HAL_GPIO_Init+0x14>
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	372c      	adds	r7, #44	; 0x2c
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40010400 	.word	0x40010400

08003bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e001      	b.n	8003be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	807b      	strh	r3, [r7, #2]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bfe:	787b      	ldrb	r3, [r7, #1]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c04:	887a      	ldrh	r2, [r7, #2]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c0a:	e003      	b.n	8003c14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c0c:	887b      	ldrh	r3, [r7, #2]
 8003c0e:	041a      	lsls	r2, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	611a      	str	r2, [r3, #16]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd faf6 	bl	8001230 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40010400 	.word	0x40010400

08003c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e12b      	b.n	8003eba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fe5a 	bl	8001930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cb4:	f000 fce4 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8003cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a81      	ldr	r2, [pc, #516]	; (8003ec4 <HAL_I2C_Init+0x274>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d807      	bhi.n	8003cd4 <HAL_I2C_Init+0x84>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a80      	ldr	r2, [pc, #512]	; (8003ec8 <HAL_I2C_Init+0x278>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	bf94      	ite	ls
 8003ccc:	2301      	movls	r3, #1
 8003cce:	2300      	movhi	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e006      	b.n	8003ce2 <HAL_I2C_Init+0x92>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a7d      	ldr	r2, [pc, #500]	; (8003ecc <HAL_I2C_Init+0x27c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bf94      	ite	ls
 8003cdc:	2301      	movls	r3, #1
 8003cde:	2300      	movhi	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0e7      	b.n	8003eba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a78      	ldr	r2, [pc, #480]	; (8003ed0 <HAL_I2C_Init+0x280>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9b      	lsrs	r3, r3, #18
 8003cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a6a      	ldr	r2, [pc, #424]	; (8003ec4 <HAL_I2C_Init+0x274>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d802      	bhi.n	8003d24 <HAL_I2C_Init+0xd4>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3301      	adds	r3, #1
 8003d22:	e009      	b.n	8003d38 <HAL_I2C_Init+0xe8>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	4a69      	ldr	r2, [pc, #420]	; (8003ed4 <HAL_I2C_Init+0x284>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	3301      	adds	r3, #1
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	495c      	ldr	r1, [pc, #368]	; (8003ec4 <HAL_I2C_Init+0x274>)
 8003d54:	428b      	cmp	r3, r1
 8003d56:	d819      	bhi.n	8003d8c <HAL_I2C_Init+0x13c>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e59      	subs	r1, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d66:	1c59      	adds	r1, r3, #1
 8003d68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_I2C_Init+0x138>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1e59      	subs	r1, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d80:	3301      	adds	r3, #1
 8003d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d86:	e051      	b.n	8003e2c <HAL_I2C_Init+0x1dc>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	e04f      	b.n	8003e2c <HAL_I2C_Init+0x1dc>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d111      	bne.n	8003db8 <HAL_I2C_Init+0x168>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1e58      	subs	r0, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	440b      	add	r3, r1
 8003da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e012      	b.n	8003dde <HAL_I2C_Init+0x18e>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e58      	subs	r0, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	0099      	lsls	r1, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_Init+0x196>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e022      	b.n	8003e2c <HAL_I2C_Init+0x1dc>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10e      	bne.n	8003e0c <HAL_I2C_Init+0x1bc>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1e58      	subs	r0, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	440b      	add	r3, r1
 8003dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0a:	e00f      	b.n	8003e2c <HAL_I2C_Init+0x1dc>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e58      	subs	r0, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	0099      	lsls	r1, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	6809      	ldr	r1, [r1, #0]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6911      	ldr	r1, [r2, #16]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68d2      	ldr	r2, [r2, #12]
 8003e66:	4311      	orrs	r1, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	000186a0 	.word	0x000186a0
 8003ec8:	001e847f 	.word	0x001e847f
 8003ecc:	003d08ff 	.word	0x003d08ff
 8003ed0:	431bde83 	.word	0x431bde83
 8003ed4:	10624dd3 	.word	0x10624dd3

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e272      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8087 	beq.w	8004006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef8:	4b92      	ldr	r3, [pc, #584]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d00c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f04:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d112      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
 8003f10:	4b8c      	ldr	r3, [pc, #560]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1e:	4b89      	ldr	r3, [pc, #548]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06c      	beq.n	8004004 <HAL_RCC_OscConfig+0x12c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d168      	bne.n	8004004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e24c      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x76>
 8003f40:	4b80      	ldr	r3, [pc, #512]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7f      	ldr	r2, [pc, #508]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e02e      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7a      	ldr	r2, [pc, #488]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b78      	ldr	r3, [pc, #480]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a77      	ldr	r2, [pc, #476]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0xbc>
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a71      	ldr	r2, [pc, #452]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6e      	ldr	r2, [pc, #440]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f94:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6a      	ldr	r2, [pc, #424]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7ff f8d8 	bl	8003168 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7ff f8d4 	bl	8003168 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e200      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xe4>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7ff f8c4 	bl	8003168 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7ff f8c0 	bl	8003168 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1ec      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x10c>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004012:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800401e:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
 800402a:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b43      	ldr	r3, [pc, #268]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1c0      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4939      	ldr	r1, [pc, #228]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7ff f879 	bl	8003168 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7ff f875 	bl	8003168 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e1a1      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4927      	ldr	r1, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7ff f858 	bl	8003168 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040bc:	f7ff f854 	bl	8003168 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e180      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03a      	beq.n	800415c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d019      	beq.n	8004122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7ff f838 	bl	8003168 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7ff f834 	bl	8003168 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e160      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f000 fac4 	bl	80046a8 <RCC_Delay>
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7ff f81e 	bl	8003168 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412e:	e00f      	b.n	8004150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004130:	f7ff f81a 	bl	8003168 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d908      	bls.n	8004150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e146      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	42420000 	.word	0x42420000
 800414c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b92      	ldr	r3, [pc, #584]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e9      	bne.n	8004130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a6 	beq.w	80042b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b8b      	ldr	r3, [pc, #556]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4a87      	ldr	r2, [pc, #540]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	61d3      	str	r3, [r2, #28]
 8004186:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b82      	ldr	r3, [pc, #520]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d118      	bne.n	80041d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b7f      	ldr	r3, [pc, #508]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7e      	ldr	r2, [pc, #504]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ae:	f7fe ffdb 	bl	8003168 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b6:	f7fe ffd7 	bl	8003168 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e103      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <HAL_RCC_OscConfig+0x312>
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	e02d      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x334>
 80041f2:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4a69      	ldr	r2, [pc, #420]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a66      	ldr	r2, [pc, #408]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	e01c      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d10c      	bne.n	800422e <HAL_RCC_OscConfig+0x356>
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4a60      	ldr	r2, [pc, #384]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	6213      	str	r3, [r2, #32]
 8004220:	4b5e      	ldr	r3, [pc, #376]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4a5d      	ldr	r2, [pc, #372]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6213      	str	r3, [r2, #32]
 800422c:	e00b      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a5a      	ldr	r2, [pc, #360]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b58      	ldr	r3, [pc, #352]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a57      	ldr	r2, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fe ff8b 	bl	8003168 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fe ff87 	bl	8003168 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0b1      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ee      	beq.n	8004256 <HAL_RCC_OscConfig+0x37e>
 8004278:	e014      	b.n	80042a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427a:	f7fe ff75 	bl	8003168 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fe ff71 	bl	8003168 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e09b      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	4b40      	ldr	r3, [pc, #256]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ee      	bne.n	8004282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b3c      	ldr	r3, [pc, #240]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4a3b      	ldr	r2, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8087 	beq.w	80043ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c0:	4b36      	ldr	r3, [pc, #216]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d061      	beq.n	8004390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d146      	bne.n	8004362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d4:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fe ff45 	bl	8003168 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fe ff41 	bl	8003168 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e06d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d108      	bne.n	800431c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a19      	ldr	r1, [r3, #32]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	430b      	orrs	r3, r1
 800432e:	491b      	ldr	r1, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fe ff15 	bl	8003168 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004342:	f7fe ff11 	bl	8003168 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e03d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x46a>
 8004360:	e035      	b.n	80043ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe fefe 	bl	8003168 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe fefa 	bl	8003168 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e026      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x498>
 800438e:	e01e      	b.n	80043ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e019      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_OscConfig+0x500>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000

080043dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0d0      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d910      	bls.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 0207 	bic.w	r2, r3, #7
 8004406:	4965      	ldr	r1, [pc, #404]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b63      	ldr	r3, [pc, #396]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b8      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004450:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a52      	ldr	r2, [pc, #328]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800445a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b50      	ldr	r3, [pc, #320]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	494d      	ldr	r1, [pc, #308]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d040      	beq.n	80044fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d115      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e073      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06b      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4936      	ldr	r1, [pc, #216]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044cc:	f7fe fe4c 	bl	8003168 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fe fe48 	bl	8003168 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e053      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 020c 	and.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1eb      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d210      	bcs.n	800452c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 0207 	bic.w	r2, r3, #7
 8004512:	4922      	ldr	r1, [pc, #136]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e032      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4916      	ldr	r1, [pc, #88]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	490e      	ldr	r1, [pc, #56]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800456a:	f000 f821 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 800456e:	4602      	mov	r2, r0
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	490a      	ldr	r1, [pc, #40]	; (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	5ccb      	ldrb	r3, [r1, r3]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1d0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe fdaa 	bl	80030e4 <HAL_InitTick>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40022000 	.word	0x40022000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	080063f8 	.word	0x080063f8
 80045a8:	2000002c 	.word	0x2000002c
 80045ac:	20000078 	.word	0x20000078

080045b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b490      	push	{r4, r7}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCC_GetSysClockFreq+0xac>)
 80045b8:	1d3c      	adds	r4, r7, #4
 80045ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045c0:	f240 2301 	movw	r3, #513	; 0x201
 80045c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d002      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x40>
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x46>
 80045ee:	e02b      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045f0:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045f2:	623b      	str	r3, [r7, #32]
      break;
 80045f4:	e02b      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	0c9b      	lsrs	r3, r3, #18
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	3328      	adds	r3, #40	; 0x28
 8004600:	443b      	add	r3, r7
 8004602:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004606:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	0c5b      	lsrs	r3, r3, #17
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	3328      	adds	r3, #40	; 0x28
 800461e:	443b      	add	r3, r7
 8004620:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004624:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <HAL_RCC_GetSysClockFreq+0xb4>)
 800462a:	fb03 f202 	mul.w	r2, r3, r2
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e004      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	623b      	str	r3, [r7, #32]
      break;
 8004646:	e002      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_GetSysClockFreq+0xb4>)
 800464a:	623b      	str	r3, [r7, #32]
      break;
 800464c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464e:	6a3b      	ldr	r3, [r7, #32]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bc90      	pop	{r4, r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	08006008 	.word	0x08006008
 8004660:	40021000 	.word	0x40021000
 8004664:	007a1200 	.word	0x007a1200
 8004668:	003d0900 	.word	0x003d0900

0800466c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004670:	4b02      	ldr	r3, [pc, #8]	; (800467c <HAL_RCC_GetHCLKFreq+0x10>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	2000002c 	.word	0x2000002c

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004684:	f7ff fff2 	bl	800466c <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	08006408 	.word	0x08006408

080046a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <RCC_Delay+0x34>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <RCC_Delay+0x38>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0a5b      	lsrs	r3, r3, #9
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046c4:	bf00      	nop
  }
  while (Delay --);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e5a      	subs	r2, r3, #1
 80046ca:	60fa      	str	r2, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f9      	bne.n	80046c4 <RCC_Delay+0x1c>
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	2000002c 	.word	0x2000002c
 80046e0:	10624dd3 	.word	0x10624dd3

080046e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d07d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004704:	4b4f      	ldr	r3, [pc, #316]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b4c      	ldr	r3, [pc, #304]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	61d3      	str	r3, [r2, #28]
 800471c:	4b49      	ldr	r3, [pc, #292]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b46      	ldr	r3, [pc, #280]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d118      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004738:	4b43      	ldr	r3, [pc, #268]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a42      	ldr	r2, [pc, #264]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004744:	f7fe fd10 	bl	8003168 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	e008      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fe fd0c 	bl	8003168 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e06d      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800476a:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d02e      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	429a      	cmp	r2, r3
 8004786:	d027      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004788:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004798:	4b2c      	ldr	r3, [pc, #176]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800479e:	4a29      	ldr	r2, [pc, #164]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d014      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fe fcdb 	bl	8003168 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe fcd7 	bl	8003168 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e036      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ee      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4917      	ldr	r1, [pc, #92]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f0:	4b14      	ldr	r3, [pc, #80]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	490b      	ldr	r1, [pc, #44]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4904      	ldr	r1, [pc, #16]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
 800484c:	42420440 	.word	0x42420440

08004850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e076      	b.n	8004950 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004872:	d009      	beq.n	8004888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
 800487a:	e005      	b.n	8004888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd f882 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	ea42 0103 	orr.w	r1, r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	0c1a      	lsrs	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f002 0204 	and.w	r2, r2, #4
 800492e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e041      	b.n	80049f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fd f8b3 	bl	8001aec <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f000 f82d 	bl	80049f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0208 	bic.w	r2, r2, #8
 80049ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a29      	ldr	r2, [pc, #164]	; (8004ab0 <TIM_Base_SetConfig+0xb8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_Base_SetConfig+0x30>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0x30>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <TIM_Base_SetConfig+0xbc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0x30>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <TIM_Base_SetConfig+0xc0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d108      	bne.n	8004a3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <TIM_Base_SetConfig+0xb8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0x62>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0x62>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <TIM_Base_SetConfig+0xbc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0x62>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <TIM_Base_SetConfig+0xc0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <TIM_Base_SetConfig+0xb8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d103      	bne.n	8004aa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	615a      	str	r2, [r3, #20]
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e046      	b.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d009      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10c      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800

08004b78 <__assert_func>:
 8004b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <__assert_func+0x2c>)
 8004b80:	4605      	mov	r5, r0
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68d8      	ldr	r0, [r3, #12]
 8004b86:	b14c      	cbz	r4, 8004b9c <__assert_func+0x24>
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <__assert_func+0x30>)
 8004b8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b8e:	9100      	str	r1, [sp, #0]
 8004b90:	462b      	mov	r3, r5
 8004b92:	4906      	ldr	r1, [pc, #24]	; (8004bac <__assert_func+0x34>)
 8004b94:	f000 f814 	bl	8004bc0 <fiprintf>
 8004b98:	f000 fd80 	bl	800569c <abort>
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <__assert_func+0x38>)
 8004b9e:	461c      	mov	r4, r3
 8004ba0:	e7f3      	b.n	8004b8a <__assert_func+0x12>
 8004ba2:	bf00      	nop
 8004ba4:	20000080 	.word	0x20000080
 8004ba8:	08006410 	.word	0x08006410
 8004bac:	0800641d 	.word	0x0800641d
 8004bb0:	0800644b 	.word	0x0800644b

08004bb4 <__errno>:
 8004bb4:	4b01      	ldr	r3, [pc, #4]	; (8004bbc <__errno+0x8>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000080 	.word	0x20000080

08004bc0 <fiprintf>:
 8004bc0:	b40e      	push	{r1, r2, r3}
 8004bc2:	b503      	push	{r0, r1, lr}
 8004bc4:	4601      	mov	r1, r0
 8004bc6:	ab03      	add	r3, sp, #12
 8004bc8:	4805      	ldr	r0, [pc, #20]	; (8004be0 <fiprintf+0x20>)
 8004bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bce:	6800      	ldr	r0, [r0, #0]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	f000 f93f 	bl	8004e54 <_vfiprintf_r>
 8004bd6:	b002      	add	sp, #8
 8004bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bdc:	b003      	add	sp, #12
 8004bde:	4770      	bx	lr
 8004be0:	20000080 	.word	0x20000080

08004be4 <__libc_init_array>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	2600      	movs	r6, #0
 8004be8:	4d0c      	ldr	r5, [pc, #48]	; (8004c1c <__libc_init_array+0x38>)
 8004bea:	4c0d      	ldr	r4, [pc, #52]	; (8004c20 <__libc_init_array+0x3c>)
 8004bec:	1b64      	subs	r4, r4, r5
 8004bee:	10a4      	asrs	r4, r4, #2
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d109      	bne.n	8004c08 <__libc_init_array+0x24>
 8004bf4:	f001 f880 	bl	8005cf8 <_init>
 8004bf8:	2600      	movs	r6, #0
 8004bfa:	4d0a      	ldr	r5, [pc, #40]	; (8004c24 <__libc_init_array+0x40>)
 8004bfc:	4c0a      	ldr	r4, [pc, #40]	; (8004c28 <__libc_init_array+0x44>)
 8004bfe:	1b64      	subs	r4, r4, r5
 8004c00:	10a4      	asrs	r4, r4, #2
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	d105      	bne.n	8004c12 <__libc_init_array+0x2e>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0c:	4798      	blx	r3
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7ee      	b.n	8004bf0 <__libc_init_array+0xc>
 8004c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c16:	4798      	blx	r3
 8004c18:	3601      	adds	r6, #1
 8004c1a:	e7f2      	b.n	8004c02 <__libc_init_array+0x1e>
 8004c1c:	080064e4 	.word	0x080064e4
 8004c20:	080064e4 	.word	0x080064e4
 8004c24:	080064e4 	.word	0x080064e4
 8004c28:	080064e8 	.word	0x080064e8

08004c2c <malloc>:
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <malloc+0xc>)
 8004c2e:	4601      	mov	r1, r0
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f000 b873 	b.w	8004d1c <_malloc_r>
 8004c36:	bf00      	nop
 8004c38:	20000080 	.word	0x20000080

08004c3c <memset>:
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4402      	add	r2, r0
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d100      	bne.n	8004c46 <memset+0xa>
 8004c44:	4770      	bx	lr
 8004c46:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4a:	e7f9      	b.n	8004c40 <memset+0x4>

08004c4c <_free_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4605      	mov	r5, r0
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d040      	beq.n	8004cd6 <_free_r+0x8a>
 8004c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c58:	1f0c      	subs	r4, r1, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfb8      	it	lt
 8004c5e:	18e4      	addlt	r4, r4, r3
 8004c60:	f000 ff4e 	bl	8005b00 <__malloc_lock>
 8004c64:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <_free_r+0x8c>)
 8004c66:	6813      	ldr	r3, [r2, #0]
 8004c68:	b933      	cbnz	r3, 8004c78 <_free_r+0x2c>
 8004c6a:	6063      	str	r3, [r4, #4]
 8004c6c:	6014      	str	r4, [r2, #0]
 8004c6e:	4628      	mov	r0, r5
 8004c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c74:	f000 bf4a 	b.w	8005b0c <__malloc_unlock>
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	d908      	bls.n	8004c8e <_free_r+0x42>
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	1821      	adds	r1, r4, r0
 8004c80:	428b      	cmp	r3, r1
 8004c82:	bf01      	itttt	eq
 8004c84:	6819      	ldreq	r1, [r3, #0]
 8004c86:	685b      	ldreq	r3, [r3, #4]
 8004c88:	1809      	addeq	r1, r1, r0
 8004c8a:	6021      	streq	r1, [r4, #0]
 8004c8c:	e7ed      	b.n	8004c6a <_free_r+0x1e>
 8004c8e:	461a      	mov	r2, r3
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b10b      	cbz	r3, 8004c98 <_free_r+0x4c>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d9fa      	bls.n	8004c8e <_free_r+0x42>
 8004c98:	6811      	ldr	r1, [r2, #0]
 8004c9a:	1850      	adds	r0, r2, r1
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d10b      	bne.n	8004cb8 <_free_r+0x6c>
 8004ca0:	6820      	ldr	r0, [r4, #0]
 8004ca2:	4401      	add	r1, r0
 8004ca4:	1850      	adds	r0, r2, r1
 8004ca6:	4283      	cmp	r3, r0
 8004ca8:	6011      	str	r1, [r2, #0]
 8004caa:	d1e0      	bne.n	8004c6e <_free_r+0x22>
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4401      	add	r1, r0
 8004cb2:	6011      	str	r1, [r2, #0]
 8004cb4:	6053      	str	r3, [r2, #4]
 8004cb6:	e7da      	b.n	8004c6e <_free_r+0x22>
 8004cb8:	d902      	bls.n	8004cc0 <_free_r+0x74>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	602b      	str	r3, [r5, #0]
 8004cbe:	e7d6      	b.n	8004c6e <_free_r+0x22>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	1821      	adds	r1, r4, r0
 8004cc4:	428b      	cmp	r3, r1
 8004cc6:	bf01      	itttt	eq
 8004cc8:	6819      	ldreq	r1, [r3, #0]
 8004cca:	685b      	ldreq	r3, [r3, #4]
 8004ccc:	1809      	addeq	r1, r1, r0
 8004cce:	6021      	streq	r1, [r4, #0]
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	6054      	str	r4, [r2, #4]
 8004cd4:	e7cb      	b.n	8004c6e <_free_r+0x22>
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	20000544 	.word	0x20000544

08004cdc <sbrk_aligned>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	4e0e      	ldr	r6, [pc, #56]	; (8004d18 <sbrk_aligned+0x3c>)
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	6831      	ldr	r1, [r6, #0]
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	b911      	cbnz	r1, 8004cee <sbrk_aligned+0x12>
 8004ce8:	f000 fc08 	bl	80054fc <_sbrk_r>
 8004cec:	6030      	str	r0, [r6, #0]
 8004cee:	4621      	mov	r1, r4
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 fc03 	bl	80054fc <_sbrk_r>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	d00a      	beq.n	8004d10 <sbrk_aligned+0x34>
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d007      	beq.n	8004d14 <sbrk_aligned+0x38>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fbf8 	bl	80054fc <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d101      	bne.n	8004d14 <sbrk_aligned+0x38>
 8004d10:	f04f 34ff 	mov.w	r4, #4294967295
 8004d14:	4620      	mov	r0, r4
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	20000548 	.word	0x20000548

08004d1c <_malloc_r>:
 8004d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d20:	1ccd      	adds	r5, r1, #3
 8004d22:	f025 0503 	bic.w	r5, r5, #3
 8004d26:	3508      	adds	r5, #8
 8004d28:	2d0c      	cmp	r5, #12
 8004d2a:	bf38      	it	cc
 8004d2c:	250c      	movcc	r5, #12
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	4607      	mov	r7, r0
 8004d32:	db01      	blt.n	8004d38 <_malloc_r+0x1c>
 8004d34:	42a9      	cmp	r1, r5
 8004d36:	d905      	bls.n	8004d44 <_malloc_r+0x28>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4630      	mov	r0, r6
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d44:	4e2e      	ldr	r6, [pc, #184]	; (8004e00 <_malloc_r+0xe4>)
 8004d46:	f000 fedb 	bl	8005b00 <__malloc_lock>
 8004d4a:	6833      	ldr	r3, [r6, #0]
 8004d4c:	461c      	mov	r4, r3
 8004d4e:	bb34      	cbnz	r4, 8004d9e <_malloc_r+0x82>
 8004d50:	4629      	mov	r1, r5
 8004d52:	4638      	mov	r0, r7
 8004d54:	f7ff ffc2 	bl	8004cdc <sbrk_aligned>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	d14d      	bne.n	8004dfa <_malloc_r+0xde>
 8004d5e:	6834      	ldr	r4, [r6, #0]
 8004d60:	4626      	mov	r6, r4
 8004d62:	2e00      	cmp	r6, #0
 8004d64:	d140      	bne.n	8004de8 <_malloc_r+0xcc>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	eb04 0803 	add.w	r8, r4, r3
 8004d70:	f000 fbc4 	bl	80054fc <_sbrk_r>
 8004d74:	4580      	cmp	r8, r0
 8004d76:	d13a      	bne.n	8004dee <_malloc_r+0xd2>
 8004d78:	6821      	ldr	r1, [r4, #0]
 8004d7a:	3503      	adds	r5, #3
 8004d7c:	1a6d      	subs	r5, r5, r1
 8004d7e:	f025 0503 	bic.w	r5, r5, #3
 8004d82:	3508      	adds	r5, #8
 8004d84:	2d0c      	cmp	r5, #12
 8004d86:	bf38      	it	cc
 8004d88:	250c      	movcc	r5, #12
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7ff ffa5 	bl	8004cdc <sbrk_aligned>
 8004d92:	3001      	adds	r0, #1
 8004d94:	d02b      	beq.n	8004dee <_malloc_r+0xd2>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	442b      	add	r3, r5
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	e00e      	b.n	8004dbc <_malloc_r+0xa0>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	1b52      	subs	r2, r2, r5
 8004da2:	d41e      	bmi.n	8004de2 <_malloc_r+0xc6>
 8004da4:	2a0b      	cmp	r2, #11
 8004da6:	d916      	bls.n	8004dd6 <_malloc_r+0xba>
 8004da8:	1961      	adds	r1, r4, r5
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	6025      	str	r5, [r4, #0]
 8004dae:	bf18      	it	ne
 8004db0:	6059      	strne	r1, [r3, #4]
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	bf08      	it	eq
 8004db6:	6031      	streq	r1, [r6, #0]
 8004db8:	5162      	str	r2, [r4, r5]
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	f104 060b 	add.w	r6, r4, #11
 8004dc2:	f000 fea3 	bl	8005b0c <__malloc_unlock>
 8004dc6:	f026 0607 	bic.w	r6, r6, #7
 8004dca:	1d23      	adds	r3, r4, #4
 8004dcc:	1af2      	subs	r2, r6, r3
 8004dce:	d0b6      	beq.n	8004d3e <_malloc_r+0x22>
 8004dd0:	1b9b      	subs	r3, r3, r6
 8004dd2:	50a3      	str	r3, [r4, r2]
 8004dd4:	e7b3      	b.n	8004d3e <_malloc_r+0x22>
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	bf0c      	ite	eq
 8004ddc:	6032      	streq	r2, [r6, #0]
 8004dde:	605a      	strne	r2, [r3, #4]
 8004de0:	e7ec      	b.n	8004dbc <_malloc_r+0xa0>
 8004de2:	4623      	mov	r3, r4
 8004de4:	6864      	ldr	r4, [r4, #4]
 8004de6:	e7b2      	b.n	8004d4e <_malloc_r+0x32>
 8004de8:	4634      	mov	r4, r6
 8004dea:	6876      	ldr	r6, [r6, #4]
 8004dec:	e7b9      	b.n	8004d62 <_malloc_r+0x46>
 8004dee:	230c      	movs	r3, #12
 8004df0:	4638      	mov	r0, r7
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	f000 fe8a 	bl	8005b0c <__malloc_unlock>
 8004df8:	e7a1      	b.n	8004d3e <_malloc_r+0x22>
 8004dfa:	6025      	str	r5, [r4, #0]
 8004dfc:	e7de      	b.n	8004dbc <_malloc_r+0xa0>
 8004dfe:	bf00      	nop
 8004e00:	20000544 	.word	0x20000544

08004e04 <__sfputc_r>:
 8004e04:	6893      	ldr	r3, [r2, #8]
 8004e06:	b410      	push	{r4}
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	6093      	str	r3, [r2, #8]
 8004e0e:	da07      	bge.n	8004e20 <__sfputc_r+0x1c>
 8004e10:	6994      	ldr	r4, [r2, #24]
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	db01      	blt.n	8004e1a <__sfputc_r+0x16>
 8004e16:	290a      	cmp	r1, #10
 8004e18:	d102      	bne.n	8004e20 <__sfputc_r+0x1c>
 8004e1a:	bc10      	pop	{r4}
 8004e1c:	f000 bb7e 	b.w	800551c <__swbuf_r>
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	1c58      	adds	r0, r3, #1
 8004e24:	6010      	str	r0, [r2, #0]
 8004e26:	7019      	strb	r1, [r3, #0]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	bc10      	pop	{r4}
 8004e2c:	4770      	bx	lr

08004e2e <__sfputs_r>:
 8004e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e30:	4606      	mov	r6, r0
 8004e32:	460f      	mov	r7, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	18d5      	adds	r5, r2, r3
 8004e38:	42ac      	cmp	r4, r5
 8004e3a:	d101      	bne.n	8004e40 <__sfputs_r+0x12>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	e007      	b.n	8004e50 <__sfputs_r+0x22>
 8004e40:	463a      	mov	r2, r7
 8004e42:	4630      	mov	r0, r6
 8004e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e48:	f7ff ffdc 	bl	8004e04 <__sfputc_r>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d1f3      	bne.n	8004e38 <__sfputs_r+0xa>
 8004e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e54 <_vfiprintf_r>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	460d      	mov	r5, r1
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	4698      	mov	r8, r3
 8004e5e:	4606      	mov	r6, r0
 8004e60:	b09d      	sub	sp, #116	; 0x74
 8004e62:	b118      	cbz	r0, 8004e6c <_vfiprintf_r+0x18>
 8004e64:	6983      	ldr	r3, [r0, #24]
 8004e66:	b90b      	cbnz	r3, 8004e6c <_vfiprintf_r+0x18>
 8004e68:	f000 fd36 	bl	80058d8 <__sinit>
 8004e6c:	4b89      	ldr	r3, [pc, #548]	; (8005094 <_vfiprintf_r+0x240>)
 8004e6e:	429d      	cmp	r5, r3
 8004e70:	d11b      	bne.n	8004eaa <_vfiprintf_r+0x56>
 8004e72:	6875      	ldr	r5, [r6, #4]
 8004e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e76:	07d9      	lsls	r1, r3, #31
 8004e78:	d405      	bmi.n	8004e86 <_vfiprintf_r+0x32>
 8004e7a:	89ab      	ldrh	r3, [r5, #12]
 8004e7c:	059a      	lsls	r2, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <_vfiprintf_r+0x32>
 8004e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e82:	f000 fdc7 	bl	8005a14 <__retarget_lock_acquire_recursive>
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	071b      	lsls	r3, r3, #28
 8004e8a:	d501      	bpl.n	8004e90 <_vfiprintf_r+0x3c>
 8004e8c:	692b      	ldr	r3, [r5, #16]
 8004e8e:	b9eb      	cbnz	r3, 8004ecc <_vfiprintf_r+0x78>
 8004e90:	4629      	mov	r1, r5
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 fb94 	bl	80055c0 <__swsetup_r>
 8004e98:	b1c0      	cbz	r0, 8004ecc <_vfiprintf_r+0x78>
 8004e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e9c:	07dc      	lsls	r4, r3, #31
 8004e9e:	d50e      	bpl.n	8004ebe <_vfiprintf_r+0x6a>
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	b01d      	add	sp, #116	; 0x74
 8004ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eaa:	4b7b      	ldr	r3, [pc, #492]	; (8005098 <_vfiprintf_r+0x244>)
 8004eac:	429d      	cmp	r5, r3
 8004eae:	d101      	bne.n	8004eb4 <_vfiprintf_r+0x60>
 8004eb0:	68b5      	ldr	r5, [r6, #8]
 8004eb2:	e7df      	b.n	8004e74 <_vfiprintf_r+0x20>
 8004eb4:	4b79      	ldr	r3, [pc, #484]	; (800509c <_vfiprintf_r+0x248>)
 8004eb6:	429d      	cmp	r5, r3
 8004eb8:	bf08      	it	eq
 8004eba:	68f5      	ldreq	r5, [r6, #12]
 8004ebc:	e7da      	b.n	8004e74 <_vfiprintf_r+0x20>
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	0598      	lsls	r0, r3, #22
 8004ec2:	d4ed      	bmi.n	8004ea0 <_vfiprintf_r+0x4c>
 8004ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ec6:	f000 fda6 	bl	8005a16 <__retarget_lock_release_recursive>
 8004eca:	e7e9      	b.n	8004ea0 <_vfiprintf_r+0x4c>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed6:	2330      	movs	r3, #48	; 0x30
 8004ed8:	f04f 0901 	mov.w	r9, #1
 8004edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ee0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80050a0 <_vfiprintf_r+0x24c>
 8004ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ee8:	4623      	mov	r3, r4
 8004eea:	469a      	mov	sl, r3
 8004eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ef0:	b10a      	cbz	r2, 8004ef6 <_vfiprintf_r+0xa2>
 8004ef2:	2a25      	cmp	r2, #37	; 0x25
 8004ef4:	d1f9      	bne.n	8004eea <_vfiprintf_r+0x96>
 8004ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8004efa:	d00b      	beq.n	8004f14 <_vfiprintf_r+0xc0>
 8004efc:	465b      	mov	r3, fp
 8004efe:	4622      	mov	r2, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff ff93 	bl	8004e2e <__sfputs_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f000 80aa 	beq.w	8005062 <_vfiprintf_r+0x20e>
 8004f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f10:	445a      	add	r2, fp
 8004f12:	9209      	str	r2, [sp, #36]	; 0x24
 8004f14:	f89a 3000 	ldrb.w	r3, [sl]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80a2 	beq.w	8005062 <_vfiprintf_r+0x20e>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f28:	f10a 0a01 	add.w	sl, sl, #1
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f34:	931a      	str	r3, [sp, #104]	; 0x68
 8004f36:	4654      	mov	r4, sl
 8004f38:	2205      	movs	r2, #5
 8004f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3e:	4858      	ldr	r0, [pc, #352]	; (80050a0 <_vfiprintf_r+0x24c>)
 8004f40:	f000 fdd0 	bl	8005ae4 <memchr>
 8004f44:	9a04      	ldr	r2, [sp, #16]
 8004f46:	b9d8      	cbnz	r0, 8004f80 <_vfiprintf_r+0x12c>
 8004f48:	06d1      	lsls	r1, r2, #27
 8004f4a:	bf44      	itt	mi
 8004f4c:	2320      	movmi	r3, #32
 8004f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f52:	0713      	lsls	r3, r2, #28
 8004f54:	bf44      	itt	mi
 8004f56:	232b      	movmi	r3, #43	; 0x2b
 8004f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f60:	2b2a      	cmp	r3, #42	; 0x2a
 8004f62:	d015      	beq.n	8004f90 <_vfiprintf_r+0x13c>
 8004f64:	4654      	mov	r4, sl
 8004f66:	2000      	movs	r0, #0
 8004f68:	f04f 0c0a 	mov.w	ip, #10
 8004f6c:	9a07      	ldr	r2, [sp, #28]
 8004f6e:	4621      	mov	r1, r4
 8004f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f74:	3b30      	subs	r3, #48	; 0x30
 8004f76:	2b09      	cmp	r3, #9
 8004f78:	d94e      	bls.n	8005018 <_vfiprintf_r+0x1c4>
 8004f7a:	b1b0      	cbz	r0, 8004faa <_vfiprintf_r+0x156>
 8004f7c:	9207      	str	r2, [sp, #28]
 8004f7e:	e014      	b.n	8004faa <_vfiprintf_r+0x156>
 8004f80:	eba0 0308 	sub.w	r3, r0, r8
 8004f84:	fa09 f303 	lsl.w	r3, r9, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	46a2      	mov	sl, r4
 8004f8c:	9304      	str	r3, [sp, #16]
 8004f8e:	e7d2      	b.n	8004f36 <_vfiprintf_r+0xe2>
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	1d19      	adds	r1, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	9103      	str	r1, [sp, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfbb      	ittet	lt
 8004f9c:	425b      	neglt	r3, r3
 8004f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8004fa2:	9307      	strge	r3, [sp, #28]
 8004fa4:	9307      	strlt	r3, [sp, #28]
 8004fa6:	bfb8      	it	lt
 8004fa8:	9204      	strlt	r2, [sp, #16]
 8004faa:	7823      	ldrb	r3, [r4, #0]
 8004fac:	2b2e      	cmp	r3, #46	; 0x2e
 8004fae:	d10c      	bne.n	8004fca <_vfiprintf_r+0x176>
 8004fb0:	7863      	ldrb	r3, [r4, #1]
 8004fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb4:	d135      	bne.n	8005022 <_vfiprintf_r+0x1ce>
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	3402      	adds	r4, #2
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	9203      	str	r2, [sp, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bfb8      	it	lt
 8004fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fc8:	9305      	str	r3, [sp, #20]
 8004fca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80050a4 <_vfiprintf_r+0x250>
 8004fce:	2203      	movs	r2, #3
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	7821      	ldrb	r1, [r4, #0]
 8004fd4:	f000 fd86 	bl	8005ae4 <memchr>
 8004fd8:	b140      	cbz	r0, 8004fec <_vfiprintf_r+0x198>
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	eba0 000a 	sub.w	r0, r0, sl
 8004fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8004fe4:	9b04      	ldr	r3, [sp, #16]
 8004fe6:	3401      	adds	r4, #1
 8004fe8:	4303      	orrs	r3, r0
 8004fea:	9304      	str	r3, [sp, #16]
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	2206      	movs	r2, #6
 8004ff2:	482d      	ldr	r0, [pc, #180]	; (80050a8 <_vfiprintf_r+0x254>)
 8004ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ff8:	f000 fd74 	bl	8005ae4 <memchr>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d03f      	beq.n	8005080 <_vfiprintf_r+0x22c>
 8005000:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <_vfiprintf_r+0x258>)
 8005002:	bb1b      	cbnz	r3, 800504c <_vfiprintf_r+0x1f8>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	3307      	adds	r3, #7
 8005008:	f023 0307 	bic.w	r3, r3, #7
 800500c:	3308      	adds	r3, #8
 800500e:	9303      	str	r3, [sp, #12]
 8005010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005012:	443b      	add	r3, r7
 8005014:	9309      	str	r3, [sp, #36]	; 0x24
 8005016:	e767      	b.n	8004ee8 <_vfiprintf_r+0x94>
 8005018:	460c      	mov	r4, r1
 800501a:	2001      	movs	r0, #1
 800501c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005020:	e7a5      	b.n	8004f6e <_vfiprintf_r+0x11a>
 8005022:	2300      	movs	r3, #0
 8005024:	f04f 0c0a 	mov.w	ip, #10
 8005028:	4619      	mov	r1, r3
 800502a:	3401      	adds	r4, #1
 800502c:	9305      	str	r3, [sp, #20]
 800502e:	4620      	mov	r0, r4
 8005030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005034:	3a30      	subs	r2, #48	; 0x30
 8005036:	2a09      	cmp	r2, #9
 8005038:	d903      	bls.n	8005042 <_vfiprintf_r+0x1ee>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0c5      	beq.n	8004fca <_vfiprintf_r+0x176>
 800503e:	9105      	str	r1, [sp, #20]
 8005040:	e7c3      	b.n	8004fca <_vfiprintf_r+0x176>
 8005042:	4604      	mov	r4, r0
 8005044:	2301      	movs	r3, #1
 8005046:	fb0c 2101 	mla	r1, ip, r1, r2
 800504a:	e7f0      	b.n	800502e <_vfiprintf_r+0x1da>
 800504c:	ab03      	add	r3, sp, #12
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	462a      	mov	r2, r5
 8005052:	4630      	mov	r0, r6
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <_vfiprintf_r+0x25c>)
 8005056:	a904      	add	r1, sp, #16
 8005058:	f3af 8000 	nop.w
 800505c:	4607      	mov	r7, r0
 800505e:	1c78      	adds	r0, r7, #1
 8005060:	d1d6      	bne.n	8005010 <_vfiprintf_r+0x1bc>
 8005062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005064:	07d9      	lsls	r1, r3, #31
 8005066:	d405      	bmi.n	8005074 <_vfiprintf_r+0x220>
 8005068:	89ab      	ldrh	r3, [r5, #12]
 800506a:	059a      	lsls	r2, r3, #22
 800506c:	d402      	bmi.n	8005074 <_vfiprintf_r+0x220>
 800506e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005070:	f000 fcd1 	bl	8005a16 <__retarget_lock_release_recursive>
 8005074:	89ab      	ldrh	r3, [r5, #12]
 8005076:	065b      	lsls	r3, r3, #25
 8005078:	f53f af12 	bmi.w	8004ea0 <_vfiprintf_r+0x4c>
 800507c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800507e:	e711      	b.n	8004ea4 <_vfiprintf_r+0x50>
 8005080:	ab03      	add	r3, sp, #12
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	462a      	mov	r2, r5
 8005086:	4630      	mov	r0, r6
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <_vfiprintf_r+0x25c>)
 800508a:	a904      	add	r1, sp, #16
 800508c:	f000 f882 	bl	8005194 <_printf_i>
 8005090:	e7e4      	b.n	800505c <_vfiprintf_r+0x208>
 8005092:	bf00      	nop
 8005094:	080064a4 	.word	0x080064a4
 8005098:	080064c4 	.word	0x080064c4
 800509c:	08006484 	.word	0x08006484
 80050a0:	08006450 	.word	0x08006450
 80050a4:	08006456 	.word	0x08006456
 80050a8:	0800645a 	.word	0x0800645a
 80050ac:	00000000 	.word	0x00000000
 80050b0:	08004e2f 	.word	0x08004e2f

080050b4 <_printf_common>:
 80050b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	4616      	mov	r6, r2
 80050ba:	4699      	mov	r9, r3
 80050bc:	688a      	ldr	r2, [r1, #8]
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	4607      	mov	r7, r0
 80050c2:	4293      	cmp	r3, r2
 80050c4:	bfb8      	it	lt
 80050c6:	4613      	movlt	r3, r2
 80050c8:	6033      	str	r3, [r6, #0]
 80050ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ce:	460c      	mov	r4, r1
 80050d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050d4:	b10a      	cbz	r2, 80050da <_printf_common+0x26>
 80050d6:	3301      	adds	r3, #1
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	0699      	lsls	r1, r3, #26
 80050de:	bf42      	ittt	mi
 80050e0:	6833      	ldrmi	r3, [r6, #0]
 80050e2:	3302      	addmi	r3, #2
 80050e4:	6033      	strmi	r3, [r6, #0]
 80050e6:	6825      	ldr	r5, [r4, #0]
 80050e8:	f015 0506 	ands.w	r5, r5, #6
 80050ec:	d106      	bne.n	80050fc <_printf_common+0x48>
 80050ee:	f104 0a19 	add.w	sl, r4, #25
 80050f2:	68e3      	ldr	r3, [r4, #12]
 80050f4:	6832      	ldr	r2, [r6, #0]
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	dc28      	bgt.n	800514e <_printf_common+0x9a>
 80050fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005100:	1e13      	subs	r3, r2, #0
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	bf18      	it	ne
 8005106:	2301      	movne	r3, #1
 8005108:	0692      	lsls	r2, r2, #26
 800510a:	d42d      	bmi.n	8005168 <_printf_common+0xb4>
 800510c:	4649      	mov	r1, r9
 800510e:	4638      	mov	r0, r7
 8005110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005114:	47c0      	blx	r8
 8005116:	3001      	adds	r0, #1
 8005118:	d020      	beq.n	800515c <_printf_common+0xa8>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	68e5      	ldr	r5, [r4, #12]
 800511e:	f003 0306 	and.w	r3, r3, #6
 8005122:	2b04      	cmp	r3, #4
 8005124:	bf18      	it	ne
 8005126:	2500      	movne	r5, #0
 8005128:	6832      	ldr	r2, [r6, #0]
 800512a:	f04f 0600 	mov.w	r6, #0
 800512e:	68a3      	ldr	r3, [r4, #8]
 8005130:	bf08      	it	eq
 8005132:	1aad      	subeq	r5, r5, r2
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	bf08      	it	eq
 8005138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800513c:	4293      	cmp	r3, r2
 800513e:	bfc4      	itt	gt
 8005140:	1a9b      	subgt	r3, r3, r2
 8005142:	18ed      	addgt	r5, r5, r3
 8005144:	341a      	adds	r4, #26
 8005146:	42b5      	cmp	r5, r6
 8005148:	d11a      	bne.n	8005180 <_printf_common+0xcc>
 800514a:	2000      	movs	r0, #0
 800514c:	e008      	b.n	8005160 <_printf_common+0xac>
 800514e:	2301      	movs	r3, #1
 8005150:	4652      	mov	r2, sl
 8005152:	4649      	mov	r1, r9
 8005154:	4638      	mov	r0, r7
 8005156:	47c0      	blx	r8
 8005158:	3001      	adds	r0, #1
 800515a:	d103      	bne.n	8005164 <_printf_common+0xb0>
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005164:	3501      	adds	r5, #1
 8005166:	e7c4      	b.n	80050f2 <_printf_common+0x3e>
 8005168:	2030      	movs	r0, #48	; 0x30
 800516a:	18e1      	adds	r1, r4, r3
 800516c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005176:	4422      	add	r2, r4
 8005178:	3302      	adds	r3, #2
 800517a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800517e:	e7c5      	b.n	800510c <_printf_common+0x58>
 8005180:	2301      	movs	r3, #1
 8005182:	4622      	mov	r2, r4
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d0e6      	beq.n	800515c <_printf_common+0xa8>
 800518e:	3601      	adds	r6, #1
 8005190:	e7d9      	b.n	8005146 <_printf_common+0x92>
	...

08005194 <_printf_i>:
 8005194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	7e0f      	ldrb	r7, [r1, #24]
 800519a:	4691      	mov	r9, r2
 800519c:	2f78      	cmp	r7, #120	; 0x78
 800519e:	4680      	mov	r8, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	469a      	mov	sl, r3
 80051a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051aa:	d807      	bhi.n	80051bc <_printf_i+0x28>
 80051ac:	2f62      	cmp	r7, #98	; 0x62
 80051ae:	d80a      	bhi.n	80051c6 <_printf_i+0x32>
 80051b0:	2f00      	cmp	r7, #0
 80051b2:	f000 80d9 	beq.w	8005368 <_printf_i+0x1d4>
 80051b6:	2f58      	cmp	r7, #88	; 0x58
 80051b8:	f000 80a4 	beq.w	8005304 <_printf_i+0x170>
 80051bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c4:	e03a      	b.n	800523c <_printf_i+0xa8>
 80051c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ca:	2b15      	cmp	r3, #21
 80051cc:	d8f6      	bhi.n	80051bc <_printf_i+0x28>
 80051ce:	a101      	add	r1, pc, #4	; (adr r1, 80051d4 <_printf_i+0x40>)
 80051d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	08005241 	.word	0x08005241
 80051dc:	080051bd 	.word	0x080051bd
 80051e0:	080051bd 	.word	0x080051bd
 80051e4:	080051bd 	.word	0x080051bd
 80051e8:	080051bd 	.word	0x080051bd
 80051ec:	08005241 	.word	0x08005241
 80051f0:	080051bd 	.word	0x080051bd
 80051f4:	080051bd 	.word	0x080051bd
 80051f8:	080051bd 	.word	0x080051bd
 80051fc:	080051bd 	.word	0x080051bd
 8005200:	0800534f 	.word	0x0800534f
 8005204:	08005271 	.word	0x08005271
 8005208:	08005331 	.word	0x08005331
 800520c:	080051bd 	.word	0x080051bd
 8005210:	080051bd 	.word	0x080051bd
 8005214:	08005371 	.word	0x08005371
 8005218:	080051bd 	.word	0x080051bd
 800521c:	08005271 	.word	0x08005271
 8005220:	080051bd 	.word	0x080051bd
 8005224:	080051bd 	.word	0x080051bd
 8005228:	08005339 	.word	0x08005339
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	602a      	str	r2, [r5, #0]
 8005234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800523c:	2301      	movs	r3, #1
 800523e:	e0a4      	b.n	800538a <_printf_i+0x1f6>
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	6829      	ldr	r1, [r5, #0]
 8005244:	0606      	lsls	r6, r0, #24
 8005246:	f101 0304 	add.w	r3, r1, #4
 800524a:	d50a      	bpl.n	8005262 <_printf_i+0xce>
 800524c:	680e      	ldr	r6, [r1, #0]
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	2e00      	cmp	r6, #0
 8005252:	da03      	bge.n	800525c <_printf_i+0xc8>
 8005254:	232d      	movs	r3, #45	; 0x2d
 8005256:	4276      	negs	r6, r6
 8005258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800525c:	230a      	movs	r3, #10
 800525e:	485e      	ldr	r0, [pc, #376]	; (80053d8 <_printf_i+0x244>)
 8005260:	e019      	b.n	8005296 <_printf_i+0x102>
 8005262:	680e      	ldr	r6, [r1, #0]
 8005264:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	bf18      	it	ne
 800526c:	b236      	sxthne	r6, r6
 800526e:	e7ef      	b.n	8005250 <_printf_i+0xbc>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	1d19      	adds	r1, r3, #4
 8005276:	6029      	str	r1, [r5, #0]
 8005278:	0601      	lsls	r1, r0, #24
 800527a:	d501      	bpl.n	8005280 <_printf_i+0xec>
 800527c:	681e      	ldr	r6, [r3, #0]
 800527e:	e002      	b.n	8005286 <_printf_i+0xf2>
 8005280:	0646      	lsls	r6, r0, #25
 8005282:	d5fb      	bpl.n	800527c <_printf_i+0xe8>
 8005284:	881e      	ldrh	r6, [r3, #0]
 8005286:	2f6f      	cmp	r7, #111	; 0x6f
 8005288:	bf0c      	ite	eq
 800528a:	2308      	moveq	r3, #8
 800528c:	230a      	movne	r3, #10
 800528e:	4852      	ldr	r0, [pc, #328]	; (80053d8 <_printf_i+0x244>)
 8005290:	2100      	movs	r1, #0
 8005292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005296:	6865      	ldr	r5, [r4, #4]
 8005298:	2d00      	cmp	r5, #0
 800529a:	bfa8      	it	ge
 800529c:	6821      	ldrge	r1, [r4, #0]
 800529e:	60a5      	str	r5, [r4, #8]
 80052a0:	bfa4      	itt	ge
 80052a2:	f021 0104 	bicge.w	r1, r1, #4
 80052a6:	6021      	strge	r1, [r4, #0]
 80052a8:	b90e      	cbnz	r6, 80052ae <_printf_i+0x11a>
 80052aa:	2d00      	cmp	r5, #0
 80052ac:	d04d      	beq.n	800534a <_printf_i+0x1b6>
 80052ae:	4615      	mov	r5, r2
 80052b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80052b4:	fb03 6711 	mls	r7, r3, r1, r6
 80052b8:	5dc7      	ldrb	r7, [r0, r7]
 80052ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052be:	4637      	mov	r7, r6
 80052c0:	42bb      	cmp	r3, r7
 80052c2:	460e      	mov	r6, r1
 80052c4:	d9f4      	bls.n	80052b0 <_printf_i+0x11c>
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d10b      	bne.n	80052e2 <_printf_i+0x14e>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	07de      	lsls	r6, r3, #31
 80052ce:	d508      	bpl.n	80052e2 <_printf_i+0x14e>
 80052d0:	6923      	ldr	r3, [r4, #16]
 80052d2:	6861      	ldr	r1, [r4, #4]
 80052d4:	4299      	cmp	r1, r3
 80052d6:	bfde      	ittt	le
 80052d8:	2330      	movle	r3, #48	; 0x30
 80052da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052e2:	1b52      	subs	r2, r2, r5
 80052e4:	6122      	str	r2, [r4, #16]
 80052e6:	464b      	mov	r3, r9
 80052e8:	4621      	mov	r1, r4
 80052ea:	4640      	mov	r0, r8
 80052ec:	f8cd a000 	str.w	sl, [sp]
 80052f0:	aa03      	add	r2, sp, #12
 80052f2:	f7ff fedf 	bl	80050b4 <_printf_common>
 80052f6:	3001      	adds	r0, #1
 80052f8:	d14c      	bne.n	8005394 <_printf_i+0x200>
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	b004      	add	sp, #16
 8005300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005304:	4834      	ldr	r0, [pc, #208]	; (80053d8 <_printf_i+0x244>)
 8005306:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800530a:	6829      	ldr	r1, [r5, #0]
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005312:	6029      	str	r1, [r5, #0]
 8005314:	061d      	lsls	r5, r3, #24
 8005316:	d514      	bpl.n	8005342 <_printf_i+0x1ae>
 8005318:	07df      	lsls	r7, r3, #31
 800531a:	bf44      	itt	mi
 800531c:	f043 0320 	orrmi.w	r3, r3, #32
 8005320:	6023      	strmi	r3, [r4, #0]
 8005322:	b91e      	cbnz	r6, 800532c <_printf_i+0x198>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	f023 0320 	bic.w	r3, r3, #32
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	2310      	movs	r3, #16
 800532e:	e7af      	b.n	8005290 <_printf_i+0xfc>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	f043 0320 	orr.w	r3, r3, #32
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	2378      	movs	r3, #120	; 0x78
 800533a:	4828      	ldr	r0, [pc, #160]	; (80053dc <_printf_i+0x248>)
 800533c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005340:	e7e3      	b.n	800530a <_printf_i+0x176>
 8005342:	0659      	lsls	r1, r3, #25
 8005344:	bf48      	it	mi
 8005346:	b2b6      	uxthmi	r6, r6
 8005348:	e7e6      	b.n	8005318 <_printf_i+0x184>
 800534a:	4615      	mov	r5, r2
 800534c:	e7bb      	b.n	80052c6 <_printf_i+0x132>
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	6826      	ldr	r6, [r4, #0]
 8005352:	1d18      	adds	r0, r3, #4
 8005354:	6961      	ldr	r1, [r4, #20]
 8005356:	6028      	str	r0, [r5, #0]
 8005358:	0635      	lsls	r5, r6, #24
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	d501      	bpl.n	8005362 <_printf_i+0x1ce>
 800535e:	6019      	str	r1, [r3, #0]
 8005360:	e002      	b.n	8005368 <_printf_i+0x1d4>
 8005362:	0670      	lsls	r0, r6, #25
 8005364:	d5fb      	bpl.n	800535e <_printf_i+0x1ca>
 8005366:	8019      	strh	r1, [r3, #0]
 8005368:	2300      	movs	r3, #0
 800536a:	4615      	mov	r5, r2
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	e7ba      	b.n	80052e6 <_printf_i+0x152>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	2100      	movs	r1, #0
 8005374:	1d1a      	adds	r2, r3, #4
 8005376:	602a      	str	r2, [r5, #0]
 8005378:	681d      	ldr	r5, [r3, #0]
 800537a:	6862      	ldr	r2, [r4, #4]
 800537c:	4628      	mov	r0, r5
 800537e:	f000 fbb1 	bl	8005ae4 <memchr>
 8005382:	b108      	cbz	r0, 8005388 <_printf_i+0x1f4>
 8005384:	1b40      	subs	r0, r0, r5
 8005386:	6060      	str	r0, [r4, #4]
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	2300      	movs	r3, #0
 800538e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005392:	e7a8      	b.n	80052e6 <_printf_i+0x152>
 8005394:	462a      	mov	r2, r5
 8005396:	4649      	mov	r1, r9
 8005398:	4640      	mov	r0, r8
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	47d0      	blx	sl
 800539e:	3001      	adds	r0, #1
 80053a0:	d0ab      	beq.n	80052fa <_printf_i+0x166>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	079b      	lsls	r3, r3, #30
 80053a6:	d413      	bmi.n	80053d0 <_printf_i+0x23c>
 80053a8:	68e0      	ldr	r0, [r4, #12]
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	4298      	cmp	r0, r3
 80053ae:	bfb8      	it	lt
 80053b0:	4618      	movlt	r0, r3
 80053b2:	e7a4      	b.n	80052fe <_printf_i+0x16a>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4632      	mov	r2, r6
 80053b8:	4649      	mov	r1, r9
 80053ba:	4640      	mov	r0, r8
 80053bc:	47d0      	blx	sl
 80053be:	3001      	adds	r0, #1
 80053c0:	d09b      	beq.n	80052fa <_printf_i+0x166>
 80053c2:	3501      	adds	r5, #1
 80053c4:	68e3      	ldr	r3, [r4, #12]
 80053c6:	9903      	ldr	r1, [sp, #12]
 80053c8:	1a5b      	subs	r3, r3, r1
 80053ca:	42ab      	cmp	r3, r5
 80053cc:	dcf2      	bgt.n	80053b4 <_printf_i+0x220>
 80053ce:	e7eb      	b.n	80053a8 <_printf_i+0x214>
 80053d0:	2500      	movs	r5, #0
 80053d2:	f104 0619 	add.w	r6, r4, #25
 80053d6:	e7f5      	b.n	80053c4 <_printf_i+0x230>
 80053d8:	08006461 	.word	0x08006461
 80053dc:	08006472 	.word	0x08006472

080053e0 <iprintf>:
 80053e0:	b40f      	push	{r0, r1, r2, r3}
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <iprintf+0x2c>)
 80053e4:	b513      	push	{r0, r1, r4, lr}
 80053e6:	681c      	ldr	r4, [r3, #0]
 80053e8:	b124      	cbz	r4, 80053f4 <iprintf+0x14>
 80053ea:	69a3      	ldr	r3, [r4, #24]
 80053ec:	b913      	cbnz	r3, 80053f4 <iprintf+0x14>
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fa72 	bl	80058d8 <__sinit>
 80053f4:	ab05      	add	r3, sp, #20
 80053f6:	4620      	mov	r0, r4
 80053f8:	9a04      	ldr	r2, [sp, #16]
 80053fa:	68a1      	ldr	r1, [r4, #8]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	f7ff fd29 	bl	8004e54 <_vfiprintf_r>
 8005402:	b002      	add	sp, #8
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	b004      	add	sp, #16
 800540a:	4770      	bx	lr
 800540c:	20000080 	.word	0x20000080

08005410 <_puts_r>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	460e      	mov	r6, r1
 8005414:	4605      	mov	r5, r0
 8005416:	b118      	cbz	r0, 8005420 <_puts_r+0x10>
 8005418:	6983      	ldr	r3, [r0, #24]
 800541a:	b90b      	cbnz	r3, 8005420 <_puts_r+0x10>
 800541c:	f000 fa5c 	bl	80058d8 <__sinit>
 8005420:	69ab      	ldr	r3, [r5, #24]
 8005422:	68ac      	ldr	r4, [r5, #8]
 8005424:	b913      	cbnz	r3, 800542c <_puts_r+0x1c>
 8005426:	4628      	mov	r0, r5
 8005428:	f000 fa56 	bl	80058d8 <__sinit>
 800542c:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <_puts_r+0xd0>)
 800542e:	429c      	cmp	r4, r3
 8005430:	d120      	bne.n	8005474 <_puts_r+0x64>
 8005432:	686c      	ldr	r4, [r5, #4]
 8005434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005436:	07db      	lsls	r3, r3, #31
 8005438:	d405      	bmi.n	8005446 <_puts_r+0x36>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	0598      	lsls	r0, r3, #22
 800543e:	d402      	bmi.n	8005446 <_puts_r+0x36>
 8005440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005442:	f000 fae7 	bl	8005a14 <__retarget_lock_acquire_recursive>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	0719      	lsls	r1, r3, #28
 800544a:	d51d      	bpl.n	8005488 <_puts_r+0x78>
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	b1db      	cbz	r3, 8005488 <_puts_r+0x78>
 8005450:	3e01      	subs	r6, #1
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005458:	3b01      	subs	r3, #1
 800545a:	60a3      	str	r3, [r4, #8]
 800545c:	bb39      	cbnz	r1, 80054ae <_puts_r+0x9e>
 800545e:	2b00      	cmp	r3, #0
 8005460:	da38      	bge.n	80054d4 <_puts_r+0xc4>
 8005462:	4622      	mov	r2, r4
 8005464:	210a      	movs	r1, #10
 8005466:	4628      	mov	r0, r5
 8005468:	f000 f858 	bl	800551c <__swbuf_r>
 800546c:	3001      	adds	r0, #1
 800546e:	d011      	beq.n	8005494 <_puts_r+0x84>
 8005470:	250a      	movs	r5, #10
 8005472:	e011      	b.n	8005498 <_puts_r+0x88>
 8005474:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <_puts_r+0xd4>)
 8005476:	429c      	cmp	r4, r3
 8005478:	d101      	bne.n	800547e <_puts_r+0x6e>
 800547a:	68ac      	ldr	r4, [r5, #8]
 800547c:	e7da      	b.n	8005434 <_puts_r+0x24>
 800547e:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <_puts_r+0xd8>)
 8005480:	429c      	cmp	r4, r3
 8005482:	bf08      	it	eq
 8005484:	68ec      	ldreq	r4, [r5, #12]
 8005486:	e7d5      	b.n	8005434 <_puts_r+0x24>
 8005488:	4621      	mov	r1, r4
 800548a:	4628      	mov	r0, r5
 800548c:	f000 f898 	bl	80055c0 <__swsetup_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	d0dd      	beq.n	8005450 <_puts_r+0x40>
 8005494:	f04f 35ff 	mov.w	r5, #4294967295
 8005498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800549a:	07da      	lsls	r2, r3, #31
 800549c:	d405      	bmi.n	80054aa <_puts_r+0x9a>
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	059b      	lsls	r3, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_puts_r+0x9a>
 80054a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a6:	f000 fab6 	bl	8005a16 <__retarget_lock_release_recursive>
 80054aa:	4628      	mov	r0, r5
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	da04      	bge.n	80054bc <_puts_r+0xac>
 80054b2:	69a2      	ldr	r2, [r4, #24]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	dc06      	bgt.n	80054c6 <_puts_r+0xb6>
 80054b8:	290a      	cmp	r1, #10
 80054ba:	d004      	beq.n	80054c6 <_puts_r+0xb6>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	6022      	str	r2, [r4, #0]
 80054c2:	7019      	strb	r1, [r3, #0]
 80054c4:	e7c5      	b.n	8005452 <_puts_r+0x42>
 80054c6:	4622      	mov	r2, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 f827 	bl	800551c <__swbuf_r>
 80054ce:	3001      	adds	r0, #1
 80054d0:	d1bf      	bne.n	8005452 <_puts_r+0x42>
 80054d2:	e7df      	b.n	8005494 <_puts_r+0x84>
 80054d4:	250a      	movs	r5, #10
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	6022      	str	r2, [r4, #0]
 80054dc:	701d      	strb	r5, [r3, #0]
 80054de:	e7db      	b.n	8005498 <_puts_r+0x88>
 80054e0:	080064a4 	.word	0x080064a4
 80054e4:	080064c4 	.word	0x080064c4
 80054e8:	08006484 	.word	0x08006484

080054ec <puts>:
 80054ec:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <puts+0xc>)
 80054ee:	4601      	mov	r1, r0
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	f7ff bf8d 	b.w	8005410 <_puts_r>
 80054f6:	bf00      	nop
 80054f8:	20000080 	.word	0x20000080

080054fc <_sbrk_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	2300      	movs	r3, #0
 8005500:	4d05      	ldr	r5, [pc, #20]	; (8005518 <_sbrk_r+0x1c>)
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fc fba6 	bl	8001c58 <_sbrk>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_sbrk_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_sbrk_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000550 	.word	0x20000550

0800551c <__swbuf_r>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	460e      	mov	r6, r1
 8005520:	4614      	mov	r4, r2
 8005522:	4605      	mov	r5, r0
 8005524:	b118      	cbz	r0, 800552e <__swbuf_r+0x12>
 8005526:	6983      	ldr	r3, [r0, #24]
 8005528:	b90b      	cbnz	r3, 800552e <__swbuf_r+0x12>
 800552a:	f000 f9d5 	bl	80058d8 <__sinit>
 800552e:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <__swbuf_r+0x98>)
 8005530:	429c      	cmp	r4, r3
 8005532:	d12b      	bne.n	800558c <__swbuf_r+0x70>
 8005534:	686c      	ldr	r4, [r5, #4]
 8005536:	69a3      	ldr	r3, [r4, #24]
 8005538:	60a3      	str	r3, [r4, #8]
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	071a      	lsls	r2, r3, #28
 800553e:	d52f      	bpl.n	80055a0 <__swbuf_r+0x84>
 8005540:	6923      	ldr	r3, [r4, #16]
 8005542:	b36b      	cbz	r3, 80055a0 <__swbuf_r+0x84>
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	6820      	ldr	r0, [r4, #0]
 8005548:	b2f6      	uxtb	r6, r6
 800554a:	1ac0      	subs	r0, r0, r3
 800554c:	6963      	ldr	r3, [r4, #20]
 800554e:	4637      	mov	r7, r6
 8005550:	4283      	cmp	r3, r0
 8005552:	dc04      	bgt.n	800555e <__swbuf_r+0x42>
 8005554:	4621      	mov	r1, r4
 8005556:	4628      	mov	r0, r5
 8005558:	f000 f92a 	bl	80057b0 <_fflush_r>
 800555c:	bb30      	cbnz	r0, 80055ac <__swbuf_r+0x90>
 800555e:	68a3      	ldr	r3, [r4, #8]
 8005560:	3001      	adds	r0, #1
 8005562:	3b01      	subs	r3, #1
 8005564:	60a3      	str	r3, [r4, #8]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	701e      	strb	r6, [r3, #0]
 800556e:	6963      	ldr	r3, [r4, #20]
 8005570:	4283      	cmp	r3, r0
 8005572:	d004      	beq.n	800557e <__swbuf_r+0x62>
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	07db      	lsls	r3, r3, #31
 8005578:	d506      	bpl.n	8005588 <__swbuf_r+0x6c>
 800557a:	2e0a      	cmp	r6, #10
 800557c:	d104      	bne.n	8005588 <__swbuf_r+0x6c>
 800557e:	4621      	mov	r1, r4
 8005580:	4628      	mov	r0, r5
 8005582:	f000 f915 	bl	80057b0 <_fflush_r>
 8005586:	b988      	cbnz	r0, 80055ac <__swbuf_r+0x90>
 8005588:	4638      	mov	r0, r7
 800558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <__swbuf_r+0x9c>)
 800558e:	429c      	cmp	r4, r3
 8005590:	d101      	bne.n	8005596 <__swbuf_r+0x7a>
 8005592:	68ac      	ldr	r4, [r5, #8]
 8005594:	e7cf      	b.n	8005536 <__swbuf_r+0x1a>
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <__swbuf_r+0xa0>)
 8005598:	429c      	cmp	r4, r3
 800559a:	bf08      	it	eq
 800559c:	68ec      	ldreq	r4, [r5, #12]
 800559e:	e7ca      	b.n	8005536 <__swbuf_r+0x1a>
 80055a0:	4621      	mov	r1, r4
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 f80c 	bl	80055c0 <__swsetup_r>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d0cb      	beq.n	8005544 <__swbuf_r+0x28>
 80055ac:	f04f 37ff 	mov.w	r7, #4294967295
 80055b0:	e7ea      	b.n	8005588 <__swbuf_r+0x6c>
 80055b2:	bf00      	nop
 80055b4:	080064a4 	.word	0x080064a4
 80055b8:	080064c4 	.word	0x080064c4
 80055bc:	08006484 	.word	0x08006484

080055c0 <__swsetup_r>:
 80055c0:	4b32      	ldr	r3, [pc, #200]	; (800568c <__swsetup_r+0xcc>)
 80055c2:	b570      	push	{r4, r5, r6, lr}
 80055c4:	681d      	ldr	r5, [r3, #0]
 80055c6:	4606      	mov	r6, r0
 80055c8:	460c      	mov	r4, r1
 80055ca:	b125      	cbz	r5, 80055d6 <__swsetup_r+0x16>
 80055cc:	69ab      	ldr	r3, [r5, #24]
 80055ce:	b913      	cbnz	r3, 80055d6 <__swsetup_r+0x16>
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f981 	bl	80058d8 <__sinit>
 80055d6:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <__swsetup_r+0xd0>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	d10f      	bne.n	80055fc <__swsetup_r+0x3c>
 80055dc:	686c      	ldr	r4, [r5, #4]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e4:	0719      	lsls	r1, r3, #28
 80055e6:	d42c      	bmi.n	8005642 <__swsetup_r+0x82>
 80055e8:	06dd      	lsls	r5, r3, #27
 80055ea:	d411      	bmi.n	8005610 <__swsetup_r+0x50>
 80055ec:	2309      	movs	r3, #9
 80055ee:	6033      	str	r3, [r6, #0]
 80055f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	e03e      	b.n	800567a <__swsetup_r+0xba>
 80055fc:	4b25      	ldr	r3, [pc, #148]	; (8005694 <__swsetup_r+0xd4>)
 80055fe:	429c      	cmp	r4, r3
 8005600:	d101      	bne.n	8005606 <__swsetup_r+0x46>
 8005602:	68ac      	ldr	r4, [r5, #8]
 8005604:	e7eb      	b.n	80055de <__swsetup_r+0x1e>
 8005606:	4b24      	ldr	r3, [pc, #144]	; (8005698 <__swsetup_r+0xd8>)
 8005608:	429c      	cmp	r4, r3
 800560a:	bf08      	it	eq
 800560c:	68ec      	ldreq	r4, [r5, #12]
 800560e:	e7e6      	b.n	80055de <__swsetup_r+0x1e>
 8005610:	0758      	lsls	r0, r3, #29
 8005612:	d512      	bpl.n	800563a <__swsetup_r+0x7a>
 8005614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005616:	b141      	cbz	r1, 800562a <__swsetup_r+0x6a>
 8005618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800561c:	4299      	cmp	r1, r3
 800561e:	d002      	beq.n	8005626 <__swsetup_r+0x66>
 8005620:	4630      	mov	r0, r6
 8005622:	f7ff fb13 	bl	8004c4c <_free_r>
 8005626:	2300      	movs	r3, #0
 8005628:	6363      	str	r3, [r4, #52]	; 0x34
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	2300      	movs	r3, #0
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	f043 0308 	orr.w	r3, r3, #8
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	b94b      	cbnz	r3, 800565a <__swsetup_r+0x9a>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005650:	d003      	beq.n	800565a <__swsetup_r+0x9a>
 8005652:	4621      	mov	r1, r4
 8005654:	4630      	mov	r0, r6
 8005656:	f000 fa05 	bl	8005a64 <__smakebuf_r>
 800565a:	89a0      	ldrh	r0, [r4, #12]
 800565c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005660:	f010 0301 	ands.w	r3, r0, #1
 8005664:	d00a      	beq.n	800567c <__swsetup_r+0xbc>
 8005666:	2300      	movs	r3, #0
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	6963      	ldr	r3, [r4, #20]
 800566c:	425b      	negs	r3, r3
 800566e:	61a3      	str	r3, [r4, #24]
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b943      	cbnz	r3, 8005686 <__swsetup_r+0xc6>
 8005674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005678:	d1ba      	bne.n	80055f0 <__swsetup_r+0x30>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	0781      	lsls	r1, r0, #30
 800567e:	bf58      	it	pl
 8005680:	6963      	ldrpl	r3, [r4, #20]
 8005682:	60a3      	str	r3, [r4, #8]
 8005684:	e7f4      	b.n	8005670 <__swsetup_r+0xb0>
 8005686:	2000      	movs	r0, #0
 8005688:	e7f7      	b.n	800567a <__swsetup_r+0xba>
 800568a:	bf00      	nop
 800568c:	20000080 	.word	0x20000080
 8005690:	080064a4 	.word	0x080064a4
 8005694:	080064c4 	.word	0x080064c4
 8005698:	08006484 	.word	0x08006484

0800569c <abort>:
 800569c:	2006      	movs	r0, #6
 800569e:	b508      	push	{r3, lr}
 80056a0:	f000 fa62 	bl	8005b68 <raise>
 80056a4:	2001      	movs	r0, #1
 80056a6:	f7fc fa7f 	bl	8001ba8 <_exit>
	...

080056ac <__sflush_r>:
 80056ac:	898a      	ldrh	r2, [r1, #12]
 80056ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b0:	4605      	mov	r5, r0
 80056b2:	0710      	lsls	r0, r2, #28
 80056b4:	460c      	mov	r4, r1
 80056b6:	d457      	bmi.n	8005768 <__sflush_r+0xbc>
 80056b8:	684b      	ldr	r3, [r1, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	dc04      	bgt.n	80056c8 <__sflush_r+0x1c>
 80056be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	dc01      	bgt.n	80056c8 <__sflush_r+0x1c>
 80056c4:	2000      	movs	r0, #0
 80056c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	d0fa      	beq.n	80056c4 <__sflush_r+0x18>
 80056ce:	2300      	movs	r3, #0
 80056d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056d4:	682f      	ldr	r7, [r5, #0]
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	d032      	beq.n	8005740 <__sflush_r+0x94>
 80056da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	075a      	lsls	r2, r3, #29
 80056e0:	d505      	bpl.n	80056ee <__sflush_r+0x42>
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	1ac0      	subs	r0, r0, r3
 80056e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056e8:	b10b      	cbz	r3, 80056ee <__sflush_r+0x42>
 80056ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ec:	1ac0      	subs	r0, r0, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	4602      	mov	r2, r0
 80056f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056f4:	4628      	mov	r0, r5
 80056f6:	6a21      	ldr	r1, [r4, #32]
 80056f8:	47b0      	blx	r6
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	d106      	bne.n	800570e <__sflush_r+0x62>
 8005700:	6829      	ldr	r1, [r5, #0]
 8005702:	291d      	cmp	r1, #29
 8005704:	d82c      	bhi.n	8005760 <__sflush_r+0xb4>
 8005706:	4a29      	ldr	r2, [pc, #164]	; (80057ac <__sflush_r+0x100>)
 8005708:	40ca      	lsrs	r2, r1
 800570a:	07d6      	lsls	r6, r2, #31
 800570c:	d528      	bpl.n	8005760 <__sflush_r+0xb4>
 800570e:	2200      	movs	r2, #0
 8005710:	6062      	str	r2, [r4, #4]
 8005712:	6922      	ldr	r2, [r4, #16]
 8005714:	04d9      	lsls	r1, r3, #19
 8005716:	6022      	str	r2, [r4, #0]
 8005718:	d504      	bpl.n	8005724 <__sflush_r+0x78>
 800571a:	1c42      	adds	r2, r0, #1
 800571c:	d101      	bne.n	8005722 <__sflush_r+0x76>
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	b903      	cbnz	r3, 8005724 <__sflush_r+0x78>
 8005722:	6560      	str	r0, [r4, #84]	; 0x54
 8005724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005726:	602f      	str	r7, [r5, #0]
 8005728:	2900      	cmp	r1, #0
 800572a:	d0cb      	beq.n	80056c4 <__sflush_r+0x18>
 800572c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005730:	4299      	cmp	r1, r3
 8005732:	d002      	beq.n	800573a <__sflush_r+0x8e>
 8005734:	4628      	mov	r0, r5
 8005736:	f7ff fa89 	bl	8004c4c <_free_r>
 800573a:	2000      	movs	r0, #0
 800573c:	6360      	str	r0, [r4, #52]	; 0x34
 800573e:	e7c2      	b.n	80056c6 <__sflush_r+0x1a>
 8005740:	6a21      	ldr	r1, [r4, #32]
 8005742:	2301      	movs	r3, #1
 8005744:	4628      	mov	r0, r5
 8005746:	47b0      	blx	r6
 8005748:	1c41      	adds	r1, r0, #1
 800574a:	d1c7      	bne.n	80056dc <__sflush_r+0x30>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0c4      	beq.n	80056dc <__sflush_r+0x30>
 8005752:	2b1d      	cmp	r3, #29
 8005754:	d001      	beq.n	800575a <__sflush_r+0xae>
 8005756:	2b16      	cmp	r3, #22
 8005758:	d101      	bne.n	800575e <__sflush_r+0xb2>
 800575a:	602f      	str	r7, [r5, #0]
 800575c:	e7b2      	b.n	80056c4 <__sflush_r+0x18>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	e7ae      	b.n	80056c6 <__sflush_r+0x1a>
 8005768:	690f      	ldr	r7, [r1, #16]
 800576a:	2f00      	cmp	r7, #0
 800576c:	d0aa      	beq.n	80056c4 <__sflush_r+0x18>
 800576e:	0793      	lsls	r3, r2, #30
 8005770:	bf18      	it	ne
 8005772:	2300      	movne	r3, #0
 8005774:	680e      	ldr	r6, [r1, #0]
 8005776:	bf08      	it	eq
 8005778:	694b      	ldreq	r3, [r1, #20]
 800577a:	1bf6      	subs	r6, r6, r7
 800577c:	600f      	str	r7, [r1, #0]
 800577e:	608b      	str	r3, [r1, #8]
 8005780:	2e00      	cmp	r6, #0
 8005782:	dd9f      	ble.n	80056c4 <__sflush_r+0x18>
 8005784:	4633      	mov	r3, r6
 8005786:	463a      	mov	r2, r7
 8005788:	4628      	mov	r0, r5
 800578a:	6a21      	ldr	r1, [r4, #32]
 800578c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005790:	47e0      	blx	ip
 8005792:	2800      	cmp	r0, #0
 8005794:	dc06      	bgt.n	80057a4 <__sflush_r+0xf8>
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	e790      	b.n	80056c6 <__sflush_r+0x1a>
 80057a4:	4407      	add	r7, r0
 80057a6:	1a36      	subs	r6, r6, r0
 80057a8:	e7ea      	b.n	8005780 <__sflush_r+0xd4>
 80057aa:	bf00      	nop
 80057ac:	20400001 	.word	0x20400001

080057b0 <_fflush_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	690b      	ldr	r3, [r1, #16]
 80057b4:	4605      	mov	r5, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	b913      	cbnz	r3, 80057c0 <_fflush_r+0x10>
 80057ba:	2500      	movs	r5, #0
 80057bc:	4628      	mov	r0, r5
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	b118      	cbz	r0, 80057ca <_fflush_r+0x1a>
 80057c2:	6983      	ldr	r3, [r0, #24]
 80057c4:	b90b      	cbnz	r3, 80057ca <_fflush_r+0x1a>
 80057c6:	f000 f887 	bl	80058d8 <__sinit>
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <_fflush_r+0x6c>)
 80057cc:	429c      	cmp	r4, r3
 80057ce:	d11b      	bne.n	8005808 <_fflush_r+0x58>
 80057d0:	686c      	ldr	r4, [r5, #4]
 80057d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ef      	beq.n	80057ba <_fflush_r+0xa>
 80057da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057dc:	07d0      	lsls	r0, r2, #31
 80057de:	d404      	bmi.n	80057ea <_fflush_r+0x3a>
 80057e0:	0599      	lsls	r1, r3, #22
 80057e2:	d402      	bmi.n	80057ea <_fflush_r+0x3a>
 80057e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057e6:	f000 f915 	bl	8005a14 <__retarget_lock_acquire_recursive>
 80057ea:	4628      	mov	r0, r5
 80057ec:	4621      	mov	r1, r4
 80057ee:	f7ff ff5d 	bl	80056ac <__sflush_r>
 80057f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057f4:	4605      	mov	r5, r0
 80057f6:	07da      	lsls	r2, r3, #31
 80057f8:	d4e0      	bmi.n	80057bc <_fflush_r+0xc>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	059b      	lsls	r3, r3, #22
 80057fe:	d4dd      	bmi.n	80057bc <_fflush_r+0xc>
 8005800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005802:	f000 f908 	bl	8005a16 <__retarget_lock_release_recursive>
 8005806:	e7d9      	b.n	80057bc <_fflush_r+0xc>
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <_fflush_r+0x70>)
 800580a:	429c      	cmp	r4, r3
 800580c:	d101      	bne.n	8005812 <_fflush_r+0x62>
 800580e:	68ac      	ldr	r4, [r5, #8]
 8005810:	e7df      	b.n	80057d2 <_fflush_r+0x22>
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <_fflush_r+0x74>)
 8005814:	429c      	cmp	r4, r3
 8005816:	bf08      	it	eq
 8005818:	68ec      	ldreq	r4, [r5, #12]
 800581a:	e7da      	b.n	80057d2 <_fflush_r+0x22>
 800581c:	080064a4 	.word	0x080064a4
 8005820:	080064c4 	.word	0x080064c4
 8005824:	08006484 	.word	0x08006484

08005828 <std>:
 8005828:	2300      	movs	r3, #0
 800582a:	b510      	push	{r4, lr}
 800582c:	4604      	mov	r4, r0
 800582e:	e9c0 3300 	strd	r3, r3, [r0]
 8005832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005836:	6083      	str	r3, [r0, #8]
 8005838:	8181      	strh	r1, [r0, #12]
 800583a:	6643      	str	r3, [r0, #100]	; 0x64
 800583c:	81c2      	strh	r2, [r0, #14]
 800583e:	6183      	str	r3, [r0, #24]
 8005840:	4619      	mov	r1, r3
 8005842:	2208      	movs	r2, #8
 8005844:	305c      	adds	r0, #92	; 0x5c
 8005846:	f7ff f9f9 	bl	8004c3c <memset>
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <std+0x38>)
 800584c:	6224      	str	r4, [r4, #32]
 800584e:	6263      	str	r3, [r4, #36]	; 0x24
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <std+0x3c>)
 8005852:	62a3      	str	r3, [r4, #40]	; 0x28
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <std+0x40>)
 8005856:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005858:	4b04      	ldr	r3, [pc, #16]	; (800586c <std+0x44>)
 800585a:	6323      	str	r3, [r4, #48]	; 0x30
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	08005ba1 	.word	0x08005ba1
 8005864:	08005bc3 	.word	0x08005bc3
 8005868:	08005bfb 	.word	0x08005bfb
 800586c:	08005c1f 	.word	0x08005c1f

08005870 <_cleanup_r>:
 8005870:	4901      	ldr	r1, [pc, #4]	; (8005878 <_cleanup_r+0x8>)
 8005872:	f000 b8af 	b.w	80059d4 <_fwalk_reent>
 8005876:	bf00      	nop
 8005878:	080057b1 	.word	0x080057b1

0800587c <__sfmoreglue>:
 800587c:	2268      	movs	r2, #104	; 0x68
 800587e:	b570      	push	{r4, r5, r6, lr}
 8005880:	1e4d      	subs	r5, r1, #1
 8005882:	4355      	muls	r5, r2
 8005884:	460e      	mov	r6, r1
 8005886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800588a:	f7ff fa47 	bl	8004d1c <_malloc_r>
 800588e:	4604      	mov	r4, r0
 8005890:	b140      	cbz	r0, 80058a4 <__sfmoreglue+0x28>
 8005892:	2100      	movs	r1, #0
 8005894:	e9c0 1600 	strd	r1, r6, [r0]
 8005898:	300c      	adds	r0, #12
 800589a:	60a0      	str	r0, [r4, #8]
 800589c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058a0:	f7ff f9cc 	bl	8004c3c <memset>
 80058a4:	4620      	mov	r0, r4
 80058a6:	bd70      	pop	{r4, r5, r6, pc}

080058a8 <__sfp_lock_acquire>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__sfp_lock_acquire+0x8>)
 80058aa:	f000 b8b3 	b.w	8005a14 <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	2000054d 	.word	0x2000054d

080058b4 <__sfp_lock_release>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__sfp_lock_release+0x8>)
 80058b6:	f000 b8ae 	b.w	8005a16 <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	2000054d 	.word	0x2000054d

080058c0 <__sinit_lock_acquire>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__sinit_lock_acquire+0x8>)
 80058c2:	f000 b8a7 	b.w	8005a14 <__retarget_lock_acquire_recursive>
 80058c6:	bf00      	nop
 80058c8:	2000054e 	.word	0x2000054e

080058cc <__sinit_lock_release>:
 80058cc:	4801      	ldr	r0, [pc, #4]	; (80058d4 <__sinit_lock_release+0x8>)
 80058ce:	f000 b8a2 	b.w	8005a16 <__retarget_lock_release_recursive>
 80058d2:	bf00      	nop
 80058d4:	2000054e 	.word	0x2000054e

080058d8 <__sinit>:
 80058d8:	b510      	push	{r4, lr}
 80058da:	4604      	mov	r4, r0
 80058dc:	f7ff fff0 	bl	80058c0 <__sinit_lock_acquire>
 80058e0:	69a3      	ldr	r3, [r4, #24]
 80058e2:	b11b      	cbz	r3, 80058ec <__sinit+0x14>
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f7ff bff0 	b.w	80058cc <__sinit_lock_release>
 80058ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058f0:	6523      	str	r3, [r4, #80]	; 0x50
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <__sinit+0x68>)
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <__sinit+0x6c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80058fa:	42a3      	cmp	r3, r4
 80058fc:	bf08      	it	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	4620      	mov	r0, r4
 8005902:	bf08      	it	eq
 8005904:	61a3      	streq	r3, [r4, #24]
 8005906:	f000 f81f 	bl	8005948 <__sfp>
 800590a:	6060      	str	r0, [r4, #4]
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f81b 	bl	8005948 <__sfp>
 8005912:	60a0      	str	r0, [r4, #8]
 8005914:	4620      	mov	r0, r4
 8005916:	f000 f817 	bl	8005948 <__sfp>
 800591a:	2200      	movs	r2, #0
 800591c:	2104      	movs	r1, #4
 800591e:	60e0      	str	r0, [r4, #12]
 8005920:	6860      	ldr	r0, [r4, #4]
 8005922:	f7ff ff81 	bl	8005828 <std>
 8005926:	2201      	movs	r2, #1
 8005928:	2109      	movs	r1, #9
 800592a:	68a0      	ldr	r0, [r4, #8]
 800592c:	f7ff ff7c 	bl	8005828 <std>
 8005930:	2202      	movs	r2, #2
 8005932:	2112      	movs	r1, #18
 8005934:	68e0      	ldr	r0, [r4, #12]
 8005936:	f7ff ff77 	bl	8005828 <std>
 800593a:	2301      	movs	r3, #1
 800593c:	61a3      	str	r3, [r4, #24]
 800593e:	e7d1      	b.n	80058e4 <__sinit+0xc>
 8005940:	0800644c 	.word	0x0800644c
 8005944:	08005871 	.word	0x08005871

08005948 <__sfp>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	4607      	mov	r7, r0
 800594c:	f7ff ffac 	bl	80058a8 <__sfp_lock_acquire>
 8005950:	4b1e      	ldr	r3, [pc, #120]	; (80059cc <__sfp+0x84>)
 8005952:	681e      	ldr	r6, [r3, #0]
 8005954:	69b3      	ldr	r3, [r6, #24]
 8005956:	b913      	cbnz	r3, 800595e <__sfp+0x16>
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff ffbd 	bl	80058d8 <__sinit>
 800595e:	3648      	adds	r6, #72	; 0x48
 8005960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	d503      	bpl.n	8005970 <__sfp+0x28>
 8005968:	6833      	ldr	r3, [r6, #0]
 800596a:	b30b      	cbz	r3, 80059b0 <__sfp+0x68>
 800596c:	6836      	ldr	r6, [r6, #0]
 800596e:	e7f7      	b.n	8005960 <__sfp+0x18>
 8005970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005974:	b9d5      	cbnz	r5, 80059ac <__sfp+0x64>
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <__sfp+0x88>)
 8005978:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800597c:	60e3      	str	r3, [r4, #12]
 800597e:	6665      	str	r5, [r4, #100]	; 0x64
 8005980:	f000 f847 	bl	8005a12 <__retarget_lock_init_recursive>
 8005984:	f7ff ff96 	bl	80058b4 <__sfp_lock_release>
 8005988:	2208      	movs	r2, #8
 800598a:	4629      	mov	r1, r5
 800598c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005994:	6025      	str	r5, [r4, #0]
 8005996:	61a5      	str	r5, [r4, #24]
 8005998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800599c:	f7ff f94e 	bl	8004c3c <memset>
 80059a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059a8:	4620      	mov	r0, r4
 80059aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ac:	3468      	adds	r4, #104	; 0x68
 80059ae:	e7d9      	b.n	8005964 <__sfp+0x1c>
 80059b0:	2104      	movs	r1, #4
 80059b2:	4638      	mov	r0, r7
 80059b4:	f7ff ff62 	bl	800587c <__sfmoreglue>
 80059b8:	4604      	mov	r4, r0
 80059ba:	6030      	str	r0, [r6, #0]
 80059bc:	2800      	cmp	r0, #0
 80059be:	d1d5      	bne.n	800596c <__sfp+0x24>
 80059c0:	f7ff ff78 	bl	80058b4 <__sfp_lock_release>
 80059c4:	230c      	movs	r3, #12
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	e7ee      	b.n	80059a8 <__sfp+0x60>
 80059ca:	bf00      	nop
 80059cc:	0800644c 	.word	0x0800644c
 80059d0:	ffff0001 	.word	0xffff0001

080059d4 <_fwalk_reent>:
 80059d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059d8:	4606      	mov	r6, r0
 80059da:	4688      	mov	r8, r1
 80059dc:	2700      	movs	r7, #0
 80059de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059e6:	f1b9 0901 	subs.w	r9, r9, #1
 80059ea:	d505      	bpl.n	80059f8 <_fwalk_reent+0x24>
 80059ec:	6824      	ldr	r4, [r4, #0]
 80059ee:	2c00      	cmp	r4, #0
 80059f0:	d1f7      	bne.n	80059e2 <_fwalk_reent+0xe>
 80059f2:	4638      	mov	r0, r7
 80059f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f8:	89ab      	ldrh	r3, [r5, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d907      	bls.n	8005a0e <_fwalk_reent+0x3a>
 80059fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a02:	3301      	adds	r3, #1
 8005a04:	d003      	beq.n	8005a0e <_fwalk_reent+0x3a>
 8005a06:	4629      	mov	r1, r5
 8005a08:	4630      	mov	r0, r6
 8005a0a:	47c0      	blx	r8
 8005a0c:	4307      	orrs	r7, r0
 8005a0e:	3568      	adds	r5, #104	; 0x68
 8005a10:	e7e9      	b.n	80059e6 <_fwalk_reent+0x12>

08005a12 <__retarget_lock_init_recursive>:
 8005a12:	4770      	bx	lr

08005a14 <__retarget_lock_acquire_recursive>:
 8005a14:	4770      	bx	lr

08005a16 <__retarget_lock_release_recursive>:
 8005a16:	4770      	bx	lr

08005a18 <__swhatbuf_r>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	460e      	mov	r6, r1
 8005a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a20:	4614      	mov	r4, r2
 8005a22:	2900      	cmp	r1, #0
 8005a24:	461d      	mov	r5, r3
 8005a26:	b096      	sub	sp, #88	; 0x58
 8005a28:	da08      	bge.n	8005a3c <__swhatbuf_r+0x24>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	061a      	lsls	r2, r3, #24
 8005a34:	d410      	bmi.n	8005a58 <__swhatbuf_r+0x40>
 8005a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a3a:	e00e      	b.n	8005a5a <__swhatbuf_r+0x42>
 8005a3c:	466a      	mov	r2, sp
 8005a3e:	f000 f915 	bl	8005c6c <_fstat_r>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	dbf1      	blt.n	8005a2a <__swhatbuf_r+0x12>
 8005a46:	9a01      	ldr	r2, [sp, #4]
 8005a48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a50:	425a      	negs	r2, r3
 8005a52:	415a      	adcs	r2, r3
 8005a54:	602a      	str	r2, [r5, #0]
 8005a56:	e7ee      	b.n	8005a36 <__swhatbuf_r+0x1e>
 8005a58:	2340      	movs	r3, #64	; 0x40
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	b016      	add	sp, #88	; 0x58
 8005a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a64 <__smakebuf_r>:
 8005a64:	898b      	ldrh	r3, [r1, #12]
 8005a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a68:	079d      	lsls	r5, r3, #30
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	d507      	bpl.n	8005a80 <__smakebuf_r+0x1c>
 8005a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	2301      	movs	r3, #1
 8005a7a:	6163      	str	r3, [r4, #20]
 8005a7c:	b002      	add	sp, #8
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	466a      	mov	r2, sp
 8005a82:	ab01      	add	r3, sp, #4
 8005a84:	f7ff ffc8 	bl	8005a18 <__swhatbuf_r>
 8005a88:	9900      	ldr	r1, [sp, #0]
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff f945 	bl	8004d1c <_malloc_r>
 8005a92:	b948      	cbnz	r0, 8005aa8 <__smakebuf_r+0x44>
 8005a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a98:	059a      	lsls	r2, r3, #22
 8005a9a:	d4ef      	bmi.n	8005a7c <__smakebuf_r+0x18>
 8005a9c:	f023 0303 	bic.w	r3, r3, #3
 8005aa0:	f043 0302 	orr.w	r3, r3, #2
 8005aa4:	81a3      	strh	r3, [r4, #12]
 8005aa6:	e7e3      	b.n	8005a70 <__smakebuf_r+0xc>
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <__smakebuf_r+0x7c>)
 8005aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	6020      	str	r0, [r4, #0]
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	81a3      	strh	r3, [r4, #12]
 8005ab6:	9b00      	ldr	r3, [sp, #0]
 8005ab8:	6120      	str	r0, [r4, #16]
 8005aba:	6163      	str	r3, [r4, #20]
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	b15b      	cbz	r3, 8005ad8 <__smakebuf_r+0x74>
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac6:	f000 f8e3 	bl	8005c90 <_isatty_r>
 8005aca:	b128      	cbz	r0, 8005ad8 <__smakebuf_r+0x74>
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	89a0      	ldrh	r0, [r4, #12]
 8005ada:	4305      	orrs	r5, r0
 8005adc:	81a5      	strh	r5, [r4, #12]
 8005ade:	e7cd      	b.n	8005a7c <__smakebuf_r+0x18>
 8005ae0:	08005871 	.word	0x08005871

08005ae4 <memchr>:
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	b2c9      	uxtb	r1, r1
 8005aea:	4402      	add	r2, r0
 8005aec:	4293      	cmp	r3, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	d101      	bne.n	8005af6 <memchr+0x12>
 8005af2:	2000      	movs	r0, #0
 8005af4:	e003      	b.n	8005afe <memchr+0x1a>
 8005af6:	7804      	ldrb	r4, [r0, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	428c      	cmp	r4, r1
 8005afc:	d1f6      	bne.n	8005aec <memchr+0x8>
 8005afe:	bd10      	pop	{r4, pc}

08005b00 <__malloc_lock>:
 8005b00:	4801      	ldr	r0, [pc, #4]	; (8005b08 <__malloc_lock+0x8>)
 8005b02:	f7ff bf87 	b.w	8005a14 <__retarget_lock_acquire_recursive>
 8005b06:	bf00      	nop
 8005b08:	2000054c 	.word	0x2000054c

08005b0c <__malloc_unlock>:
 8005b0c:	4801      	ldr	r0, [pc, #4]	; (8005b14 <__malloc_unlock+0x8>)
 8005b0e:	f7ff bf82 	b.w	8005a16 <__retarget_lock_release_recursive>
 8005b12:	bf00      	nop
 8005b14:	2000054c 	.word	0x2000054c

08005b18 <_raise_r>:
 8005b18:	291f      	cmp	r1, #31
 8005b1a:	b538      	push	{r3, r4, r5, lr}
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	d904      	bls.n	8005b2c <_raise_r+0x14>
 8005b22:	2316      	movs	r3, #22
 8005b24:	6003      	str	r3, [r0, #0]
 8005b26:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b2e:	b112      	cbz	r2, 8005b36 <_raise_r+0x1e>
 8005b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b34:	b94b      	cbnz	r3, 8005b4a <_raise_r+0x32>
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 f830 	bl	8005b9c <_getpid_r>
 8005b3c:	462a      	mov	r2, r5
 8005b3e:	4601      	mov	r1, r0
 8005b40:	4620      	mov	r0, r4
 8005b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b46:	f000 b817 	b.w	8005b78 <_kill_r>
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d00a      	beq.n	8005b64 <_raise_r+0x4c>
 8005b4e:	1c59      	adds	r1, r3, #1
 8005b50:	d103      	bne.n	8005b5a <_raise_r+0x42>
 8005b52:	2316      	movs	r3, #22
 8005b54:	6003      	str	r3, [r0, #0]
 8005b56:	2001      	movs	r0, #1
 8005b58:	e7e7      	b.n	8005b2a <_raise_r+0x12>
 8005b5a:	2400      	movs	r4, #0
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b62:	4798      	blx	r3
 8005b64:	2000      	movs	r0, #0
 8005b66:	e7e0      	b.n	8005b2a <_raise_r+0x12>

08005b68 <raise>:
 8005b68:	4b02      	ldr	r3, [pc, #8]	; (8005b74 <raise+0xc>)
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	f7ff bfd3 	b.w	8005b18 <_raise_r>
 8005b72:	bf00      	nop
 8005b74:	20000080 	.word	0x20000080

08005b78 <_kill_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_kill_r+0x20>)
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	f7fb ffff 	bl	8001b88 <_kill>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d102      	bne.n	8005b94 <_kill_r+0x1c>
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	b103      	cbz	r3, 8005b94 <_kill_r+0x1c>
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	20000550 	.word	0x20000550

08005b9c <_getpid_r>:
 8005b9c:	f7fb bfed 	b.w	8001b7a <_getpid>

08005ba0 <__sread>:
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba8:	f000 f894 	bl	8005cd4 <_read_r>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	bfab      	itete	ge
 8005bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bb4:	181b      	addge	r3, r3, r0
 8005bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bba:	bfac      	ite	ge
 8005bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bbe:	81a3      	strhlt	r3, [r4, #12]
 8005bc0:	bd10      	pop	{r4, pc}

08005bc2 <__swrite>:
 8005bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc6:	461f      	mov	r7, r3
 8005bc8:	898b      	ldrh	r3, [r1, #12]
 8005bca:	4605      	mov	r5, r0
 8005bcc:	05db      	lsls	r3, r3, #23
 8005bce:	460c      	mov	r4, r1
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	d505      	bpl.n	8005be0 <__swrite+0x1e>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	f000 f868 	bl	8005cb0 <_lseek_r>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	4632      	mov	r2, r6
 8005be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	4628      	mov	r0, r5
 8005bec:	463b      	mov	r3, r7
 8005bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf6:	f000 b817 	b.w	8005c28 <_write_r>

08005bfa <__sseek>:
 8005bfa:	b510      	push	{r4, lr}
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c02:	f000 f855 	bl	8005cb0 <_lseek_r>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	bf15      	itete	ne
 8005c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c16:	81a3      	strheq	r3, [r4, #12]
 8005c18:	bf18      	it	ne
 8005c1a:	81a3      	strhne	r3, [r4, #12]
 8005c1c:	bd10      	pop	{r4, pc}

08005c1e <__sclose>:
 8005c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c22:	f000 b813 	b.w	8005c4c <_close_r>
	...

08005c28 <_write_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	2200      	movs	r2, #0
 8005c32:	4d05      	ldr	r5, [pc, #20]	; (8005c48 <_write_r+0x20>)
 8005c34:	602a      	str	r2, [r5, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f7fa fde3 	bl	8000802 <_write>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d102      	bne.n	8005c46 <_write_r+0x1e>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	b103      	cbz	r3, 8005c46 <_write_r+0x1e>
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	20000550 	.word	0x20000550

08005c4c <_close_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4d05      	ldr	r5, [pc, #20]	; (8005c68 <_close_r+0x1c>)
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fb ffcd 	bl	8001bf6 <_close>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_close_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_close_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000550 	.word	0x20000550

08005c6c <_fstat_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4d06      	ldr	r5, [pc, #24]	; (8005c8c <_fstat_r+0x20>)
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	f7fb ffc7 	bl	8001c0c <_fstat>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d102      	bne.n	8005c88 <_fstat_r+0x1c>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	b103      	cbz	r3, 8005c88 <_fstat_r+0x1c>
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000550 	.word	0x20000550

08005c90 <_isatty_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	2300      	movs	r3, #0
 8005c94:	4d05      	ldr	r5, [pc, #20]	; (8005cac <_isatty_r+0x1c>)
 8005c96:	4604      	mov	r4, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	f7fb ffc5 	bl	8001c2a <_isatty>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_isatty_r+0x1a>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_isatty_r+0x1a>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20000550 	.word	0x20000550

08005cb0 <_lseek_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4d05      	ldr	r5, [pc, #20]	; (8005cd0 <_lseek_r+0x20>)
 8005cbc:	602a      	str	r2, [r5, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fb ffbd 	bl	8001c3e <_lseek>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_lseek_r+0x1e>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_lseek_r+0x1e>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	20000550 	.word	0x20000550

08005cd4 <_read_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4d05      	ldr	r5, [pc, #20]	; (8005cf4 <_read_r+0x20>)
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fb ff6a 	bl	8001bbc <_read>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_read_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_read_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000550 	.word	0x20000550

08005cf8 <_init>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr

08005d04 <_fini>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr
