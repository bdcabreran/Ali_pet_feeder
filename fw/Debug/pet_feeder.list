
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005294  08005294  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005294  08005294  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005294  08005294  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800529c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200000e0  0800537c  000200e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800537c  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a76  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1d  00000000  00000000  00034b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b588  00000000  00000000  00039c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b295  00000000  00000000  000551d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096818  00000000  00000000  0007046d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00106c85  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000014c8  00000000  00000000  00106cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006044  00000000  00000000  001081a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bec 	.word	0x08004bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004bec 	.word	0x08004bec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <btn_debounce_init>:
#include "printf_dbg.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4a1e      	ldr	r2, [pc, #120]	; (80001e0 <btn_debounce_init+0x84>)
 8000168:	611a      	str	r2, [r3, #16]
    btn->down.gpio.pin  = DOWN_Pin;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2220      	movs	r2, #32
 800016e:	829a      	strh	r2, [r3, #20]
    btn->up.gpio.port = UP_GPIO_Port;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4a1b      	ldr	r2, [pc, #108]	; (80001e0 <btn_debounce_init+0x84>)
 8000174:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2210      	movs	r2, #16
 800017a:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	4a19      	ldr	r2, [pc, #100]	; (80001e4 <btn_debounce_init+0x88>)
 8000180:	621a      	str	r2, [r3, #32]
    btn->left.gpio.pin = LEFT_Pin;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2220      	movs	r2, #32
 8000186:	849a      	strh	r2, [r3, #36]	; 0x24
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a16      	ldr	r2, [pc, #88]	; (80001e4 <btn_debounce_init+0x88>)
 800018c:	631a      	str	r2, [r3, #48]	; 0x30
    btn->right.gpio.pin = RIGHT_Pin;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2280      	movs	r2, #128	; 0x80
 8000192:	869a      	strh	r2, [r3, #52]	; 0x34
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4a14      	ldr	r2, [pc, #80]	; (80001e8 <btn_debounce_init+0x8c>)
 8000198:	641a      	str	r2, [r3, #64]	; 0x40
    btn->enter.gpio.pin = ENTER_Pin;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2201      	movs	r2, #1
 800019e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 80001a2:	2305      	movs	r3, #5
 80001a4:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 80001aa:	2300      	movs	r3, #0
 80001ac:	613b      	str	r3, [r7, #16]
 80001ae:	e00d      	b.n	80001cc <btn_debounce_init+0x70>
    {
        time_event_stop(&btn_ptr->debounce);
 80001b0:	697b      	ldr	r3, [r7, #20]
 80001b2:	3308      	adds	r3, #8
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 fb21 	bl	80007fc <time_event_stop>
        btn_ptr->pressed = false;
 80001ba:	697b      	ldr	r3, [r7, #20]
 80001bc:	2200      	movs	r2, #0
 80001be:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 80001c0:	697b      	ldr	r3, [r7, #20]
 80001c2:	3310      	adds	r3, #16
 80001c4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 80001c6:	693b      	ldr	r3, [r7, #16]
 80001c8:	3301      	adds	r3, #1
 80001ca:	613b      	str	r3, [r7, #16]
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	693a      	ldr	r2, [r7, #16]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d3ed      	bcc.n	80001b0 <btn_debounce_init+0x54>
    }
}
 80001d4:	bf00      	nop
 80001d6:	bf00      	nop
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40011000 	.word	0x40011000
 80001e4:	40010800 	.word	0x40010800
 80001e8:	40010c00 	.word	0x40010c00

080001ec <btn_debounce_run>:

void btn_debounce_run(navigation_btn_t *btn)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 80001f4:	2305      	movs	r3, #5
 80001f6:	72fb      	strb	r3, [r7, #11]
    push_button_t *btn_ptr = &btn->up;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	e025      	b.n	800024e <btn_debounce_run+0x62>
    {
        time_event_update(&btn_ptr->debounce);
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	3308      	adds	r3, #8
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fb0a 	bl	8000820 <time_event_update>
        if(time_event_is_raised(&btn_ptr->debounce))
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	3308      	adds	r3, #8
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fb26 	bl	8000862 <time_event_is_raised>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d012      	beq.n	8000242 <btn_debounce_run+0x56>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	889b      	ldrh	r3, [r3, #4]
 8000224:	4619      	mov	r1, r3
 8000226:	4610      	mov	r0, r2
 8000228:	f003 fbae 	bl	8003988 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d102      	bne.n	8000238 <btn_debounce_run+0x4c>
                btn_ptr->pressed = true;
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	2201      	movs	r2, #1
 8000236:	731a      	strb	r2, [r3, #12]
            
            time_event_stop(&btn_ptr->debounce);
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	3308      	adds	r3, #8
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fadd 	bl	80007fc <time_event_stop>
        }
        btn_ptr++;
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	3310      	adds	r3, #16
 8000246:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	3301      	adds	r3, #1
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	7afb      	ldrb	r3, [r7, #11]
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	429a      	cmp	r2, r3
 8000254:	d3d5      	bcc.n	8000202 <btn_debounce_run+0x16>
    }

    /*Notify events*/
    btn_ev_ext_t btn_ext_event = EVT_EXT_BTN_INVALID;
 8000256:	2300      	movs	r3, #0
 8000258:	72bb      	strb	r3, [r7, #10]

    if (btn->down.pressed)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	7f1b      	ldrb	r3, [r3, #28]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d00b      	beq.n	800027a <btn_debounce_run+0x8e>
    {
        if (btn->enter.pressed)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <btn_debounce_run+0x88>
        {
            printf("btn down + enter pressed\r\n");
 800026c:	482b      	ldr	r0, [pc, #172]	; (800031c <btn_debounce_run+0x130>)
 800026e:	f001 fb23 	bl	80018b8 <puts>
 8000272:	e002      	b.n	800027a <btn_debounce_run+0x8e>
        }
        else
        {
            printf("btn down pressed\r\n");
 8000274:	482a      	ldr	r0, [pc, #168]	; (8000320 <btn_debounce_run+0x134>)
 8000276:	f001 fb1f 	bl	80018b8 <puts>
        }
    }

    if (btn->up.pressed)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	7b1b      	ldrb	r3, [r3, #12]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d00b      	beq.n	800029a <btn_debounce_run+0xae>
    {
        if (btn->enter.pressed)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000288:	2b00      	cmp	r3, #0
 800028a:	d003      	beq.n	8000294 <btn_debounce_run+0xa8>
        {
            printf("btn up + enter pressed\r\n");
 800028c:	4825      	ldr	r0, [pc, #148]	; (8000324 <btn_debounce_run+0x138>)
 800028e:	f001 fb13 	bl	80018b8 <puts>
 8000292:	e002      	b.n	800029a <btn_debounce_run+0xae>
        }
        else
        {
            printf("btn up pressed\r\n");
 8000294:	4824      	ldr	r0, [pc, #144]	; (8000328 <btn_debounce_run+0x13c>)
 8000296:	f001 fb0f 	bl	80018b8 <puts>
        }
    }

    if (btn->left.pressed)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d00b      	beq.n	80002bc <btn_debounce_run+0xd0>
    {
        if (btn->enter.pressed)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <btn_debounce_run+0xca>
        {
            printf("btn left + enter pressed\r\n");
 80002ae:	481f      	ldr	r0, [pc, #124]	; (800032c <btn_debounce_run+0x140>)
 80002b0:	f001 fb02 	bl	80018b8 <puts>
 80002b4:	e002      	b.n	80002bc <btn_debounce_run+0xd0>
        }
        else 
        {
            printf("btn left pressed\r\n");
 80002b6:	481e      	ldr	r0, [pc, #120]	; (8000330 <btn_debounce_run+0x144>)
 80002b8:	f001 fafe 	bl	80018b8 <puts>
        }
    }

    if (btn->right.pressed)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d00b      	beq.n	80002de <btn_debounce_run+0xf2>
    {
        if (btn->enter.pressed)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d003      	beq.n	80002d8 <btn_debounce_run+0xec>
        {
            printf("btn right + enter pressed\r\n");
 80002d0:	4818      	ldr	r0, [pc, #96]	; (8000334 <btn_debounce_run+0x148>)
 80002d2:	f001 faf1 	bl	80018b8 <puts>
 80002d6:	e002      	b.n	80002de <btn_debounce_run+0xf2>

        }
        else
        {
            printf("btn right pressed\r\n");
 80002d8:	4817      	ldr	r0, [pc, #92]	; (8000338 <btn_debounce_run+0x14c>)
 80002da:	f001 faed 	bl	80018b8 <puts>
        }
    }

    if (btn->enter.pressed)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d002      	beq.n	80002ee <btn_debounce_run+0x102>
    {
        printf("btn enter pressed\r\n");
 80002e8:	4814      	ldr	r0, [pc, #80]	; (800033c <btn_debounce_run+0x150>)
 80002ea:	f001 fae5 	bl	80018b8 <puts>
    }

    btn_ptr = &btn->up;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e008      	b.n	800030a <btn_debounce_run+0x11e>
    {
        btn_ptr->pressed = false;
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	2200      	movs	r2, #0
 80002fc:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	3310      	adds	r3, #16
 8000302:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3301      	adds	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	7afb      	ldrb	r3, [r7, #11]
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	429a      	cmp	r2, r3
 8000310:	d3f2      	bcc.n	80002f8 <btn_debounce_run+0x10c>
    }
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	08004c04 	.word	0x08004c04
 8000320:	08004c20 	.word	0x08004c20
 8000324:	08004c34 	.word	0x08004c34
 8000328:	08004c4c 	.word	0x08004c4c
 800032c:	08004c5c 	.word	0x08004c5c
 8000330:	08004c78 	.word	0x08004c78
 8000334:	08004c8c 	.word	0x08004c8c
 8000338:	08004ca8 	.word	0x08004ca8
 800033c:	08004cbc 	.word	0x08004cbc

08000340 <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm_src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm_dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->evt);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->header.payload_len);

    if(evt->header.payload_len)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	78db      	ldrb	r3, [r3, #3]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d007      	beq.n	8000360 <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->payload.buff, evt->header.payload_len);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	1d19      	adds	r1, r3, #4
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	78db      	ldrb	r3, [r3, #3]
 8000358:	461a      	mov	r2, r3
 800035a:	2058      	movs	r0, #88	; 0x58
 800035c:	f000 f8d6 	bl	800050c <print_buffer>
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	4613      	mov	r3, r2
 8000374:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	4619      	mov	r1, r3
 800037a:	68b8      	ldr	r0, [r7, #8]
 800037c:	f000 f958 	bl	8000630 <ring_buffer_init>
 8000380:	4602      	mov	r2, r0
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2200      	movs	r2, #0
 800038a:	711a      	strb	r2, [r3, #4]
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
	...

080003ac <event_queue_read>:

    return write_st;
}

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 80003b6:	2300      	movs	r3, #0
 80003b8:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ffea 	bl	8000394 <event_queue_get_pending>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d031      	beq.n	800042a <event_queue_read+0x7e>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt->header, EVENT_HEADER_SIZE);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6839      	ldr	r1, [r7, #0]
 80003cc:	2204      	movs	r2, #4
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f9c8 	bl	8000764 <ring_buffer_read>
 80003d4:	4603      	mov	r3, r0
 80003d6:	73fb      	strb	r3, [r7, #15]
        if (evt->header.payload_len)
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	78db      	ldrb	r3, [r3, #3]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00a      	beq.n	80003f6 <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->payload.buff, evt->header.payload_len);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6818      	ldr	r0, [r3, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	1d19      	adds	r1, r3, #4
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	78db      	ldrb	r3, [r3, #3]
 80003ec:	461a      	mov	r2, r3
 80003ee:	f000 f9b9 	bl	8000764 <ring_buffer_read>
 80003f2:	4603      	mov	r3, r0
 80003f4:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d109      	bne.n	8000410 <event_queue_read+0x64>
        {
            queue->pending_cnt--;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	3b01      	subs	r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 8000408:	6838      	ldr	r0, [r7, #0]
 800040a:	f7ff ff99 	bl	8000340 <event_print_info>
 800040e:	e00c      	b.n	800042a <event_queue_read+0x7e>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <event_queue_read+0x88>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f001 fa00 	bl	800181a <iprintf>
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <event_queue_read+0x8c>)
 800041c:	f001 fa4c 	bl	80018b8 <puts>
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <event_queue_read+0x88>)
 8000422:	69db      	ldr	r3, [r3, #28]
 8000424:	4618      	mov	r0, r3
 8000426:	f001 f9f8 	bl	800181a <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 800042a:	7bfb      	ldrb	r3, [r7, #15]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000008 	.word	0x20000008
 8000438:	08004cf0 	.word	0x08004cf0

0800043c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000444:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000448:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	2b00      	cmp	r3, #0
 8000452:	d013      	beq.n	800047c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000454:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000458:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800045c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00b      	beq.n	800047c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000464:	e000      	b.n	8000468 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000466:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000472:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	b2d2      	uxtb	r2, r2
 800047a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800047c:	687b      	ldr	r3, [r7, #4]
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <itm_enable>:

#include "itm_dbg.h"
#include "stdio.h"

void itm_enable(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <itm_enable+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <itm_enable+0x2c>)
 8000492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000496:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 8000498:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800049c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	e000edfc 	.word	0xe000edfc

080004b8 <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	e009      	b.n	80004dc <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ffb3 	bl	800043c <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3301      	adds	r3, #1
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbf1      	blt.n	80004c8 <itm_write+0x10>
	}
	return len;
 80004e4:	683b      	ldr	r3, [r7, #0]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b084      	sub	sp, #16
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	68b8      	ldr	r0, [r7, #8]
 80004fe:	f7ff ffdb 	bl	80004b8 <itm_write>
 8000502:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 8000504:	4618      	mov	r0, r3
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 800051c:	481a      	ldr	r0, [pc, #104]	; (8000588 <print_buffer+0x7c>)
 800051e:	f001 f9cb 	bl	80018b8 <puts>
	for (size_t i = 0; i < len; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e023      	b.n	8000570 <print_buffer+0x64>
	{
		switch (format)
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b43      	cmp	r3, #67	; 0x43
 800052c:	d002      	beq.n	8000534 <print_buffer+0x28>
 800052e:	2b58      	cmp	r3, #88	; 0x58
 8000530:	d009      	beq.n	8000546 <print_buffer+0x3a>
 8000532:	e011      	b.n	8000558 <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4413      	add	r3, r2
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	4813      	ldr	r0, [pc, #76]	; (800058c <print_buffer+0x80>)
 8000540:	f001 f96b 	bl	800181a <iprintf>
 8000544:	e011      	b.n	800056a <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <print_buffer+0x84>)
 8000552:	f001 f962 	bl	800181a <iprintf>
 8000556:	e008      	b.n	800056a <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <print_buffer+0x84>)
 8000564:	f001 f959 	bl	800181a <iprintf>
 8000568:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	429a      	cmp	r2, r3
 8000576:	d3d7      	bcc.n	8000528 <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <print_buffer+0x88>)
 800057a:	f001 f99d 	bl	80018b8 <puts>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	08004d70 	.word	0x08004d70
 800058c:	08004d7c 	.word	0x08004d7c
 8000590:	08004d84 	.word	0x08004d84
 8000594:	08004d8c 	.word	0x08004d8c

08000598 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    assert(rb);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d105      	bne.n	80005b2 <tail_ptr_retreat+0x1a>
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <tail_ptr_retreat+0x40>)
 80005a8:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <tail_ptr_retreat+0x44>)
 80005aa:	2139      	movs	r1, #57	; 0x39
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <tail_ptr_retreat+0x48>)
 80005ae:	f004 f9c7 	bl	8004940 <__assert_func>

    rb->full = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	3301      	adds	r3, #1
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	68d2      	ldr	r2, [r2, #12]
 80005c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c6:	fb01 f202 	mul.w	r2, r1, r2
 80005ca:	1a9a      	subs	r2, r3, r2
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	08004d90 	.word	0x08004d90
 80005dc:	080051c8 	.word	0x080051c8
 80005e0:	08004d94 	.word	0x08004d94

080005e4 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    assert(rb);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d105      	bne.n	80005fe <is_ring_buffer_empty+0x1a>
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <is_ring_buffer_empty+0x40>)
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <is_ring_buffer_empty+0x44>)
 80005f6:	214e      	movs	r1, #78	; 0x4e
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <is_ring_buffer_empty+0x48>)
 80005fa:	f004 f9a1 	bl	8004940 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7c1b      	ldrb	r3, [r3, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d107      	bne.n	8000616 <is_ring_buffer_empty+0x32>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	429a      	cmp	r2, r3
 8000610:	d101      	bne.n	8000616 <is_ring_buffer_empty+0x32>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <is_ring_buffer_empty+0x34>
 8000616:	2300      	movs	r3, #0
 8000618:	b2db      	uxtb	r3, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08004d90 	.word	0x08004d90
 8000628:	080051dc 	.word	0x080051dc
 800062c:	08004d94 	.word	0x08004d94

08000630 <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <ring_buffer_init+0x16>
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <ring_buffer_init+0x22>
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <ring_buffer_init+0x74>)
 8000648:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <ring_buffer_init+0x78>)
 800064a:	2169      	movs	r1, #105	; 0x69
 800064c:	4817      	ldr	r0, [pc, #92]	; (80006ac <ring_buffer_init+0x7c>)
 800064e:	f004 f977 	bl	8004940 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 8000652:	2014      	movs	r0, #20
 8000654:	f004 f9bc 	bl	80049d0 <malloc>
 8000658:	4603      	mov	r3, r0
 800065a:	60fb      	str	r3, [r7, #12]
    assert(rb);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d105      	bne.n	800066e <ring_buffer_init+0x3e>
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <ring_buffer_init+0x80>)
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <ring_buffer_init+0x78>)
 8000666:	216c      	movs	r1, #108	; 0x6c
 8000668:	4810      	ldr	r0, [pc, #64]	; (80006ac <ring_buffer_init+0x7c>)
 800066a:	f004 f969 	bl	8004940 <__assert_func>

    rb->buffer = buffer;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f000 f81c 	bl	80006b8 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ffaf 	bl	80005e4 <is_ring_buffer_empty>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <ring_buffer_init+0x68>
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <ring_buffer_init+0x84>)
 800068e:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <ring_buffer_init+0x78>)
 8000690:	2172      	movs	r1, #114	; 0x72
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <ring_buffer_init+0x7c>)
 8000694:	f004 f954 	bl	8004940 <__assert_func>

    return rb;
 8000698:	68fb      	ldr	r3, [r7, #12]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08004dc0 	.word	0x08004dc0
 80006a8:	080051f4 	.word	0x080051f4
 80006ac:	08004d94 	.word	0x08004d94
 80006b0:	08004d90 	.word	0x08004d90
 80006b4:	08004dd0 	.word	0x08004dd0

080006b8 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    assert(rb);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d105      	bne.n	80006d2 <ring_buffer_reset+0x1a>
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <ring_buffer_reset+0x34>)
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <ring_buffer_reset+0x38>)
 80006ca:	2189      	movs	r1, #137	; 0x89
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <ring_buffer_reset+0x3c>)
 80006ce:	f004 f937 	bl	8004940 <__assert_func>
    rb->head = 0;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	741a      	strb	r2, [r3, #16]
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08004d90 	.word	0x08004d90
 80006f0:	08005208 	.word	0x08005208
 80006f4:	08004d94 	.word	0x08004d94

080006f8 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d006      	beq.n	8000716 <ring_buffer_get+0x1e>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <ring_buffer_get+0x1e>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d105      	bne.n	8000722 <ring_buffer_get+0x2a>
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <ring_buffer_get+0x60>)
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <ring_buffer_get+0x64>)
 800071a:	21da      	movs	r1, #218	; 0xda
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <ring_buffer_get+0x68>)
 800071e:	f004 f90f 	bl	8004940 <__assert_func>

    int r = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff5c 	bl	80005e4 <is_ring_buffer_empty>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d10c      	bne.n	800074c <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	4413      	add	r3, r2
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff28 	bl	8000598 <tail_ptr_retreat>

        r = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	b2db      	uxtb	r3, r3
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	08004e00 	.word	0x08004e00
 800075c:	0800521c 	.word	0x0800521c
 8000760:	08004d94 	.word	0x08004d94

08000764 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <ring_buffer_read+0x20>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <ring_buffer_read+0x20>
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d106      	bne.n	8000792 <ring_buffer_read+0x2e>
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <ring_buffer_read+0x64>)
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <ring_buffer_read+0x68>)
 8000788:	f240 1115 	movw	r1, #277	; 0x115
 800078c:	4810      	ldr	r0, [pc, #64]	; (80007d0 <ring_buffer_read+0x6c>)
 800078e:	f004 f8d7 	bl	8004940 <__assert_func>

    size_t data_counter = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 8000796:	e00d      	b.n	80007b4 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	617a      	str	r2, [r7, #20]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	4619      	mov	r1, r3
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	f7ff ffa7 	bl	80006f8 <ring_buffer_get>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 80007b0:	2303      	movs	r3, #3
 80007b2:	e004      	b.n	80007be <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d3ed      	bcc.n	8000798 <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08004e1c 	.word	0x08004e1c
 80007cc:	0800522c 	.word	0x0800522c
 80007d0:	08004d94 	.word	0x08004d94

080007d4 <time_event_start>:
#include <assert.h>

bool volatile pending_time_update = false;

void time_event_start(time_event_t *time_event, const uint16_t time_ms)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
    time_event->tick_cnt = time_ms;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	801a      	strh	r2, [r3, #0]
    time_event->active = true;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2201      	movs	r2, #1
 80007ea:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	70da      	strb	r2, [r3, #3]
}   
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    time_event->active = false;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	70da      	strb	r2, [r3, #3]
    time_event->tick_cnt = 0;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	801a      	strh	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <time_event_update>:
{
    return time_event->active;
}

bool time_event_update(time_event_t *time_event)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    if (time_event->active == true)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d012      	beq.n	8000856 <time_event_update+0x36>
    {
        if (time_event->tick_cnt > 0)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <time_event_update+0x24>
            time_event->tick_cnt--;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	b29a      	uxth	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	801a      	strh	r2, [r3, #0]

        if(!time_event->tick_cnt)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <time_event_update+0x32>
            time_event->raised = true;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	70da      	strb	r2, [r3, #3]
        
        return true;
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <time_event_update+0x38>
    }
    return false;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <time_event_is_raised>:

bool time_event_is_raised(time_event_t *time_event)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	78db      	ldrb	r3, [r3, #3]
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <time_event_set_pending_update>:

void time_event_set_pending_update(bool status)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <time_event_set_pending_update+0x1c>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	7013      	strb	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000014c 	.word	0x2000014c

08000898 <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
    return pending_time_update;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <time_event_get_pending_update+0x14>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2db      	uxtb	r3, r3
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000014c 	.word	0x2000014c

080008b0 <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff ffdf 	bl	8000878 <time_event_set_pending_update>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 80008c4:	f7ff ffe8 	bl	8000898 <time_event_get_pending_update>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <time_events_poll_update+0x1a>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <time_events_poll_update+0x20>)
 80008d0:	f7ff fc8c 	bl	80001ec <btn_debounce_run>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ffcf 	bl	8000878 <time_event_set_pending_update>
    }
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000fc 	.word	0x200000fc

080008e4 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <event_manager_fsm_get+0x10>)
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000218 	.word	0x20000218

080008f8 <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	78fa      	ldrb	r2, [r7, #3]
 8000908:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	705a      	strb	r2, [r3, #1]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d002      	beq.n	8000930 <event_manager_fsm_run+0x16>
 800092a:	2b02      	cmp	r3, #2
 800092c:	d004      	beq.n	8000938 <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 800092e:	e007      	b.n	8000940 <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f84d 	bl	80009d0 <wait_event_on_react>
 8000936:	e003      	b.n	8000940 <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 f885 	bl	8000a48 <notify_event_on_react>
 800093e:	bf00      	nop
    }
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3358      	adds	r3, #88	; 0x58
 8000954:	22c8      	movs	r2, #200	; 0xc8
 8000956:	4905      	ldr	r1, [pc, #20]	; (800096c <event_manager_fsm_init+0x24>)
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd05 	bl	8000368 <event_queue_init>
    enter_seq_wait_event(handle);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f806 	bl	8000970 <enter_seq_wait_event>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000150 	.word	0x20000150

08000970 <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 8000978:	2101      	movs	r1, #1
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffbc 	bl	80008f8 <fsm_set_next_state>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3304      	adds	r3, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f7ff fd05 	bl	80003ac <event_queue_read>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3358      	adds	r3, #88	; 0x58
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fcec 	bl	8000394 <event_queue_get_pending>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	705a      	strb	r2, [r3, #1]
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d106      	bne.n	80009f2 <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ffcf 	bl	8000988 <exit_action_wait_event>
        enter_seq_notify_event(handle);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f810 	bl	8000a10 <enter_seq_notify_event>
 80009f0:	e001      	b.n	80009f6 <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	f083 0301 	eor.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffd1 	bl	80009aa <during_action_wait_event>
    }
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 8000a18:	2102      	movs	r1, #2
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ff6c 	bl	80008f8 <fsm_set_next_state>
    entry_action_notify_event(handle);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 f804 	bl	8000a2e <entry_action_notify_event>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
        temp_ctrl_fsm_write_evt(&temp_fsm, &handle->iface.event);
    break;
    */
    
    default:
        break;
 8000a36:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	705a      	strb	r2, [r3, #1]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d102      	bne.n	8000a5e <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff89 	bl	8000970 <enter_seq_wait_event>
    }
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	2b80      	cmp	r3, #128	; 0x80
 8000a76:	d02b      	beq.n	8000ad0 <HAL_GPIO_EXTI_Callback+0x68>
 8000a78:	2b80      	cmp	r3, #128	; 0x80
 8000a7a:	dc2e      	bgt.n	8000ada <HAL_GPIO_EXTI_Callback+0x72>
 8000a7c:	2b20      	cmp	r3, #32
 8000a7e:	d010      	beq.n	8000aa2 <HAL_GPIO_EXTI_Callback+0x3a>
 8000a80:	2b20      	cmp	r3, #32
 8000a82:	dc2a      	bgt.n	8000ada <HAL_GPIO_EXTI_Callback+0x72>
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d002      	beq.n	8000a8e <HAL_GPIO_EXTI_Callback+0x26>
 8000a88:	2b10      	cmp	r3, #16
 8000a8a:	d005      	beq.n	8000a98 <HAL_GPIO_EXTI_Callback+0x30>
        case GPIO_PIN_7: {
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
         }break;
    
    default:
        break;
 8000a8c:	e025      	b.n	8000ada <HAL_GPIO_EXTI_Callback+0x72>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 8000a8e:	2132      	movs	r1, #50	; 0x32
 8000a90:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a92:	f7ff fe9f 	bl	80007d4 <time_event_start>
        }break;
 8000a96:	e023      	b.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x78>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8000a98:	2132      	movs	r1, #50	; 0x32
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <HAL_GPIO_EXTI_Callback+0x84>)
 8000a9c:	f7ff fe9a 	bl	80007d4 <time_event_start>
        }break;
 8000aa0:	e01e      	b.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x78>
            if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_RESET)
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000aa6:	f002 ff6f 	bl	8003988 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x50>
                time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 8000ab0:	2132      	movs	r1, #50	; 0x32
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ab4:	f7ff fe8e 	bl	80007d4 <time_event_start>
            if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) == GPIO_PIN_RESET)
 8000ab8:	2120      	movs	r1, #32
 8000aba:	480f      	ldr	r0, [pc, #60]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000abc:	f002 ff64 	bl	8003988 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10b      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x76>
                  time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 8000ac6:	2132      	movs	r1, #50	; 0x32
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_GPIO_EXTI_Callback+0x94>)
 8000aca:	f7ff fe83 	bl	80007d4 <time_event_start>
         }break;
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_EXTI_Callback+0x76>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 8000ad0:	2132      	movs	r1, #50	; 0x32
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x98>)
 8000ad4:	f7ff fe7e 	bl	80007d4 <time_event_start>
         }break;
 8000ad8:	e002      	b.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x78>
        break;
 8000ada:	bf00      	nop
 8000adc:	e000      	b.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x78>
         }break;
 8000ade:	bf00      	nop
    }

}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000144 	.word	0x20000144
 8000aec:	20000104 	.word	0x20000104
 8000af0:	40010800 	.word	0x40010800
 8000af4:	20000124 	.word	0x20000124
 8000af8:	40011000 	.word	0x40011000
 8000afc:	20000114 	.word	0x20000114
 8000b00:	20000134 	.word	0x20000134

08000b04 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f002 ff6d 	bl	80039e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 8000b16:	2010      	movs	r0, #16
 8000b18:	f002 ff66 	bl	80039e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5), Down (C5)
 8000b24:	2020      	movs	r0, #32
 8000b26:	f002 ff5f 	bl	80039e8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 8000b2a:	2080      	movs	r0, #128	; 0x80
 8000b2c:	f002 ff5c 	bl	80039e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	2228      	movs	r2, #40	; 0x28
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 ff4c 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b70:	2302      	movs	r3, #2
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b74:	2300      	movs	r3, #0
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000b78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f88c 	bl	8003ca0 <HAL_RCC_OscConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b8e:	f000 fa47 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 faf9 	bl	80041a4 <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000bb8:	f000 fa32 	bl	8001020 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fc70 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bd2:	f000 fa25 	bl	8001020 <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3750      	adds	r7, #80	; 0x50
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000bf2:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <MX_ADC1_Init+0x78>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000c0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000c1e:	f002 f9b5 	bl	8002f8c <HAL_ADC_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c28:	f000 f9fa 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c2c:	230a      	movs	r3, #10
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_ADC1_Init+0x74>)
 8000c3e:	f002 fa7d 	bl	800313c <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c48:	f000 f9ea 	bl	8001020 <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000278 	.word	0x20000278
 8000c58:	40012400 	.word	0x40012400

08000c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_I2C1_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_I2C1_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c9a:	f002 febd 	bl	8003a18 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 f9bc 	bl	8001020 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200002a8 	.word	0x200002a8
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cbe:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <MX_SPI2_Init+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cec:	2210      	movs	r2, #16
 8000cee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000d04:	220a      	movs	r2, #10
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_SPI2_Init+0x64>)
 8000d0a:	f003 fc85 	bl	8004618 <HAL_SPI_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d14:	f000 f984 	bl	8001020 <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200002fc 	.word	0x200002fc
 8000d20:	40003800 	.word	0x40003800

08000d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <MX_TIM1_Init+0x74>)
 8000d36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d5e:	2108      	movs	r1, #8
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d62:	f003 fcdd 	bl	8004720 <HAL_TIM_OnePulse_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8000d6c:	f000 f958 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM1_Init+0x70>)
 8000d7e:	f003 fd81 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000d88:	f000 f94a 	bl	8001020 <Error_Handler>
  }


}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200003dc 	.word	0x200003dc
 8000d98:	40012c00 	.word	0x40012c00

08000d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_DMA_Init+0x48>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <MX_DMA_Init+0x48>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_DMA_Init+0x48>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	200e      	movs	r0, #14
 8000dc0:	f002 fbcd 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000dc4:	200e      	movs	r0, #14
 8000dc6:	f002 fbe6 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f002 fbc5 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000dd4:	200f      	movs	r0, #15
 8000dd6:	f002 fbde 	bl	8003596 <HAL_NVIC_EnableIRQ>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b68      	ldr	r3, [pc, #416]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a67      	ldr	r2, [pc, #412]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b65      	ldr	r3, [pc, #404]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a61      	ldr	r2, [pc, #388]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e1a:	f043 0320 	orr.w	r3, r3, #32
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b5f      	ldr	r3, [pc, #380]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a5b      	ldr	r2, [pc, #364]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b59      	ldr	r3, [pc, #356]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b56      	ldr	r3, [pc, #344]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a55      	ldr	r2, [pc, #340]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <MX_GPIO_Init+0x1b8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4850      	ldr	r0, [pc, #320]	; (8000fa4 <MX_GPIO_Init+0x1bc>)
 8000e62:	f002 fda8 	bl	80039b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8000e66:	2200      	movs	r2, #0
 8000e68:	f640 715f 	movw	r1, #3935	; 0xf5f
 8000e6c:	484e      	ldr	r0, [pc, #312]	; (8000fa8 <MX_GPIO_Init+0x1c0>)
 8000e6e:	f002 fda2 	bl	80039b6 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000e78:	484c      	ldr	r0, [pc, #304]	; (8000fac <MX_GPIO_Init+0x1c4>)
 8000e7a:	f002 fd9c 	bl	80039b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	4843      	ldr	r0, [pc, #268]	; (8000fa4 <MX_GPIO_Init+0x1bc>)
 8000e96:	f002 fbf3 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 8000e9a:	f241 338c 	movw	r3, #5004	; 0x138c
 8000e9e:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	483d      	ldr	r0, [pc, #244]	; (8000fa4 <MX_GPIO_Init+0x1bc>)
 8000eb0:	f002 fbe6 	bl	8003680 <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8000eb4:	f640 735f 	movw	r3, #3935	; 0xf5f
 8000eb8:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4836      	ldr	r0, [pc, #216]	; (8000fa8 <MX_GPIO_Init+0x1c0>)
 8000ece:	f002 fbd7 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <MX_GPIO_Init+0x1c0>)
 8000ee8:	f002 fbca 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000eec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	4829      	ldr	r0, [pc, #164]	; (8000fac <MX_GPIO_Init+0x1c4>)
 8000f06:	f002 fbbb 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 8000f0a:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_GPIO_Init+0x1c8>)
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <MX_GPIO_Init+0x1bc>)
 8000f20:	f002 fbae 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 8000f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_GPIO_Init+0x1c8>)
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_GPIO_Init+0x1c0>)
 8000f3a:	f002 fba1 	bl	8003680 <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8000f3e:	2330      	movs	r3, #48	; 0x30
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_GPIO_Init+0x1cc>)
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_GPIO_Init+0x1bc>)
 8000f52:	f002 fb95 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8000f56:	23a0      	movs	r3, #160	; 0xa0
 8000f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0x1cc>)
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <MX_GPIO_Init+0x1c0>)
 8000f6a:	f002 fb89 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_GPIO_Init+0x1cc>)
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <MX_GPIO_Init+0x1c4>)
 8000f82:	f002 fb7d 	bl	8003680 <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 8000f86:	2006      	movs	r0, #6
 8000f88:	f002 fb05 	bl	8003596 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, down -> C5, right -> A7
 8000f8c:	2017      	movs	r0, #23
 8000f8e:	f002 fb02 	bl	8003596 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 8000f92:	200a      	movs	r0, #10
 8000f94:	f002 faff 	bl	8003596 <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40011000 	.word	0x40011000
 8000fa8:	40010800 	.word	0x40010800
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	10110000 	.word	0x10110000
 8000fb4:	10210000 	.word	0x10210000

08000fb8 <init_peripherals>:

void init_peripherals(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f001 ff60 	bl	8002e80 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f7ff fdb8 	bl	8000b34 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff ff10 	bl	8000de8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fc8:	f7ff fe0a 	bl	8000be0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000fcc:	f7ff fe74 	bl	8000cb8 <MX_SPI2_Init>
  MX_DMA_Init();
 8000fd0:	f7ff fee4 	bl	8000d9c <MX_DMA_Init>
  MX_TIM1_Init();
 8000fd4:	f7ff fea6 	bl	8000d24 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000fd8:	f7ff fe40 	bl	8000c5c <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 8000fdc:	f7ff fa54 	bl	8000488 <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 8000fe0:	f001 f932 	bl	8002248 <BSP_LCD_Init>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  init_peripherals();
 8000fee:	f7ff ffe3 	bl	8000fb8 <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <main+0x30>)
 8000ff4:	f7ff f8b2 	bl	800015c <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 8000ff8:	f7ff fc74 	bl	80008e4 <event_manager_fsm_get>
 8000ffc:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fca2 	bl	8000948 <event_manager_fsm_init>

  printf("Ali Pet Feeder Project\r\n");
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <main+0x34>)
 8001006:	f000 fc57 	bl	80018b8 <puts>

  /* Infinite loop */
  while (1)
  {
    event_manager_fsm_run(evm_fsm);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fc85 	bl	800091a <event_manager_fsm_run>
    time_events_poll_update();
 8001010:	f7ff fc56 	bl	80008c0 <time_events_poll_update>
    event_manager_fsm_run(evm_fsm);
 8001014:	e7f9      	b.n	800100a <main+0x22>
 8001016:	bf00      	nop
 8001018:	200000fc 	.word	0x200000fc
 800101c:	08004e38 	.word	0x08004e38

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_MspInit+0x5c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_MspInit+0x5c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x60>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_MspInit+0x60>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_ADC_MspInit+0x6c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d121      	bne.n	80010f4 <HAL_ADC_MspInit+0x64>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_ADC_MspInit+0x70>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_ADC_MspInit+0x70>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_ADC_MspInit+0x70>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_ADC_MspInit+0x70>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_ADC_MspInit+0x70>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_ADC_MspInit+0x70>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_ADC_MspInit+0x74>)
 80010f0:	f002 fac6 	bl	8003680 <HAL_GPIO_Init>
  }

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40012400 	.word	0x40012400
 8001100:	40021000 	.word	0x40021000
 8001104:	40011000 	.word	0x40011000

08001108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_I2C_MspInit+0x70>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d123      	bne.n	8001170 <HAL_I2C_MspInit+0x68>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_I2C_MspInit+0x74>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_I2C_MspInit+0x74>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_I2C_MspInit+0x74>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <HAL_I2C_MspInit+0x78>)
 8001154:	f002 fa94 	bl	8003680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_I2C_MspInit+0x74>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_I2C_MspInit+0x74>)
 800115e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001162:	61d3      	str	r3, [r2, #28]
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_I2C_MspInit+0x74>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]

  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40005400 	.word	0x40005400
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <HAL_SPI_MspInit+0x124>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d17d      	bne.n	80012a0 <HAL_SPI_MspInit+0x11c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011a4:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_SPI_MspInit+0x128>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	4a40      	ldr	r2, [pc, #256]	; (80012ac <HAL_SPI_MspInit+0x128>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	61d3      	str	r3, [r2, #28]
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <HAL_SPI_MspInit+0x128>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_SPI_MspInit+0x128>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_SPI_MspInit+0x128>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_SPI_MspInit+0x128>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80011d4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	4831      	ldr	r0, [pc, #196]	; (80012b0 <HAL_SPI_MspInit+0x12c>)
 80011ea:	f002 fa49 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80011ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	482b      	ldr	r0, [pc, #172]	; (80012b0 <HAL_SPI_MspInit+0x12c>)
 8001204:	f002 fa3c 	bl	8003680 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 800120a:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <HAL_SPI_MspInit+0x134>)
 800120c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001238:	481e      	ldr	r0, [pc, #120]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 800123a:	f002 f9c7 	bl	80035cc <HAL_DMA_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001244:	f7ff feec 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 800124c:	64da      	str	r2, [r3, #76]	; 0x4c
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_SPI_MspInit+0x130>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_SPI_MspInit+0x138>)
 8001256:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_SPI_MspInit+0x13c>)
 8001258:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_SPI_MspInit+0x138>)
 800125c:	2210      	movs	r2, #16
 800125e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_SPI_MspInit+0x138>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_SPI_MspInit+0x138>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_SPI_MspInit+0x138>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_SPI_MspInit+0x138>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_SPI_MspInit+0x138>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_SPI_MspInit+0x138>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <HAL_SPI_MspInit+0x138>)
 8001286:	f002 f9a1 	bl	80035cc <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8001290:	f7ff fec6 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_SPI_MspInit+0x138>)
 8001298:	649a      	str	r2, [r3, #72]	; 0x48
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_SPI_MspInit+0x138>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6253      	str	r3, [r2, #36]	; 0x24


  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40003800 	.word	0x40003800
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	20000354 	.word	0x20000354
 80012b8:	40020044 	.word	0x40020044
 80012bc:	20000398 	.word	0x20000398
 80012c0:	40020058 	.word	0x40020058

080012c4 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_TIM_OnePulse_MspInit+0x34>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10b      	bne.n	80012ee <HAL_TIM_OnePulse_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_TIM_OnePulse_MspInit+0x38>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_TIM_OnePulse_MspInit+0x38>)
 80012dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_TIM_OnePulse_MspInit+0x38>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  }

}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40012c00 	.word	0x40012c00
 80012fc:	40021000 	.word	0x40021000

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001346:	f7ff fab3 	bl	80008b0 <HAL_SYSTICK_Callback>
  HAL_IncTick();
 800134a:	f001 fddf 	bl	8002f0c <HAL_IncTick>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}

08001352 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
	return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <_kill>:

int _kill(int pid, int sig)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800136a:	f003 fb07 	bl	800497c <__errno>
 800136e:	4603      	mov	r3, r0
 8001370:	2216      	movs	r2, #22
 8001372:	601a      	str	r2, [r3, #0]
	return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_exit>:

void _exit (int status)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ffe7 	bl	8001360 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001392:	e7fe      	b.n	8001392 <_exit+0x12>

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f003 fada 	bl	800497c <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20005000 	.word	0x20005000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000424 	.word	0x20000424
 80013fc:	20000568 	.word	0x20000568

08001400 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800141c:	e004      	b.n	8001428 <ts_itoa+0x1c>
		div *= base;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	d2f3      	bcs.n	800141e <ts_itoa+0x12>

	while (div != 0)
 8001436:	e029      	b.n	800148c <ts_itoa+0x80>
	{
		int num = d/div;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001440:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	fbb3 f1f2 	udiv	r1, r3, r2
 800144a:	fb01 f202 	mul.w	r2, r1, r2
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	fb92 f3f3 	sdiv	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b09      	cmp	r3, #9
 8001460:	dd0a      	ble.n	8001478 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1c58      	adds	r0, r3, #1
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	6008      	str	r0, [r1, #0]
 8001470:	3237      	adds	r2, #55	; 0x37
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e009      	b.n	800148c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	1c58      	adds	r0, r3, #1
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	6008      	str	r0, [r1, #0]
 8001486:	3230      	adds	r2, #48	; 0x30
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1d2      	bne.n	8001438 <ts_itoa+0x2c>
	}
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
	...

080014a0 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80014b0:	e0bc      	b.n	800162c <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b25      	cmp	r3, #37	; 0x25
 80014b8:	f040 80b0 	bne.w	800161c <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3301      	adds	r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b25      	cmp	r3, #37	; 0x25
 80014c8:	f000 809e 	beq.w	8001608 <ts_formatstring+0x168>
 80014cc:	2b25      	cmp	r3, #37	; 0x25
 80014ce:	f2c0 80a1 	blt.w	8001614 <ts_formatstring+0x174>
 80014d2:	2b78      	cmp	r3, #120	; 0x78
 80014d4:	f300 809e 	bgt.w	8001614 <ts_formatstring+0x174>
 80014d8:	2b58      	cmp	r3, #88	; 0x58
 80014da:	f2c0 809b 	blt.w	8001614 <ts_formatstring+0x174>
 80014de:	3b58      	subs	r3, #88	; 0x58
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	f200 8097 	bhi.w	8001614 <ts_formatstring+0x174>
 80014e6:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <ts_formatstring+0x4c>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	080015f1 	.word	0x080015f1
 80014f0:	08001615 	.word	0x08001615
 80014f4:	08001615 	.word	0x08001615
 80014f8:	08001615 	.word	0x08001615
 80014fc:	08001615 	.word	0x08001615
 8001500:	08001615 	.word	0x08001615
 8001504:	08001615 	.word	0x08001615
 8001508:	08001615 	.word	0x08001615
 800150c:	08001615 	.word	0x08001615
 8001510:	08001615 	.word	0x08001615
 8001514:	08001615 	.word	0x08001615
 8001518:	08001571 	.word	0x08001571
 800151c:	08001585 	.word	0x08001585
 8001520:	08001615 	.word	0x08001615
 8001524:	08001615 	.word	0x08001615
 8001528:	08001615 	.word	0x08001615
 800152c:	08001615 	.word	0x08001615
 8001530:	08001585 	.word	0x08001585
 8001534:	08001615 	.word	0x08001615
 8001538:	08001615 	.word	0x08001615
 800153c:	08001615 	.word	0x08001615
 8001540:	08001615 	.word	0x08001615
 8001544:	08001615 	.word	0x08001615
 8001548:	08001615 	.word	0x08001615
 800154c:	08001615 	.word	0x08001615
 8001550:	08001615 	.word	0x08001615
 8001554:	08001615 	.word	0x08001615
 8001558:	080015b5 	.word	0x080015b5
 800155c:	08001615 	.word	0x08001615
 8001560:	080015db 	.word	0x080015db
 8001564:	08001615 	.word	0x08001615
 8001568:	08001615 	.word	0x08001615
 800156c:	080015f1 	.word	0x080015f1
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	1d1a      	adds	r2, r3, #4
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60fa      	str	r2, [r7, #12]
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
				break;
 8001582:	e047      	b.n	8001614 <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	1d1a      	adds	r2, r3, #4
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da07      	bge.n	80015a4 <ts_formatstring+0x104>
					{
						val *= -1;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	425b      	negs	r3, r3
 8001598:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	60fa      	str	r2, [r7, #12]
 80015a0:	222d      	movs	r2, #45	; 0x2d
 80015a2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80015a4:	69f9      	ldr	r1, [r7, #28]
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	220a      	movs	r2, #10
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff2d 	bl	800140c <ts_itoa>
				}
				break;
 80015b2:	e02f      	b.n	8001614 <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80015be:	e007      	b.n	80015d0 <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	1c53      	adds	r3, r2, #1
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1c59      	adds	r1, r3, #1
 80015ca:	60f9      	str	r1, [r7, #12]
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f3      	bne.n	80015c0 <ts_formatstring+0x120>
					}
				}
				break;
 80015d8:	e01c      	b.n	8001614 <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	1d1a      	adds	r2, r3, #4
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	220a      	movs	r2, #10
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff0f 	bl	800140c <ts_itoa>
				break;
 80015ee:	e011      	b.n	8001614 <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	1d1a      	adds	r2, r3, #4
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2210      	movs	r2, #16
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff03 	bl	800140c <ts_itoa>
				break;
 8001606:	e005      	b.n	8001614 <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60fa      	str	r2, [r7, #12]
 800160e:	2225      	movs	r2, #37	; 0x25
 8001610:	701a      	strb	r2, [r3, #0]
				  break;
 8001612:	bf00      	nop
			}
			fmt++;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	3301      	adds	r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	e007      	b.n	800162c <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	1c53      	adds	r3, r2, #1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1c59      	adds	r1, r3, #1
 8001626:	60f9      	str	r1, [r7, #12]
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f af3e 	bne.w	80014b2 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	1ad3      	subs	r3, r2, r3
}
 8001642:	4618      	mov	r0, r3
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop

0800164c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	int length = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800165a:	e080      	b.n	800175e <ts_formatlength+0x112>
	{
		if (*fmt == '%')
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b25      	cmp	r3, #37	; 0x25
 8001662:	d176      	bne.n	8001752 <ts_formatlength+0x106>
		{
			++fmt;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	3b58      	subs	r3, #88	; 0x58
 8001670:	2b20      	cmp	r3, #32
 8001672:	d86a      	bhi.n	800174a <ts_formatlength+0xfe>
 8001674:	a201      	add	r2, pc, #4	; (adr r2, 800167c <ts_formatlength+0x30>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	0800173d 	.word	0x0800173d
 8001680:	0800174b 	.word	0x0800174b
 8001684:	0800174b 	.word	0x0800174b
 8001688:	0800174b 	.word	0x0800174b
 800168c:	0800174b 	.word	0x0800174b
 8001690:	0800174b 	.word	0x0800174b
 8001694:	0800174b 	.word	0x0800174b
 8001698:	0800174b 	.word	0x0800174b
 800169c:	0800174b 	.word	0x0800174b
 80016a0:	0800174b 	.word	0x0800174b
 80016a4:	0800174b 	.word	0x0800174b
 80016a8:	08001701 	.word	0x08001701
 80016ac:	0800170f 	.word	0x0800170f
 80016b0:	0800174b 	.word	0x0800174b
 80016b4:	0800174b 	.word	0x0800174b
 80016b8:	0800174b 	.word	0x0800174b
 80016bc:	0800174b 	.word	0x0800174b
 80016c0:	0800170f 	.word	0x0800170f
 80016c4:	0800174b 	.word	0x0800174b
 80016c8:	0800174b 	.word	0x0800174b
 80016cc:	0800174b 	.word	0x0800174b
 80016d0:	0800174b 	.word	0x0800174b
 80016d4:	0800174b 	.word	0x0800174b
 80016d8:	0800174b 	.word	0x0800174b
 80016dc:	0800174b 	.word	0x0800174b
 80016e0:	0800174b 	.word	0x0800174b
 80016e4:	0800174b 	.word	0x0800174b
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	0800174b 	.word	0x0800174b
 80016f0:	0800170f 	.word	0x0800170f
 80016f4:	0800174b 	.word	0x0800174b
 80016f8:	0800174b 	.word	0x0800174b
 80016fc:	0800173d 	.word	0x0800173d
			{
			  case 'c':
		  		  va_arg(va, int);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3304      	adds	r3, #4
 8001704:	603b      	str	r3, [r7, #0]
				  ++length;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
				  break;
 800170c:	e024      	b.n	8001758 <ts_formatlength+0x10c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	330b      	adds	r3, #11
 8001712:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	3304      	adds	r3, #4
 8001718:	603b      	str	r3, [r7, #0]
				  break;
 800171a:	e01d      	b.n	8001758 <ts_formatlength+0x10c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	1d1a      	adds	r2, r3, #4
 8001720:	603a      	str	r2, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8001726:	e002      	b.n	800172e <ts_formatlength+0xe2>
			  			  ++length;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	60ba      	str	r2, [r7, #8]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f6      	bne.n	8001728 <ts_formatlength+0xdc>
			  	  }
				  break;
 800173a:	e00d      	b.n	8001758 <ts_formatlength+0x10c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3308      	adds	r3, #8
 8001740:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3304      	adds	r3, #4
 8001746:	603b      	str	r3, [r7, #0]
				  break;
 8001748:	e006      	b.n	8001758 <ts_formatlength+0x10c>
			  default:
				  ++length;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
				  break;
 8001750:	e002      	b.n	8001758 <ts_formatlength+0x10c>
			}
		}
		else
		{
			++length;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	607b      	str	r3, [r7, #4]
	while (*fmt)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f af7a 	bne.w	800165c <ts_formatlength+0x10>
	}
	return length;
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 8001774:	b40e      	push	{r1, r2, r3}
 8001776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	int length = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 8001784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001788:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800178e:	f7ff ff5d 	bl	800164c <ts_formatlength>
 8001792:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 8001794:	466b      	mov	r3, sp
 8001796:	461e      	mov	r6, r3
		char buf[length];
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	1e4b      	subs	r3, r1, #1
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	460a      	mov	r2, r1
 80017a0:	2300      	movs	r3, #0
 80017a2:	4690      	mov	r8, r2
 80017a4:	4699      	mov	r9, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ba:	460a      	mov	r2, r1
 80017bc:	2300      	movs	r3, #0
 80017be:	4614      	mov	r4, r2
 80017c0:	461d      	mov	r5, r3
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	00eb      	lsls	r3, r5, #3
 80017cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d0:	00e2      	lsls	r2, r4, #3
 80017d2:	460b      	mov	r3, r1
 80017d4:	3307      	adds	r3, #7
 80017d6:	08db      	lsrs	r3, r3, #3
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	ebad 0d03 	sub.w	sp, sp, r3
 80017de:	466b      	mov	r3, sp
 80017e0:	3300      	adds	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 80017e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e8:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff fe56 	bl	80014a0 <ts_formatstring>
 80017f4:	6178      	str	r0, [r7, #20]
		length = _write(stream->_file, buf, length);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe74 	bl	80004ee <_write>
 8001806:	6178      	str	r0, [r7, #20]
 8001808:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800180a:	697b      	ldr	r3, [r7, #20]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001816:	b003      	add	sp, #12
 8001818:	4770      	bx	lr

0800181a <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800181a:	b40f      	push	{r0, r1, r2, r3}
 800181c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
	int length = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8001828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800182c:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001832:	f7ff ff0b 	bl	800164c <ts_formatlength>
 8001836:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8001838:	466b      	mov	r3, sp
 800183a:	461e      	mov	r6, r3
		char buf[length];
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	1e4b      	subs	r3, r1, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	460a      	mov	r2, r1
 8001844:	2300      	movs	r3, #0
 8001846:	4690      	mov	r8, r2
 8001848:	4699      	mov	r9, r3
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800185a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800185e:	460a      	mov	r2, r1
 8001860:	2300      	movs	r3, #0
 8001862:	4614      	mov	r4, r2
 8001864:	461d      	mov	r5, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	00eb      	lsls	r3, r5, #3
 8001870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001874:	00e2      	lsls	r2, r4, #3
 8001876:	460b      	mov	r3, r1
 8001878:	3307      	adds	r3, #7
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	ebad 0d03 	sub.w	sp, sp, r3
 8001882:	466b      	mov	r3, sp
 8001884:	3300      	adds	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8001888:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800188c:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fe04 	bl	80014a0 <ts_formatstring>
 8001898:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	2001      	movs	r0, #1
 80018a0:	f7fe fe25 	bl	80004ee <_write>
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018b4:	b004      	add	sp, #16
 80018b6:	4770      	bx	lr

080018b8 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7fe fc43 	bl	800014c <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7fe fe0b 	bl	80004ee <_write>
 80018d8:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	490b      	ldr	r1, [pc, #44]	; (800190c <puts+0x54>)
 80018de:	2001      	movs	r0, #1
 80018e0:	f7fe fe05 	bl	80004ee <_write>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3301      	adds	r3, #1
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d102      	bne.n	80018fc <puts+0x44>
	{
		res = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e002      	b.n	8001902 <puts+0x4a>
	}
	else
	{
		res = EOF;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	617b      	str	r3, [r7, #20]
	}

	return res;
 8001902:	697b      	ldr	r3, [r7, #20]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	08004e50 	.word	0x08004e50

08001910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	; (8001948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	; (8001954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001936:	f7ff fd63 	bl	8001400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f003 f825 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800193e:	f7ff fb53 	bl	8000fe8 <main>
  bx lr
 8001942:	4770      	bx	lr
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 800194c:	0800529c 	.word	0x0800529c
  ldr r2, =_sbss
 8001950:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001954:	20000564 	.word	0x20000564

08001958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_2_IRQHandler>

0800195a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 800195e:	2001      	movs	r0, #1
 8001960:	f001 f8da 	bl	8002b18 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8001964:	2011      	movs	r0, #17
 8001966:	f001 f981 	bl	8002c6c <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}

0800196e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 8001972:	2010      	movs	r0, #16
 8001974:	f001 f97a 	bl	8002c6c <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 8001978:	2000      	movs	r0, #0
 800197a:	f001 f8cd 	bl	8002b18 <LCD_IO_Bl_OnOff>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}

08001982 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8001986:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8001996:	23f0      	movs	r3, #240	; 0xf0
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 80019aa:	1d39      	adds	r1, r7, #4
 80019ac:	2301      	movs	r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	20d3      	movs	r0, #211	; 0xd3
 80019b2:	f001 fa19 	bl	8002de8 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <ili9341_ReadID+0x30>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d102      	bne.n	80019c4 <ili9341_ReadID+0x24>
    return 0x9341;
 80019be:	f249 3341 	movw	r3, #37697	; 0x9341
 80019c2:	e000      	b.n	80019c6 <ili9341_ReadID+0x26>
  else
    return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	00419300 	.word	0x00419300

080019d4 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80019da:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <ili9341_Init+0x150>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80019e6:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <ili9341_Init+0x150>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <ili9341_Init+0x150>)
 80019f2:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80019f4:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <ili9341_Init+0x150>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <ili9341_Init+0x30>
      LCD_IO_Init();
 8001a00:	f001 f8a0 	bl	8002b44 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <ili9341_Init+0x150>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <ili9341_Init+0x150>)
 8001a10:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8001a12:	200a      	movs	r0, #10
 8001a14:	f001 f874 	bl	8002b00 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f001 f927 	bl	8002c6c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001a1e:	200a      	movs	r0, #10
 8001a20:	f001 f86e 	bl	8002b00 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8001a24:	2203      	movs	r2, #3
 8001a26:	4940      	ldr	r1, [pc, #256]	; (8001b28 <ili9341_Init+0x154>)
 8001a28:	20ef      	movs	r0, #239	; 0xef
 8001a2a:	f001 f999 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8001a2e:	2203      	movs	r2, #3
 8001a30:	493e      	ldr	r1, [pc, #248]	; (8001b2c <ili9341_Init+0x158>)
 8001a32:	20cf      	movs	r0, #207	; 0xcf
 8001a34:	f001 f994 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8001a38:	2204      	movs	r2, #4
 8001a3a:	493d      	ldr	r1, [pc, #244]	; (8001b30 <ili9341_Init+0x15c>)
 8001a3c:	20ed      	movs	r0, #237	; 0xed
 8001a3e:	f001 f98f 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8001a42:	2203      	movs	r2, #3
 8001a44:	493b      	ldr	r1, [pc, #236]	; (8001b34 <ili9341_Init+0x160>)
 8001a46:	20e8      	movs	r0, #232	; 0xe8
 8001a48:	f001 f98a 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	493a      	ldr	r1, [pc, #232]	; (8001b38 <ili9341_Init+0x164>)
 8001a50:	20cb      	movs	r0, #203	; 0xcb
 8001a52:	f001 f985 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8001a56:	2201      	movs	r2, #1
 8001a58:	4938      	ldr	r1, [pc, #224]	; (8001b3c <ili9341_Init+0x168>)
 8001a5a:	20f7      	movs	r0, #247	; 0xf7
 8001a5c:	f001 f980 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8001a60:	2202      	movs	r2, #2
 8001a62:	4937      	ldr	r1, [pc, #220]	; (8001b40 <ili9341_Init+0x16c>)
 8001a64:	20ea      	movs	r0, #234	; 0xea
 8001a66:	f001 f97b 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <ili9341_Init+0x170>)
 8001a6e:	20c0      	movs	r0, #192	; 0xc0
 8001a70:	f001 f976 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	4934      	ldr	r1, [pc, #208]	; (8001b48 <ili9341_Init+0x174>)
 8001a78:	20c1      	movs	r0, #193	; 0xc1
 8001a7a:	f001 f971 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4932      	ldr	r1, [pc, #200]	; (8001b4c <ili9341_Init+0x178>)
 8001a82:	20c5      	movs	r0, #197	; 0xc5
 8001a84:	f001 f96c 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4931      	ldr	r1, [pc, #196]	; (8001b50 <ili9341_Init+0x17c>)
 8001a8c:	20c7      	movs	r0, #199	; 0xc7
 8001a8e:	f001 f967 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8001a92:	2201      	movs	r2, #1
 8001a94:	492f      	ldr	r1, [pc, #188]	; (8001b54 <ili9341_Init+0x180>)
 8001a96:	2037      	movs	r0, #55	; 0x37
 8001a98:	f001 f962 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	492e      	ldr	r1, [pc, #184]	; (8001b58 <ili9341_Init+0x184>)
 8001aa0:	203a      	movs	r0, #58	; 0x3a
 8001aa2:	f001 f95d 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	492c      	ldr	r1, [pc, #176]	; (8001b5c <ili9341_Init+0x188>)
 8001aaa:	20b1      	movs	r0, #177	; 0xb1
 8001aac:	f001 f958 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	492b      	ldr	r1, [pc, #172]	; (8001b60 <ili9341_Init+0x18c>)
 8001ab4:	20b6      	movs	r0, #182	; 0xb6
 8001ab6:	f001 f953 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8001aba:	2201      	movs	r2, #1
 8001abc:	4925      	ldr	r1, [pc, #148]	; (8001b54 <ili9341_Init+0x180>)
 8001abe:	20f2      	movs	r0, #242	; 0xf2
 8001ac0:	f001 f94e 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <ili9341_Init+0x190>)
 8001ac8:	2026      	movs	r0, #38	; 0x26
 8001aca:	f001 f949 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8001ace:	220f      	movs	r2, #15
 8001ad0:	4925      	ldr	r1, [pc, #148]	; (8001b68 <ili9341_Init+0x194>)
 8001ad2:	20e0      	movs	r0, #224	; 0xe0
 8001ad4:	f001 f944 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8001ad8:	220f      	movs	r2, #15
 8001ada:	4924      	ldr	r1, [pc, #144]	; (8001b6c <ili9341_Init+0x198>)
 8001adc:	20e1      	movs	r0, #225	; 0xe1
 8001ade:	f001 f93f 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8001ae2:	2036      	movs	r0, #54	; 0x36
 8001ae4:	f001 f8c2 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001ae8:	20e8      	movs	r0, #232	; 0xe8
 8001aea:	f001 f8db 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8001aee:	2011      	movs	r0, #17
 8001af0:	f001 f8bc 	bl	8002c6c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001af4:	200a      	movs	r0, #10
 8001af6:	f001 f803 	bl	8002b00 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8001afa:	2300      	movs	r3, #0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	23f0      	movs	r3, #240	; 0xf0
 8001b00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b04:	2100      	movs	r1, #0
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 fa2c 	bl	8001f64 <ili9341_FillRect>
  LCD_Delay(10);
 8001b0c:	200a      	movs	r0, #10
 8001b0e:	f000 fff7 	bl	8002b00 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8001b12:	2029      	movs	r0, #41	; 0x29
 8001b14:	f001 f8aa 	bl	8002c6c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f000 fff1 	bl	8002b00 <LCD_Delay>
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000428 	.word	0x20000428
 8001b28:	08004e54 	.word	0x08004e54
 8001b2c:	08004e58 	.word	0x08004e58
 8001b30:	08004e5c 	.word	0x08004e5c
 8001b34:	08004e64 	.word	0x08004e64
 8001b38:	08004e68 	.word	0x08004e68
 8001b3c:	08004e70 	.word	0x08004e70
 8001b40:	08004e74 	.word	0x08004e74
 8001b44:	08004e78 	.word	0x08004e78
 8001b48:	08004e7c 	.word	0x08004e7c
 8001b4c:	08004e80 	.word	0x08004e80
 8001b50:	08004e84 	.word	0x08004e84
 8001b54:	08004e88 	.word	0x08004e88
 8001b58:	08004e8c 	.word	0x08004e8c
 8001b5c:	08004e90 	.word	0x08004e90
 8001b60:	08004e94 	.word	0x08004e94
 8001b64:	08004e98 	.word	0x08004e98
 8001b68:	08004e9c 	.word	0x08004e9c
 8001b6c:	08004eac 	.word	0x08004eac

08001b70 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	80fb      	strh	r3, [r7, #6]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001b80:	202a      	movs	r0, #42	; 0x2a
 8001b82:	f001 f873 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 f888 	bl	8002ca4 <LCD_IO_WriteData8>
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 f883 	bl	8002ca4 <LCD_IO_WriteData8>
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f001 f87c 	bl	8002ca4 <LCD_IO_WriteData8>
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 f877 	bl	8002ca4 <LCD_IO_WriteData8>
 8001bb6:	202b      	movs	r0, #43	; 0x2b
 8001bb8:	f001 f858 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 f86d 	bl	8002ca4 <LCD_IO_WriteData8>
 8001bca:	88bb      	ldrh	r3, [r7, #4]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 f868 	bl	8002ca4 <LCD_IO_WriteData8>
 8001bd4:	88bb      	ldrh	r3, [r7, #4]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f001 f861 	bl	8002ca4 <LCD_IO_WriteData8>
 8001be2:	88bb      	ldrh	r3, [r7, #4]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 f85c 	bl	8002ca4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	80bb      	strh	r3, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001c06:	202a      	movs	r0, #42	; 0x2a
 8001c08:	f001 f830 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 f845 	bl	8002ca4 <LCD_IO_WriteData8>
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 f840 	bl	8002ca4 <LCD_IO_WriteData8>
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 f839 	bl	8002ca4 <LCD_IO_WriteData8>
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 f834 	bl	8002ca4 <LCD_IO_WriteData8>
 8001c3c:	202b      	movs	r0, #43	; 0x2b
 8001c3e:	f001 f815 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001c42:	88bb      	ldrh	r3, [r7, #4]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 f82a 	bl	8002ca4 <LCD_IO_WriteData8>
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 f825 	bl	8002ca4 <LCD_IO_WriteData8>
 8001c5a:	88bb      	ldrh	r3, [r7, #4]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 f81e 	bl	8002ca4 <LCD_IO_WriteData8>
 8001c68:	88bb      	ldrh	r3, [r7, #4]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 f819 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8001c72:	202c      	movs	r0, #44	; 0x2c
 8001c74:	f000 fffa 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f001 f82e 	bl	8002cdc <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460a      	mov	r2, r1
 8001c92:	80fb      	strh	r3, [r7, #6]
 8001c94:	4613      	mov	r3, r2
 8001c96:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4925      	ldr	r1, [pc, #148]	; (8001d30 <ili9341_ReadPixel+0xa8>)
 8001c9c:	203a      	movs	r0, #58	; 0x3a
 8001c9e:	f001 f85f 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001ca2:	202a      	movs	r0, #42	; 0x2a
 8001ca4:	f000 ffe2 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fff7 	bl	8002ca4 <LCD_IO_WriteData8>
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fff2 	bl	8002ca4 <LCD_IO_WriteData8>
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 ffeb 	bl	8002ca4 <LCD_IO_WriteData8>
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 ffe6 	bl	8002ca4 <LCD_IO_WriteData8>
 8001cd8:	202b      	movs	r0, #43	; 0x2b
 8001cda:	f000 ffc7 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001cde:	88bb      	ldrh	r3, [r7, #4]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 ffdc 	bl	8002ca4 <LCD_IO_WriteData8>
 8001cec:	88bb      	ldrh	r3, [r7, #4]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 ffd7 	bl	8002ca4 <LCD_IO_WriteData8>
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 ffd0 	bl	8002ca4 <LCD_IO_WriteData8>
 8001d04:	88bb      	ldrh	r3, [r7, #4]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 ffcb 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 8001d0e:	f107 010e 	add.w	r1, r7, #14
 8001d12:	2301      	movs	r3, #1
 8001d14:	2201      	movs	r2, #1
 8001d16:	202e      	movs	r0, #46	; 0x2e
 8001d18:	f001 f88c 	bl	8002e34 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4905      	ldr	r1, [pc, #20]	; (8001d34 <ili9341_ReadPixel+0xac>)
 8001d20:	203a      	movs	r0, #58	; 0x3a
 8001d22:	f001 f81d 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 8001d26:	89fb      	ldrh	r3, [r7, #14]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	08004ebc 	.word	0x08004ebc
 8001d34:	08004e8c 	.word	0x08004e8c

08001d38 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4604      	mov	r4, r0
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	80fb      	strh	r3, [r7, #6]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80bb      	strh	r3, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	807b      	strh	r3, [r7, #2]
 8001d52:	4613      	mov	r3, r2
 8001d54:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8001d56:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <ili9341_SetDisplayWindow+0xc8>)
 8001d58:	88bb      	ldrh	r3, [r7, #4]
 8001d5a:	8013      	strh	r3, [r2, #0]
 8001d5c:	88ba      	ldrh	r2, [r7, #4]
 8001d5e:	883b      	ldrh	r3, [r7, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <ili9341_SetDisplayWindow+0xcc>)
 8001d6a:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8001d6c:	202a      	movs	r0, #42	; 0x2a
 8001d6e:	f000 ff7d 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 ff92 	bl	8002ca4 <LCD_IO_WriteData8>
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 ff8d 	bl	8002ca4 <LCD_IO_WriteData8>
 8001d8a:	88fa      	ldrh	r2, [r7, #6]
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b01      	subs	r3, #1
 8001d92:	121b      	asrs	r3, r3, #8
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 ff84 	bl	8002ca4 <LCD_IO_WriteData8>
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 ff79 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001db2:	202b      	movs	r0, #43	; 0x2b
 8001db4:	f000 ff5a 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 ff6f 	bl	8002ca4 <LCD_IO_WriteData8>
 8001dc6:	88bb      	ldrh	r3, [r7, #4]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 ff6a 	bl	8002ca4 <LCD_IO_WriteData8>
 8001dd0:	88ba      	ldrh	r2, [r7, #4]
 8001dd2:	883b      	ldrh	r3, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	121b      	asrs	r3, r3, #8
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 ff61 	bl	8002ca4 <LCD_IO_WriteData8>
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	883b      	ldrh	r3, [r7, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 ff56 	bl	8002ca4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	2000042a 	.word	0x2000042a
 8001e04:	2000042c 	.word	0x2000042c

08001e08 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	80fb      	strh	r3, [r7, #6]
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80bb      	strh	r3, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	807b      	strh	r3, [r7, #2]
 8001e22:	4613      	mov	r3, r2
 8001e24:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8001e26:	202a      	movs	r0, #42	; 0x2a
 8001e28:	f000 ff20 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 ff35 	bl	8002ca4 <LCD_IO_WriteData8>
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ff30 	bl	8002ca4 <LCD_IO_WriteData8>
 8001e44:	88ba      	ldrh	r2, [r7, #4]
 8001e46:	883b      	ldrh	r3, [r7, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	121b      	asrs	r3, r3, #8
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 ff27 	bl	8002ca4 <LCD_IO_WriteData8>
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	883b      	ldrh	r3, [r7, #0]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 ff1c 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8001e6c:	202b      	movs	r0, #43	; 0x2b
 8001e6e:	f000 fefd 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 ff12 	bl	8002ca4 <LCD_IO_WriteData8>
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 ff0d 	bl	8002ca4 <LCD_IO_WriteData8>
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 ff06 	bl	8002ca4 <LCD_IO_WriteData8>
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 ff01 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8001ea2:	883a      	ldrh	r2, [r7, #0]
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	202c      	movs	r0, #44	; 0x2c
 8001eaa:	f000 ff33 	bl	8002d14 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}

08001eb6 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001eb6:	b590      	push	{r4, r7, lr}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	4608      	mov	r0, r1
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	80fb      	strh	r3, [r7, #6]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	80bb      	strh	r3, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8001ed4:	202a      	movs	r0, #42	; 0x2a
 8001ed6:	f000 fec9 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fede 	bl	8002ca4 <LCD_IO_WriteData8>
 8001ee8:	88bb      	ldrh	r3, [r7, #4]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fed9 	bl	8002ca4 <LCD_IO_WriteData8>
 8001ef2:	88bb      	ldrh	r3, [r7, #4]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fed2 	bl	8002ca4 <LCD_IO_WriteData8>
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fecd 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8001f0a:	202b      	movs	r0, #43	; 0x2b
 8001f0c:	f000 feae 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fec3 	bl	8002ca4 <LCD_IO_WriteData8>
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 febe 	bl	8002ca4 <LCD_IO_WriteData8>
 8001f28:	887a      	ldrh	r2, [r7, #2]
 8001f2a:	883b      	ldrh	r3, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	121b      	asrs	r3, r3, #8
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 feb5 	bl	8002ca4 <LCD_IO_WriteData8>
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	883b      	ldrh	r3, [r7, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 feaa 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8001f50:	883a      	ldrh	r2, [r7, #0]
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4619      	mov	r1, r3
 8001f56:	202c      	movs	r0, #44	; 0x2c
 8001f58:	f000 fedc 	bl	8002d14 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}

08001f64 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	4623      	mov	r3, r4
 8001f74:	80fb      	strh	r3, [r7, #6]
 8001f76:	4603      	mov	r3, r0
 8001f78:	80bb      	strh	r3, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	807b      	strh	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8001f82:	202a      	movs	r0, #42	; 0x2a
 8001f84:	f000 fe72 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fe87 	bl	8002ca4 <LCD_IO_WriteData8>
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fe82 	bl	8002ca4 <LCD_IO_WriteData8>
 8001fa0:	88fa      	ldrh	r2, [r7, #6]
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	121b      	asrs	r3, r3, #8
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fe79 	bl	8002ca4 <LCD_IO_WriteData8>
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fe6e 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8001fc8:	202b      	movs	r0, #43	; 0x2b
 8001fca:	f000 fe4f 	bl	8002c6c <LCD_IO_WriteCmd8>
 8001fce:	88bb      	ldrh	r3, [r7, #4]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fe64 	bl	8002ca4 <LCD_IO_WriteData8>
 8001fdc:	88bb      	ldrh	r3, [r7, #4]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fe5f 	bl	8002ca4 <LCD_IO_WriteData8>
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	883b      	ldrh	r3, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	3b01      	subs	r3, #1
 8001fee:	121b      	asrs	r3, r3, #8
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fe56 	bl	8002ca4 <LCD_IO_WriteData8>
 8001ff8:	88bb      	ldrh	r3, [r7, #4]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	883b      	ldrh	r3, [r7, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4413      	add	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fe4b 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	883a      	ldrh	r2, [r7, #0]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	461a      	mov	r2, r3
 8002018:	8b3b      	ldrh	r3, [r7, #24]
 800201a:	4619      	mov	r1, r3
 800201c:	202c      	movs	r0, #44	; 0x2c
 800201e:	f000 fe79 	bl	8002d14 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
	...

0800202c <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	603a      	str	r2, [r7, #0]
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	460b      	mov	r3, r1
 800203a:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002042:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800204a:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4413      	add	r3, r2
 800205c:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 800205e:	2036      	movs	r0, #54	; 0x36
 8002060:	f000 fe04 	bl	8002c6c <LCD_IO_WriteCmd8>
 8002064:	20a8      	movs	r0, #168	; 0xa8
 8002066:	f000 fe1d 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 800206a:	202b      	movs	r0, #43	; 0x2b
 800206c:	f000 fdfe 	bl	8002c6c <LCD_IO_WriteCmd8>
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <ili9341_DrawBitmap+0xb0>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002078:	121b      	asrs	r3, r3, #8
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fe11 	bl	8002ca4 <LCD_IO_WriteData8>
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <ili9341_DrawBitmap+0xb0>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	f06f 0310 	mvn.w	r3, #16
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	b2db      	uxtb	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fe07 	bl	8002ca4 <LCD_IO_WriteData8>
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <ili9341_DrawBitmap+0xb4>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800209e:	121b      	asrs	r3, r3, #8
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fdfe 	bl	8002ca4 <LCD_IO_WriteData8>
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <ili9341_DrawBitmap+0xb4>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	f06f 0310 	mvn.w	r3, #16
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fdf4 	bl	8002ca4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	202c      	movs	r0, #44	; 0x2c
 80020c2:	f000 fe6d 	bl	8002da0 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80020c6:	2036      	movs	r0, #54	; 0x36
 80020c8:	f000 fdd0 	bl	8002c6c <LCD_IO_WriteCmd8>
 80020cc:	20e8      	movs	r0, #232	; 0xe8
 80020ce:	f000 fde9 	bl	8002ca4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000042c 	.word	0x2000042c
 80020e0:	2000042a 	.word	0x2000042a

080020e4 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	80fb      	strh	r3, [r7, #6]
 80020f6:	4603      	mov	r3, r0
 80020f8:	80bb      	strh	r3, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]
 80020fe:	4613      	mov	r3, r2
 8002100:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002102:	883b      	ldrh	r3, [r7, #0]
 8002104:	887a      	ldrh	r2, [r7, #2]
 8002106:	88b9      	ldrh	r1, [r7, #4]
 8002108:	88f8      	ldrh	r0, [r7, #6]
 800210a:	f7ff fe15 	bl	8001d38 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	883a      	ldrh	r2, [r7, #0]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	461a      	mov	r2, r3
 8002118:	69b9      	ldr	r1, [r7, #24]
 800211a:	202c      	movs	r0, #44	; 0x2c
 800211c:	f000 fe40 	bl	8002da0 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}

08002128 <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4604      	mov	r4, r0
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4623      	mov	r3, r4
 8002138:	80fb      	strh	r3, [r7, #6]
 800213a:	4603      	mov	r3, r0
 800213c:	80bb      	strh	r3, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]
 8002142:	4613      	mov	r3, r2
 8002144:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8002146:	883b      	ldrh	r3, [r7, #0]
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	88b9      	ldrh	r1, [r7, #4]
 800214c:	88f8      	ldrh	r0, [r7, #6]
 800214e:	f7ff fdf3 	bl	8001d38 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8002152:	2201      	movs	r2, #1
 8002154:	490b      	ldr	r1, [pc, #44]	; (8002184 <ili9341_ReadRGBImage+0x5c>)
 8002156:	203a      	movs	r0, #58	; 0x3a
 8002158:	f000 fe02 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	883a      	ldrh	r2, [r7, #0]
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	461a      	mov	r2, r3
 8002166:	2301      	movs	r3, #1
 8002168:	69b9      	ldr	r1, [r7, #24]
 800216a:	202e      	movs	r0, #46	; 0x2e
 800216c:	f000 fe62 	bl	8002e34 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8002170:	2201      	movs	r2, #1
 8002172:	4905      	ldr	r1, [pc, #20]	; (8002188 <ili9341_ReadRGBImage+0x60>)
 8002174:	203a      	movs	r0, #58	; 0x3a
 8002176:	f000 fdf3 	bl	8002d60 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	bf00      	nop
 8002184:	08004ebc 	.word	0x08004ebc
 8002188:	08004e8c 	.word	0x08004e8c

0800218c <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	80fb      	strh	r3, [r7, #6]
 8002196:	460b      	mov	r3, r1
 8002198:	80bb      	strh	r3, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <ili9341_Scroll+0xb4>)
 80021a0:	88db      	ldrh	r3, [r3, #6]
 80021a2:	88ba      	ldrh	r2, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d104      	bne.n	80021b2 <ili9341_Scroll+0x26>
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <ili9341_Scroll+0xb4>)
 80021aa:	885b      	ldrh	r3, [r3, #2]
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d013      	beq.n	80021da <ili9341_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 80021b2:	4a23      	ldr	r2, [pc, #140]	; (8002240 <ili9341_Scroll+0xb4>)
 80021b4:	88bb      	ldrh	r3, [r7, #4]
 80021b6:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 80021b8:	4a21      	ldr	r2, [pc, #132]	; (8002240 <ili9341_Scroll+0xb4>)
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 80021be:	88ba      	ldrh	r2, [r7, #4]
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	4413      	add	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <ili9341_Scroll+0xb4>)
 80021ce:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 80021d0:	2203      	movs	r2, #3
 80021d2:	491c      	ldr	r1, [pc, #112]	; (8002244 <ili9341_Scroll+0xb8>)
 80021d4:	2033      	movs	r0, #51	; 0x33
 80021d6:	f000 fde3 	bl	8002da0 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <ili9341_Scroll+0xb4>)
 80021e0:	8892      	ldrh	r2, [r2, #4]
 80021e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80021e6:	fb01 f202 	mul.w	r2, r1, r2
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 80021ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da0a      	bge.n	800220c <ili9341_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <ili9341_Scroll+0xb4>)
 80021f8:	889a      	ldrh	r2, [r3, #4]
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	4413      	add	r3, r2
 80021fe:	b29a      	uxth	r2, r3
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <ili9341_Scroll+0xb4>)
 8002202:	885b      	ldrh	r3, [r3, #2]
 8002204:	4413      	add	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	80fb      	strh	r3, [r7, #6]
 800220a:	e005      	b.n	8002218 <ili9341_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <ili9341_Scroll+0xb4>)
 800220e:	885a      	ldrh	r2, [r3, #2]
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	4413      	add	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8002218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221c:	4a08      	ldr	r2, [pc, #32]	; (8002240 <ili9341_Scroll+0xb4>)
 800221e:	8812      	ldrh	r2, [r2, #0]
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <ili9341_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <ili9341_Scroll+0xb4>)
 8002228:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <ili9341_Scroll+0xb4>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	2201      	movs	r2, #1
 8002230:	4619      	mov	r1, r3
 8002232:	2037      	movs	r0, #55	; 0x37
 8002234:	f000 fd6e 	bl	8002d14 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000430 	.word	0x20000430
 8002244:	20000432 	.word	0x20000432

08002248 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <BSP_LCD_Init+0x3c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <BSP_LCD_Init+0x40>)
 800225c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002260:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <BSP_LCD_Init+0x40>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <BSP_LCD_Init+0x40>)
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <BSP_LCD_Init+0x44>)
 800226c:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 800226e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002272:	f000 f825 	bl	80022c0 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800227a:	79fb      	ldrb	r3, [r7, #7]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000070 	.word	0x20000070
 8002288:	20000438 	.word	0x20000438
 800228c:	20000000 	.word	0x20000000

08002290 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <BSP_LCD_GetXSize+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	4798      	blx	r3
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000070 	.word	0x20000070

080022a8 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <BSP_LCD_GetYSize+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	4798      	blx	r3
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000070 	.word	0x20000070

080022c0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <BSP_LCD_Clear+0x38>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80022d0:	f7ff ffde 	bl	8002290 <BSP_LCD_GetXSize>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461d      	mov	r5, r3
 80022d8:	f7ff ffe6 	bl	80022a8 <BSP_LCD_GetYSize>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	462a      	mov	r2, r5
 80022e8:	2100      	movs	r1, #0
 80022ea:	2000      	movs	r0, #0
 80022ec:	47a0      	blx	r4
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdb0      	pop	{r4, r5, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000070 	.word	0x20000070

080022fc <__NVIC_EnableIRQ>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <__NVIC_EnableIRQ+0x34>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <LcdDirRead+0x70>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <LcdDirRead+0x70>)
 800239a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800239e:	6013      	str	r3, [r2, #0]
  while(d--)
 80023a0:	e008      	b.n	80023b4 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <LcdDirRead+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 80023a8:	2000      	movs	r0, #0
 80023aa:	f000 fb99 	bl	8002ae0 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <LcdDirRead+0x74>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
  while(d--)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	1e5a      	subs	r2, r3, #1
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f1      	bne.n	80023a2 <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <LcdDirRead+0x70>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80023c6:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <LcdDirRead+0x70>)
 80023c8:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80023cc:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80023ce:	e002      	b.n	80023d6 <LcdDirRead+0x4e>
    d = SPIX->DR;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <LcdDirRead+0x78>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <LcdDirRead+0x7c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f8      	bne.n	80023d0 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <LcdDirRead+0x78>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <LcdDirRead+0x78>)
 80023e8:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 80023ec:	6013      	str	r3, [r2, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40010c04 	.word	0x40010c04
 80023fc:	422181b4 	.word	0x422181b4
 8002400:	40003800 	.word	0x40003800
 8002404:	42070100 	.word	0x42070100

08002408 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <LcdDirWrite+0x5c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a14      	ldr	r2, [pc, #80]	; (8002464 <LcdDirWrite+0x5c>)
 8002414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002418:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800241a:	e002      	b.n	8002422 <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <LcdDirWrite+0x5c>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <LcdDirWrite+0x60>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f8      	bne.n	800241c <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <LcdDirWrite+0x5c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <LcdDirWrite+0x5c>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 fb50 	bl	8002ae0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002440:	e002      	b.n	8002448 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <LcdDirWrite+0x5c>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <LcdDirWrite+0x60>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f8      	bne.n	8002442 <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <LcdDirWrite+0x5c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <LcdDirWrite+0x5c>)
 8002456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40003800 	.word	0x40003800
 8002468:	42070100 	.word	0x42070100

0800246c <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <LcdWrite8+0x2c>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 800247c:	2002      	movs	r0, #2
 800247e:	f000 fb2f 	bl	8002ae0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8002482:	bf00      	nop
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <LcdWrite8+0x30>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1fb      	bne.n	8002484 <LcdWrite8+0x18>
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40003800 	.word	0x40003800
 800249c:	4207011c 	.word	0x4207011c

080024a0 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <LcdCmdWrite8+0x34>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <LcdCmdWrite8+0x38>)
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f000 fb12 	bl	8002ae0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80024bc:	bf00      	nop
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <LcdCmdWrite8+0x3c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1fb      	bne.n	80024be <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 80024c6:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <LcdCmdWrite8+0x34>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	422181ac 	.word	0x422181ac
 80024d8:	40003800 	.word	0x40003800
 80024dc:	4207011c 	.word	0x4207011c

080024e0 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <LcdWrite16+0x2c>)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 faf5 	bl	8002ae0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80024f6:	bf00      	nop
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <LcdWrite16+0x30>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1fb      	bne.n	80024f8 <LcdWrite16+0x18>
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40003800 	.word	0x40003800
 8002510:	4207011c 	.word	0x4207011c

08002514 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8002518:	bf00      	nop
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <WaitForDmaEnd+0x18>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1fb      	bne.n	800251a <WaitForDmaEnd+0x6>
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000444 	.word	0x20000444

08002530 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <DMA1_Channel5_IRQHandler+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d023      	beq.n	8002588 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <DMA1_Channel5_IRQHandler+0x64>)
 8002542:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002546:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <DMA1_Channel5_IRQHandler+0x68>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 800254e:	bf00      	nop
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <DMA1_Channel5_IRQHandler+0x68>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f9      	bne.n	8002550 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <DMA1_Channel5_IRQHandler+0x6c>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8002562:	bf00      	nop
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <DMA1_Channel5_IRQHandler+0x70>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1fb      	bne.n	8002564 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 800256c:	2003      	movs	r0, #3
 800256e:	f000 fab7 	bl	8002ae0 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <DMA1_Channel5_IRQHandler+0x74>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <DMA1_Channel5_IRQHandler+0x78>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <DMA1_Channel5_IRQHandler+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8002586:	e003      	b.n	8002590 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8002588:	4b02      	ldr	r3, [pc, #8]	; (8002594 <DMA1_Channel5_IRQHandler+0x64>)
 800258a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800258e:	605a      	str	r2, [r3, #4]
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40020000 	.word	0x40020000
 8002598:	40020058 	.word	0x40020058
 800259c:	42070084 	.word	0x42070084
 80025a0:	4207011c 	.word	0x4207011c
 80025a4:	20000444 	.word	0x20000444
 80025a8:	422181b0 	.word	0x422181b0

080025ac <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <LCD_IO_WriteMultiData+0x74>)
 80025ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025be:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <LCD_IO_WriteMultiData+0x78>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <LCD_IO_WriteMultiData+0x78>)
 80025c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ca:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 80025d2:	bf00      	nop
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <LCD_IO_WriteMultiData+0x80>)
 80025ea:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 80025ec:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 80025f2:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <LCD_IO_WriteMultiData+0x84>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <LCD_IO_WriteMultiData+0x78>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <LCD_IO_WriteMultiData+0x78>)
 8002604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002608:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <LCD_IO_WriteMultiData+0x7c>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6013      	str	r3, [r2, #0]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40020000 	.word	0x40020000
 8002624:	40003800 	.word	0x40003800
 8002628:	40020058 	.word	0x40020058
 800262c:	4000380c 	.word	0x4000380c
 8002630:	42070084 	.word	0x42070084

08002634 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <LCD_IO_WriteMultiData8+0x98>)
 800264c:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <LCD_IO_WriteMultiData8+0x98>)
 8002650:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8002652:	f241 0312 	movw	r3, #4114	; 0x1012
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e030      	b.n	80026bc <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 800265a:	f241 0392 	movw	r3, #4242	; 0x1092
 800265e:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8002660:	e02c      	b.n	80026bc <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002668:	4293      	cmp	r3, r2
 800266a:	d80f      	bhi.n	800268c <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <LCD_IO_WriteMultiData8+0x9c>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff ff98 	bl	80025ac <LCD_IO_WriteMultiData>
      Size = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01a      	beq.n	80026bc <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8002686:	f7ff ff45 	bl	8002514 <WaitForDmaEnd>
 800268a:	e017      	b.n	80026bc <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <LCD_IO_WriteMultiData8+0x9c>)
 800268e:	2202      	movs	r2, #2
 8002690:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff ff87 	bl	80025ac <LCD_IO_WriteMultiData>
      if(dinc)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80026aa:	33fe      	adds	r3, #254	; 0xfe
 80026ac:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80026b4:	3bfe      	subs	r3, #254	; 0xfe
 80026b6:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 80026b8:	f7ff ff2c 	bl	8002514 <WaitForDmaEnd>
  while(Size)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1cf      	bne.n	8002662 <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000448 	.word	0x20000448
 80026d0:	20000444 	.word	0x20000444

080026d4 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <LCD_IO_WriteMultiData16+0xdc>)
 80026ec:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <LCD_IO_WriteMultiData16+0xdc>)
 80026f0:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 80026f2:	f241 5312 	movw	r3, #5394	; 0x1512
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e051      	b.n	800279e <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 80026fa:	f241 5392 	movw	r3, #5522	; 0x1592
 80026fe:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8002700:	e04d      	b.n	800279e <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002708:	4293      	cmp	r3, r2
 800270a:	d80f      	bhi.n	800272c <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <LCD_IO_WriteMultiData16+0xe0>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff ff48 	bl	80025ac <LCD_IO_WriteMultiData>
      Size = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03b      	beq.n	800279e <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 8002726:	f7ff fef5 	bl	8002514 <WaitForDmaEnd>
 800272a:	e038      	b.n	800279e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <LCD_IO_WriteMultiData16+0xe4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d81b      	bhi.n	800276c <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <LCD_IO_WriteMultiData16+0xe0>)
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002740:	3bfe      	subs	r3, #254	; 0xfe
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4619      	mov	r1, r3
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff ff30 	bl	80025ac <LCD_IO_WriteMultiData>
      if(dinc)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d006      	beq.n	8002760 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <LCD_IO_WriteMultiData16+0xe8>)
 8002756:	4413      	add	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8002760:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002764:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8002766:	f7ff fed5 	bl	8002514 <WaitForDmaEnd>
 800276a:	e018      	b.n	800279e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <LCD_IO_WriteMultiData16+0xe0>)
 800276e:	2202      	movs	r2, #2
 8002770:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ff17 	bl	80025ac <LCD_IO_WriteMultiData>
      if(dinc)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800278a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800278e:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002796:	3bfe      	subs	r3, #254	; 0xfe
 8002798:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 800279a:	f7ff febb 	bl	8002514 <WaitForDmaEnd>
  while(Size)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ae      	bne.n	8002702 <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000044a 	.word	0x2000044a
 80027b4:	20000444 	.word	0x20000444
 80027b8:	0001fffb 	.word	0x0001fffb
 80027bc:	7fff0002 	.word	0x7fff0002

080027c0 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <DMA1_Channel4_IRQHandler+0x98>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03a      	beq.n	8002848 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <DMA1_Channel4_IRQHandler+0x98>)
 80027d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d8:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <DMA1_Channel4_IRQHandler+0x9c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80027e0:	e002      	b.n	80027e8 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <DMA1_Channel4_IRQHandler+0xa0>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <DMA1_Channel4_IRQHandler+0xa4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f8      	bne.n	80027e2 <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <DMA1_Channel4_IRQHandler+0xa8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80027fc:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <DMA1_Channel4_IRQHandler+0xa8>)
 80027fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002802:	f043 0318 	orr.w	r3, r3, #24
 8002806:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002808:	2001      	movs	r0, #1
 800280a:	f000 f969 	bl	8002ae0 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800280e:	e003      	b.n	8002818 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <DMA1_Channel4_IRQHandler+0xa8>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <DMA1_Channel4_IRQHandler+0xa4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f7      	bne.n	8002810 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <DMA1_Channel4_IRQHandler+0xa8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a10      	ldr	r2, [pc, #64]	; (8002868 <DMA1_Channel4_IRQHandler+0xa8>)
 8002826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282a:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <DMA1_Channel4_IRQHandler+0xac>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002832:	bf00      	nop
 8002834:	4b0d      	ldr	r3, [pc, #52]	; (800286c <DMA1_Channel4_IRQHandler+0xac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f9      	bne.n	8002834 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <DMA1_Channel4_IRQHandler+0xb0>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8002846:	e003      	b.n	8002850 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <DMA1_Channel4_IRQHandler+0x98>)
 800284a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800284e:	605a      	str	r2, [r3, #4]
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40020000 	.word	0x40020000
 800285c:	42070080 	.word	0x42070080
 8002860:	4000380c 	.word	0x4000380c
 8002864:	42070100 	.word	0x42070100
 8002868:	40003800 	.word	0x40003800
 800286c:	40020044 	.word	0x40020044
 8002870:	20000444 	.word	0x20000444

08002874 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <LCD_IO_ReadMultiData+0x5c>)
 8002882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002886:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800288e:	bf00      	nop
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 80028a4:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <LCD_IO_ReadMultiData+0x64>)
 80028a6:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <LCD_IO_ReadMultiData+0x60>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <LCD_IO_ReadMultiData+0x68>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020044 	.word	0x40020044
 80028d8:	4000380c 	.word	0x4000380c
 80028dc:	42070080 	.word	0x42070080

080028e0 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 80028ea:	f241 0382 	movw	r3, #4226	; 0x1082
 80028ee:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 80028f0:	e024      	b.n	800293c <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d913      	bls.n	8002924 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <LCD_IO_ReadMultiData8+0x74>)
 80028fe:	2202      	movs	r2, #2
 8002900:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ffb3 	bl	8002874 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002914:	3bfe      	subs	r3, #254	; 0xfe
 8002916:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800291e:	33fe      	adds	r3, #254	; 0xfe
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	e009      	b.n	8002938 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <LCD_IO_ReadMultiData8+0x74>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa0 	bl	8002874 <LCD_IO_ReadMultiData>
      Size = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8002938:	f7ff fdec 	bl	8002514 <WaitForDmaEnd>
  while(Size)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1d7      	bne.n	80028f2 <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <LCD_IO_ReadMultiData8+0x78>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8002948:	f7ff fd5e 	bl	8002408 <LcdDirWrite>
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000444 	.word	0x20000444
 8002958:	422181b0 	.word	0x422181b0

0800295c <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <LCD_IO_ReadMultiData16to24+0x164>)
 8002970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002974:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8002976:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800297c:	bf00      	nop
 800297e:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 800298a:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 800298c:	4a4e      	ldr	r2, [pc, #312]	; (8002ac8 <LCD_IO_ReadMultiData16to24+0x16c>)
 800298e:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8002990:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 8002992:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <LCD_IO_ReadMultiData16to24+0x170>)
 8002994:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8002996:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 8002998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299c:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 800299e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a2:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 80029a4:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 80029a6:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 80029aa:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 80029ac:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a44      	ldr	r2, [pc, #272]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 80029b8:	4b45      	ldr	r3, [pc, #276]	; (8002ad0 <LCD_IO_ReadMultiData16to24+0x174>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
  while(Size)
 80029be:	e044      	b.n	8002a4a <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 80029c0:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d03f      	beq.n	8002a4a <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 80029d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029da:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	1c53      	adds	r3, r2, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	6139      	str	r1, [r7, #16]
 80029ee:	4936      	ldr	r1, [pc, #216]	; (8002ac8 <LCD_IO_ReadMultiData16to24+0x16c>)
 80029f0:	5c8a      	ldrb	r2, [r1, r2]
 80029f2:	3318      	adds	r3, #24
 80029f4:	443b      	add	r3, r7
 80029f6:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2bff      	cmp	r3, #255	; 0xff
 80029fe:	d901      	bls.n	8002a04 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d11f      	bne.n	8002a4a <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
        Size--;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8002a14:	7a3b      	ldrb	r3, [r7, #8]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a1e:	f023 0307 	bic.w	r3, r3, #7
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	7a7b      	ldrb	r3, [r7, #9]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	4313      	orrs	r3, r2
 8002a32:	b21a      	sxth	r2, r3
 8002a34:	7abb      	ldrb	r3, [r7, #10]
 8002a36:	08db      	lsrs	r3, r3, #3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	b21b      	sxth	r3, r3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b219      	sxth	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	b28a      	uxth	r2, r1
 8002a48:	801a      	strh	r2, [r3, #0]
  while(Size)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1b7      	bne.n	80029c0 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <LCD_IO_ReadMultiData16to24+0x174>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a56:	e003      	b.n	8002a60 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <LCD_IO_ReadMultiData16to24+0x178>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f7      	bne.n	8002a58 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <LCD_IO_ReadMultiData16to24+0x178>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a70:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002a74:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <LCD_IO_ReadMultiData16to24+0x178>)
 8002a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f000 f82d 	bl	8002ae0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a86:	e003      	b.n	8002a90 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <LCD_IO_ReadMultiData16to24+0x178>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f7      	bne.n	8002a88 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002a9e:	bf00      	nop
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <LCD_IO_ReadMultiData16to24+0x168>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f9      	bne.n	8002aa0 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <LCD_IO_ReadMultiData16to24+0x180>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8002ab2:	f7ff fca9 	bl	8002408 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020044 	.word	0x40020044
 8002ac8:	20000450 	.word	0x20000450
 8002acc:	4000380c 	.word	0x4000380c
 8002ad0:	42070080 	.word	0x42070080
 8002ad4:	40003800 	.word	0x40003800
 8002ad8:	42070100 	.word	0x42070100
 8002adc:	422181b0 	.word	0x422181b0

08002ae0 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  while(c--);
 8002ae8:	bf00      	nop
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1fa      	bne.n	8002aea <LCD_IO_Delay+0xa>
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa1b 	bl	8002f44 <HAL_Delay>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <LCD_IO_Bl_OnOff+0x28>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8002b2e:	e002      	b.n	8002b36 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <LCD_IO_Bl_OnOff+0x28>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	42220198 	.word	0x42220198

08002b44 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <LCD_IO_Init+0x104>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a3e      	ldr	r2, [pc, #248]	; (8002c48 <LCD_IO_Init+0x104>)
 8002b4e:	f043 0318 	orr.w	r3, r3, #24
 8002b52:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 8002b54:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <LCD_IO_Init+0x104>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <LCD_IO_Init+0x104>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <LCD_IO_Init+0x108>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002b68:	4a38      	ldr	r2, [pc, #224]	; (8002c4c <LCD_IO_Init+0x108>)
 8002b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b6e:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <LCD_IO_Init+0x10c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002b78:	4a35      	ldr	r2, [pc, #212]	; (8002c50 <LCD_IO_Init+0x10c>)
 8002b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7ff ffc9 	bl	8002b18 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <LCD_IO_Init+0x108>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <LCD_IO_Init+0x108>)
 8002b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b94:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <LCD_IO_Init+0x110>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <LCD_IO_Init+0x114>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <LCD_IO_Init+0x118>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <LCD_IO_Init+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb0:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <LCD_IO_Init+0x108>)
 8002bb2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002bb6:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <LCD_IO_Init+0x108>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <LCD_IO_Init+0x108>)
 8002bc2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002bc6:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <LCD_IO_Init+0x11c>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8002bce:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <LCD_IO_Init+0x120>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <LCD_IO_Init+0x108>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <LCD_IO_Init+0x108>)
 8002bde:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8002be2:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <LCD_IO_Init+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <LCD_IO_Init+0x108>)
 8002bee:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8002bf2:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <LCD_IO_Init+0x124>)
 8002bf6:	f240 324f 	movw	r2, #847	; 0x34f
 8002bfa:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <LCD_IO_Init+0x124>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <LCD_IO_Init+0x124>)
 8002c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c06:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8002c08:	200a      	movs	r0, #10
 8002c0a:	f7ff ff79 	bl	8002b00 <LCD_Delay>
  LCD_RST_ON;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <LCD_IO_Init+0x110>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8002c14:	200a      	movs	r0, #10
 8002c16:	f7ff ff73 	bl	8002b00 <LCD_Delay>
  LCD_RST_OFF;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <LCD_IO_Init+0x110>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8002c20:	200a      	movs	r0, #10
 8002c22:	f7ff ff6d 	bl	8002b00 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8002c26:	210f      	movs	r1, #15
 8002c28:	200f      	movs	r0, #15
 8002c2a:	f7ff fb83 	bl	8002334 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8002c2e:	200f      	movs	r0, #15
 8002c30:	f7ff fb64 	bl	80022fc <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8002c34:	210f      	movs	r1, #15
 8002c36:	200e      	movs	r0, #14
 8002c38:	f7ff fb7c 	bl	8002334 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8002c3c:	200e      	movs	r0, #14
 8002c3e:	f7ff fb5d 	bl	80022fc <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40010c04 	.word	0x40010c04
 8002c50:	40011000 	.word	0x40011000
 8002c54:	422181a8 	.word	0x422181a8
 8002c58:	422181ac 	.word	0x422181ac
 8002c5c:	422181b0 	.word	0x422181b0
 8002c60:	422181b4 	.word	0x422181b4
 8002c64:	424203b8 	.word	0x424203b8
 8002c68:	40003800 	.word	0x40003800

08002c6c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8002c76:	f7ff fc4d 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode8();
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <LCD_IO_WriteCmd8+0x30>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <LCD_IO_WriteCmd8+0x34>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fc09 	bl	80024a0 <LcdCmdWrite8>
  LCD_CS_OFF;
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <LCD_IO_WriteCmd8+0x34>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	4207002c 	.word	0x4207002c
 8002ca0:	422181b0 	.word	0x422181b0

08002ca4 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8002cae:	f7ff fc31 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode8();
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <LCD_IO_WriteData8+0x30>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <LCD_IO_WriteData8+0x34>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fbd3 	bl	800246c <LcdWrite8>
  LCD_CS_OFF;
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <LCD_IO_WriteData8+0x34>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	4207002c 	.word	0x4207002c
 8002cd8:	422181b0 	.word	0x422181b0

08002cdc <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
 8002ce6:	f7ff fc15 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode16();
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <LCD_IO_WriteData16+0x30>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <LCD_IO_WriteData16+0x34>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fbf1 	bl	80024e0 <LcdWrite16>
  LCD_CS_OFF;
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <LCD_IO_WriteData16+0x34>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	4207002c 	.word	0x4207002c
 8002d10:	422181b0 	.word	0x422181b0

08002d14 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	603a      	str	r2, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	460b      	mov	r3, r1
 8002d22:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8002d24:	f7ff fbf6 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode8();
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <LCD_IO_WriteCmd8DataFill16+0x48>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fbb2 	bl	80024a0 <LcdCmdWrite8>
  LcdSpiMode16();
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	2200      	movs	r2, #0
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fcc3 	bl	80026d4 <LCD_IO_WriteMultiData16>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	4207002c 	.word	0x4207002c
 8002d5c:	422181b0 	.word	0x422181b0

08002d60 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002d6e:	f7ff fbd1 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode8();
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fb8d 	bl	80024a0 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8002d86:	2201      	movs	r2, #1
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	68b8      	ldr	r0, [r7, #8]
 8002d8c:	f7ff fc52 	bl	8002634 <LCD_IO_WriteMultiData8>
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	4207002c 	.word	0x4207002c
 8002d9c:	422181b0 	.word	0x422181b0

08002da0 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002dae:	f7ff fbb1 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode8();
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fb6d 	bl	80024a0 <LcdCmdWrite8>
  LcdSpiMode16();
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68b8      	ldr	r0, [r7, #8]
 8002dd2:	f7ff fc7f 	bl	80026d4 <LCD_IO_WriteMultiData16>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	4207002c 	.word	0x4207002c
 8002de4:	422181b0 	.word	0x422181b0

08002de8 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4603      	mov	r3, r0
 8002df6:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002df8:	f7ff fb8c 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode8();
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fb48 	bl	80024a0 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f7ff fab6 	bl	8002388 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	68b8      	ldr	r0, [r7, #8]
 8002e20:	f7ff fd5e 	bl	80028e0 <LCD_IO_ReadMultiData8>
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	4207002c 	.word	0x4207002c
 8002e30:	422181b0 	.word	0x422181b0

08002e34 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4603      	mov	r3, r0
 8002e42:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8002e44:	f7ff fb66 	bl	8002514 <WaitForDmaEnd>
  LcdSpiMode8();
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fb22 	bl	80024a0 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	f7ff fa90 	bl	8002388 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	68b8      	ldr	r0, [r7, #8]
 8002e6c:	f7ff fd76 	bl	800295c <LCD_IO_ReadMultiData16to24>
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	4207002c 	.word	0x4207002c
 8002e7c:	422181b0 	.word	0x422181b0

08002e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_Init+0x28>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_Init+0x28>)
 8002e8a:	f043 0310 	orr.w	r3, r3, #16
 8002e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e90:	2003      	movs	r0, #3
 8002e92:	f000 fb59 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e96:	200f      	movs	r0, #15
 8002e98:	f000 f808 	bl	8002eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7fe f8c6 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40022000 	.word	0x40022000

08002eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_InitTick+0x54>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_InitTick+0x58>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fb71 	bl	80035b2 <HAL_SYSTICK_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00e      	b.n	8002ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	d80a      	bhi.n	8002ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	f000 fb39 	bl	800355e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <HAL_InitTick+0x5c>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000028 	.word	0x20000028
 8002f04:	20000078 	.word	0x20000078
 8002f08:	20000074 	.word	0x20000074

08002f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_IncTick+0x1c>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_IncTick+0x20>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <HAL_IncTick+0x20>)
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000078 	.word	0x20000078
 8002f2c:	20000550 	.word	0x20000550

08002f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return uwTick;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_GetTick+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000550 	.word	0x20000550

08002f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff fff0 	bl	8002f30 <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d005      	beq.n	8002f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_Delay+0x44>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f6a:	bf00      	nop
 8002f6c:	f7ff ffe0 	bl	8002f30 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d8f7      	bhi.n	8002f6c <HAL_Delay+0x28>
  {
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000078 	.word	0x20000078

08002f8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0be      	b.n	800312c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe f860 	bl	8001090 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f9ab 	bl	800332c <ADC_ConversionStop_Disable>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 8099 	bne.w	800311a <HAL_ADC_Init+0x18e>
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 8095 	bne.w	800311a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ff8:	f023 0302 	bic.w	r3, r3, #2
 8002ffc:	f043 0202 	orr.w	r2, r3, #2
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800300c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7b1b      	ldrb	r3, [r3, #12]
 8003012:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003014:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	4313      	orrs	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003024:	d003      	beq.n	800302e <HAL_ADC_Init+0xa2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_ADC_Init+0xa8>
 800302e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003032:	e000      	b.n	8003036 <HAL_ADC_Init+0xaa>
 8003034:	2300      	movs	r3, #0
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7d1b      	ldrb	r3, [r3, #20]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d119      	bne.n	8003078 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7b1b      	ldrb	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	3b01      	subs	r3, #1
 8003052:	035a      	lsls	r2, r3, #13
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e00b      	b.n	8003078 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	4b28      	ldr	r3, [pc, #160]	; (8003134 <HAL_ADC_Init+0x1a8>)
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	430b      	orrs	r3, r1
 800309e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a8:	d003      	beq.n	80030b2 <HAL_ADC_Init+0x126>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d104      	bne.n	80030bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	051b      	lsls	r3, r3, #20
 80030ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_ADC_Init+0x1ac>)
 80030d8:	4013      	ands	r3, r2
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d10b      	bne.n	80030f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030f6:	e018      	b.n	800312a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	f023 0312 	bic.w	r3, r3, #18
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003118:	e007      	b.n	800312a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	f043 0210 	orr.w	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	ffe1f7fd 	.word	0xffe1f7fd
 8003138:	ff1f0efe 	.word	0xff1f0efe

0800313c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x20>
 8003158:	2302      	movs	r3, #2
 800315a:	e0dc      	b.n	8003316 <HAL_ADC_ConfigChannel+0x1da>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b06      	cmp	r3, #6
 800316a:	d81c      	bhi.n	80031a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b05      	subs	r3, #5
 800317e:	221f      	movs	r2, #31
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	4019      	ands	r1, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	3b05      	subs	r3, #5
 8003198:	fa00 f203 	lsl.w	r2, r0, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34
 80031a4:	e03c      	b.n	8003220 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d81c      	bhi.n	80031e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	3b23      	subs	r3, #35	; 0x23
 80031c0:	221f      	movs	r2, #31
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	4019      	ands	r1, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b23      	subs	r3, #35	; 0x23
 80031da:	fa00 f203 	lsl.w	r2, r0, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
 80031e6:	e01b      	b.n	8003220 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b41      	subs	r3, #65	; 0x41
 80031fa:	221f      	movs	r2, #31
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	4019      	ands	r1, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b41      	subs	r3, #65	; 0x41
 8003214:	fa00 f203 	lsl.w	r2, r0, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b09      	cmp	r3, #9
 8003226:	d91c      	bls.n	8003262 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	3b1e      	subs	r3, #30
 800323a:	2207      	movs	r2, #7
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	4019      	ands	r1, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6898      	ldr	r0, [r3, #8]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	3b1e      	subs	r3, #30
 8003254:	fa00 f203 	lsl.w	r2, r0, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	e019      	b.n	8003296 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6919      	ldr	r1, [r3, #16]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	2207      	movs	r2, #7
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	4019      	ands	r1, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6898      	ldr	r0, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	fa00 f203 	lsl.w	r2, r0, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b10      	cmp	r3, #16
 800329c:	d003      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032a2:	2b11      	cmp	r3, #17
 80032a4:	d132      	bne.n	800330c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_ADC_ConfigChannel+0x1e4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d125      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d126      	bne.n	800330c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d11a      	bne.n	800330c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_ADC_ConfigChannel+0x1e8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_ADC_ConfigChannel+0x1ec>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	0c9a      	lsrs	r2, r3, #18
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032ec:	e002      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f9      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x1b2>
 80032fa:	e007      	b.n	800330c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40012400 	.word	0x40012400
 8003324:	20000028 	.word	0x20000028
 8003328:	431bde83 	.word	0x431bde83

0800332c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d12e      	bne.n	80033a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003356:	f7ff fdeb 	bl	8002f30 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800335c:	e01b      	b.n	8003396 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800335e:	f7ff fde7 	bl	8002f30 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d914      	bls.n	8003396 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10d      	bne.n	8003396 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e007      	b.n	80033a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d0dc      	beq.n	800335e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <__NVIC_SetPriorityGrouping>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e2:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60d3      	str	r3, [r2, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_GetPriorityGrouping>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4906      	ldr	r1, [pc, #24]	; (8003448 <__NVIC_EnableIRQ+0x34>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <__NVIC_SetPriority+0x50>)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <SysTick_Config>:
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff90 	bl	800344c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff2d 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003570:	f7ff ff42 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 8003574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff ff90 	bl	80034a0 <NVIC_EncodePriority>
 8003580:	4602      	mov	r2, r0
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff5f 	bl	800344c <__NVIC_SetPriority>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff35 	bl	8003414 <__NVIC_EnableIRQ>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ffa2 	bl	8003504 <SysTick_Config>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e043      	b.n	800366a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b22      	ldr	r3, [pc, #136]	; (8003674 <HAL_DMA_Init+0xa8>)
 80035ea:	4413      	add	r3, r2
 80035ec:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_DMA_Init+0xac>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	009a      	lsls	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1f      	ldr	r2, [pc, #124]	; (800367c <HAL_DMA_Init+0xb0>)
 80035fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003616:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800361a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	bffdfff8 	.word	0xbffdfff8
 8003678:	cccccccd 	.word	0xcccccccd
 800367c:	40020000 	.word	0x40020000

08003680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003680:	b480      	push	{r7}
 8003682:	b08b      	sub	sp, #44	; 0x2c
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800368e:	2300      	movs	r3, #0
 8003690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003692:	e169      	b.n	8003968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003694:	2201      	movs	r2, #1
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	f040 8158 	bne.w	8003962 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4a9a      	ldr	r2, [pc, #616]	; (8003920 <HAL_GPIO_Init+0x2a0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d05e      	beq.n	800377a <HAL_GPIO_Init+0xfa>
 80036bc:	4a98      	ldr	r2, [pc, #608]	; (8003920 <HAL_GPIO_Init+0x2a0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d875      	bhi.n	80037ae <HAL_GPIO_Init+0x12e>
 80036c2:	4a98      	ldr	r2, [pc, #608]	; (8003924 <HAL_GPIO_Init+0x2a4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d058      	beq.n	800377a <HAL_GPIO_Init+0xfa>
 80036c8:	4a96      	ldr	r2, [pc, #600]	; (8003924 <HAL_GPIO_Init+0x2a4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d86f      	bhi.n	80037ae <HAL_GPIO_Init+0x12e>
 80036ce:	4a96      	ldr	r2, [pc, #600]	; (8003928 <HAL_GPIO_Init+0x2a8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d052      	beq.n	800377a <HAL_GPIO_Init+0xfa>
 80036d4:	4a94      	ldr	r2, [pc, #592]	; (8003928 <HAL_GPIO_Init+0x2a8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d869      	bhi.n	80037ae <HAL_GPIO_Init+0x12e>
 80036da:	4a94      	ldr	r2, [pc, #592]	; (800392c <HAL_GPIO_Init+0x2ac>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d04c      	beq.n	800377a <HAL_GPIO_Init+0xfa>
 80036e0:	4a92      	ldr	r2, [pc, #584]	; (800392c <HAL_GPIO_Init+0x2ac>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d863      	bhi.n	80037ae <HAL_GPIO_Init+0x12e>
 80036e6:	4a92      	ldr	r2, [pc, #584]	; (8003930 <HAL_GPIO_Init+0x2b0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d046      	beq.n	800377a <HAL_GPIO_Init+0xfa>
 80036ec:	4a90      	ldr	r2, [pc, #576]	; (8003930 <HAL_GPIO_Init+0x2b0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d85d      	bhi.n	80037ae <HAL_GPIO_Init+0x12e>
 80036f2:	2b12      	cmp	r3, #18
 80036f4:	d82a      	bhi.n	800374c <HAL_GPIO_Init+0xcc>
 80036f6:	2b12      	cmp	r3, #18
 80036f8:	d859      	bhi.n	80037ae <HAL_GPIO_Init+0x12e>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <HAL_GPIO_Init+0x80>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	0800377b 	.word	0x0800377b
 8003704:	08003755 	.word	0x08003755
 8003708:	08003767 	.word	0x08003767
 800370c:	080037a9 	.word	0x080037a9
 8003710:	080037af 	.word	0x080037af
 8003714:	080037af 	.word	0x080037af
 8003718:	080037af 	.word	0x080037af
 800371c:	080037af 	.word	0x080037af
 8003720:	080037af 	.word	0x080037af
 8003724:	080037af 	.word	0x080037af
 8003728:	080037af 	.word	0x080037af
 800372c:	080037af 	.word	0x080037af
 8003730:	080037af 	.word	0x080037af
 8003734:	080037af 	.word	0x080037af
 8003738:	080037af 	.word	0x080037af
 800373c:	080037af 	.word	0x080037af
 8003740:	080037af 	.word	0x080037af
 8003744:	0800375d 	.word	0x0800375d
 8003748:	08003771 	.word	0x08003771
 800374c:	4a79      	ldr	r2, [pc, #484]	; (8003934 <HAL_GPIO_Init+0x2b4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003752:	e02c      	b.n	80037ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	623b      	str	r3, [r7, #32]
          break;
 800375a:	e029      	b.n	80037b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	3304      	adds	r3, #4
 8003762:	623b      	str	r3, [r7, #32]
          break;
 8003764:	e024      	b.n	80037b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	3308      	adds	r3, #8
 800376c:	623b      	str	r3, [r7, #32]
          break;
 800376e:	e01f      	b.n	80037b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	330c      	adds	r3, #12
 8003776:	623b      	str	r3, [r7, #32]
          break;
 8003778:	e01a      	b.n	80037b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003782:	2304      	movs	r3, #4
 8003784:	623b      	str	r3, [r7, #32]
          break;
 8003786:	e013      	b.n	80037b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003790:	2308      	movs	r3, #8
 8003792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	611a      	str	r2, [r3, #16]
          break;
 800379a:	e009      	b.n	80037b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800379c:	2308      	movs	r3, #8
 800379e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	615a      	str	r2, [r3, #20]
          break;
 80037a6:	e003      	b.n	80037b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037a8:	2300      	movs	r3, #0
 80037aa:	623b      	str	r3, [r7, #32]
          break;
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x130>
          break;
 80037ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2bff      	cmp	r3, #255	; 0xff
 80037b4:	d801      	bhi.n	80037ba <HAL_GPIO_Init+0x13a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	e001      	b.n	80037be <HAL_GPIO_Init+0x13e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2bff      	cmp	r3, #255	; 0xff
 80037c4:	d802      	bhi.n	80037cc <HAL_GPIO_Init+0x14c>
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	e002      	b.n	80037d2 <HAL_GPIO_Init+0x152>
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	3b08      	subs	r3, #8
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	210f      	movs	r1, #15
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	401a      	ands	r2, r3
 80037e4:	6a39      	ldr	r1, [r7, #32]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	431a      	orrs	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80b1 	beq.w	8003962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003800:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <HAL_GPIO_Init+0x2b8>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	4a4c      	ldr	r2, [pc, #304]	; (8003938 <HAL_GPIO_Init+0x2b8>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6193      	str	r3, [r2, #24]
 800380c:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_GPIO_Init+0x2b8>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003818:	4a48      	ldr	r2, [pc, #288]	; (800393c <HAL_GPIO_Init+0x2bc>)
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	3302      	adds	r3, #2
 8003820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	220f      	movs	r2, #15
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a40      	ldr	r2, [pc, #256]	; (8003940 <HAL_GPIO_Init+0x2c0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_GPIO_Init+0x1ec>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <HAL_GPIO_Init+0x2c4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00d      	beq.n	8003868 <HAL_GPIO_Init+0x1e8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <HAL_GPIO_Init+0x2c8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <HAL_GPIO_Init+0x1e4>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3d      	ldr	r2, [pc, #244]	; (800394c <HAL_GPIO_Init+0x2cc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <HAL_GPIO_Init+0x1e0>
 800385c:	2303      	movs	r3, #3
 800385e:	e006      	b.n	800386e <HAL_GPIO_Init+0x1ee>
 8003860:	2304      	movs	r3, #4
 8003862:	e004      	b.n	800386e <HAL_GPIO_Init+0x1ee>
 8003864:	2302      	movs	r3, #2
 8003866:	e002      	b.n	800386e <HAL_GPIO_Init+0x1ee>
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_GPIO_Init+0x1ee>
 800386c:	2300      	movs	r3, #0
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	f002 0203 	and.w	r2, r2, #3
 8003874:	0092      	lsls	r2, r2, #2
 8003876:	4093      	lsls	r3, r2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800387e:	492f      	ldr	r1, [pc, #188]	; (800393c <HAL_GPIO_Init+0x2bc>)
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	492c      	ldr	r1, [pc, #176]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	4928      	ldr	r1, [pc, #160]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4922      	ldr	r1, [pc, #136]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
 80038cc:	e006      	b.n	80038dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	491e      	ldr	r1, [pc, #120]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038d8:	4013      	ands	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	4918      	ldr	r1, [pc, #96]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	608b      	str	r3, [r1, #8]
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038f6:	4b16      	ldr	r3, [pc, #88]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	4914      	ldr	r1, [pc, #80]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 8003900:	4013      	ands	r3, r2
 8003902:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d021      	beq.n	8003954 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <HAL_GPIO_Init+0x2d0>)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
 800391c:	e021      	b.n	8003962 <HAL_GPIO_Init+0x2e2>
 800391e:	bf00      	nop
 8003920:	10320000 	.word	0x10320000
 8003924:	10310000 	.word	0x10310000
 8003928:	10220000 	.word	0x10220000
 800392c:	10210000 	.word	0x10210000
 8003930:	10120000 	.word	0x10120000
 8003934:	10110000 	.word	0x10110000
 8003938:	40021000 	.word	0x40021000
 800393c:	40010000 	.word	0x40010000
 8003940:	40010800 	.word	0x40010800
 8003944:	40010c00 	.word	0x40010c00
 8003948:	40011000 	.word	0x40011000
 800394c:	40011400 	.word	0x40011400
 8003950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_GPIO_Init+0x304>)
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	43db      	mvns	r3, r3
 800395c:	4909      	ldr	r1, [pc, #36]	; (8003984 <HAL_GPIO_Init+0x304>)
 800395e:	4013      	ands	r3, r2
 8003960:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	3301      	adds	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	f47f ae8e 	bne.w	8003694 <HAL_GPIO_Init+0x14>
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	372c      	adds	r7, #44	; 0x2c
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40010400 	.word	0x40010400

08003988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
 80039a4:	e001      	b.n	80039aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	807b      	strh	r3, [r7, #2]
 80039c2:	4613      	mov	r3, r2
 80039c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039c6:	787b      	ldrb	r3, [r7, #1]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039cc:	887a      	ldrh	r2, [r7, #2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039d2:	e003      	b.n	80039dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	041a      	lsls	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	611a      	str	r2, [r3, #16]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039fe:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f82e 	bl	8000a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40010400 	.word	0x40010400

08003a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e12b      	b.n	8003c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd fb62 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f000 fce4 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8003a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4a81      	ldr	r2, [pc, #516]	; (8003c8c <HAL_I2C_Init+0x274>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d807      	bhi.n	8003a9c <HAL_I2C_Init+0x84>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a80      	ldr	r2, [pc, #512]	; (8003c90 <HAL_I2C_Init+0x278>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	bf94      	ite	ls
 8003a94:	2301      	movls	r3, #1
 8003a96:	2300      	movhi	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e006      	b.n	8003aaa <HAL_I2C_Init+0x92>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a7d      	ldr	r2, [pc, #500]	; (8003c94 <HAL_I2C_Init+0x27c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	bf94      	ite	ls
 8003aa4:	2301      	movls	r3, #1
 8003aa6:	2300      	movhi	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0e7      	b.n	8003c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a78      	ldr	r2, [pc, #480]	; (8003c98 <HAL_I2C_Init+0x280>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	0c9b      	lsrs	r3, r3, #18
 8003abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <HAL_I2C_Init+0x274>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d802      	bhi.n	8003aec <HAL_I2C_Init+0xd4>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	e009      	b.n	8003b00 <HAL_I2C_Init+0xe8>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	4a69      	ldr	r2, [pc, #420]	; (8003c9c <HAL_I2C_Init+0x284>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	3301      	adds	r3, #1
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	495c      	ldr	r1, [pc, #368]	; (8003c8c <HAL_I2C_Init+0x274>)
 8003b1c:	428b      	cmp	r3, r1
 8003b1e:	d819      	bhi.n	8003b54 <HAL_I2C_Init+0x13c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e59      	subs	r1, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b34:	400b      	ands	r3, r1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_I2C_Init+0x138>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1e59      	subs	r1, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	e051      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003b50:	2304      	movs	r3, #4
 8003b52:	e04f      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d111      	bne.n	8003b80 <HAL_I2C_Init+0x168>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e58      	subs	r0, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	440b      	add	r3, r1
 8003b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e012      	b.n	8003ba6 <HAL_I2C_Init+0x18e>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e58      	subs	r0, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	0099      	lsls	r1, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b96:	3301      	adds	r3, #1
 8003b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Init+0x196>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e022      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_I2C_Init+0x1bc>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1e58      	subs	r0, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	440b      	add	r3, r1
 8003bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd2:	e00f      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	0099      	lsls	r1, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	6809      	ldr	r1, [r1, #0]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6911      	ldr	r1, [r2, #16]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68d2      	ldr	r2, [r2, #12]
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	000186a0 	.word	0x000186a0
 8003c90:	001e847f 	.word	0x001e847f
 8003c94:	003d08ff 	.word	0x003d08ff
 8003c98:	431bde83 	.word	0x431bde83
 8003c9c:	10624dd3 	.word	0x10624dd3

08003ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e272      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8087 	beq.w	8003dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cc0:	4b92      	ldr	r3, [pc, #584]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d00c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ccc:	4b8f      	ldr	r3, [pc, #572]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d112      	bne.n	8003cfe <HAL_RCC_OscConfig+0x5e>
 8003cd8:	4b8c      	ldr	r3, [pc, #560]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d10b      	bne.n	8003cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce6:	4b89      	ldr	r3, [pc, #548]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d06c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x12c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d168      	bne.n	8003dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e24c      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x76>
 8003d08:	4b80      	ldr	r3, [pc, #512]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a7f      	ldr	r2, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e02e      	b.n	8003d74 <HAL_RCC_OscConfig+0xd4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x98>
 8003d1e:	4b7b      	ldr	r3, [pc, #492]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a7a      	ldr	r2, [pc, #488]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b78      	ldr	r3, [pc, #480]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a77      	ldr	r2, [pc, #476]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xd4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0xbc>
 8003d42:	4b72      	ldr	r3, [pc, #456]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a71      	ldr	r2, [pc, #452]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b6f      	ldr	r3, [pc, #444]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6e      	ldr	r2, [pc, #440]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xd4>
 8003d5c:	4b6b      	ldr	r3, [pc, #428]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a6a      	ldr	r2, [pc, #424]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a67      	ldr	r2, [pc, #412]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7ff f8d8 	bl	8002f30 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7ff f8d4 	bl	8002f30 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e200      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xe4>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7ff f8c4 	bl	8002f30 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7ff f8c0 	bl	8002f30 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1ec      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x10c>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d063      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dda:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d11c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x18c>
 8003df2:	4b46      	ldr	r3, [pc, #280]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d116      	bne.n	8003e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_RCC_OscConfig+0x176>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e1c0      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4939      	ldr	r1, [pc, #228]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	e03a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_RCC_OscConfig+0x270>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7ff f879 	bl	8002f30 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e42:	f7ff f875 	bl	8002f30 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1a1      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4927      	ldr	r1, [pc, #156]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e015      	b.n	8003ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <HAL_RCC_OscConfig+0x270>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7ff f858 	bl	8002f30 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e84:	f7ff f854 	bl	8002f30 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e180      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d03a      	beq.n	8003f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d019      	beq.n	8003eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebc:	f7ff f838 	bl	8002f30 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7ff f834 	bl	8002f30 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e160      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	f000 fac4 	bl	8004470 <RCC_Delay>
 8003ee8:	e01c      	b.n	8003f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7ff f81e 	bl	8002f30 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef6:	e00f      	b.n	8003f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7ff f81a 	bl	8002f30 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e146      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	42420000 	.word	0x42420000
 8003f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	4b92      	ldr	r3, [pc, #584]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e9      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a6 	beq.w	800407e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f36:	4b8b      	ldr	r3, [pc, #556]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	4a87      	ldr	r2, [pc, #540]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	61d3      	str	r3, [r2, #28]
 8003f4e:	4b85      	ldr	r3, [pc, #532]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4b82      	ldr	r3, [pc, #520]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d118      	bne.n	8003f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6a:	4b7f      	ldr	r3, [pc, #508]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7e      	ldr	r2, [pc, #504]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f76:	f7fe ffdb 	bl	8002f30 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fe ffd7 	bl	8002f30 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e103      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	4b75      	ldr	r3, [pc, #468]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x312>
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	4a6e      	ldr	r2, [pc, #440]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6213      	str	r3, [r2, #32]
 8003fb0:	e02d      	b.n	800400e <HAL_RCC_OscConfig+0x36e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x334>
 8003fba:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4a69      	ldr	r2, [pc, #420]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6213      	str	r3, [r2, #32]
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a66      	ldr	r2, [pc, #408]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	6213      	str	r3, [r2, #32]
 8003fd2:	e01c      	b.n	800400e <HAL_RCC_OscConfig+0x36e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d10c      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x356>
 8003fdc:	4b61      	ldr	r3, [pc, #388]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4a60      	ldr	r2, [pc, #384]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	6213      	str	r3, [r2, #32]
 8003fe8:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4a5d      	ldr	r2, [pc, #372]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6213      	str	r3, [r2, #32]
 8003ff4:	e00b      	b.n	800400e <HAL_RCC_OscConfig+0x36e>
 8003ff6:	4b5b      	ldr	r3, [pc, #364]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6213      	str	r3, [r2, #32]
 8004002:	4b58      	ldr	r3, [pc, #352]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a57      	ldr	r2, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d015      	beq.n	8004042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004016:	f7fe ff8b 	bl	8002f30 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fe ff87 	bl	8002f30 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0b1      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ee      	beq.n	800401e <HAL_RCC_OscConfig+0x37e>
 8004040:	e014      	b.n	800406c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fe ff75 	bl	8002f30 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe ff71 	bl	8002f30 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e09b      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004060:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ee      	bne.n	800404a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4b3c      	ldr	r3, [pc, #240]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8087 	beq.w	8004196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d061      	beq.n	8004158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d146      	bne.n	800412a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409c:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_RCC_OscConfig+0x4cc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe ff45 	bl	8002f30 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fe ff41 	bl	8002f30 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e06d      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d108      	bne.n	80040e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4921      	ldr	r1, [pc, #132]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e4:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a19      	ldr	r1, [r3, #32]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	430b      	orrs	r3, r1
 80040f6:	491b      	ldr	r1, [pc, #108]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe ff15 	bl	8002f30 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fe ff11 	bl	8002f30 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e03d      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x46a>
 8004128:	e035      	b.n	8004196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_RCC_OscConfig+0x4cc>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fe fefe 	bl	8002f30 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe fefa 	bl	8002f30 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e026      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x498>
 8004156:	e01e      	b.n	8004196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e019      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
 800416c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_OscConfig+0x500>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	429a      	cmp	r2, r3
 8004182:	d106      	bne.n	8004192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d001      	beq.n	8004196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000

080041a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0d0      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d910      	bls.n	80041e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b67      	ldr	r3, [pc, #412]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	4965      	ldr	r1, [pc, #404]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b63      	ldr	r3, [pc, #396]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0b8      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004200:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a58      	ldr	r2, [pc, #352]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800420a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004218:	4b53      	ldr	r3, [pc, #332]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004224:	4b50      	ldr	r3, [pc, #320]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	494d      	ldr	r1, [pc, #308]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d040      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d115      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e07f      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e073      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06b      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004282:	4b39      	ldr	r3, [pc, #228]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f023 0203 	bic.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4936      	ldr	r1, [pc, #216]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004294:	f7fe fe4c 	bl	8002f30 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429c:	f7fe fe48 	bl	8002f30 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e053      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 020c 	and.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1eb      	bne.n	800429c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d210      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	4922      	ldr	r1, [pc, #136]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e032      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4916      	ldr	r1, [pc, #88]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	490e      	ldr	r1, [pc, #56]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004332:	f000 f821 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8004336:	4602      	mov	r2, r0
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	490a      	ldr	r1, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x1c8>)
 8004344:	5ccb      	ldrb	r3, [r1, r3]
 8004346:	fa22 f303 	lsr.w	r3, r2, r3
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1cc>)
 800434c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fdaa 	bl	8002eac <HAL_InitTick>

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40022000 	.word	0x40022000
 8004368:	40021000 	.word	0x40021000
 800436c:	08005240 	.word	0x08005240
 8004370:	20000028 	.word	0x20000028
 8004374:	20000074 	.word	0x20000074

08004378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004378:	b490      	push	{r4, r7}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800437e:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCC_GetSysClockFreq+0xac>)
 8004380:	1d3c      	adds	r4, r7, #4
 8004382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004388:	f240 2301 	movw	r3, #513	; 0x201
 800438c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d002      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x40>
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x46>
 80043b6:	e02b      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043b8:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043ba:	623b      	str	r3, [r7, #32]
      break;
 80043bc:	e02b      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	0c9b      	lsrs	r3, r3, #18
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3328      	adds	r3, #40	; 0x28
 80043c8:	443b      	add	r3, r7
 80043ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	0c5b      	lsrs	r3, r3, #17
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	3328      	adds	r3, #40	; 0x28
 80043e6:	443b      	add	r3, r7
 80043e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4a0e      	ldr	r2, [pc, #56]	; (800442c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043f2:	fb03 f202 	mul.w	r2, r3, r2
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	e004      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	623b      	str	r3, [r7, #32]
      break;
 800440e:	e002      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004412:	623b      	str	r3, [r7, #32]
      break;
 8004414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004416:	6a3b      	ldr	r3, [r7, #32]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bc90      	pop	{r4, r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	08004ec0 	.word	0x08004ec0
 8004428:	40021000 	.word	0x40021000
 800442c:	007a1200 	.word	0x007a1200
 8004430:	003d0900 	.word	0x003d0900

08004434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <HAL_RCC_GetHCLKFreq+0x10>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000028 	.word	0x20000028

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800444c:	f7ff fff2 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	08005250 	.word	0x08005250

08004470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <RCC_Delay+0x34>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <RCC_Delay+0x38>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0a5b      	lsrs	r3, r3, #9
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800448c:	bf00      	nop
  }
  while (Delay --);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	60fa      	str	r2, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f9      	bne.n	800448c <RCC_Delay+0x1c>
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	20000028 	.word	0x20000028
 80044a8:	10624dd3 	.word	0x10624dd3

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d07d      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044c8:	2300      	movs	r3, #0
 80044ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044cc:	4b4f      	ldr	r3, [pc, #316]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d8:	4b4c      	ldr	r3, [pc, #304]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4a4b      	ldr	r2, [pc, #300]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e2:	61d3      	str	r3, [r2, #28]
 80044e4:	4b49      	ldr	r3, [pc, #292]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d118      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004500:	4b43      	ldr	r3, [pc, #268]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a42      	ldr	r2, [pc, #264]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450c:	f7fe fd10 	bl	8002f30 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fe fd0c 	bl	8002f30 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e06d      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004532:	4b36      	ldr	r3, [pc, #216]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02e      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	429a      	cmp	r2, r3
 800454e:	d027      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004550:	4b2e      	ldr	r3, [pc, #184]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455a:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fe fcdb 	bl	8002f30 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fe fcd7 	bl	8002f30 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e036      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	4b1d      	ldr	r3, [pc, #116]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ee      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a0:	4b1a      	ldr	r3, [pc, #104]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4917      	ldr	r1, [pc, #92]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	490b      	ldr	r1, [pc, #44]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4904      	ldr	r1, [pc, #16]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	40007000 	.word	0x40007000
 8004614:	42420440 	.word	0x42420440

08004618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e076      	b.n	8004718 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463a:	d009      	beq.n	8004650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
 8004642:	e005      	b.n	8004650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fd8a 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	ea42 0103 	orr.w	r1, r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	0c1a      	lsrs	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f002 0204 	and.w	r2, r2, #4
 80046f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e041      	b.n	80047b8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fc fdbb 	bl	80012c4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f000 f82d 	bl	80047c0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0208 	bic.w	r2, r2, #8
 8004774:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6819      	ldr	r1, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a29      	ldr	r2, [pc, #164]	; (8004878 <TIM_Base_SetConfig+0xb8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <TIM_Base_SetConfig+0x30>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047de:	d007      	beq.n	80047f0 <TIM_Base_SetConfig+0x30>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a26      	ldr	r2, [pc, #152]	; (800487c <TIM_Base_SetConfig+0xbc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_Base_SetConfig+0x30>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a25      	ldr	r2, [pc, #148]	; (8004880 <TIM_Base_SetConfig+0xc0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d108      	bne.n	8004802 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <TIM_Base_SetConfig+0xb8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_Base_SetConfig+0x62>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004810:	d007      	beq.n	8004822 <TIM_Base_SetConfig+0x62>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <TIM_Base_SetConfig+0xbc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_Base_SetConfig+0x62>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a18      	ldr	r2, [pc, #96]	; (8004880 <TIM_Base_SetConfig+0xc0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <TIM_Base_SetConfig+0xb8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800

08004884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e046      	b.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a16      	ldr	r2, [pc, #88]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d009      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a12      	ldr	r2, [pc, #72]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a10      	ldr	r2, [pc, #64]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10c      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800

08004940 <__assert_func>:
 8004940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004942:	4614      	mov	r4, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <__assert_func+0x2c>)
 8004948:	4605      	mov	r5, r0
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68d8      	ldr	r0, [r3, #12]
 800494e:	b14c      	cbz	r4, 8004964 <__assert_func+0x24>
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <__assert_func+0x30>)
 8004952:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004956:	9100      	str	r1, [sp, #0]
 8004958:	462b      	mov	r3, r5
 800495a:	4906      	ldr	r1, [pc, #24]	; (8004974 <__assert_func+0x34>)
 800495c:	f7fc ff0a 	bl	8001774 <fiprintf>
 8004960:	f000 f8ea 	bl	8004b38 <abort>
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <__assert_func+0x38>)
 8004966:	461c      	mov	r4, r3
 8004968:	e7f3      	b.n	8004952 <__assert_func+0x12>
 800496a:	bf00      	nop
 800496c:	2000007c 	.word	0x2000007c
 8004970:	08005258 	.word	0x08005258
 8004974:	08005265 	.word	0x08005265
 8004978:	08005293 	.word	0x08005293

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000007c 	.word	0x2000007c

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	2600      	movs	r6, #0
 800498c:	4d0c      	ldr	r5, [pc, #48]	; (80049c0 <__libc_init_array+0x38>)
 800498e:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	f000 f928 	bl	8004bec <_init>
 800499c:	2600      	movs	r6, #0
 800499e:	4d0a      	ldr	r5, [pc, #40]	; (80049c8 <__libc_init_array+0x40>)
 80049a0:	4c0a      	ldr	r4, [pc, #40]	; (80049cc <__libc_init_array+0x44>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08005294 	.word	0x08005294
 80049c4:	08005294 	.word	0x08005294
 80049c8:	08005294 	.word	0x08005294
 80049cc:	08005298 	.word	0x08005298

080049d0 <malloc>:
 80049d0:	4b02      	ldr	r3, [pc, #8]	; (80049dc <malloc+0xc>)
 80049d2:	4601      	mov	r1, r0
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	f000 b82b 	b.w	8004a30 <_malloc_r>
 80049da:	bf00      	nop
 80049dc:	2000007c 	.word	0x2000007c

080049e0 <memset>:
 80049e0:	4603      	mov	r3, r0
 80049e2:	4402      	add	r2, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <sbrk_aligned>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4e0e      	ldr	r6, [pc, #56]	; (8004a2c <sbrk_aligned+0x3c>)
 80049f4:	460c      	mov	r4, r1
 80049f6:	6831      	ldr	r1, [r6, #0]
 80049f8:	4605      	mov	r5, r0
 80049fa:	b911      	cbnz	r1, 8004a02 <sbrk_aligned+0x12>
 80049fc:	f000 f88c 	bl	8004b18 <_sbrk_r>
 8004a00:	6030      	str	r0, [r6, #0]
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 f887 	bl	8004b18 <_sbrk_r>
 8004a0a:	1c43      	adds	r3, r0, #1
 8004a0c:	d00a      	beq.n	8004a24 <sbrk_aligned+0x34>
 8004a0e:	1cc4      	adds	r4, r0, #3
 8004a10:	f024 0403 	bic.w	r4, r4, #3
 8004a14:	42a0      	cmp	r0, r4
 8004a16:	d007      	beq.n	8004a28 <sbrk_aligned+0x38>
 8004a18:	1a21      	subs	r1, r4, r0
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f87c 	bl	8004b18 <_sbrk_r>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d101      	bne.n	8004a28 <sbrk_aligned+0x38>
 8004a24:	f04f 34ff 	mov.w	r4, #4294967295
 8004a28:	4620      	mov	r0, r4
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	20000558 	.word	0x20000558

08004a30 <_malloc_r>:
 8004a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a34:	1ccd      	adds	r5, r1, #3
 8004a36:	f025 0503 	bic.w	r5, r5, #3
 8004a3a:	3508      	adds	r5, #8
 8004a3c:	2d0c      	cmp	r5, #12
 8004a3e:	bf38      	it	cc
 8004a40:	250c      	movcc	r5, #12
 8004a42:	2d00      	cmp	r5, #0
 8004a44:	4607      	mov	r7, r0
 8004a46:	db01      	blt.n	8004a4c <_malloc_r+0x1c>
 8004a48:	42a9      	cmp	r1, r5
 8004a4a:	d905      	bls.n	8004a58 <_malloc_r+0x28>
 8004a4c:	230c      	movs	r3, #12
 8004a4e:	2600      	movs	r6, #0
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	4630      	mov	r0, r6
 8004a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a58:	4e2e      	ldr	r6, [pc, #184]	; (8004b14 <_malloc_r+0xe4>)
 8004a5a:	f000 f875 	bl	8004b48 <__malloc_lock>
 8004a5e:	6833      	ldr	r3, [r6, #0]
 8004a60:	461c      	mov	r4, r3
 8004a62:	bb34      	cbnz	r4, 8004ab2 <_malloc_r+0x82>
 8004a64:	4629      	mov	r1, r5
 8004a66:	4638      	mov	r0, r7
 8004a68:	f7ff ffc2 	bl	80049f0 <sbrk_aligned>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	4604      	mov	r4, r0
 8004a70:	d14d      	bne.n	8004b0e <_malloc_r+0xde>
 8004a72:	6834      	ldr	r4, [r6, #0]
 8004a74:	4626      	mov	r6, r4
 8004a76:	2e00      	cmp	r6, #0
 8004a78:	d140      	bne.n	8004afc <_malloc_r+0xcc>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4638      	mov	r0, r7
 8004a80:	eb04 0803 	add.w	r8, r4, r3
 8004a84:	f000 f848 	bl	8004b18 <_sbrk_r>
 8004a88:	4580      	cmp	r8, r0
 8004a8a:	d13a      	bne.n	8004b02 <_malloc_r+0xd2>
 8004a8c:	6821      	ldr	r1, [r4, #0]
 8004a8e:	3503      	adds	r5, #3
 8004a90:	1a6d      	subs	r5, r5, r1
 8004a92:	f025 0503 	bic.w	r5, r5, #3
 8004a96:	3508      	adds	r5, #8
 8004a98:	2d0c      	cmp	r5, #12
 8004a9a:	bf38      	it	cc
 8004a9c:	250c      	movcc	r5, #12
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7ff ffa5 	bl	80049f0 <sbrk_aligned>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d02b      	beq.n	8004b02 <_malloc_r+0xd2>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	442b      	add	r3, r5
 8004aae:	6023      	str	r3, [r4, #0]
 8004ab0:	e00e      	b.n	8004ad0 <_malloc_r+0xa0>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	1b52      	subs	r2, r2, r5
 8004ab6:	d41e      	bmi.n	8004af6 <_malloc_r+0xc6>
 8004ab8:	2a0b      	cmp	r2, #11
 8004aba:	d916      	bls.n	8004aea <_malloc_r+0xba>
 8004abc:	1961      	adds	r1, r4, r5
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	6025      	str	r5, [r4, #0]
 8004ac2:	bf18      	it	ne
 8004ac4:	6059      	strne	r1, [r3, #4]
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	bf08      	it	eq
 8004aca:	6031      	streq	r1, [r6, #0]
 8004acc:	5162      	str	r2, [r4, r5]
 8004ace:	604b      	str	r3, [r1, #4]
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f104 060b 	add.w	r6, r4, #11
 8004ad6:	f000 f83d 	bl	8004b54 <__malloc_unlock>
 8004ada:	f026 0607 	bic.w	r6, r6, #7
 8004ade:	1d23      	adds	r3, r4, #4
 8004ae0:	1af2      	subs	r2, r6, r3
 8004ae2:	d0b6      	beq.n	8004a52 <_malloc_r+0x22>
 8004ae4:	1b9b      	subs	r3, r3, r6
 8004ae6:	50a3      	str	r3, [r4, r2]
 8004ae8:	e7b3      	b.n	8004a52 <_malloc_r+0x22>
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	bf0c      	ite	eq
 8004af0:	6032      	streq	r2, [r6, #0]
 8004af2:	605a      	strne	r2, [r3, #4]
 8004af4:	e7ec      	b.n	8004ad0 <_malloc_r+0xa0>
 8004af6:	4623      	mov	r3, r4
 8004af8:	6864      	ldr	r4, [r4, #4]
 8004afa:	e7b2      	b.n	8004a62 <_malloc_r+0x32>
 8004afc:	4634      	mov	r4, r6
 8004afe:	6876      	ldr	r6, [r6, #4]
 8004b00:	e7b9      	b.n	8004a76 <_malloc_r+0x46>
 8004b02:	230c      	movs	r3, #12
 8004b04:	4638      	mov	r0, r7
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	f000 f824 	bl	8004b54 <__malloc_unlock>
 8004b0c:	e7a1      	b.n	8004a52 <_malloc_r+0x22>
 8004b0e:	6025      	str	r5, [r4, #0]
 8004b10:	e7de      	b.n	8004ad0 <_malloc_r+0xa0>
 8004b12:	bf00      	nop
 8004b14:	20000554 	.word	0x20000554

08004b18 <_sbrk_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4d05      	ldr	r5, [pc, #20]	; (8004b34 <_sbrk_r+0x1c>)
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	f7fc fc36 	bl	8001394 <_sbrk>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_sbrk_r+0x1a>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_sbrk_r+0x1a>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	2000055c 	.word	0x2000055c

08004b38 <abort>:
 8004b38:	2006      	movs	r0, #6
 8004b3a:	b508      	push	{r3, lr}
 8004b3c:	f000 f838 	bl	8004bb0 <raise>
 8004b40:	2001      	movs	r0, #1
 8004b42:	f7fc fc1d 	bl	8001380 <_exit>
	...

08004b48 <__malloc_lock>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__malloc_lock+0x8>)
 8004b4a:	f000 b84d 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	20000560 	.word	0x20000560

08004b54 <__malloc_unlock>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__malloc_unlock+0x8>)
 8004b56:	f000 b848 	b.w	8004bea <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20000560 	.word	0x20000560

08004b60 <_raise_r>:
 8004b60:	291f      	cmp	r1, #31
 8004b62:	b538      	push	{r3, r4, r5, lr}
 8004b64:	4604      	mov	r4, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	d904      	bls.n	8004b74 <_raise_r+0x14>
 8004b6a:	2316      	movs	r3, #22
 8004b6c:	6003      	str	r3, [r0, #0]
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b76:	b112      	cbz	r2, 8004b7e <_raise_r+0x1e>
 8004b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b7c:	b94b      	cbnz	r3, 8004b92 <_raise_r+0x32>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f000 f830 	bl	8004be4 <_getpid_r>
 8004b84:	462a      	mov	r2, r5
 8004b86:	4601      	mov	r1, r0
 8004b88:	4620      	mov	r0, r4
 8004b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b8e:	f000 b817 	b.w	8004bc0 <_kill_r>
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d00a      	beq.n	8004bac <_raise_r+0x4c>
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	d103      	bne.n	8004ba2 <_raise_r+0x42>
 8004b9a:	2316      	movs	r3, #22
 8004b9c:	6003      	str	r3, [r0, #0]
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	e7e7      	b.n	8004b72 <_raise_r+0x12>
 8004ba2:	2400      	movs	r4, #0
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004baa:	4798      	blx	r3
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7e0      	b.n	8004b72 <_raise_r+0x12>

08004bb0 <raise>:
 8004bb0:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <raise+0xc>)
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	f7ff bfd3 	b.w	8004b60 <_raise_r>
 8004bba:	bf00      	nop
 8004bbc:	2000007c 	.word	0x2000007c

08004bc0 <_kill_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <_kill_r+0x20>)
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	f7fc fbc7 	bl	8001360 <_kill>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d102      	bne.n	8004bdc <_kill_r+0x1c>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	b103      	cbz	r3, 8004bdc <_kill_r+0x1c>
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
 8004bde:	bf00      	nop
 8004be0:	2000055c 	.word	0x2000055c

08004be4 <_getpid_r>:
 8004be4:	f7fc bbb5 	b.w	8001352 <_getpid>

08004be8 <__retarget_lock_acquire_recursive>:
 8004be8:	4770      	bx	lr

08004bea <__retarget_lock_release_recursive>:
 8004bea:	4770      	bx	lr

08004bec <_init>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	bf00      	nop
 8004bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf2:	bc08      	pop	{r3}
 8004bf4:	469e      	mov	lr, r3
 8004bf6:	4770      	bx	lr

08004bf8 <_fini>:
 8004bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfa:	bf00      	nop
 8004bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfe:	bc08      	pop	{r3}
 8004c00:	469e      	mov	lr, r3
 8004c02:	4770      	bx	lr
