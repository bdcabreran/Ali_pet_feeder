
pet_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ddc  080076e8  080076e8  000176e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4c4  0800e4c4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4c4  0800e4c4  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4c4  0800e4c4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4c4  0800e4c4  0001e4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4c8  0800e4c8  0001e4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800e4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  20000100  0800e5c8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800e5c8  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001750d  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e1  00000000  00000000  00037632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  0003b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c0d3  00000000  00000000  0003d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ece3  00000000  00000000  000591b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009731a  00000000  00000000  00077e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010f1b0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001678  00000000  00000000  0010f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fec  00000000  00000000  00110878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	080076d0 	.word	0x080076d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	080076d0 	.word	0x080076d0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2iz>:
 8000988:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000990:	d30f      	bcc.n	80009b2 <__aeabi_f2iz+0x2a>
 8000992:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d90d      	bls.n	80009b8 <__aeabi_f2iz+0x30>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	bf18      	it	ne
 80009ae:	4240      	negne	r0, r0
 80009b0:	4770      	bx	lr
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	4770      	bx	lr
 80009b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009bc:	d101      	bne.n	80009c2 <__aeabi_f2iz+0x3a>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d105      	bne.n	80009ce <__aeabi_f2iz+0x46>
 80009c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009c6:	bf08      	it	eq
 80009c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <btn_debounce_init>:
#include "event_manager_fsm.h"

navigation_btn_t navigation_btn;

void btn_debounce_init(navigation_btn_t *btn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    btn->down.gpio.port = DOWN_GPIO_Port;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <btn_debounce_init+0x84>)
 80009e0:	611a      	str	r2, [r3, #16]
    btn->down.gpio.pin  = DOWN_Pin;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2220      	movs	r2, #32
 80009e6:	829a      	strh	r2, [r3, #20]
    btn->up.gpio.port = UP_GPIO_Port;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <btn_debounce_init+0x84>)
 80009ec:	601a      	str	r2, [r3, #0]
    btn->up.gpio.pin = UP_Pin;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2210      	movs	r2, #16
 80009f2:	809a      	strh	r2, [r3, #4]
    btn->left.gpio.port = LEFT_GPIO_Port;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <btn_debounce_init+0x88>)
 80009f8:	621a      	str	r2, [r3, #32]
    btn->left.gpio.pin = LEFT_Pin;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2220      	movs	r2, #32
 80009fe:	849a      	strh	r2, [r3, #36]	; 0x24
    btn->right.gpio.port = RIGHT_GPIO_Port;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <btn_debounce_init+0x88>)
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
    btn->right.gpio.pin = RIGHT_Pin;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	869a      	strh	r2, [r3, #52]	; 0x34
    btn->enter.gpio.port = ENTER_GPIO_Port;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <btn_debounce_init+0x8c>)
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40
    btn->enter.gpio.pin = ENTER_Pin;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	73fb      	strb	r3, [r7, #15]
    push_button_t *btn_ptr = &btn->up;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < btn_cnt; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e00d      	b.n	8000a44 <btn_debounce_init+0x70>
    {
        time_event_stop(&btn_ptr->debounce);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fdaf 	bl	8001590 <time_event_stop>
        btn_ptr->pressed = false;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2200      	movs	r2, #0
 8000a36:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < btn_cnt; i++)
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	3301      	adds	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d3ed      	bcc.n	8000a28 <btn_debounce_init+0x54>
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <btn_key_enter_combination>:

static btn_ev_ext_t btn_key_enter_combination(navigation_btn_t *btn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    if (btn->down.pressed)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7f1b      	ldrb	r3, [r3, #28]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d022      	beq.n	8000aba <btn_key_enter_combination+0x56>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f004 fbaf 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d111      	bne.n	8000ab0 <btn_key_enter_combination+0x4c>
        {
            if(time_event_is_active(&btn->enter.debounce))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3348      	adds	r3, #72	; 0x48
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fd8f 	bl	80015b4 <time_event_is_active>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <btn_key_enter_combination+0x42>
                time_event_stop(&btn->enter.debounce);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3348      	adds	r3, #72	; 0x48
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fd75 	bl	8001590 <time_event_stop>

            printf("btn down + enter pressed\r\n");
 8000aa6:	4843      	ldr	r0, [pc, #268]	; (8000bb4 <btn_key_enter_combination+0x150>)
 8000aa8:	f006 f832 	bl	8006b10 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000aac:	2307      	movs	r3, #7
 8000aae:	e07c      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn down pressed\r\n");
 8000ab0:	4841      	ldr	r0, [pc, #260]	; (8000bb8 <btn_key_enter_combination+0x154>)
 8000ab2:	f006 f82d 	bl	8006b10 <puts>
            return EVT_EXT_BTN_DOWN_PRESSED;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e077      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->up.pressed)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7b1b      	ldrb	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d022      	beq.n	8000b08 <btn_key_enter_combination+0xa4>
    {
        if (HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000acc:	4619      	mov	r1, r3
 8000ace:	4610      	mov	r0, r2
 8000ad0:	f004 fb88 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <btn_key_enter_combination+0x9a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3348      	adds	r3, #72	; 0x48
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd68 	bl	80015b4 <time_event_is_active>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d004      	beq.n	8000af4 <btn_key_enter_combination+0x90>
                time_event_stop(&btn->enter.debounce);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3348      	adds	r3, #72	; 0x48
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fd4e 	bl	8001590 <time_event_stop>

            printf("btn up + enter pressed\r\n");
 8000af4:	4831      	ldr	r0, [pc, #196]	; (8000bbc <btn_key_enter_combination+0x158>)
 8000af6:	f006 f80b 	bl	8006b10 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000afa:	2306      	movs	r3, #6
 8000afc:	e055      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn up pressed\r\n");
 8000afe:	4830      	ldr	r0, [pc, #192]	; (8000bc0 <btn_key_enter_combination+0x15c>)
 8000b00:	f006 f806 	bl	8006b10 <puts>
            return EVT_EXT_BTN_UP_PRESSED;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e050      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->left.pressed)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d022      	beq.n	8000b58 <btn_key_enter_combination+0xf4>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4610      	mov	r0, r2
 8000b20:	f004 fb60 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <btn_key_enter_combination+0xea>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3348      	adds	r3, #72	; 0x48
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fd40 	bl	80015b4 <time_event_is_active>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <btn_key_enter_combination+0xe0>
                time_event_stop(&btn->enter.debounce);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fd26 	bl	8001590 <time_event_stop>
            
            printf("btn left + enter pressed\r\n");
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <btn_key_enter_combination+0x160>)
 8000b46:	f005 ffe3 	bl	8006b10 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	e02d      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else 
        {
            printf("btn left pressed\r\n");
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <btn_key_enter_combination+0x164>)
 8000b50:	f005 ffde 	bl	8006b10 <puts>
            return EVT_EXT_BTN_LEFT_PRESSED;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e028      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    if (btn->right.pressed)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d022      	beq.n	8000ba8 <btn_key_enter_combination+0x144>
    {
        if(HAL_GPIO_ReadPin(btn->enter.gpio.port, btn->enter.gpio.pin) == GPIO_PIN_RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f004 fb38 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d111      	bne.n	8000b9e <btn_key_enter_combination+0x13a>
        {
            if (time_event_is_active(&btn->enter.debounce))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3348      	adds	r3, #72	; 0x48
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fd18 	bl	80015b4 <time_event_is_active>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d004      	beq.n	8000b94 <btn_key_enter_combination+0x130>
                time_event_stop(&btn->enter.debounce);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3348      	adds	r3, #72	; 0x48
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fcfe 	bl	8001590 <time_event_stop>
            
            printf("btn right + enter pressed\r\n");
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <btn_key_enter_combination+0x168>)
 8000b96:	f005 ffbb 	bl	8006b10 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	e005      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
        else
        {
            printf("btn right pressed\r\n");
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <btn_key_enter_combination+0x16c>)
 8000ba0:	f005 ffb6 	bl	8006b10 <puts>
            return EVT_EXT_BTN_RIGHT_PRESSED;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e000      	b.n	8000baa <btn_key_enter_combination+0x146>
        }
    }

    return EVT_EXT_BTN_INVALID;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	080076e8 	.word	0x080076e8
 8000bb8:	08007704 	.word	0x08007704
 8000bbc:	08007718 	.word	0x08007718
 8000bc0:	08007730 	.word	0x08007730
 8000bc4:	08007740 	.word	0x08007740
 8000bc8:	0800775c 	.word	0x0800775c
 8000bcc:	08007770 	.word	0x08007770
 8000bd0:	0800778c 	.word	0x0800778c

08000bd4 <btn_enter_key_combination>:


static btn_ev_ext_t btn_enter_key_combination(navigation_btn_t *btn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    if (btn->enter.pressed)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d078      	beq.n	8000cd8 <btn_enter_key_combination+0x104>
    {
        if (HAL_GPIO_ReadPin(btn->down.gpio.port, btn->down.gpio.pin) == GPIO_PIN_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	8a9b      	ldrh	r3, [r3, #20]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	f004 faf7 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <btn_enter_key_combination+0x4c>
        {
            if (time_event_is_active(&btn->down.debounce))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3318      	adds	r3, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fcd7 	bl	80015b4 <time_event_is_active>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d004      	beq.n	8000c16 <btn_enter_key_combination+0x42>
                time_event_stop(&btn->down.debounce);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fcbd 	bl	8001590 <time_event_stop>
            printf("btn enter + down pressed\r\n");
 8000c16:	4833      	ldr	r0, [pc, #204]	; (8000ce4 <btn_enter_key_combination+0x110>)
 8000c18:	f005 ff7a 	bl	8006b10 <puts>
            return EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	e05c      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->up.gpio.port, btn->up.gpio.pin) == GPIO_PIN_RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f004 fada 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d111      	bne.n	8000c5a <btn_enter_key_combination+0x86>
        {
            if (time_event_is_active(&btn->up.debounce))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcba 	bl	80015b4 <time_event_is_active>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <btn_enter_key_combination+0x7c>
                time_event_stop(&btn->up.debounce);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3308      	adds	r3, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fca0 	bl	8001590 <time_event_stop>
            printf("btn enter + up pressed\r\n");
 8000c50:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <btn_enter_key_combination+0x114>)
 8000c52:	f005 ff5d 	bl	8006b10 <puts>
            return EVT_EXT_BTN_UP_AND_ENTER_PRESSED;
 8000c56:	2306      	movs	r3, #6
 8000c58:	e03f      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->left.gpio.port, btn->left.gpio.pin) == GPIO_PIN_RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f004 fabd 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <btn_enter_key_combination+0xc0>
        {
            if (time_event_is_active(&btn->left.debounce))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3328      	adds	r3, #40	; 0x28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fc9d 	bl	80015b4 <time_event_is_active>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d004      	beq.n	8000c8a <btn_enter_key_combination+0xb6>
                time_event_stop(&btn->left.debounce);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3328      	adds	r3, #40	; 0x28
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fc83 	bl	8001590 <time_event_stop>
            printf("btn enter + left pressed\r\n");
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <btn_enter_key_combination+0x118>)
 8000c8c:	f005 ff40 	bl	8006b10 <puts>
            return EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED;
 8000c90:	2308      	movs	r3, #8
 8000c92:	e022      	b.n	8000cda <btn_enter_key_combination+0x106>
        }

        else if (HAL_GPIO_ReadPin(btn->right.gpio.port, btn->right.gpio.pin) == GPIO_PIN_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f004 faa0 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <btn_enter_key_combination+0xfa>
        {
            if (time_event_is_active(&btn->right.debounce))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3338      	adds	r3, #56	; 0x38
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc80 	bl	80015b4 <time_event_is_active>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <btn_enter_key_combination+0xf0>
                time_event_stop(&btn->right.debounce);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3338      	adds	r3, #56	; 0x38
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fc66 	bl	8001590 <time_event_stop>
            printf("btn enter + right pressed\r\n");
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <btn_enter_key_combination+0x11c>)
 8000cc6:	f005 ff23 	bl	8006b10 <puts>
            return EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	e005      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
        else
        {
            printf("btn enter pressed\r\n");
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <btn_enter_key_combination+0x120>)
 8000cd0:	f005 ff1e 	bl	8006b10 <puts>
            return EVT_EXT_BTN_ENTER_PRESSED;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e000      	b.n	8000cda <btn_enter_key_combination+0x106>
        }
    }
    return EVT_EXT_BTN_INVALID;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	080077a0 	.word	0x080077a0
 8000ce8:	080077bc 	.word	0x080077bc
 8000cec:	080077d4 	.word	0x080077d4
 8000cf0:	080077f0 	.word	0x080077f0
 8000cf4:	0800780c 	.word	0x0800780c

08000cf8 <poll_down_key_pressed>:

static void poll_down_key_pressed(navigation_btn_t *btn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    static GPIO_PinState pin_st = GPIO_PIN_SET;
    if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) != pin_st)
 8000d00:	2120      	movs	r1, #32
 8000d02:	4812      	ldr	r0, [pc, #72]	; (8000d4c <poll_down_key_pressed+0x54>)
 8000d04:	f004 fa6e 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <poll_down_key_pressed+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d016      	beq.n	8000d42 <poll_down_key_pressed+0x4a>
    {
        pin_st = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 8000d14:	2120      	movs	r1, #32
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <poll_down_key_pressed+0x54>)
 8000d18:	f004 fa64 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <poll_down_key_pressed+0x58>)
 8000d22:	701a      	strb	r2, [r3, #0]
        if(!time_event_is_active(&btn->down.debounce))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3318      	adds	r3, #24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fc43 	bl	80015b4 <time_event_is_active>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <poll_down_key_pressed+0x4a>
            time_event_start(&navigation_btn.down.debounce, DEBOUNCE_TIME_MS);
 8000d3a:	2132      	movs	r1, #50	; 0x32
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <poll_down_key_pressed+0x5c>)
 8000d3e:	f000 fc13 	bl	8001568 <time_event_start>
    }
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	20000020 	.word	0x20000020
 8000d54:	20000134 	.word	0x20000134

08000d58 <btn_debounce_run>:

void btn_debounce_run(navigation_btn_t *btn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b092      	sub	sp, #72	; 0x48
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    /*down button cannot be set IT mode, we have to do polling*/
    poll_down_key_pressed(btn);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ffc9 	bl	8000cf8 <poll_down_key_pressed>

    /*update debounce time for all buttons */
    uint8_t btn_cnt = sizeof(navigation_btn_t)/sizeof(push_button_t);
 8000d66:	2305      	movs	r3, #5
 8000d68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    push_button_t *btn_ptr = &btn->up;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < btn_cnt; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
 8000d74:	e025      	b.n	8000dc2 <btn_debounce_run+0x6a>
    {
        time_event_update(&btn_ptr->debounce);
 8000d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d78:	3308      	adds	r3, #8
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fc25 	bl	80015ca <time_event_update>
        if(time_event_is_raised(&btn_ptr->debounce))
 8000d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d82:	3308      	adds	r3, #8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fc41 	bl	800160c <time_event_is_raised>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d012      	beq.n	8000db6 <btn_debounce_run+0x5e>
        {
            if(HAL_GPIO_ReadPin(btn_ptr->gpio.port, btn_ptr->gpio.pin) == GPIO_PIN_RESET)
 8000d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d96:	889b      	ldrh	r3, [r3, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	f004 fa22 	bl	80051e4 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <btn_debounce_run+0x54>
                btn_ptr->pressed = true;
 8000da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da8:	2201      	movs	r2, #1
 8000daa:	731a      	strb	r2, [r3, #12]
            
            time_event_stop(&btn_ptr->debounce);
 8000dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dae:	3308      	adds	r3, #8
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fbed 	bl	8001590 <time_event_stop>
        }
        btn_ptr++;
 8000db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db8:	3310      	adds	r3, #16
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 8000dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d3d4      	bcc.n	8000d76 <btn_debounce_run+0x1e>
    }

    /*Notify events*/
    event_t event;
    event.name = EVT_EXT_BTN_INVALID;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	733b      	strb	r3, [r7, #12]
    event.fsm.src = BTN_FSM;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	737b      	strb	r3, [r7, #13]
    event.fsm.dst = UI_FSM;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]
    event.data.len = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

    event.name = btn_key_enter_combination(btn);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fe41 	bl	8000a64 <btn_key_enter_combination>
 8000de2:	4603      	mov	r3, r0
 8000de4:	733b      	strb	r3, [r7, #12]
    if(event.name != EVT_EXT_BTN_INVALID)
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <btn_debounce_run+0xa6>
        event_manager_write(event_manager_fsm_get(), &event);
 8000dec:	f000 fc6a 	bl	80016c4 <event_manager_fsm_get>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	4610      	mov	r0, r2
 8000dfa:	f000 fd39 	bl	8001870 <event_manager_write>

    event.name = btn_enter_key_combination(btn);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fee8 	bl	8000bd4 <btn_enter_key_combination>
 8000e04:	4603      	mov	r3, r0
 8000e06:	733b      	strb	r3, [r7, #12]
    if(event.name != EVT_EXT_BTN_INVALID)
 8000e08:	7b3b      	ldrb	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d008      	beq.n	8000e20 <btn_debounce_run+0xc8>
        event_manager_write(event_manager_fsm_get(), &event);
 8000e0e:	f000 fc59 	bl	80016c4 <event_manager_fsm_get>
 8000e12:	4602      	mov	r2, r0
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	f000 fd28 	bl	8001870 <event_manager_write>

    btn_ptr = &btn->up;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e28:	e008      	b.n	8000e3c <btn_debounce_run+0xe4>
    {
        btn_ptr->pressed = false;
 8000e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	731a      	strb	r2, [r3, #12]
        btn_ptr++;
 8000e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e32:	3310      	adds	r3, #16
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < btn_cnt; i++)
 8000e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e38:	3301      	adds	r3, #1
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3f1      	bcc.n	8000e2a <btn_debounce_run+0xd2>
    }
}
 8000e46:	bf00      	nop
 8000e48:	bf00      	nop
 8000e4a:	3748      	adds	r7, #72	; 0x48
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <event_print_info>:
	} while (0)
#endif


static void event_print_info(event_t *evt)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("FSM SRC : [0x%X]\r\n", evt->fsm.src);
    evt_queue_dbg("FSM DST : [0x%X]\r\n", evt->fsm.dst);
    evt_queue_dbg("FSM EVT : [0x%X]\r\n", evt->name);
    evt_queue_dbg("FSM Payload Len : [%d]\r\n", evt->data.len);

    if(evt->data.len)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <event_print_info+0x20>
        print_buffer('X', (uint8_t*)evt->data.buff, evt->data.len);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1d19      	adds	r1, r3, #4
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	78db      	ldrb	r3, [r3, #3]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2058      	movs	r0, #88	; 0x58
 8000e6c:	f000 f91c 	bl	80010a8 <print_buffer>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <event_queue_init>:

void event_queue_init(event_queue_t *queue, uint8_t *buff, uint8_t buff_len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    evt_queue_dbg("initializing queue\r\n");
    queue->rb = ring_buffer_init(buff, buff_len);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	68b8      	ldr	r0, [r7, #8]
 8000e8c:	f000 f9de 	bl	800124c <ring_buffer_init>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
    queue->pending_cnt = 0;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	711a      	strb	r2, [r3, #4]
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <event_queue_get_pending>:

uint8_t event_queue_get_pending(event_queue_t *queue)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    evt_queue_dbg("pending evts [%d]\r\n", queue->pending_cnt);
    return queue->pending_cnt; 
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <event_queue_write>:

uint8_t event_queue_write(event_queue_t *queue, event_t *evt)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t write_st = RING_BUFF_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
    evt_queue_dbg("writing event \r\n");
    event_print_info(evt);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffbf 	bl	8000e50 <event_print_info>

    write_st = ring_buffer_write(queue->rb, (uint8_t *)&evt, EVENT_HEADER_SIZE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	2204      	movs	r2, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 facc 	bl	8001478 <ring_buffer_write>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
    if (evt->data.len)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00a      	beq.n	8000f02 <event_queue_write+0x46>
        write_st = ring_buffer_write(queue->rb, (uint8_t *)evt->data.buff, evt->data.len);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	1d19      	adds	r1, r3, #4
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	78db      	ldrb	r3, [r3, #3]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f000 fabd 	bl	8001478 <ring_buffer_write>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

    if (write_st == RING_BUFF_OK)
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <event_queue_write+0x5a>
        queue->pending_cnt++;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	711a      	strb	r2, [r3, #4]
 8000f14:	e00c      	b.n	8000f30 <event_queue_write+0x74>
    else
        printf_dbg_error("could not write on evt queue\r\n");
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <event_queue_write+0x80>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 fd72 	bl	8006a04 <iprintf>
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <event_queue_write+0x84>)
 8000f22:	f005 fdf5 	bl	8006b10 <puts>
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <event_queue_write+0x80>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fd6a 	bl	8006a04 <iprintf>

    return write_st;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000024 	.word	0x20000024
 8000f40:	08007820 	.word	0x08007820

08000f44 <event_queue_read>:

uint8_t event_queue_read(event_queue_t *queue, event_t *evt)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    ring_buffer_st_t read_st = RING_BUFF_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]

    if (event_queue_get_pending(queue))
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa6 	bl	8000ea4 <event_queue_get_pending>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d032      	beq.n	8000fc4 <event_queue_read+0x80>
    {
        evt_queue_dbg("reading event \r\n");
        read_st = ring_buffer_read(queue->rb, (uint8_t *)&evt, EVENT_HEADER_SIZE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4639      	mov	r1, r7
 8000f64:	2204      	movs	r2, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fac6 	bl	80014f8 <ring_buffer_read>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
        if (evt->data.len)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00a      	beq.n	8000f8e <event_queue_read+0x4a>
            read_st = ring_buffer_read(queue->rb, (uint8_t *)evt->data.buff, evt->data.len);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	1d19      	adds	r1, r3, #4
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	461a      	mov	r2, r3
 8000f86:	f000 fab7 	bl	80014f8 <ring_buffer_read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]

        if (read_st == RING_BUFF_OK)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10a      	bne.n	8000faa <event_queue_read+0x66>
        {
            queue->pending_cnt--;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	791b      	ldrb	r3, [r3, #4]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	711a      	strb	r2, [r3, #4]
            event_print_info(evt);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff54 	bl	8000e50 <event_print_info>
 8000fa8:	e00c      	b.n	8000fc4 <event_queue_read+0x80>
        }
        else
            printf_dbg_error("could not read evt in queue\r\n");
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <event_queue_read+0x8c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 fd28 	bl	8006a04 <iprintf>
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <event_queue_read+0x90>)
 8000fb6:	f005 fdab 	bl	8006b10 <puts>
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <event_queue_read+0x8c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 fd20 	bl	8006a04 <iprintf>
    }
    else
        evt_queue_dbg("error, no evt in queue \r\n");

    return read_st;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000024 	.word	0x20000024
 8000fd4:	08007840 	.word	0x08007840

08000fd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fe0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ff0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ff8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00b      	beq.n	8001018 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001000:	e000      	b.n	8001004 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001002:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f9      	beq.n	8001002 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800100e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <itm_enable>:

#include "itm_dbg.h"
#include "stdio.h"

void itm_enable(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <itm_enable+0x2c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <itm_enable+0x2c>)
 800102e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001032:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 8001034:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001038:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800103c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	e000edfc 	.word	0xe000edfc

08001054 <itm_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int itm_write(char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e009      	b.n	8001078 <itm_write+0x24>
	{
		ITM_SendChar(*ptr++);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffb3 	bl	8000fd8 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3301      	adds	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <itm_write+0x10>
	}
	return len;
 8001080:	683b      	ldr	r3, [r7, #0]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_write>:
    "\x1B[37m",
    "\x1B[0m"
};

int _write(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
#if USE_PRINTF_ITM
    /*write transmit function associated to a peripheral where you want to remap printf */
    return itm_write(ptr, len);
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f7ff ffdb 	bl	8001054 <itm_write>
 800109e:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <print_buffer>:

void print_buffer(uint8_t format, uint8_t *buff, uint8_t len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
	printf("buffer : \r\n");
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <print_buffer+0x7c>)
 80010ba:	f005 fd29 	bl	8006b10 <puts>
	for (size_t i = 0; i < len; i++)
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e023      	b.n	800110c <print_buffer+0x64>
	{
		switch (format)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b43      	cmp	r3, #67	; 0x43
 80010c8:	d002      	beq.n	80010d0 <print_buffer+0x28>
 80010ca:	2b58      	cmp	r3, #88	; 0x58
 80010cc:	d009      	beq.n	80010e2 <print_buffer+0x3a>
 80010ce:	e011      	b.n	80010f4 <print_buffer+0x4c>
		{
		    case 'C': printf( "[%c] ", buff[i])  ; break;
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4813      	ldr	r0, [pc, #76]	; (8001128 <print_buffer+0x80>)
 80010dc:	f005 fc92 	bl	8006a04 <iprintf>
 80010e0:	e011      	b.n	8001106 <print_buffer+0x5e>
		    case 'X': printf( "[0x%X] ", buff[i]); break;
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <print_buffer+0x84>)
 80010ee:	f005 fc89 	bl	8006a04 <iprintf>
 80010f2:	e008      	b.n	8001106 <print_buffer+0x5e>
		    default : printf( "[0x%X] ", buff[i]); break;
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <print_buffer+0x84>)
 8001100:	f005 fc80 	bl	8006a04 <iprintf>
 8001104:	bf00      	nop
	for (size_t i = 0; i < len; i++)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3d7      	bcc.n	80010c4 <print_buffer+0x1c>
		}
	}
	printf("\r\n");
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <print_buffer+0x88>)
 8001116:	f005 fcfb 	bl	8006b10 <puts>
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	080078c0 	.word	0x080078c0
 8001128:	080078cc 	.word	0x080078cc
 800112c:	080078d4 	.word	0x080078d4
 8001130:	080078dc 	.word	0x080078dc

08001134 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <head_ptr_advance+0x1a>
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <head_ptr_advance+0x74>)
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <head_ptr_advance+0x78>)
 8001146:	2126      	movs	r1, #38	; 0x26
 8001148:	4819      	ldr	r0, [pc, #100]	; (80011b0 <head_ptr_advance+0x7c>)
 800114a:	f005 f827 	bl	800619c <__assert_func>

    if (rb->full)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7c1b      	ldrb	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	3301      	adds	r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68d2      	ldr	r2, [r2, #12]
 8001160:	fbb3 f1f2 	udiv	r1, r3, r2
 8001164:	fb01 f202 	mul.w	r2, r1, r2
 8001168:	1a9a      	subs	r2, r3, r2
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68d2      	ldr	r2, [r2, #12]
 8001178:	fbb3 f1f2 	udiv	r1, r3, r2
 800117c:	fb01 f202 	mul.w	r2, r1, r2
 8001180:	1a9a      	subs	r2, r3, r2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	429a      	cmp	r2, r3
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	741a      	strb	r2, [r3, #16]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	080078e0 	.word	0x080078e0
 80011ac:	0800e2d0 	.word	0x0800e2d0
 80011b0:	080078e4 	.word	0x080078e4

080011b4 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    assert(rb);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <tail_ptr_retreat+0x1a>
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <tail_ptr_retreat+0x40>)
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <tail_ptr_retreat+0x44>)
 80011c6:	2139      	movs	r1, #57	; 0x39
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <tail_ptr_retreat+0x48>)
 80011ca:	f004 ffe7 	bl	800619c <__assert_func>

    rb->full = 0;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68d2      	ldr	r2, [r2, #12]
 80011de:	fbb3 f1f2 	udiv	r1, r3, r2
 80011e2:	fb01 f202 	mul.w	r2, r1, r2
 80011e6:	1a9a      	subs	r2, r3, r2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	080078e0 	.word	0x080078e0
 80011f8:	0800e2e4 	.word	0x0800e2e4
 80011fc:	080078e4 	.word	0x080078e4

08001200 <is_ring_buffer_empty>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    assert(rb);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <is_ring_buffer_empty+0x1a>
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <is_ring_buffer_empty+0x40>)
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <is_ring_buffer_empty+0x44>)
 8001212:	214e      	movs	r1, #78	; 0x4e
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <is_ring_buffer_empty+0x48>)
 8001216:	f004 ffc1 	bl	800619c <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7c1b      	ldrb	r3, [r3, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <is_ring_buffer_empty+0x32>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d101      	bne.n	8001232 <is_ring_buffer_empty+0x32>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <is_ring_buffer_empty+0x34>
 8001232:	2300      	movs	r3, #0
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	080078e0 	.word	0x080078e0
 8001244:	0800e2f8 	.word	0x0800e2f8
 8001248:	080078e4 	.word	0x080078e4

0800124c <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint8_t *buffer, size_t size)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <ring_buffer_init+0x16>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d105      	bne.n	800126e <ring_buffer_init+0x22>
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <ring_buffer_init+0x74>)
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <ring_buffer_init+0x78>)
 8001266:	2169      	movs	r1, #105	; 0x69
 8001268:	4817      	ldr	r0, [pc, #92]	; (80012c8 <ring_buffer_init+0x7c>)
 800126a:	f004 ff97 	bl	800619c <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 800126e:	2014      	movs	r0, #20
 8001270:	f004 ffee 	bl	8006250 <malloc>
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]
    assert(rb);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <ring_buffer_init+0x3e>
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <ring_buffer_init+0x80>)
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <ring_buffer_init+0x78>)
 8001282:	216c      	movs	r1, #108	; 0x6c
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <ring_buffer_init+0x7c>)
 8001286:	f004 ff89 	bl	800619c <__assert_func>

    rb->buffer = buffer;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f81c 	bl	80012d4 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff ffaf 	bl	8001200 <is_ring_buffer_empty>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <ring_buffer_init+0x68>
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <ring_buffer_init+0x84>)
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <ring_buffer_init+0x78>)
 80012ac:	2172      	movs	r1, #114	; 0x72
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <ring_buffer_init+0x7c>)
 80012b0:	f004 ff74 	bl	800619c <__assert_func>

    return rb;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08007910 	.word	0x08007910
 80012c4:	0800e310 	.word	0x0800e310
 80012c8:	080078e4 	.word	0x080078e4
 80012cc:	080078e0 	.word	0x080078e0
 80012d0:	08007920 	.word	0x08007920

080012d4 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    assert(rb);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <ring_buffer_reset+0x1a>
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <ring_buffer_reset+0x34>)
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <ring_buffer_reset+0x38>)
 80012e6:	2189      	movs	r1, #137	; 0x89
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <ring_buffer_reset+0x3c>)
 80012ea:	f004 ff57 	bl	800619c <__assert_func>
    rb->head = 0;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	741a      	strb	r2, [r3, #16]
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	080078e0 	.word	0x080078e0
 800130c:	0800e324 	.word	0x0800e324
 8001310:	080078e4 	.word	0x080078e4

08001314 <ring_buffer_get_data_len>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return number of bytes in buffer.
 */
size_t ring_buffer_get_data_len(ring_buffer_handle_t rb)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <ring_buffer_get_data_len+0x1a>
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <ring_buffer_get_data_len+0x60>)
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <ring_buffer_get_data_len+0x64>)
 8001326:	2197      	movs	r1, #151	; 0x97
 8001328:	4814      	ldr	r0, [pc, #80]	; (800137c <ring_buffer_get_data_len+0x68>)
 800132a:	f004 ff37 	bl	800619c <__assert_func>

    size_t size = rb->length;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	60fb      	str	r3, [r7, #12]

    if (!rb->full)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7c1b      	ldrb	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d115      	bne.n	8001368 <ring_buffer_get_data_len+0x54>
    {
        if (rb->head >= rb->tail)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	429a      	cmp	r2, r3
 8001346:	d306      	bcc.n	8001356 <ring_buffer_get_data_len+0x42>
        {
            size = (rb->head - rb->tail);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e008      	b.n	8001368 <ring_buffer_get_data_len+0x54>
        }
        else
        {
            size = (rb->length + rb->head - rb->tail);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	441a      	add	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	60fb      	str	r3, [r7, #12]
        }
    }

    return size;
 8001368:	68fb      	ldr	r3, [r7, #12]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	080078e0 	.word	0x080078e0
 8001378:	0800e338 	.word	0x0800e338
 800137c:	080078e4 	.word	0x080078e4

08001380 <ring_buffer_get_free_space>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return size_t return the number of bytes available in ring buffer 
 */
size_t ring_buffer_get_free_space(ring_buffer_handle_t rb)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    assert(rb);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <ring_buffer_get_free_space+0x1a>
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <ring_buffer_get_free_space+0x30>)
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <ring_buffer_get_free_space+0x34>)
 8001392:	21be      	movs	r1, #190	; 0xbe
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <ring_buffer_get_free_space+0x38>)
 8001396:	f004 ff01 	bl	800619c <__assert_func>
    return (rb->length - ring_buffer_get_data_len(rb));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68dc      	ldr	r4, [r3, #12]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffb8 	bl	8001314 <ring_buffer_get_data_len>
 80013a4:	4603      	mov	r3, r0
 80013a6:	1ae3      	subs	r3, r4, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	080078e0 	.word	0x080078e0
 80013b4:	0800e354 	.word	0x0800e354
 80013b8:	080078e4 	.word	0x080078e4

080013bc <ring_buffer_put>:
 * 
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint8_t data)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
    assert(rb && rb->buffer);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <ring_buffer_put+0x1a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <ring_buffer_put+0x26>
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <ring_buffer_put+0x44>)
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <ring_buffer_put+0x48>)
 80013da:	21ca      	movs	r1, #202	; 0xca
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <ring_buffer_put+0x4c>)
 80013de:	f004 fedd 	bl	800619c <__assert_func>

    rb->buffer[rb->head] = data;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	701a      	strb	r2, [r3, #0]

    head_ptr_advance(rb);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fe9f 	bl	8001134 <head_ptr_advance>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	0800793c 	.word	0x0800793c
 8001404:	0800e370 	.word	0x0800e370
 8001408:	080078e4 	.word	0x080078e4

0800140c <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint8_t *data)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <ring_buffer_get+0x1e>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <ring_buffer_get+0x1e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <ring_buffer_get+0x2a>
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <ring_buffer_get+0x60>)
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <ring_buffer_get+0x64>)
 800142e:	21da      	movs	r1, #218	; 0xda
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <ring_buffer_get+0x68>)
 8001432:	f004 feb3 	bl	800619c <__assert_func>

    int r = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fee0 	bl	8001200 <is_ring_buffer_empty>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <ring_buffer_get+0x54>
    {
        *data = rb->buffer[rb->tail];
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4413      	add	r3, r2
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff feac 	bl	80011b4 <tail_ptr_retreat>

        r = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	b2db      	uxtb	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	08007950 	.word	0x08007950
 8001470:	0800e380 	.word	0x0800e380
 8001474:	080078e4 	.word	0x080078e4

08001478 <ring_buffer_write>:
 * @param data   pointer to a buffer that contains the data to be written in buffer
 * @param data_len number of bytes of data to be written in buffer
 * @return ring_buffer_st_t  return status of buffer.
 */
ring_buffer_st_t ring_buffer_write(ring_buffer_handle_t rb, uint8_t *data, uint8_t data_len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	71fb      	strb	r3, [r7, #7]
    assert(rb && rb->buffer);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <ring_buffer_write+0x1c>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <ring_buffer_write+0x28>
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <ring_buffer_write+0x74>)
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <ring_buffer_write+0x78>)
 8001498:	21f3      	movs	r1, #243	; 0xf3
 800149a:	4816      	ldr	r0, [pc, #88]	; (80014f4 <ring_buffer_write+0x7c>)
 800149c:	f004 fe7e 	bl	800619c <__assert_func>

    if (rb->full)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	7c1b      	ldrb	r3, [r3, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <ring_buffer_write+0x34>
    {
        return RING_BUFF_FULL;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e01a      	b.n	80014e2 <ring_buffer_write+0x6a>
    }

    if (ring_buffer_get_free_space(rb) < data_len)
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff ff67 	bl	8001380 <ring_buffer_get_free_space>
 80014b2:	4602      	mov	r2, r0
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d201      	bcs.n	80014be <ring_buffer_write+0x46>
    {
        return RING_BUFF_NOT_ENOUGH_SPACE;
 80014ba:	2302      	movs	r3, #2
 80014bc:	e011      	b.n	80014e2 <ring_buffer_write+0x6a>
    }
    else
    {
        size_t data_counter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]

        while (data_counter < data_len)
 80014c2:	e009      	b.n	80014d8 <ring_buffer_write+0x60>
        {
            ring_buffer_put(rb, data[data_counter++]);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	617a      	str	r2, [r7, #20]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff ff72 	bl	80013bc <ring_buffer_put>
        while (data_counter < data_len)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3f1      	bcc.n	80014c4 <ring_buffer_write+0x4c>
        }

        return RING_BUFF_OK;
 80014e0:	2300      	movs	r3, #0
    }
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	0800793c 	.word	0x0800793c
 80014f0:	0800e390 	.word	0x0800e390
 80014f4:	080078e4 	.word	0x080078e4

080014f8 <ring_buffer_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in ring buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t ring_buffer_read(ring_buffer_handle_t rb, uint8_t *data, size_t data_len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    assert(rb && rb->buffer && data);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <ring_buffer_read+0x20>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <ring_buffer_read+0x20>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d106      	bne.n	8001526 <ring_buffer_read+0x2e>
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <ring_buffer_read+0x64>)
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <ring_buffer_read+0x68>)
 800151c:	f240 1115 	movw	r1, #277	; 0x115
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <ring_buffer_read+0x6c>)
 8001522:	f004 fe3b 	bl	800619c <__assert_func>

    size_t data_counter = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 800152a:	e00d      	b.n	8001548 <ring_buffer_read+0x50>
    {
        if (!ring_buffer_get(rb, &data[data_counter++]))
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	617a      	str	r2, [r7, #20]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4413      	add	r3, r2
 8001536:	4619      	mov	r1, r3
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff67 	bl	800140c <ring_buffer_get>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <ring_buffer_read+0x50>
        {
            return RING_BUFF_ERROR;
 8001544:	2303      	movs	r3, #3
 8001546:	e004      	b.n	8001552 <ring_buffer_read+0x5a>
    while (data_counter < data_len)
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3ed      	bcc.n	800152c <ring_buffer_read+0x34>
        }
    }

    return RING_BUFF_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800796c 	.word	0x0800796c
 8001560:	0800e3a4 	.word	0x0800e3a4
 8001564:	080078e4 	.word	0x080078e4

08001568 <time_event_start>:
#include <assert.h>

bool volatile pending_time_update = false;

void time_event_start(time_event_t *time_event, const uint16_t time_ms)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
    time_event->tick_cnt = time_ms;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	801a      	strh	r2, [r3, #0]
    time_event->active = true;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	70da      	strb	r2, [r3, #3]
}   
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    time_event->active = false;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	709a      	strb	r2, [r3, #2]
    time_event->raised = false;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	70da      	strb	r2, [r3, #3]
    time_event->tick_cnt = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <time_event_is_active>:

bool time_event_is_active(time_event_t *time_event)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    return time_event->active;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	789b      	ldrb	r3, [r3, #2]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <time_event_update>:

bool time_event_update(time_event_t *time_event)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
    if (time_event->active == true)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	789b      	ldrb	r3, [r3, #2]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <time_event_update+0x36>
    {
        if (time_event->tick_cnt > 0)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <time_event_update+0x24>
            time_event->tick_cnt--;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	801a      	strh	r2, [r3, #0]

        if(!time_event->tick_cnt)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <time_event_update+0x32>
            time_event->raised = true;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	70da      	strb	r2, [r3, #3]
        
        return true;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <time_event_update+0x38>
    }
    return false;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <time_event_is_raised>:

bool time_event_is_raised(time_event_t *time_event)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	78db      	ldrb	r3, [r3, #3]
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
	...

08001624 <time_event_set_pending_update>:

void time_event_set_pending_update(bool status)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    pending_time_update = status;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <time_event_set_pending_update+0x1c>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	7013      	strb	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2000016c 	.word	0x2000016c

08001644 <time_event_get_pending_update>:

bool time_event_get_pending_update(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
    return pending_time_update;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <time_event_get_pending_update+0x14>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000016c 	.word	0x2000016c

0800165c <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every 1 ms
 */
void HAL_SYSTICK_Callback(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    time_event_set_pending_update(true);
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff ffdf 	bl	8001624 <time_event_set_pending_update>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <time_events_poll_update>:
/**
 * @brief Call this function in main thread at infinite loop
 * 
 */
void time_events_poll_update(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    if(time_event_get_pending_update() == true)
 8001670:	f7ff ffe8 	bl	8001644 <time_event_get_pending_update>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <time_events_poll_update+0x26>
    {
        /*Update Time Events of the state machines */
        //---------------------------------------------------//
        btn_debounce_run(&navigation_btn);
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <time_events_poll_update+0x2c>)
 800167c:	f7ff fb6c 	bl	8000d58 <btn_debounce_run>
        ui_fsm_time_update(ui_fsm_get());
 8001680:	f000 fc08 	bl	8001e94 <ui_fsm_get>
 8001684:	4603      	mov	r3, r0
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fc52 	bl	8001f30 <ui_fsm_time_update>

        //---------------------------------------------------//
        time_event_set_pending_update(false); 
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ffc9 	bl	8001624 <time_event_set_pending_update>
    }
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000011c 	.word	0x2000011c

0800169c <drawer_fsm_get_info>:
#include "drawer_fsm.h"

drawer_ctrl_info *drawer_fsm_get_info(drawer_no_t no)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]


}
 80016a6:	bf00      	nop
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <drawer_fsm_set_ext_evt>:

void drawer_fsm_set_ext_evt(event_t *event)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
    
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <event_manager_fsm_get>:


//------------------ FSM generic Functions ---------------------------------------//

event_manager_handle_t event_manager_fsm_get(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
    return &event_manager_fsm;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <event_manager_fsm_get+0x10>)
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000238 	.word	0x20000238

080016d8 <fsm_set_next_state>:

/**
 * @brief Set next state in FSM
 */
static void fsm_set_next_state(event_manager_handle_t handle, event_manager_state_t next_state)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	701a      	strb	r2, [r3, #0]
	handle->event.internal = EVT_INT_INVALID;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	705a      	strb	r2, [r3, #1]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <event_manager_fsm_run>:

void event_manager_fsm_run(event_manager_handle_t handle)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d002      	beq.n	8001710 <event_manager_fsm_run+0x16>
 800170a:	2b02      	cmp	r3, #2
 800170c:	d004      	beq.n	8001718 <event_manager_fsm_run+0x1e>
    {
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
    default: break;
 800170e:	e007      	b.n	8001720 <event_manager_fsm_run+0x26>
    case ST_WAIT_EVENT      : wait_event_on_react(handle); break;
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f84d 	bl	80017b0 <wait_event_on_react>
 8001716:	e003      	b.n	8001720 <event_manager_fsm_run+0x26>
    case ST_NOTIFY_EVENT    : notify_event_on_react(handle); break;    
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f89a 	bl	8001852 <notify_event_on_react>
 800171e:	bf00      	nop
    }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <event_manager_fsm_init>:

void event_manager_fsm_init(event_manager_handle_t handle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    event_queue_init(&handle->iface.queue, queue_buffer, EVT_MANAGER_QUEUE_BUFF_LEN);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	22c8      	movs	r2, #200	; 0xc8
 8001736:	4905      	ldr	r1, [pc, #20]	; (800174c <event_manager_fsm_init+0x24>)
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fb9d 	bl	8000e78 <event_queue_init>
    enter_seq_wait_event(handle);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f806 	bl	8001750 <enter_seq_wait_event>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000170 	.word	0x20000170

08001750 <enter_seq_wait_event>:

//------------------ Static State Function Definition ---------------------------------------//

static void enter_seq_wait_event(event_manager_handle_t handle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ wait event ]\r\n");
    fsm_set_next_state(handle, ST_WAIT_EVENT);
 8001758:	2101      	movs	r1, #1
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffbc 	bl	80016d8 <fsm_set_next_state>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <exit_action_wait_event>:

static void exit_action_wait_event(event_manager_handle_t handle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    event_queue_read(&handle->iface.queue, &handle->iface.event);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f7ff fbe1 	bl	8000f44 <event_queue_read>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <during_action_wait_event>:

static void during_action_wait_event(event_manager_handle_t handle)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
    if(event_queue_get_pending(&handle->iface.queue))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3330      	adds	r3, #48	; 0x30
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb84 	bl	8000ea4 <event_queue_get_pending>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <during_action_wait_event+0x1e>
        handle->event.internal = EVT_INT_UNREAD_EVENT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	705a      	strb	r2, [r3, #1]
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <wait_event_on_react>:

static void wait_event_on_react(event_manager_handle_t handle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    bool did_transition = true;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
    if(handle->event.internal == EVT_INT_UNREAD_EVENT)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d106      	bne.n	80017d2 <wait_event_on_react+0x22>
    {
        exit_action_wait_event(handle);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ffcf 	bl	8001768 <exit_action_wait_event>
        enter_seq_notify_event(handle);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f810 	bl	80017f0 <enter_seq_notify_event>
 80017d0:	e001      	b.n	80017d6 <wait_event_on_react+0x26>
    }
    else
        did_transition = false;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]

    if(did_transition == false)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <wait_event_on_react+0x38>
    {
        during_action_wait_event(handle);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffd1 	bl	800178a <during_action_wait_event>
    }
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <enter_seq_notify_event>:

static void enter_seq_notify_event(event_manager_handle_t handle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    event_manager_dbg("enter seq \t[ notify event ]\r\n");
    fsm_set_next_state(handle, ST_NOTIFY_EVENT);
 80017f8:	2102      	movs	r1, #2
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff6c 	bl	80016d8 <fsm_set_next_state>
    entry_action_notify_event(handle);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f804 	bl	800180e <entry_action_notify_event>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <entry_action_notify_event>:

static void entry_action_notify_event(event_manager_handle_t handle)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
    event_manager_dbg("\t notify evt = [0x%X], from [0x%X] to [0x%X]\r\n",
                 handle->iface.event.name,
                 handle->iface.event.fsm.src,
                 handle->iface.event.fsm.dst);

    switch (handle->iface.event.fsm.dst)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	799b      	ldrb	r3, [r3, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <entry_action_notify_event+0x16>
 800181e:	2b02      	cmp	r3, #2
 8001820:	d00a      	beq.n	8001838 <entry_action_notify_event+0x2a>




    default:
        break;
 8001822:	e00f      	b.n	8001844 <entry_action_notify_event+0x36>
            ui_fsm_write_event(ui_fsm_get(), &handle->iface.event);
 8001824:	f000 fb36 	bl	8001e94 <ui_fsm_get>
 8001828:	4602      	mov	r2, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f000 fb98 	bl	8001f66 <ui_fsm_write_event>
        }break; 
 8001836:	e005      	b.n	8001844 <entry_action_notify_event+0x36>
            drawer_fsm_set_ext_evt(&handle->iface.event);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff38 	bl	80016b2 <drawer_fsm_set_ext_evt>
        }break; 
 8001842:	bf00      	nop
    }

    handle->event.internal = EVT_INT_NOTIFICATION_DONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	705a      	strb	r2, [r3, #1]
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <notify_event_on_react>:

static void notify_event_on_react(event_manager_handle_t handle)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
    if(handle->event.internal == EVT_INT_NOTIFICATION_DONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d102      	bne.n	8001868 <notify_event_on_react+0x16>
    {
        enter_seq_wait_event(handle);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff74 	bl	8001750 <enter_seq_wait_event>
    }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <event_manager_write>:

//------------------ Event Manager Function Definition ---------------------------------------//

uint8_t event_manager_write(event_manager_handle_t handle, event_t *event)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    return event_queue_write(&handle->iface.queue, event);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3330      	adds	r3, #48	; 0x30
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fb1b 	bl	8000ebc <event_queue_write>
 8001886:	4603      	mov	r3, r0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <ui_draw_window>:


//////////////////////////////////// Static Common Functions  //////////////////////////////////////////////

static void ui_draw_window(ui_window_t *win, uint16_t color, bool show)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
    if (show == true)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d011      	beq.n	80018ca <ui_draw_window+0x3a>
    {
        BSP_LCD_SetTextColor(color);
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fe2d 	bl	8003508 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	8818      	ldrh	r0, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	8859      	ldrh	r1, [r3, #2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	889a      	ldrh	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	88db      	ldrh	r3, [r3, #6]
 80018be:	f001 ffb9 	bl	8003834 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f001 fe20 	bl	8003508 <BSP_LCD_SetTextColor>
    {
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
    }
}
 80018c8:	e010      	b.n	80018ec <ui_draw_window+0x5c>
        BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 80018ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018ce:	f001 fe1b 	bl	8003508 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawRect(win->x, win->y, win->w, win->h);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	8818      	ldrh	r0, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	8859      	ldrh	r1, [r3, #2]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	889a      	ldrh	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	88db      	ldrh	r3, [r3, #6]
 80018e2:	f001 ffa7 	bl	8003834 <BSP_LCD_DrawRect>
        BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f001 fe0e 	bl	8003508 <BSP_LCD_SetTextColor>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <ui_clear_window>:

static void ui_clear_window(ui_window_t *win)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(LCD_DEFAULT_BACKCOLOR);
 80018fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001900:	f001 fe02 	bl	8003508 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(win->x, win->y, win->w, win->h);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	8818      	ldrh	r0, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8859      	ldrh	r1, [r3, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	889a      	ldrh	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	88db      	ldrh	r3, [r3, #6]
 8001914:	f002 f81e 	bl	8003954 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
 8001918:	2000      	movs	r0, #0
 800191a:	f001 fdf5 	bl	8003508 <BSP_LCD_SetTextColor>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <ui_draw_icon>:

static void ui_draw_icon(ui_icon_t *icon)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
    BSP_LCD_DrawBitmap(icon->x, icon->y, (uint8_t*)icon->ptr);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	8818      	ldrh	r0, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8859      	ldrh	r1, [r3, #2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	f001 ffb0 	bl	80038a0 <BSP_LCD_DrawBitmap>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <ui_fill_window>:
    BSP_LCD_FillCircle(win->x, win->y, radio);
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR);
}

static void ui_fill_window(ui_window_t *win, uint16_t color)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
    BSP_LCD_SetTextColor(color);
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fdd6 	bl	8003508 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(win->x, win->y, win->w, win->h);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	8818      	ldrh	r0, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	8859      	ldrh	r1, [r3, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	889a      	ldrh	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	88db      	ldrh	r3, [r3, #6]
 800196c:	f001 fff2 	bl	8003954 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_DEFAULT_TEXTCOLOR); 
 8001970:	2000      	movs	r0, #0
 8001972:	f001 fdc9 	bl	8003508 <BSP_LCD_SetTextColor>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <ui_display_string>:

static void ui_display_string(ui_window_t *win, uint8_t *text, sFONT *font, uint16_t color)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	807b      	strh	r3, [r7, #2]
    BSP_LCD_SetTextColor(color);
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	4618      	mov	r0, r3
 8001992:	f001 fdb9 	bl	8003508 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(font);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f001 fdd6 	bl	8003548 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(win->x, win->y, text, LEFT_MODE);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8818      	ldrh	r0, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8859      	ldrh	r1, [r3, #2]
 80019a4:	2303      	movs	r3, #3
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f001 fe24 	bl	80035f4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <ui_display_string+0x44>)
 80019ae:	f001 fdcb 	bl	8003548 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_DEFAULT_BACKCOLOR);
 80019b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019b6:	f001 fdb7 	bl	8003528 <BSP_LCD_SetBackColor>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000018 	.word	0x20000018

080019c8 <ui_battery_init>:

//////////////////////////////////// Battery Icon Related Functions   //////////////////////////////////////////////
void ui_battery_init(ui_battery_t *batt)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    /* Main window position - all other components will move according to this coordinate */
    batt->win.main.x = 366;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80019d6:	801a      	strh	r2, [r3, #0]
    batt->win.main.y = 10;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	220a      	movs	r2, #10
 80019dc:	805a      	strh	r2, [r3, #2]
    batt->win.main.h = 81;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2251      	movs	r2, #81	; 0x51
 80019e2:	80da      	strh	r2, [r3, #6]
    batt->win.main.w = 96;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2260      	movs	r2, #96	; 0x60
 80019e8:	809a      	strh	r2, [r3, #4]

    batt->icon.batt.ptr = &battery_icon;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a2d      	ldr	r2, [pc, #180]	; (8001aa4 <ui_battery_init+0xdc>)
 80019ee:	615a      	str	r2, [r3, #20]
    batt->icon.batt.x = batt->win.main.x + 4;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	3304      	adds	r3, #4
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	821a      	strh	r2, [r3, #16]
    batt->icon.batt.y = batt->win.main.y + 16;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	885b      	ldrh	r3, [r3, #2]
 8001a00:	3310      	adds	r3, #16
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	825a      	strh	r2, [r3, #18]

    batt->icon.error.ptr = &batt_error_icon;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <ui_battery_init+0xe0>)
 8001a0c:	61da      	str	r2, [r3, #28]
    batt->icon.error.x = batt->icon.batt.x + 16;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	8a1b      	ldrh	r3, [r3, #16]
 8001a12:	3310      	adds	r3, #16
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	831a      	strh	r2, [r3, #24]
    batt->icon.error.y = batt->icon.batt.y + 16;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	8a5b      	ldrh	r3, [r3, #18]
 8001a1e:	3310      	adds	r3, #16
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	835a      	strh	r2, [r3, #26]

    batt->icon.warn.ptr = &batt_warning_icon;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <ui_battery_init+0xe4>)
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
    batt->icon.warn.x = batt->icon.batt.x + 16;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8a1b      	ldrh	r3, [r3, #16]
 8001a30:	3310      	adds	r3, #16
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	841a      	strh	r2, [r3, #32]
    batt->icon.warn.y = batt->icon.batt.y + 16;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	8a5b      	ldrh	r3, [r3, #18]
 8001a3c:	3310      	adds	r3, #16
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	845a      	strh	r2, [r3, #34]	; 0x22

    batt->shape.charge.x = batt->icon.batt.x + 17;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	8a1b      	ldrh	r3, [r3, #16]
 8001a48:	3311      	adds	r3, #17
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	811a      	strh	r2, [r3, #8]
    batt->shape.charge.y = batt->icon.batt.y + 8;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	8a5b      	ldrh	r3, [r3, #18]
 8001a54:	3308      	adds	r3, #8
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	815a      	strh	r2, [r3, #10]
    batt->shape.charge.h = batt->icon.batt.ptr->infoHeader.biHeight - 16;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b10      	subs	r3, #16
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	81da      	strh	r2, [r3, #14]
    batt->shape.charge.w = batt->icon.batt.ptr->infoHeader.biWidth - 24;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b18      	subs	r3, #24
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	819a      	strh	r2, [r3, #12]

    batt->text.x = batt->shape.charge.x + 15;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	891b      	ldrh	r3, [r3, #8]
 8001a84:	330f      	adds	r3, #15
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	851a      	strh	r2, [r3, #40]	; 0x28
    batt->text.y = batt->shape.charge.y + 10;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	895b      	ldrh	r3, [r3, #10]
 8001a90:	330a      	adds	r3, #10
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	0800bf40 	.word	0x0800bf40
 8001aa8:	0800b388 	.word	0x0800b388
 8001aac:	0800bbc0 	.word	0x0800bbc0

08001ab0 <ui_battery_show>:

void ui_battery_show(ui_battery_t *batt, bool show)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
    if(show)
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <ui_battery_show+0x1e>
    {
        /*Display Battery Icon*/
        ui_draw_icon(&batt->icon.batt);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3310      	adds	r3, #16
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff2d 	bl	8001926 <ui_draw_icon>
    else
    {
        /*Clear battery screen section */
        ui_clear_window(&batt->win.main);
    }
}
 8001acc:	e003      	b.n	8001ad6 <ui_battery_show+0x26>
        ui_clear_window(&batt->win.main);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff0f 	bl	80018f4 <ui_clear_window>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <ui_battery_draw_charge>:

static void ui_battery_draw_charge(ui_battery_t *batt, uint8_t batt_lvl)
{
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
    float width = batt->shape.charge.w * (batt_lvl / 100.0);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	899b      	ldrh	r3, [r3, #12]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fc7d 	bl	80003f0 <__aeabi_i2d>
 8001af6:	4604      	mov	r4, r0
 8001af8:	460d      	mov	r5, r1
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fc77 	bl	80003f0 <__aeabi_i2d>
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <ui_battery_draw_charge+0x108>)
 8001b08:	f7fe fe06 	bl	8000718 <__aeabi_ddiv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fcd6 	bl	80004c4 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7fe fee2 	bl	80008e8 <__aeabi_d2f>
 8001b24:	4603      	mov	r3, r0
 8001b26:	617b      	str	r3, [r7, #20]
    uint8_t str[5] = {0};
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	743b      	strb	r3, [r7, #16]
    sprintf(str, "%d%%", batt_lvl);
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	492d      	ldr	r1, [pc, #180]	; (8001bec <ui_battery_draw_charge+0x10c>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 f801 	bl	8006b40 <siprintf>

    uint8_t temp_w = batt->shape.charge.w;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	899b      	ldrh	r3, [r3, #12]
 8001b42:	74fb      	strb	r3, [r7, #19]
    batt->shape.charge.w = (int)width;
 8001b44:	6978      	ldr	r0, [r7, #20]
 8001b46:	f7fe ff1f 	bl	8000988 <__aeabi_f2iz>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	819a      	strh	r2, [r3, #12]
        
    /*Critical battery level */
    if(batt_lvl > 0 && batt_lvl < 17)
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d012      	beq.n	8001b7e <ui_battery_draw_charge+0x9e>
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d80f      	bhi.n	8001b7e <ui_battery_draw_charge+0x9e>
    {
        ui_fill_window(&batt->shape.charge, LCD_COLOR_RED);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3308      	adds	r3, #8
 8001b62:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff feee 	bl	8001948 <ui_fill_window>
        ui_display_string(&batt->text, str, &Font16, LCD_DEFAULT_TEXTCOLOR);   
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b72:	f107 010c 	add.w	r1, r7, #12
 8001b76:	2300      	movs	r3, #0
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <ui_battery_draw_charge+0x110>)
 8001b7a:	f7ff ff01 	bl	8001980 <ui_display_string>
    }

    /*Medium battery level */
    if(batt_lvl >= 17  && batt_lvl < 70)
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d912      	bls.n	8001baa <ui_battery_draw_charge+0xca>
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b45      	cmp	r3, #69	; 0x45
 8001b88:	d80f      	bhi.n	8001baa <ui_battery_draw_charge+0xca>
    {
        ui_fill_window(&batt->shape.charge, LCD_COLOR_YELLOW);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fed8 	bl	8001948 <ui_fill_window>
        ui_display_string(&batt->text, str, &Font16, LCD_DEFAULT_TEXTCOLOR); 
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b9e:	f107 010c 	add.w	r1, r7, #12
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <ui_battery_draw_charge+0x110>)
 8001ba6:	f7ff feeb 	bl	8001980 <ui_display_string>
    }

    /*High battery level */
    if(batt_lvl >= 70  && batt_lvl <= 100)
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	2b45      	cmp	r3, #69	; 0x45
 8001bae:	d912      	bls.n	8001bd6 <ui_battery_draw_charge+0xf6>
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d80f      	bhi.n	8001bd6 <ui_battery_draw_charge+0xf6>
    {
        ui_fill_window(&batt->shape.charge, LCD_COLOR_GREEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3308      	adds	r3, #8
 8001bba:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fec2 	bl	8001948 <ui_fill_window>
        ui_display_string(&batt->text, str, &Font16, LCD_DEFAULT_TEXTCOLOR); 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001bca:	f107 010c 	add.w	r1, r7, #12
 8001bce:	2300      	movs	r3, #0
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <ui_battery_draw_charge+0x110>)
 8001bd2:	f7ff fed5 	bl	8001980 <ui_display_string>
    }

    batt->shape.charge.w = temp_w;
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	819a      	strh	r2, [r3, #12]
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40590000 	.word	0x40590000
 8001bec:	080079e4 	.word	0x080079e4
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <ui_battery_set_config>:

void ui_battery_set_config(ui_battery_t *batt, ui_battery_config_t *config)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    /*Paint select battery item property*/
    if (config->select == UI_ITEM_SELECT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <ui_battery_set_config+0x20>
        ui_draw_window(&batt->win.main, UI_SELECTION_COLOR, true);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	211f      	movs	r1, #31
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fe3f 	bl	8001890 <ui_draw_window>
 8001c12:	e006      	b.n	8001c22 <ui_battery_set_config+0x2e>
    else
        ui_draw_window(&batt->win.main, LCD_DEFAULT_BACKCOLOR, false);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fe37 	bl	8001890 <ui_draw_window>
    
    /*Clear charging info */
    ui_clear_window(&batt->shape.charge); 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3308      	adds	r3, #8
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fe64 	bl	80018f4 <ui_clear_window>

    switch (config->set)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d012      	beq.n	8001c5a <ui_battery_set_config+0x66>
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	dc17      	bgt.n	8001c68 <ui_battery_set_config+0x74>
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <ui_battery_set_config+0x4e>
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d006      	beq.n	8001c4e <ui_battery_set_config+0x5a>
    {
        case BATT_ST_NO_DETECTED: { ui_draw_icon(&batt->icon.error); } break;
        case BATT_ST_LOW_BATTERY: { ui_draw_icon(&batt->icon.warn);  } break;
        case BATT_ST_CHARGING:    { ui_battery_draw_charge(batt, config->charge); } break;
    }
}
 8001c40:	e012      	b.n	8001c68 <ui_battery_set_config+0x74>
        case BATT_ST_NO_DETECTED: { ui_draw_icon(&batt->icon.error); } break;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3318      	adds	r3, #24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fe6d 	bl	8001926 <ui_draw_icon>
 8001c4c:	e00c      	b.n	8001c68 <ui_battery_set_config+0x74>
        case BATT_ST_LOW_BATTERY: { ui_draw_icon(&batt->icon.warn);  } break;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3320      	adds	r3, #32
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe67 	bl	8001926 <ui_draw_icon>
 8001c58:	e006      	b.n	8001c68 <ui_battery_set_config+0x74>
        case BATT_ST_CHARGING:    { ui_battery_draw_charge(batt, config->charge); } break;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff3d 	bl	8001ae0 <ui_battery_draw_charge>
 8001c66:	bf00      	nop
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <ui_drawers_init>:

//////////////////////////////////// Drawer Box Related Functions    //////////////////////////////////////////////

void ui_drawers_init(ui_drawers_t *drawers)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    /*position in the screen, all the remaining components will move with it*/
    drawers->win.main.x = 15;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	801a      	strh	r2, [r3, #0]
    drawers->win.main.y = 10;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	220a      	movs	r2, #10
 8001c82:	805a      	strh	r2, [r3, #2]
    drawers->win.main.h = 81;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2251      	movs	r2, #81	; 0x51
 8001c88:	80da      	strh	r2, [r3, #6]
    drawers->win.main.w = 132;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2284      	movs	r2, #132	; 0x84
 8001c8e:	809a      	strh	r2, [r3, #4]

    drawers->shape.main.x = drawers->win.main.x + 4;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	3304      	adds	r3, #4
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	811a      	strh	r2, [r3, #8]
    drawers->shape.main.y = drawers->win.main.y + 4;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	885b      	ldrh	r3, [r3, #2]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	815a      	strh	r2, [r3, #10]
    drawers->shape.main.h = drawers->win.main.h - 8;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	88db      	ldrh	r3, [r3, #6]
 8001cac:	3b08      	subs	r3, #8
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	81da      	strh	r2, [r3, #14]
    drawers->shape.main.w = drawers->win.main.w - 8;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	889b      	ldrh	r3, [r3, #4]
 8001cb8:	3b08      	subs	r3, #8
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	819a      	strh	r2, [r3, #12]

    drawers->shape.single.w = 50;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2232      	movs	r2, #50	; 0x32
 8001cc4:	829a      	strh	r2, [r3, #20]
    drawers->shape.single.h = 25;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2219      	movs	r2, #25
 8001cca:	82da      	strh	r2, [r3, #22]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
	...

08001cd8 <ui_drawers_show>:

void ui_drawers_show(ui_drawers_t *drawers, bool show)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
    static const pos_t drawer_pos[DRAWERn] = { {7, 7}, {66, 7}, {7, 41}, {66, 41} };

    uint8_t str_buff[5] = {};
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	753b      	strb	r3, [r7, #20]

    if(show)
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d046      	beq.n	8001d80 <ui_drawers_show+0xa8>
    {
        ui_draw_window(&drawers->shape.main, LCD_DEFAULT_TEXTCOLOR, true);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fdc8 	bl	8001890 <ui_draw_window>

        for (uint8_t i = 0; i < DRAWERn; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]
 8001d04:	e038      	b.n	8001d78 <ui_drawers_show+0xa0>
        {
            drawers->shape.single.x = drawers->shape.main.x + drawer_pos[i].x;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	891a      	ldrh	r2, [r3, #8]
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	4920      	ldr	r1, [pc, #128]	; (8001d90 <ui_drawers_show+0xb8>)
 8001d0e:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001d12:	4413      	add	r3, r2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	821a      	strh	r2, [r3, #16]
            drawers->shape.single.y = drawers->shape.main.y + drawer_pos[i].y;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	895a      	ldrh	r2, [r3, #10]
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	491b      	ldr	r1, [pc, #108]	; (8001d90 <ui_drawers_show+0xb8>)
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	825a      	strh	r2, [r3, #18]
            ui_draw_window(&drawers->shape.single, LCD_DEFAULT_TEXTCOLOR, true);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3310      	adds	r3, #16
 8001d34:	2201      	movs	r2, #1
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fda9 	bl	8001890 <ui_draw_window>

            ui_window_t text_pos;
            text_pos.x = drawers->shape.single.x + 15;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	8a1b      	ldrh	r3, [r3, #16]
 8001d42:	330f      	adds	r3, #15
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	813b      	strh	r3, [r7, #8]
            text_pos.y = drawers->shape.single.y + 4;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	8a5b      	ldrh	r3, [r3, #18]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	817b      	strh	r3, [r7, #10]
            sprintf(str_buff,"%d", i + 1);
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	490e      	ldr	r1, [pc, #56]	; (8001d94 <ui_drawers_show+0xbc>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 feef 	bl	8006b40 <siprintf>
            ui_display_string(&text_pos, str_buff, &Font16, LCD_DEFAULT_TEXTCOLOR);
 8001d62:	f107 0110 	add.w	r1, r7, #16
 8001d66:	f107 0008 	add.w	r0, r7, #8
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <ui_drawers_show+0xc0>)
 8001d6e:	f7ff fe07 	bl	8001980 <ui_display_string>
        for (uint8_t i = 0; i < DRAWERn; i++)
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	3301      	adds	r3, #1
 8001d76:	75fb      	strb	r3, [r7, #23]
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d9c3      	bls.n	8001d06 <ui_drawers_show+0x2e>
    }
    else
    {
        ui_clear_window(&drawers->win.main);
    }
}
 8001d7e:	e003      	b.n	8001d88 <ui_drawers_show+0xb0>
        ui_clear_window(&drawers->win.main);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fdb6 	bl	80018f4 <ui_clear_window>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	0800e3b8 	.word	0x0800e3b8
 8001d94:	080079ec 	.word	0x080079ec
 8001d98:	20000000 	.word	0x20000000

08001d9c <ui_drawers_set_config>:

void ui_drawers_set_config(ui_drawers_t *drawers, ui_drawers_config_t *config)
{   
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    ui_drawers_show(drawers, true);
 8001da6:	2101      	movs	r1, #1
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff95 	bl	8001cd8 <ui_drawers_show>
    sFONT    *font = &Font20;
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <ui_drawers_set_config+0xe8>)
 8001db0:	61fb      	str	r3, [r7, #28]

    /*Paint select battery item property*/
    if (config->select.main == UI_ITEM_SELECT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	789b      	ldrb	r3, [r3, #2]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <ui_drawers_set_config+0x30>
    {
        font = &Font24;
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <ui_drawers_set_config+0xec>)
 8001dbc:	61fb      	str	r3, [r7, #28]
        ui_draw_window(&drawers->win.main, UI_SELECTION_COLOR, true);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	211f      	movs	r1, #31
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fd63 	bl	8001890 <ui_draw_window>
 8001dca:	e005      	b.n	8001dd8 <ui_drawers_set_config+0x3c>
    }
    else
    {
        ui_draw_window(&drawers->win.main, UI_SELECTION_COLOR, true);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	211f      	movs	r1, #31
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fd5c 	bl	8001890 <ui_draw_window>
    }

    /*Paint select battery item property*/
    if (config->select.single == UI_ITEM_SELECT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	78db      	ldrb	r3, [r3, #3]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d13a      	bne.n	8001e56 <ui_drawers_set_config+0xba>
    {
        static const pos_t drawer_pos[DRAWERn] = { {7, 7}, {66, 7}, {7, 41}, {66, 41} };
        drawers->shape.single.x = drawers->shape.main.x + drawer_pos[config->drawer.no].x;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	891a      	ldrh	r2, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <ui_drawers_set_config+0xf0>)
 8001dec:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8001df0:	4413      	add	r3, r2
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	821a      	strh	r2, [r3, #16]
        drawers->shape.single.y = drawers->shape.main.y + drawer_pos[config->drawer.no].y;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	895a      	ldrh	r2, [r3, #10]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	4922      	ldr	r1, [pc, #136]	; (8001e8c <ui_drawers_set_config+0xf0>)
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	885b      	ldrh	r3, [r3, #2]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	825a      	strh	r2, [r3, #18]
        ui_draw_window(&drawers->shape.single, UI_SELECTION_COLOR, true);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3310      	adds	r3, #16
 8001e14:	2201      	movs	r2, #1
 8001e16:	211f      	movs	r1, #31
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fd39 	bl	8001890 <ui_draw_window>

        ui_window_t text_pos;
        text_pos.x = drawers->shape.single.x + 15;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8a1b      	ldrh	r3, [r3, #16]
 8001e22:	330f      	adds	r3, #15
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	82bb      	strh	r3, [r7, #20]
        text_pos.y = drawers->shape.single.y + 4;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8a5b      	ldrh	r3, [r3, #18]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	82fb      	strh	r3, [r7, #22]

        uint8_t str_buff[5];
        sprintf(str_buff, "%d", config->drawer.no + 1);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	4914      	ldr	r1, [pc, #80]	; (8001e90 <ui_drawers_set_config+0xf4>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fe7e 	bl	8006b40 <siprintf>
        ui_display_string(&text_pos, str_buff, &font, UI_SELECTION_COLOR);
 8001e44:	f107 021c 	add.w	r2, r7, #28
 8001e48:	f107 010c 	add.w	r1, r7, #12
 8001e4c:	f107 0014 	add.w	r0, r7, #20
 8001e50:	231f      	movs	r3, #31
 8001e52:	f7ff fd95 	bl	8001980 <ui_display_string>
    }

    switch (config->drawer.st)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d80b      	bhi.n	8001e78 <ui_drawers_set_config+0xdc>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <ui_drawers_set_config+0xcc>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e79 	.word	0x08001e79
 8001e6c:	08001e79 	.word	0x08001e79
 8001e70:	08001e79 	.word	0x08001e79
 8001e74:	08001e79 	.word	0x08001e79
        case DRAWER_ST_OPEN:    { /* place drawing operations for this state here */ } break;
        case DRAWER_ST_OPENING: { /* place drawing operations for this state here */ } break;
        case DRAWER_ST_CLOSE:   { /* place drawing operations for this state here */ } break;
        case DRAWER_ST_CLOSING: { /* place drawing operations for this state here */ } break;
    default:
        break;
 8001e78:	bf00      	nop
    }
}
 8001e7a:	bf00      	nop
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	0800e3c8 	.word	0x0800e3c8
 8001e90:	080079ec 	.word	0x080079ec

08001e94 <ui_fsm_get>:


////////////////////////////// Public function declaration //////////////////////////////////////

ui_handle_t ui_fsm_get(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
    return &ui_fsm;
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <ui_fsm_get+0x10>)
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	200002b8 	.word	0x200002b8

08001ea8 <ui_fsm_init>:

void ui_fsm_init(ui_handle_t handle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	enter_seq_main_menu(handle);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f86a 	bl	8001f8a <enter_seq_main_menu>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <ui_fsm_run>:

void ui_fsm_run(ui_handle_t handle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d814      	bhi.n	8001efc <ui_fsm_run+0x3c>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <ui_fsm_run+0x18>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001eed 	.word	0x08001eed
 8001edc:	08001efd 	.word	0x08001efd
 8001ee0:	08001efd 	.word	0x08001efd
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001ef5 	.word	0x08001ef5
    {
        case ST_UI_MAIN_MENU:          main_menu_on_react(handle); break;
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f87d 	bl	8001fec <main_menu_on_react>
 8001ef2:	e004      	b.n	8001efe <ui_fsm_run+0x3e>
        case ST_UI_DATE_TIME_CONFIG: break;
        case ST_UI_PET_CALL_CONFIG: break;
        case ST_UI_FEEDER_CONFIG: break;
        case ST_UI_DRAWER_ST_REQUEST: drawer_request_on_react(handle); break;
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f935 	bl	8002164 <drawer_request_on_react>
 8001efa:	e000      	b.n	8001efe <ui_fsm_run+0x3e>
    default:
        break;
 8001efc:	bf00      	nop
    }

}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <fsm_set_next_state>:

static void fsm_set_next_state(ui_handle_t handle, ui_state_t next_st)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
    handle->state = next_st;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	701a      	strb	r2, [r3, #0]
    handle->event.btn = EVT_EXT_BTN_INVALID;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	709a      	strb	r2, [r3, #2]
    handle->event.internal = EVT_INT_UI_INVALID;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	70da      	strb	r2, [r3, #3]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <ui_fsm_time_update>:

void ui_fsm_time_update(ui_handle_t handle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	time_event_t *time_event = (time_event_t *)&handle->event.time;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	e008      	b.n	8001f56 <ui_fsm_time_update+0x26>
	{
		time_event_update(time_event);
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff fb40 	bl	80015ca <time_event_update>
		time_event++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f3      	beq.n	8001f44 <ui_fsm_time_update+0x14>
	}
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ui_fsm_write_event>:

void ui_fsm_write_event(ui_handle_t handle, event_t *event)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
    if(event->fsm.src == BTN_FSM)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d103      	bne.n	8001f80 <ui_fsm_write_event+0x1a>
    {
        ui_fsm_dbg("btn event detected\r\n");
        handle->event.btn = event->name;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	709a      	strb	r2, [r3, #2]
    }
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <enter_seq_main_menu>:


/////////////////////////////////// Main Menu State  ///////////////////////////////////////////

static void enter_seq_main_menu(ui_handle_t handle)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ main menu ]");
    fsm_set_next_state(handle, ST_UI_MAIN_MENU);
 8001f92:	2101      	movs	r1, #1
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffb7 	bl	8001f08 <fsm_set_next_state>
    entry_action_main_menu(handle);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f804 	bl	8001fa8 <entry_action_main_menu>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <entry_action_main_menu>:

static void entry_action_main_menu(ui_handle_t handle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    /*Initialize UI elements */
    ui_battery_init(&ui_battery);
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <entry_action_main_menu+0x3c>)
 8001fb2:	f7ff fd09 	bl	80019c8 <ui_battery_init>
    ui_drawers_init(&ui_drawers);
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <entry_action_main_menu+0x40>)
 8001fb8:	f7ff fe5a 	bl	8001c70 <ui_drawers_init>

//    ui_battery_init(&ui_thermostat);
//    ui_feeder_menu_init(&ui_feeder_menu);

    /*Show main menu elements */
    ui_battery_show(&ui_battery, true);
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <entry_action_main_menu+0x3c>)
 8001fc0:	f7ff fd76 	bl	8001ab0 <ui_battery_show>
    ui_drawers_show(&ui_drawers, true);
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <entry_action_main_menu+0x40>)
 8001fc8:	f7ff fe86 	bl	8001cd8 <ui_drawers_show>

    time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fac7 	bl	8001568 <time_event_start>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000270 	.word	0x20000270
 8001fe8:	200002a0 	.word	0x200002a0

08001fec <main_menu_on_react>:


static void main_menu_on_react(ui_handle_t handle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    /*navigation key update item selection*/
	ui_drawers_config_t *drawer_cfg = &handle->iface.ui.drawers;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3310      	adds	r3, #16
 8001ff8:	60fb      	str	r3, [r7, #12]

    switch (handle->event.btn)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	789b      	ldrb	r3, [r3, #2]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	2b08      	cmp	r3, #8
 8002002:	d831      	bhi.n	8002068 <main_menu_on_react+0x7c>
 8002004:	a201      	add	r2, pc, #4	; (adr r2, 800200c <main_menu_on_react+0x20>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	08002069 	.word	0x08002069
 8002010:	08002069 	.word	0x08002069
 8002014:	08002069 	.word	0x08002069
 8002018:	08002069 	.word	0x08002069
 800201c:	08002069 	.word	0x08002069
 8002020:	08002031 	.word	0x08002031
 8002024:	0800203f 	.word	0x0800203f
 8002028:	0800204d 	.word	0x0800204d
 800202c:	0800205b 	.word	0x0800205b
    case EVT_EXT_BTN_RIGHT_PRESSED:
        break;
    case EVT_EXT_BTN_ENTER_PRESSED:
        break;

    case EVT_EXT_BTN_UP_AND_ENTER_PRESSED:   {drawer_cfg->drawer.no = DRAWER_NO_1; drawer_request_enter_seq(handle); } break;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	705a      	strb	r2, [r3, #1]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f82e 	bl	8002098 <drawer_request_enter_seq>
 800203c:	e015      	b.n	800206a <main_menu_on_react+0x7e>
    case EVT_EXT_BTN_DOWN_AND_ENTER_PRESSED: {drawer_cfg->drawer.no = DRAWER_NO_2; drawer_request_enter_seq(handle); } break;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	705a      	strb	r2, [r3, #1]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f827 	bl	8002098 <drawer_request_enter_seq>
 800204a:	e00e      	b.n	800206a <main_menu_on_react+0x7e>
    case EVT_EXT_BTN_LEFT_AND_ENTER_PRESSED: {drawer_cfg->drawer.no = DRAWER_NO_3; drawer_request_enter_seq(handle); } break;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2202      	movs	r2, #2
 8002050:	705a      	strb	r2, [r3, #1]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f820 	bl	8002098 <drawer_request_enter_seq>
 8002058:	e007      	b.n	800206a <main_menu_on_react+0x7e>
    case EVT_EXT_BTN_RIGHT_AND_ENTER_PRESSED:{drawer_cfg->drawer.no = DRAWER_NO_4; drawer_request_enter_seq(handle); } break;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2203      	movs	r2, #3
 800205e:	705a      	strb	r2, [r3, #1]
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f819 	bl	8002098 <drawer_request_enter_seq>
 8002066:	e000      	b.n	800206a <main_menu_on_react+0x7e>

    default:
        break;
 8002068:	bf00      	nop
    };

    if(time_event_is_raised(&handle->event.time.update_gui) == true)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff facc 	bl	800160c <time_event_is_raised>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <main_menu_on_react+0xa2>
    {
        time_event_start(&handle->event.time.update_gui, UPDATE_GUI_MS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fa70 	bl	8001568 <time_event_start>
        gui_update_battery(handle);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f877 	bl	800217c <gui_update_battery>
    }
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop

08002098 <drawer_request_enter_seq>:

/////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// Drawer Request State  ///////////////////////////////////////////
void drawer_request_enter_seq(ui_handle_t handle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("enter seq \t[ drawer request ]");
    fsm_set_next_state(handle, ST_UI_DRAWER_ST_REQUEST);
 80020a0:	2105      	movs	r1, #5
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff30 	bl	8001f08 <fsm_set_next_state>
    entry_action_drawer_request(handle);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f839 	bl	8002120 <entry_action_drawer_request>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <notify_manual_drawer_operation>:

static void notify_manual_drawer_operation(ui_handle_t handle)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b090      	sub	sp, #64	; 0x40
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
    ui_drawers_config_t *drawer_cfg = &handle->iface.ui.drawers;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3310      	adds	r3, #16
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    drawer_ctrl_info *info = drawer_fsm_get_info(drawer_cfg->drawer.no);
 80020c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fae7 	bl	800169c <drawer_fsm_get_info>
 80020ce:	63b8      	str	r0, [r7, #56]	; 0x38
    event_t event;

    event.name = EVT_EXT_DRW_INVALID;
 80020d0:	2300      	movs	r3, #0
 80020d2:	733b      	strb	r3, [r7, #12]
    event.fsm.src = UI_FSM;
 80020d4:	2300      	movs	r3, #0
 80020d6:	737b      	strb	r3, [r7, #13]
    event.fsm.dst = DRAWER_FSM;
 80020d8:	2302      	movs	r3, #2
 80020da:	73bb      	strb	r3, [r7, #14]
    event.data.len = sizeof(drawer_ev_ext_data_t);
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
    ((drawer_ev_ext_data_t*)event.data.buff)->no = drawer_cfg->drawer.no;
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	3304      	adds	r3, #4
 80020e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e8:	7852      	ldrb	r2, [r2, #1]
 80020ea:	701a      	strb	r2, [r3, #0]

    if (info->status.curr == DRAWER_ST_CLOSE || info->status.curr == DRAWER_ST_CLOSING)
 80020ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d003      	beq.n	80020fc <notify_manual_drawer_operation+0x46>
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d102      	bne.n	8002102 <notify_manual_drawer_operation+0x4c>
    {
        ui_fsm_dbg("manual opening to drawer no [%d]\r\n", handle->iface.drawer + 1);
        event.name = EVT_EXT_DRW_OPEN;
 80020fc:	2301      	movs	r3, #1
 80020fe:	733b      	strb	r3, [r7, #12]
 8002100:	e009      	b.n	8002116 <notify_manual_drawer_operation+0x60>
    }

    else if (info->status.curr == DRAWER_ST_OPEN || info->status.curr == DRAWER_ST_OPENING)
 8002102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d003      	beq.n	8002112 <notify_manual_drawer_operation+0x5c>
 800210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210c:	785b      	ldrb	r3, [r3, #1]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d101      	bne.n	8002116 <notify_manual_drawer_operation+0x60>
    {
        ui_fsm_dbg("manual closing to drawer no [%d]\r\n", handle->iface.drawer + 1);
        event.name = EVT_EXT_DRW_CLOSE;
 8002112:	2302      	movs	r3, #2
 8002114:	733b      	strb	r3, [r7, #12]

    if(event.name != EVT_EXT_DRW_INVALID)
    {
        // event_manager_write(event_manager_fsm_get(), &event);
    }
}
 8002116:	bf00      	nop
 8002118:	3740      	adds	r7, #64	; 0x40
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <entry_action_drawer_request>:


void entry_action_drawer_request(ui_handle_t handle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    /* Notify Drawer FSM */
    notify_manual_drawer_operation(handle);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ffc4 	bl	80020b6 <notify_manual_drawer_operation>

    /* Update UI Elements */
    ui_drawers_config_t *ui_config = &handle->iface.ui.drawers;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3310      	adds	r3, #16
 8002132:	60fb      	str	r3, [r7, #12]
    drawer_ctrl_info *info = drawer_fsm_get_info(ui_config->drawer.no);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	785b      	ldrb	r3, [r3, #1]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff faaf 	bl	800169c <drawer_fsm_get_info>
 800213e:	60b8      	str	r0, [r7, #8]
    ui_config->drawer.st = info->status.curr;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	785a      	ldrb	r2, [r3, #1]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	701a      	strb	r2, [r3, #0]
    ui_config->select.single = UI_ITEM_SELECT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	70da      	strb	r2, [r3, #3]

    ui_drawers_set_config(&ui_drawers, ui_config);
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <entry_action_drawer_request+0x40>)
 8002152:	f7ff fe23 	bl	8001d9c <ui_drawers_set_config>
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200002a0 	.word	0x200002a0

08002164 <drawer_request_on_react>:

void drawer_request_on_react(ui_handle_t handle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    // no required actions 
    enter_seq_main_menu(handle);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff0c 	bl	8001f8a <enter_seq_main_menu>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <gui_update_battery>:


/////////////////////////////////// Drawing Functions  ///////////////////////////////////////////

static void gui_update_battery(ui_handle_t handle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    ui_fsm_dbg("update battery status \r\n");
    ui_battery_config_t *ui_config = &handle->iface.ui.battery;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3314      	adds	r3, #20
 8002188:	60fb      	str	r3, [r7, #12]
    static uint8_t batt_dummy_val = 0;
    ui_config->select = UI_ITEM_DESELECT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	709a      	strb	r2, [r3, #2]
    ui_config->set    = BATT_ST_CHARGING;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2202      	movs	r2, #2
 8002194:	701a      	strb	r2, [r3, #0]
    ui_config->charge = (batt_dummy_val++ % 100);
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <gui_update_battery+0x4c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	b2d1      	uxtb	r1, r2
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <gui_update_battery+0x4c>)
 80021a0:	7011      	strb	r1, [r2, #0]
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <gui_update_battery+0x50>)
 80021a4:	fba2 1203 	umull	r1, r2, r2, r3
 80021a8:	0952      	lsrs	r2, r2, #5
 80021aa:	2164      	movs	r1, #100	; 0x64
 80021ac:	fb01 f202 	mul.w	r2, r1, r2
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	705a      	strb	r2, [r3, #1]
    ui_battery_set_config(&ui_battery, ui_config);
 80021b8:	68f9      	ldr	r1, [r7, #12]
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <gui_update_battery+0x54>)
 80021bc:	f7ff fd1a 	bl	8001bf4 <ui_battery_set_config>
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200002d0 	.word	0x200002d0
 80021cc:	51eb851f 	.word	0x51eb851f
 80021d0:	20000270 	.word	0x20000270

080021d4 <HAL_GPIO_EXTI_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d034      	beq.n	800224e <HAL_GPIO_EXTI_Callback+0x7a>
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	dc40      	bgt.n	800226a <HAL_GPIO_EXTI_Callback+0x96>
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d022      	beq.n	8002232 <HAL_GPIO_EXTI_Callback+0x5e>
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	dc3c      	bgt.n	800226a <HAL_GPIO_EXTI_Callback+0x96>
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <HAL_GPIO_EXTI_Callback+0x26>
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d00e      	beq.n	8002216 <HAL_GPIO_EXTI_Callback+0x42>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
    }
    break;

    default:
        break;
 80021f8:	e037      	b.n	800226a <HAL_GPIO_EXTI_Callback+0x96>
        if (!time_event_is_active(&navigation_btn.enter.debounce))
 80021fa:	4822      	ldr	r0, [pc, #136]	; (8002284 <HAL_GPIO_EXTI_Callback+0xb0>)
 80021fc:	f7ff f9da 	bl	80015b4 <time_event_is_active>
 8002200:	4603      	mov	r3, r0
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d030      	beq.n	800226e <HAL_GPIO_EXTI_Callback+0x9a>
            time_event_start(&navigation_btn.enter.debounce, DEBOUNCE_TIME_MS);
 800220c:	2132      	movs	r1, #50	; 0x32
 800220e:	481d      	ldr	r0, [pc, #116]	; (8002284 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002210:	f7ff f9aa 	bl	8001568 <time_event_start>
    break;
 8002214:	e02b      	b.n	800226e <HAL_GPIO_EXTI_Callback+0x9a>
        if (!time_event_is_active(&navigation_btn.up.debounce))
 8002216:	481c      	ldr	r0, [pc, #112]	; (8002288 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002218:	f7ff f9cc 	bl	80015b4 <time_event_is_active>
 800221c:	4603      	mov	r3, r0
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d024      	beq.n	8002272 <HAL_GPIO_EXTI_Callback+0x9e>
            time_event_start(&navigation_btn.up.debounce, DEBOUNCE_TIME_MS);
 8002228:	2132      	movs	r1, #50	; 0x32
 800222a:	4817      	ldr	r0, [pc, #92]	; (8002288 <HAL_GPIO_EXTI_Callback+0xb4>)
 800222c:	f7ff f99c 	bl	8001568 <time_event_start>
    break;
 8002230:	e01f      	b.n	8002272 <HAL_GPIO_EXTI_Callback+0x9e>
        if (!time_event_is_active(&navigation_btn.left.debounce))
 8002232:	4816      	ldr	r0, [pc, #88]	; (800228c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002234:	f7ff f9be 	bl	80015b4 <time_event_is_active>
 8002238:	4603      	mov	r3, r0
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d018      	beq.n	8002276 <HAL_GPIO_EXTI_Callback+0xa2>
            time_event_start(&navigation_btn.left.debounce, DEBOUNCE_TIME_MS);
 8002244:	2132      	movs	r1, #50	; 0x32
 8002246:	4811      	ldr	r0, [pc, #68]	; (800228c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002248:	f7ff f98e 	bl	8001568 <time_event_start>
    break;
 800224c:	e013      	b.n	8002276 <HAL_GPIO_EXTI_Callback+0xa2>
        if (!time_event_is_active(&navigation_btn.right.debounce))
 800224e:	4810      	ldr	r0, [pc, #64]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002250:	f7ff f9b0 	bl	80015b4 <time_event_is_active>
 8002254:	4603      	mov	r3, r0
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <HAL_GPIO_EXTI_Callback+0xa6>
            time_event_start(&navigation_btn.right.debounce, DEBOUNCE_TIME_MS);
 8002260:	2132      	movs	r1, #50	; 0x32
 8002262:	480b      	ldr	r0, [pc, #44]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002264:	f7ff f980 	bl	8001568 <time_event_start>
    break;
 8002268:	e007      	b.n	800227a <HAL_GPIO_EXTI_Callback+0xa6>
        break;
 800226a:	bf00      	nop
 800226c:	e006      	b.n	800227c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 800226e:	bf00      	nop
 8002270:	e004      	b.n	800227c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002272:	bf00      	nop
 8002274:	e002      	b.n	800227c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 8002276:	bf00      	nop
 8002278:	e000      	b.n	800227c <HAL_GPIO_EXTI_Callback+0xa8>
    break;
 800227a:	bf00      	nop
    }

}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000164 	.word	0x20000164
 8002288:	20000124 	.word	0x20000124
 800228c:	20000144 	.word	0x20000144
 8002290:	20000154 	.word	0x20000154

08002294 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // enter -> B0
 8002298:	2001      	movs	r0, #1
 800229a:	f002 ffd3 	bl	8005244 <HAL_GPIO_EXTI_IRQHandler>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);   // up -> C4
 80022a6:	2010      	movs	r0, #16
 80022a8:	f002 ffcc 	bl	8005244 <HAL_GPIO_EXTI_IRQHandler>
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);   //Left (A5)
 80022b4:	2020      	movs	r0, #32
 80022b6:	f002 ffc5 	bl	8005244 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);   //Right(A7)
 80022ba:	2080      	movs	r0, #128	; 0x80
 80022bc:	f002 ffc2 	bl	8005244 <HAL_GPIO_EXTI_IRQHandler>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b094      	sub	sp, #80	; 0x50
 80022c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ce:	2228      	movs	r2, #40	; 0x28
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 ffc4 	bl	8006260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002302:	2301      	movs	r3, #1
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	2302      	movs	r3, #2
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800230a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002310:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231a:	4618      	mov	r0, r3
 800231c:	f003 f8ee 	bl	80054fc <HAL_RCC_OscConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SystemClock_Config+0x66>
  {
	Error_Handler();
 8002326:	f000 fa61 	bl	80027ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800232a:	230f      	movs	r3, #15
 800232c:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fb5a 	bl	8005a00 <HAL_RCC_ClockConfig>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <SystemClock_Config+0x92>
  {
	Error_Handler();
 8002352:	f000 fa4b 	bl	80027ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002356:	2302      	movs	r3, #2
 8002358:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800235a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fcd0 	bl	8005d08 <HAL_RCCEx_PeriphCLKConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SystemClock_Config+0xae>
  {
	Error_Handler();
 800236e:	f000 fa3d 	bl	80027ec <Error_Handler>
  }
}
 8002372:	bf00      	nop
 8002374:	3750      	adds	r7, #80	; 0x50
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]

  /** Common config*/
  hadc1.Instance = ADC1;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_ADC1_Init+0x74>)
 800238e:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <MX_ADC1_Init+0x78>)
 8002390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <MX_ADC1_Init+0x74>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <MX_ADC1_Init+0x74>)
 800239a:	2200      	movs	r2, #0
 800239c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <MX_ADC1_Init+0x74>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <MX_ADC1_Init+0x74>)
 80023a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80023aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <MX_ADC1_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <MX_ADC1_Init+0x74>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023b8:	480d      	ldr	r0, [pc, #52]	; (80023f0 <MX_ADC1_Init+0x74>)
 80023ba:	f002 fa15 	bl	80047e8 <HAL_ADC_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80023c4:	f000 fa12 	bl	80027ec <Error_Handler>
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_10;
 80023c8:	230a      	movs	r3, #10
 80023ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_ADC1_Init+0x74>)
 80023da:	f002 fadd 	bl	8004998 <HAL_ADC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80023e4:	f000 fa02 	bl	80027ec <Error_Handler>
  }
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200002d4 	.word	0x200002d4
 80023f4:	40012400 	.word	0x40012400

080023f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_I2C1_Init+0x50>)
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <MX_I2C1_Init+0x54>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_I2C1_Init+0x50>)
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <MX_I2C1_Init+0x58>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_I2C1_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_I2C1_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_I2C1_Init+0x50>)
 8002416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <MX_I2C1_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_I2C1_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <MX_I2C1_Init+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_I2C1_Init+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <MX_I2C1_Init+0x50>)
 8002436:	f002 ff1d 	bl	8005274 <HAL_I2C_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002440:	f000 f9d4 	bl	80027ec <Error_Handler>
  }
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000304 	.word	0x20000304
 800244c:	40005400 	.word	0x40005400
 8002450:	000186a0 	.word	0x000186a0

08002454 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_SPI2_Init+0x64>)
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <MX_SPI2_Init+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002464:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_SPI2_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_SPI2_Init+0x64>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <MX_SPI2_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MX_SPI2_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_SPI2_Init+0x64>)
 80024a0:	220a      	movs	r2, #10
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_SPI2_Init+0x64>)
 80024a6:	f003 fce5 	bl	8005e74 <HAL_SPI_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024b0:	f000 f99c 	bl	80027ec <Error_Handler>
  }
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000358 	.word	0x20000358
 80024bc:	40003800 	.word	0x40003800

080024c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c6:	463b      	mov	r3, r7
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_TIM1_Init+0x70>)
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <MX_TIM1_Init+0x74>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_TIM1_Init+0x70>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_TIM1_Init+0x70>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MX_TIM1_Init+0x70>)
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_TIM1_Init+0x70>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <MX_TIM1_Init+0x70>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_TIM1_Init+0x70>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80024fa:	2108      	movs	r1, #8
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_TIM1_Init+0x70>)
 80024fe:	f003 fd3d 	bl	8005f7c <HAL_TIM_OnePulse_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8002508:	f000 f970 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_TIM1_Init+0x70>)
 800251a:	f003 fde1 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002524:	f000 f962 	bl	80027ec <Error_Handler>
  }


}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000438 	.word	0x20000438
 8002534:	40012c00 	.word	0x40012c00

08002538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <MX_DMA_Init+0x48>)
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <MX_DMA_Init+0x48>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6153      	str	r3, [r2, #20]
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <MX_DMA_Init+0x48>)
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	200e      	movs	r0, #14
 800255c:	f002 fc2d 	bl	8004dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002560:	200e      	movs	r0, #14
 8002562:	f002 fc46 	bl	8004df2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	200f      	movs	r0, #15
 800256c:	f002 fc25 	bl	8004dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002570:	200f      	movs	r0, #15
 8002572:	f002 fc3e 	bl	8004df2 <HAL_NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000

08002584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002598:	4b6e      	ldr	r3, [pc, #440]	; (8002754 <MX_GPIO_Init+0x1d0>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a6d      	ldr	r2, [pc, #436]	; (8002754 <MX_GPIO_Init+0x1d0>)
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a67      	ldr	r2, [pc, #412]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025b6:	f043 0320 	orr.w	r3, r3, #32
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b65      	ldr	r3, [pc, #404]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	4b62      	ldr	r3, [pc, #392]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a61      	ldr	r2, [pc, #388]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e0:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a5b      	ldr	r2, [pc, #364]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b59      	ldr	r3, [pc, #356]	; (8002754 <MX_GPIO_Init+0x1d0>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CONTROL_GPIO_Port, POWER_CONTROL_Pin, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2102      	movs	r1, #2
 80025fc:	4856      	ldr	r0, [pc, #344]	; (8002758 <MX_GPIO_Init+0x1d4>)
 80025fe:	f002 fe08 	bl	8005212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8002602:	2200      	movs	r2, #0
 8002604:	f640 715f 	movw	r1, #3935	; 0xf5f
 8002608:	4854      	ldr	r0, [pc, #336]	; (800275c <MX_GPIO_Init+0x1d8>)
 800260a:	f002 fe02 	bl	8005212 <HAL_GPIO_WritePin>
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002614:	4852      	ldr	r0, [pc, #328]	; (8002760 <MX_GPIO_Init+0x1dc>)
 8002616:	f002 fdfc 	bl	8005212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POWER_CONTROL_Pin */
  GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 800261a:	2302      	movs	r3, #2
 800261c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2302      	movs	r3, #2
 8002628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4619      	mov	r1, r3
 8002630:	4849      	ldr	r0, [pc, #292]	; (8002758 <MX_GPIO_Init+0x1d4>)
 8002632:	f002 fc53 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORDING_STOP_Pin PLAY_Pin  
                           S1_Pin S2_Pin S3_Pin S8_Pin */
  GPIO_InitStruct.Pin = RECORDING_STOP_Pin|PLAY_Pin
 8002636:	f241 338c 	movw	r3, #5004	; 0x138c
 800263a:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S3_Pin|S8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	4619      	mov	r1, r3
 800264a:	4843      	ldr	r0, [pc, #268]	; (8002758 <MX_GPIO_Init+0x1d4>)
 800264c:	f002 fc46 	bl	8004edc <HAL_GPIO_Init>


  /*Configure GPIO pins : FWD_1_Pin BWD_1_Pin FWD_2_Pin BWD_2_Pin
                           SHUTDOWN_Pin PA6_TEMPERATURE_Pin FWD_3_Pin BWD_3_Pin
                           FWD_4_Pin BWD_4_Pin */
  GPIO_InitStruct.Pin = FWD_1_Pin|BWD_1_Pin|FWD_2_Pin|BWD_2_Pin
 8002650:	f640 735f 	movw	r3, #3935	; 0xf5f
 8002654:	613b      	str	r3, [r7, #16]
                          |SHUTDOWN_Pin|PA6_TEMPERATURE_Pin|FWD_3_Pin|BWD_3_Pin
                          |FWD_4_Pin|BWD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2302      	movs	r3, #2
 8002660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 0310 	add.w	r3, r7, #16
 8002666:	4619      	mov	r1, r3
 8002668:	483c      	ldr	r0, [pc, #240]	; (800275c <MX_GPIO_Init+0x1d8>)
 800266a:	f002 fc37 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins :  S4_Pin */
  GPIO_InitStruct.Pin =  S4_Pin;
 800266e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	4619      	mov	r1, r3
 8002682:	4836      	ldr	r0, [pc, #216]	; (800275c <MX_GPIO_Init+0x1d8>)
 8002684:	f002 fc2a 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8002688:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800268c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2302      	movs	r3, #2
 8002698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	4619      	mov	r1, r3
 80026a0:	482f      	ldr	r0, [pc, #188]	; (8002760 <MX_GPIO_Init+0x1dc>)
 80026a2:	f002 fc1b 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|S6_Pin|S7_Pin;
 80026a6:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80026aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <MX_GPIO_Init+0x1e0>)
 80026ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	4619      	mov	r1, r3
 80026ba:	4827      	ldr	r0, [pc, #156]	; (8002758 <MX_GPIO_Init+0x1d4>)
 80026bc:	f002 fc0e 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : S5_Pin */
  GPIO_InitStruct.Pin = S5_Pin;
 80026c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <MX_GPIO_Init+0x1e0>)
 80026c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S5_GPIO_Port, &GPIO_InitStruct);
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	4619      	mov	r1, r3
 80026d4:	4821      	ldr	r0, [pc, #132]	; (800275c <MX_GPIO_Init+0x1d8>)
 80026d6:	f002 fc01 	bl	8004edc <HAL_GPIO_Init>

//////////////////////////////////////////////////////////////////////////////////////////
  /*Navigation Buttons IRQ enable */

  /*Configure GPIO pins : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 80026da:	2330      	movs	r3, #48	; 0x30
 80026dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <MX_GPIO_Init+0x1e4>)
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e6:	f107 0310 	add.w	r3, r7, #16
 80026ea:	4619      	mov	r1, r3
 80026ec:	481a      	ldr	r0, [pc, #104]	; (8002758 <MX_GPIO_Init+0x1d4>)
 80026ee:	f002 fbf5 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin =  DOWN_Pin;
 80026f2:	2320      	movs	r3, #32
 80026f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4619      	mov	r1, r3
 8002704:	4814      	ldr	r0, [pc, #80]	; (8002758 <MX_GPIO_Init+0x1d4>)
 8002706:	f002 fbe9 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 800270a:	23a0      	movs	r3, #160	; 0xa0
 800270c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_GPIO_Init+0x1e4>)
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4619      	mov	r1, r3
 800271c:	480f      	ldr	r0, [pc, #60]	; (800275c <MX_GPIO_Init+0x1d8>)
 800271e:	f002 fbdd 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTER_Pin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8002722:	2301      	movs	r3, #1
 8002724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <MX_GPIO_Init+0x1e4>)
 8002728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	4619      	mov	r1, r3
 8002734:	480a      	ldr	r0, [pc, #40]	; (8002760 <MX_GPIO_Init+0x1dc>)
 8002736:	f002 fbd1 	bl	8004edc <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   // enter-> B0
 800273a:	2006      	movs	r0, #6
 800273c:	f002 fb59 	bl	8004df2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // left -> A5, right -> A7
 8002740:	2017      	movs	r0, #23
 8002742:	f002 fb56 	bl	8004df2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);   // up   -> C4, 
 8002746:	200a      	movs	r0, #10
 8002748:	f002 fb53 	bl	8004df2 <HAL_NVIC_EnableIRQ>
//////////////////////////////////////////////////////////////////////////////////////////s

}
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	40011000 	.word	0x40011000
 800275c:	40010800 	.word	0x40010800
 8002760:	40010c00 	.word	0x40010c00
 8002764:	10110000 	.word	0x10110000
 8002768:	10210000 	.word	0x10210000

0800276c <init_peripherals>:

void init_peripherals(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002770:	f001 ffb4 	bl	80046dc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002774:	f7ff fda6 	bl	80022c4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002778:	f7ff ff04 	bl	8002584 <MX_GPIO_Init>
  MX_ADC1_Init();
 800277c:	f7ff fdfe 	bl	800237c <MX_ADC1_Init>
  MX_SPI2_Init();
 8002780:	f7ff fe68 	bl	8002454 <MX_SPI2_Init>
  MX_DMA_Init();
 8002784:	f7ff fed8 	bl	8002538 <MX_DMA_Init>
  MX_TIM1_Init();
 8002788:	f7ff fe9a 	bl	80024c0 <MX_TIM1_Init>
  MX_I2C1_Init();
 800278c:	f7ff fe34 	bl	80023f8 <MX_I2C1_Init>

  /* Init ITM */
  itm_enable();
 8002790:	f7fe fc48 	bl	8001024 <itm_enable>
  
  /* Initialize LCD drivers*/
  BSP_LCD_Init();
 8002794:	f000 fe7c 	bl	8003490 <BSP_LCD_Init>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
  init_peripherals();
 80027a2:	f7ff ffe3 	bl	800276c <init_peripherals>

  /*Init navigation button control */
  btn_debounce_init(&navigation_btn);
 80027a6:	480e      	ldr	r0, [pc, #56]	; (80027e0 <main+0x44>)
 80027a8:	f7fe f914 	bl	80009d4 <btn_debounce_init>

  /*Init Event Manager*/
  event_manager_handle_t evm_fsm = event_manager_fsm_get();
 80027ac:	f7fe ff8a 	bl	80016c4 <event_manager_fsm_get>
 80027b0:	6078      	str	r0, [r7, #4]
  event_manager_fsm_init(evm_fsm);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe ffb8 	bl	8001728 <event_manager_fsm_init>

  /*Init UI */
  ui_handle_t ui_fsm = ui_fsm_get();
 80027b8:	f7ff fb6c 	bl	8001e94 <ui_fsm_get>
 80027bc:	6038      	str	r0, [r7, #0]
  ui_fsm_init(ui_fsm);
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	f7ff fb72 	bl	8001ea8 <ui_fsm_init>

  printf("Pet Feeder V%s\r\n", FW_VERSION);
 80027c4:	4907      	ldr	r1, [pc, #28]	; (80027e4 <main+0x48>)
 80027c6:	4808      	ldr	r0, [pc, #32]	; (80027e8 <main+0x4c>)
 80027c8:	f004 f91c 	bl	8006a04 <iprintf>

  /* Infinite loop */
  while (1)
  {
    ui_fsm_run(ui_fsm);
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	f7ff fb77 	bl	8001ec0 <ui_fsm_run>
    event_manager_fsm_run(evm_fsm);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe ff91 	bl	80016fa <event_manager_fsm_run>
    time_events_poll_update();
 80027d8:	f7fe ff48 	bl	800166c <time_events_poll_update>
    ui_fsm_run(ui_fsm);
 80027dc:	e7f6      	b.n	80027cc <main+0x30>
 80027de:	bf00      	nop
 80027e0:	2000011c 	.word	0x2000011c
 80027e4:	08007ab4 	.word	0x08007ab4
 80027e8:	08007ac4 	.word	0x08007ac4

080027ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <Error_Handler+0x8>
	...

080027f8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_MspInit+0x5c>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_MspInit+0x5c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6193      	str	r3, [r2, #24]
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_MspInit+0x5c>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_MspInit+0x5c>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <HAL_MspInit+0x5c>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	61d3      	str	r3, [r2, #28]
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_MspInit+0x5c>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_MspInit+0x60>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_MspInit+0x60>)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6053      	str	r3, [r2, #4]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000

0800285c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_ADC_MspInit+0x6c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d121      	bne.n	80028c0 <HAL_ADC_MspInit+0x64>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_ADC_MspInit+0x70>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_ADC_MspInit+0x70>)
 8002882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_ADC_MspInit+0x70>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_ADC_MspInit+0x70>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_ADC_MspInit+0x70>)
 800289a:	f043 0310 	orr.w	r3, r3, #16
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_ADC_MspInit+0x70>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BAT_DETEC_Pin;
 80028ac:	2301      	movs	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b0:	2303      	movs	r3, #3
 80028b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_DETEC_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4619      	mov	r1, r3
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <HAL_ADC_MspInit+0x74>)
 80028bc:	f002 fb0e 	bl	8004edc <HAL_GPIO_Init>
  }

}
 80028c0:	bf00      	nop
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40012400 	.word	0x40012400
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40011000 	.word	0x40011000

080028d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <HAL_I2C_MspInit+0x70>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d123      	bne.n	800293c <HAL_I2C_MspInit+0x68>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_I2C_MspInit+0x74>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_I2C_MspInit+0x74>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_I2C_MspInit+0x74>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 800290c:	23c0      	movs	r3, #192	; 0xc0
 800290e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002910:	2312      	movs	r3, #18
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4619      	mov	r1, r3
 800291e:	480b      	ldr	r0, [pc, #44]	; (800294c <HAL_I2C_MspInit+0x78>)
 8002920:	f002 fadc 	bl	8004edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_I2C_MspInit+0x74>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_I2C_MspInit+0x74>)
 800292a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800292e:	61d3      	str	r3, [r2, #28]
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_I2C_MspInit+0x74>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]

  }

}
 800293c:	bf00      	nop
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40005400 	.word	0x40005400
 8002948:	40021000 	.word	0x40021000
 800294c:	40010c00 	.word	0x40010c00

08002950 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <HAL_SPI_MspInit+0x124>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d17d      	bne.n	8002a6c <HAL_SPI_MspInit+0x11c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002970:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <HAL_SPI_MspInit+0x128>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <HAL_SPI_MspInit+0x128>)
 8002976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297a:	61d3      	str	r3, [r2, #28]
 800297c:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_SPI_MspInit+0x128>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_SPI_MspInit+0x128>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a3a      	ldr	r2, [pc, #232]	; (8002a78 <HAL_SPI_MspInit+0x128>)
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_SPI_MspInit+0x128>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80029a0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80029a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4619      	mov	r1, r3
 80029b4:	4831      	ldr	r0, [pc, #196]	; (8002a7c <HAL_SPI_MspInit+0x12c>)
 80029b6:	f002 fa91 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80029ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	4619      	mov	r1, r3
 80029ce:	482b      	ldr	r0, [pc, #172]	; (8002a7c <HAL_SPI_MspInit+0x12c>)
 80029d0:	f002 fa84 	bl	8004edc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 80029d6:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <HAL_SPI_MspInit+0x134>)
 80029d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a04:	481e      	ldr	r0, [pc, #120]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 8002a06:	f002 fa0f 	bl	8004e28 <HAL_DMA_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002a10:	f7ff feec 	bl	80027ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 8002a18:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_SPI_MspInit+0x130>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a22:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_SPI_MspInit+0x13c>)
 8002a24:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a28:	2210      	movs	r2, #16
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a52:	f002 f9e9 	bl	8004e28 <HAL_DMA_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8002a5c:	f7ff fec6 	bl	80027ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a64:	649a      	str	r2, [r3, #72]	; 0x48
 8002a66:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_SPI_MspInit+0x138>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6253      	str	r3, [r2, #36]	; 0x24


  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40003800 	.word	0x40003800
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010c00 	.word	0x40010c00
 8002a80:	200003b0 	.word	0x200003b0
 8002a84:	40020044 	.word	0x40020044
 8002a88:	200003f4 	.word	0x200003f4
 8002a8c:	40020058 	.word	0x40020058

08002a90 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_TIM_OnePulse_MspInit+0x34>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10b      	bne.n	8002aba <HAL_TIM_OnePulse_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_TIM_OnePulse_MspInit+0x38>)
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_TIM_OnePulse_MspInit+0x38>)
 8002aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aac:	6193      	str	r3, [r2, #24]
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_TIM_OnePulse_MspInit+0x38>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  }

}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40021000 	.word	0x40021000

08002acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <NMI_Handler+0x4>

08002ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <HardFault_Handler+0x4>

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  while (1)
 8002adc:	e7fe      	b.n	8002adc <MemManage_Handler+0x4>

08002ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0

  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002b12:	f7fe fda3 	bl	800165c <HAL_SYSTICK_Callback>
  HAL_IncTick();
 8002b16:	f001 fe27 	bl	8004768 <HAL_IncTick>
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
	return 1;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <_kill>:

int _kill(int pid, int sig)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b36:	f003 fb4f 	bl	80061d8 <__errno>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2216      	movs	r2, #22
 8002b3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_exit>:

void _exit (int status)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ffe7 	bl	8002b2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b5e:	e7fe      	b.n	8002b5e <_exit+0x12>

08002b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e00a      	b.n	8002b88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b72:	f3af 8000 	nop.w
 8002b76:	4601      	mov	r1, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	60ba      	str	r2, [r7, #8]
 8002b7e:	b2ca      	uxtb	r2, r1
 8002b80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	dbf0      	blt.n	8002b72 <_read+0x12>
	}

return len;
 8002b90:	687b      	ldr	r3, [r7, #4]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc0:	605a      	str	r2, [r3, #4]
	return 0;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <_isatty>:

int _isatty(int file)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8002bd6:	2301      	movs	r3, #1
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
	return 0;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f003 fad4 	bl	80061d8 <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20005000 	.word	0x20005000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	20000480 	.word	0x20000480
 8002c64:	20000928 	.word	0x20000928

08002c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c74:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c76:	490d      	ldr	r1, [pc, #52]	; (8002cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	; (8002cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c9a:	f7ff ffe5 	bl	8002c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f003 fab3 	bl	8006208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ca2:	f7ff fd7b 	bl	800279c <main>
  bx lr
 8002ca6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cac:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002cb0:	0800e4cc 	.word	0x0800e4cc
  ldr r2, =_sbss
 8002cb4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002cb8:	20000924 	.word	0x20000924

08002cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cbc:	e7fe      	b.n	8002cbc <ADC1_2_IRQHandler>
	...

08002cc0 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <ili9488_Init+0x114>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d115      	bne.n	8002cfc <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8002cd0:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <ili9488_Init+0x114>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <ili9488_Init+0x114>)
 8002cdc:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <ili9488_Init+0x114>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <ili9488_Init+0x2e>
      LCD_IO_Init();
 8002cea:	f001 fb75 	bl	80043d8 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <ili9488_Init+0x114>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <ili9488_Init+0x114>)
 8002cfa:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8002cfc:	2069      	movs	r0, #105	; 0x69
 8002cfe:	f001 fb49 	bl	8004394 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f001 fbfc 	bl	8004500 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8002d08:	2005      	movs	r0, #5
 8002d0a:	f001 fb43 	bl	8004394 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8002d0e:	220f      	movs	r2, #15
 8002d10:	4931      	ldr	r1, [pc, #196]	; (8002dd8 <ili9488_Init+0x118>)
 8002d12:	20e0      	movs	r0, #224	; 0xe0
 8002d14:	f001 fc52 	bl	80045bc <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8002d18:	220f      	movs	r2, #15
 8002d1a:	4930      	ldr	r1, [pc, #192]	; (8002ddc <ili9488_Init+0x11c>)
 8002d1c:	20e1      	movs	r0, #225	; 0xe1
 8002d1e:	f001 fc4d 	bl	80045bc <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8002d22:	2202      	movs	r2, #2
 8002d24:	492e      	ldr	r1, [pc, #184]	; (8002de0 <ili9488_Init+0x120>)
 8002d26:	20c0      	movs	r0, #192	; 0xc0
 8002d28:	f001 fc48 	bl	80045bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002d2c:	2005      	movs	r0, #5
 8002d2e:	f001 fb31 	bl	8004394 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8002d32:	20c1      	movs	r0, #193	; 0xc1
 8002d34:	f001 fbe4 	bl	8004500 <LCD_IO_WriteCmd8>
 8002d38:	2041      	movs	r0, #65	; 0x41
 8002d3a:	f001 fbfd 	bl	8004538 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8002d3e:	2005      	movs	r0, #5
 8002d40:	f001 fb28 	bl	8004394 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8002d44:	2203      	movs	r2, #3
 8002d46:	4927      	ldr	r1, [pc, #156]	; (8002de4 <ili9488_Init+0x124>)
 8002d48:	20c5      	movs	r0, #197	; 0xc5
 8002d4a:	f001 fc37 	bl	80045bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002d4e:	2005      	movs	r0, #5
 8002d50:	f001 fb20 	bl	8004394 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8002d54:	203a      	movs	r0, #58	; 0x3a
 8002d56:	f001 fbd3 	bl	8004500 <LCD_IO_WriteCmd8>
 8002d5a:	2066      	movs	r0, #102	; 0x66
 8002d5c:	f001 fbec 	bl	8004538 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 8002d60:	20b0      	movs	r0, #176	; 0xb0
 8002d62:	f001 fbcd 	bl	8004500 <LCD_IO_WriteCmd8>
 8002d66:	2080      	movs	r0, #128	; 0x80
 8002d68:	f001 fbe6 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8002d6c:	20b1      	movs	r0, #177	; 0xb1
 8002d6e:	f001 fbc7 	bl	8004500 <LCD_IO_WriteCmd8>
 8002d72:	20a0      	movs	r0, #160	; 0xa0
 8002d74:	f001 fbe0 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8002d78:	20b4      	movs	r0, #180	; 0xb4
 8002d7a:	f001 fbc1 	bl	8004500 <LCD_IO_WriteCmd8>
 8002d7e:	2002      	movs	r0, #2
 8002d80:	f001 fbda 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8002d84:	2202      	movs	r2, #2
 8002d86:	4918      	ldr	r1, [pc, #96]	; (8002de8 <ili9488_Init+0x128>)
 8002d88:	20b6      	movs	r0, #182	; 0xb6
 8002d8a:	f001 fc17 	bl	80045bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8002d8e:	20e9      	movs	r0, #233	; 0xe9
 8002d90:	f001 fbb6 	bl	8004500 <LCD_IO_WriteCmd8>
 8002d94:	2000      	movs	r0, #0
 8002d96:	f001 fbcf 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4913      	ldr	r1, [pc, #76]	; (8002dec <ili9488_Init+0x12c>)
 8002d9e:	20f7      	movs	r0, #247	; 0xf7
 8002da0:	f001 fc0c 	bl	80045bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8002da4:	2005      	movs	r0, #5
 8002da6:	f001 faf5 	bl	8004394 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8002daa:	2011      	movs	r0, #17
 8002dac:	f001 fba8 	bl	8004500 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8002db0:	2078      	movs	r0, #120	; 0x78
 8002db2:	f001 faef 	bl	8004394 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8002db6:	2029      	movs	r0, #41	; 0x29
 8002db8:	f001 fba2 	bl	8004500 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8002dbc:	2005      	movs	r0, #5
 8002dbe:	f001 fae9 	bl	8004394 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8002dc2:	2036      	movs	r0, #54	; 0x36
 8002dc4:	f001 fb9c 	bl	8004500 <LCD_IO_WriteCmd8>
 8002dc8:	20e8      	movs	r0, #232	; 0xe8
 8002dca:	f001 fbb5 	bl	8004538 <LCD_IO_WriteData8>
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000484 	.word	0x20000484
 8002dd8:	08007ad8 	.word	0x08007ad8
 8002ddc:	08007ae8 	.word	0x08007ae8
 8002de0:	08007af8 	.word	0x08007af8
 8002de4:	08007afc 	.word	0x08007afc
 8002de8:	08007b00 	.word	0x08007b00
 8002dec:	08007b04 	.word	0x08007b04

08002df0 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8002df4:	2011      	movs	r0, #17
 8002df6:	f001 fb83 	bl	8004500 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f001 fad6 	bl	80043ac <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8002e08:	2010      	movs	r0, #16
 8002e0a:	f001 fb79 	bl	8004500 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f001 facc 	bl	80043ac <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8002e1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8002e2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <ili9488_ReadID+0x40>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8002e4a:	f7ff ff39 	bl	8002cc0 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8002e4e:	1d39      	adds	r1, r7, #4
 8002e50:	2300      	movs	r3, #0
 8002e52:	2203      	movs	r2, #3
 8002e54:	2004      	movs	r0, #4
 8002e56:	f001 fbf5 	bl	8004644 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <ili9488_ReadID+0x44>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <ili9488_ReadID+0x36>
    return 0x9488;
 8002e68:	f249 4388 	movw	r3, #38024	; 0x9488
 8002e6c:	e000      	b.n	8002e70 <ili9488_ReadID+0x38>
  return 0;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000484 	.word	0x20000484
 8002e7c:	00668054 	.word	0x00668054

08002e80 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	460a      	mov	r2, r1
 8002e8a:	80fb      	strh	r3, [r7, #6]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002e90:	202a      	movs	r0, #42	; 0x2a
 8002e92:	f001 fb35 	bl	8004500 <LCD_IO_WriteCmd8>
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fb4a 	bl	8004538 <LCD_IO_WriteData8>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fb45 	bl	8004538 <LCD_IO_WriteData8>
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fb3e 	bl	8004538 <LCD_IO_WriteData8>
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 fb39 	bl	8004538 <LCD_IO_WriteData8>
 8002ec6:	202b      	movs	r0, #43	; 0x2b
 8002ec8:	f001 fb1a 	bl	8004500 <LCD_IO_WriteCmd8>
 8002ecc:	88bb      	ldrh	r3, [r7, #4]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 fb2f 	bl	8004538 <LCD_IO_WriteData8>
 8002eda:	88bb      	ldrh	r3, [r7, #4]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fb2a 	bl	8004538 <LCD_IO_WriteData8>
 8002ee4:	88bb      	ldrh	r3, [r7, #4]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 fb23 	bl	8004538 <LCD_IO_WriteData8>
 8002ef2:	88bb      	ldrh	r3, [r7, #4]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 fb1e 	bl	8004538 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	121b      	asrs	r3, r3, #8
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f023 0307 	bic.w	r3, r3, #7
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fb0c 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	10db      	asrs	r3, r3, #3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 fb03 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 fafd 	bl	8004538 <LCD_IO_WriteData8>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	80fb      	strh	r3, [r7, #6]
 8002f50:	460b      	mov	r3, r1
 8002f52:	80bb      	strh	r3, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002f58:	202a      	movs	r0, #42	; 0x2a
 8002f5a:	f001 fad1 	bl	8004500 <LCD_IO_WriteCmd8>
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 fae6 	bl	8004538 <LCD_IO_WriteData8>
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fae1 	bl	8004538 <LCD_IO_WriteData8>
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 fada 	bl	8004538 <LCD_IO_WriteData8>
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fad5 	bl	8004538 <LCD_IO_WriteData8>
 8002f8e:	202b      	movs	r0, #43	; 0x2b
 8002f90:	f001 fab6 	bl	8004500 <LCD_IO_WriteCmd8>
 8002f94:	88bb      	ldrh	r3, [r7, #4]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 facb 	bl	8004538 <LCD_IO_WriteData8>
 8002fa2:	88bb      	ldrh	r3, [r7, #4]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fac6 	bl	8004538 <LCD_IO_WriteData8>
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 fabf 	bl	8004538 <LCD_IO_WriteData8>
 8002fba:	88bb      	ldrh	r3, [r7, #4]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 faba 	bl	8004538 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8002fc4:	202c      	movs	r0, #44	; 0x2c
 8002fc6:	f001 fa9b 	bl	8004500 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff99 	bl	8002f04 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460a      	mov	r2, r1
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8002fea:	202a      	movs	r0, #42	; 0x2a
 8002fec:	f001 fa88 	bl	8004500 <LCD_IO_WriteCmd8>
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 fa9d 	bl	8004538 <LCD_IO_WriteData8>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fa98 	bl	8004538 <LCD_IO_WriteData8>
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b29b      	uxth	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fa91 	bl	8004538 <LCD_IO_WriteData8>
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fa8c 	bl	8004538 <LCD_IO_WriteData8>
 8003020:	202b      	movs	r0, #43	; 0x2b
 8003022:	f001 fa6d 	bl	8004500 <LCD_IO_WriteCmd8>
 8003026:	88bb      	ldrh	r3, [r7, #4]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f001 fa82 	bl	8004538 <LCD_IO_WriteData8>
 8003034:	88bb      	ldrh	r3, [r7, #4]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4618      	mov	r0, r3
 800303a:	f001 fa7d 	bl	8004538 <LCD_IO_WriteData8>
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	b29b      	uxth	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f001 fa76 	bl	8004538 <LCD_IO_WriteData8>
 800304c:	88bb      	ldrh	r3, [r7, #4]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fa71 	bl	8004538 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8003056:	f107 010e 	add.w	r1, r7, #14
 800305a:	2301      	movs	r3, #1
 800305c:	2201      	movs	r2, #1
 800305e:	202e      	movs	r0, #46	; 0x2e
 8003060:	f001 fb16 	bl	8004690 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8003064:	89fb      	ldrh	r3, [r7, #14]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4604      	mov	r4, r0
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	461a      	mov	r2, r3
 800307e:	4623      	mov	r3, r4
 8003080:	80fb      	strh	r3, [r7, #6]
 8003082:	4603      	mov	r3, r0
 8003084:	80bb      	strh	r3, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	807b      	strh	r3, [r7, #2]
 800308a:	4613      	mov	r3, r2
 800308c:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800308e:	4a2a      	ldr	r2, [pc, #168]	; (8003138 <ili9488_SetDisplayWindow+0xc8>)
 8003090:	88bb      	ldrh	r3, [r7, #4]
 8003092:	8013      	strh	r3, [r2, #0]
 8003094:	88ba      	ldrh	r2, [r7, #4]
 8003096:	883b      	ldrh	r3, [r7, #0]
 8003098:	4413      	add	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b26      	ldr	r3, [pc, #152]	; (800313c <ili9488_SetDisplayWindow+0xcc>)
 80030a2:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80030a4:	202a      	movs	r0, #42	; 0x2a
 80030a6:	f001 fa2b 	bl	8004500 <LCD_IO_WriteCmd8>
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 fa40 	bl	8004538 <LCD_IO_WriteData8>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 fa3b 	bl	8004538 <LCD_IO_WriteData8>
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	4413      	add	r3, r2
 80030c8:	3b01      	subs	r3, #1
 80030ca:	121b      	asrs	r3, r3, #8
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 fa32 	bl	8004538 <LCD_IO_WriteData8>
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4413      	add	r3, r2
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 fa27 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80030ea:	202b      	movs	r0, #43	; 0x2b
 80030ec:	f001 fa08 	bl	8004500 <LCD_IO_WriteCmd8>
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 fa1d 	bl	8004538 <LCD_IO_WriteData8>
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fa18 	bl	8004538 <LCD_IO_WriteData8>
 8003108:	88ba      	ldrh	r2, [r7, #4]
 800310a:	883b      	ldrh	r3, [r7, #0]
 800310c:	4413      	add	r3, r2
 800310e:	3b01      	subs	r3, #1
 8003110:	121b      	asrs	r3, r3, #8
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f001 fa0f 	bl	8004538 <LCD_IO_WriteData8>
 800311a:	88bb      	ldrh	r3, [r7, #4]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	883b      	ldrh	r3, [r7, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4413      	add	r3, r2
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4618      	mov	r0, r3
 800312c:	f001 fa04 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	20000486 	.word	0x20000486
 800313c:	20000488 	.word	0x20000488

08003140 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	af02      	add	r7, sp, #8
 8003146:	4604      	mov	r4, r0
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4623      	mov	r3, r4
 8003150:	80fb      	strh	r3, [r7, #6]
 8003152:	4603      	mov	r3, r0
 8003154:	80bb      	strh	r3, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	807b      	strh	r3, [r7, #2]
 800315a:	4613      	mov	r3, r2
 800315c:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 800315e:	883a      	ldrh	r2, [r7, #0]
 8003160:	8879      	ldrh	r1, [r7, #2]
 8003162:	88b8      	ldrh	r0, [r7, #4]
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2301      	movs	r3, #1
 800316a:	f000 f820 	bl	80031ae <ili9488_FillRect>
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}

08003176 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003176:	b590      	push	{r4, r7, lr}
 8003178:	b085      	sub	sp, #20
 800317a:	af02      	add	r7, sp, #8
 800317c:	4604      	mov	r4, r0
 800317e:	4608      	mov	r0, r1
 8003180:	4611      	mov	r1, r2
 8003182:	461a      	mov	r2, r3
 8003184:	4623      	mov	r3, r4
 8003186:	80fb      	strh	r3, [r7, #6]
 8003188:	4603      	mov	r3, r0
 800318a:	80bb      	strh	r3, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8003194:	883a      	ldrh	r2, [r7, #0]
 8003196:	8879      	ldrh	r1, [r7, #2]
 8003198:	88b8      	ldrh	r0, [r7, #4]
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	2201      	movs	r2, #1
 80031a2:	f000 f804 	bl	80031ae <ili9488_FillRect>
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}

080031ae <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80031ae:	b590      	push	{r4, r7, lr}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4604      	mov	r4, r0
 80031b6:	4608      	mov	r0, r1
 80031b8:	4611      	mov	r1, r2
 80031ba:	461a      	mov	r2, r3
 80031bc:	4623      	mov	r3, r4
 80031be:	80fb      	strh	r3, [r7, #6]
 80031c0:	4603      	mov	r3, r0
 80031c2:	80bb      	strh	r3, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80031cc:	883b      	ldrh	r3, [r7, #0]
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	88b9      	ldrh	r1, [r7, #4]
 80031d2:	88f8      	ldrh	r0, [r7, #6]
 80031d4:	f7ff ff4c 	bl	8003070 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	f001 f991 	bl	8004500 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 80031de:	887b      	ldrh	r3, [r7, #2]
 80031e0:	883a      	ldrh	r2, [r7, #0]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 80031e8:	e003      	b.n	80031f2 <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 80031ea:	8c3b      	ldrh	r3, [r7, #32]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fe89 	bl	8002f04 <ili9488_write16to24>
  while(XYsize--)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	60fa      	str	r2, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f6      	bne.n	80031ea <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bd90      	pop	{r4, r7, pc}
	...

08003208 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	603a      	str	r2, [r7, #0]
 8003212:	80fb      	strh	r3, [r7, #6]
 8003214:	460b      	mov	r3, r1
 8003216:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	3316      	adds	r3, #22
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b29a      	uxth	r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3317      	adds	r3, #23
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	b29b      	uxth	r3, r3
 8003234:	4413      	add	r3, r2
 8003236:	b29a      	uxth	r2, r3
 8003238:	88bb      	ldrh	r3, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	3302      	adds	r3, #2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	3304      	adds	r3, #4
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	330a      	adds	r3, #10
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 800328c:	2036      	movs	r0, #54	; 0x36
 800328e:	f001 f937 	bl	8004500 <LCD_IO_WriteCmd8>
 8003292:	20a8      	movs	r0, #168	; 0xa8
 8003294:	f001 f950 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 8003298:	202b      	movs	r0, #43	; 0x2b
 800329a:	f001 f931 	bl	8004500 <LCD_IO_WriteCmd8>
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <ili9488_DrawBitmap+0x118>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80032a6:	3301      	adds	r3, #1
 80032a8:	121b      	asrs	r3, r3, #8
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f943 	bl	8004538 <LCD_IO_WriteData8>
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <ili9488_DrawBitmap+0x118>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f93a 	bl	8004538 <LCD_IO_WriteData8>
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <ili9488_DrawBitmap+0x11c>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80032cc:	3301      	adds	r3, #1
 80032ce:	121b      	asrs	r3, r3, #8
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 f930 	bl	8004538 <LCD_IO_WriteData8>
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <ili9488_DrawBitmap+0x11c>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f927 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80032ea:	202c      	movs	r0, #44	; 0x2c
 80032ec:	f001 f908 	bl	8004500 <LCD_IO_WriteCmd8>
  while(size--)
 80032f0:	e007      	b.n	8003302 <ili9488_DrawBitmap+0xfa>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fe04 	bl	8002f04 <ili9488_write16to24>
    pbmp+= 2;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	3302      	adds	r3, #2
 8003300:	603b      	str	r3, [r7, #0]
  while(size--)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	60fa      	str	r2, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f2      	bne.n	80032f2 <ili9488_DrawBitmap+0xea>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 800330c:	2036      	movs	r0, #54	; 0x36
 800330e:	f001 f8f7 	bl	8004500 <LCD_IO_WriteCmd8>
 8003312:	20e8      	movs	r0, #232	; 0xe8
 8003314:	f001 f910 	bl	8004538 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000488 	.word	0x20000488
 8003324:	20000486 	.word	0x20000486

08003328 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4623      	mov	r3, r4
 8003338:	80fb      	strh	r3, [r7, #6]
 800333a:	4603      	mov	r3, r0
 800333c:	80bb      	strh	r3, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	807b      	strh	r3, [r7, #2]
 8003342:	4613      	mov	r3, r2
 8003344:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	883a      	ldrh	r2, [r7, #0]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8003350:	883b      	ldrh	r3, [r7, #0]
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	88b9      	ldrh	r1, [r7, #4]
 8003356:	88f8      	ldrh	r0, [r7, #6]
 8003358:	f7ff fe8a 	bl	8003070 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800335c:	202c      	movs	r0, #44	; 0x2c
 800335e:	f001 f8cf 	bl	8004500 <LCD_IO_WriteCmd8>
  while(size--)
 8003362:	e007      	b.n	8003374 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fdcb 	bl	8002f04 <ili9488_write16to24>
    pdata++;
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	3302      	adds	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
  while(size--)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	60fa      	str	r2, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f2      	bne.n	8003364 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bd90      	pop	{r4, r7, pc}

08003388 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	4604      	mov	r4, r0
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4623      	mov	r3, r4
 8003398:	80fb      	strh	r3, [r7, #6]
 800339a:	4603      	mov	r3, r0
 800339c:	80bb      	strh	r3, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	807b      	strh	r3, [r7, #2]
 80033a2:	4613      	mov	r3, r2
 80033a4:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	883a      	ldrh	r2, [r7, #0]
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80033b4:	883b      	ldrh	r3, [r7, #0]
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	88b9      	ldrh	r1, [r7, #4]
 80033ba:	88f8      	ldrh	r0, [r7, #6]
 80033bc:	f7ff fe58 	bl	8003070 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 80033c0:	2301      	movs	r3, #1
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	202e      	movs	r0, #46	; 0x2e
 80033c8:	f001 f962 	bl	8004690 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}

080033d4 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	80fb      	strh	r3, [r7, #6]
 80033de:	460b      	mov	r3, r1
 80033e0:	80bb      	strh	r3, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <ili9488_Scroll+0xb4>)
 80033e8:	88db      	ldrh	r3, [r3, #6]
 80033ea:	88ba      	ldrh	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d104      	bne.n	80033fa <ili9488_Scroll+0x26>
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <ili9488_Scroll+0xb4>)
 80033f2:	885b      	ldrh	r3, [r3, #2]
 80033f4:	887a      	ldrh	r2, [r7, #2]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d013      	beq.n	8003422 <ili9488_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 80033fa:	4a23      	ldr	r2, [pc, #140]	; (8003488 <ili9488_Scroll+0xb4>)
 80033fc:	88bb      	ldrh	r3, [r7, #4]
 80033fe:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <ili9488_Scroll+0xb4>)
 8003402:	887b      	ldrh	r3, [r7, #2]
 8003404:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8003406:	88ba      	ldrh	r2, [r7, #4]
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	4413      	add	r3, r2
 800340c:	b29b      	uxth	r3, r3
 800340e:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <ili9488_Scroll+0xb4>)
 8003416:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8003418:	2203      	movs	r2, #3
 800341a:	491c      	ldr	r1, [pc, #112]	; (800348c <ili9488_Scroll+0xb8>)
 800341c:	2033      	movs	r0, #51	; 0x33
 800341e:	f001 f8ed 	bl	80045fc <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8003422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003426:	4a18      	ldr	r2, [pc, #96]	; (8003488 <ili9488_Scroll+0xb4>)
 8003428:	8892      	ldrh	r2, [r2, #4]
 800342a:	fb93 f1f2 	sdiv	r1, r3, r2
 800342e:	fb01 f202 	mul.w	r2, r1, r2
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8003436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800343a:	2b00      	cmp	r3, #0
 800343c:	da0a      	bge.n	8003454 <ili9488_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <ili9488_Scroll+0xb4>)
 8003440:	889a      	ldrh	r2, [r3, #4]
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	4413      	add	r3, r2
 8003446:	b29a      	uxth	r2, r3
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <ili9488_Scroll+0xb4>)
 800344a:	885b      	ldrh	r3, [r3, #2]
 800344c:	4413      	add	r3, r2
 800344e:	b29b      	uxth	r3, r3
 8003450:	80fb      	strh	r3, [r7, #6]
 8003452:	e005      	b.n	8003460 <ili9488_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <ili9488_Scroll+0xb4>)
 8003456:	885a      	ldrh	r2, [r3, #2]
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	4413      	add	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8003460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003464:	4a08      	ldr	r2, [pc, #32]	; (8003488 <ili9488_Scroll+0xb4>)
 8003466:	8812      	ldrh	r2, [r2, #0]
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <ili9488_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <ili9488_Scroll+0xb4>)
 8003470:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <ili9488_Scroll+0xb4>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	2201      	movs	r2, #1
 8003478:	4619      	mov	r1, r3
 800347a:	2037      	movs	r0, #55	; 0x37
 800347c:	f001 f878 	bl	8004570 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000048c 	.word	0x2000048c
 800348c:	2000048e 	.word	0x2000048e

08003490 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <BSP_LCD_Init+0x3c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <BSP_LCD_Init+0x40>)
 80034a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a8:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <BSP_LCD_Init+0x40>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <BSP_LCD_Init+0x40>)
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <BSP_LCD_Init+0x44>)
 80034b4:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 80034b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80034ba:	f000 f853 	bl	8003564 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80034c2:	79fb      	ldrb	r3, [r7, #7]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	2000008c 	.word	0x2000008c
 80034d0:	20000494 	.word	0x20000494
 80034d4:	20000018 	.word	0x20000018

080034d8 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <BSP_LCD_GetXSize+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	4798      	blx	r3
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000008c 	.word	0x2000008c

080034f0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <BSP_LCD_GetYSize+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	4798      	blx	r3
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000008c 	.word	0x2000008c

08003508 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	4a03      	ldr	r2, [pc, #12]	; (8003524 <BSP_LCD_SetTextColor+0x1c>)
 8003516:	6013      	str	r3, [r2, #0]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000494 	.word	0x20000494

08003528 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4a03      	ldr	r2, [pc, #12]	; (8003544 <BSP_LCD_SetBackColor+0x1c>)
 8003536:	6053      	str	r3, [r2, #4]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000494 	.word	0x20000494

08003548 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8003550:	4a03      	ldr	r2, [pc, #12]	; (8003560 <BSP_LCD_SetFont+0x18>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6093      	str	r3, [r2, #8]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	20000494 	.word	0x20000494

08003564 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af02      	add	r7, sp, #8
 800356a:	4603      	mov	r3, r0
 800356c:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <BSP_LCD_Clear+0x38>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003574:	f7ff ffb0 	bl	80034d8 <BSP_LCD_GetXSize>
 8003578:	4603      	mov	r3, r0
 800357a:	461d      	mov	r5, r3
 800357c:	f7ff ffb8 	bl	80034f0 <BSP_LCD_GetYSize>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	462a      	mov	r2, r5
 800358c:	2100      	movs	r1, #0
 800358e:	2000      	movs	r0, #0
 8003590:	47a0      	blx	r4
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bdb0      	pop	{r4, r5, r7, pc}
 800359a:	bf00      	nop
 800359c:	2000008c 	.word	0x2000008c

080035a0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
 80035aa:	460b      	mov	r3, r1
 80035ac:	80bb      	strh	r3, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <BSP_LCD_DisplayChar+0x50>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80035bc:	490c      	ldr	r1, [pc, #48]	; (80035f0 <BSP_LCD_DisplayChar+0x50>)
 80035be:	6889      	ldr	r1, [r1, #8]
 80035c0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80035c2:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <BSP_LCD_DisplayChar+0x50>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	889b      	ldrh	r3, [r3, #4]
 80035cc:	3307      	adds	r3, #7
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da00      	bge.n	80035d4 <BSP_LCD_DisplayChar+0x34>
 80035d2:	3307      	adds	r3, #7
 80035d4:	10db      	asrs	r3, r3, #3
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80035da:	441a      	add	r2, r3
 80035dc:	88b9      	ldrh	r1, [r7, #4]
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f9db 	bl	800399c <DrawChar>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000494 	.word	0x20000494

080035f4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60ba      	str	r2, [r7, #8]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	81fb      	strh	r3, [r7, #14]
 8003602:	460b      	mov	r3, r1
 8003604:	81bb      	strh	r3, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800360a:	2301      	movs	r3, #1
 800360c:	83fb      	strh	r3, [r7, #30]
 800360e:	2300      	movs	r3, #0
 8003610:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800361e:	e002      	b.n	8003626 <BSP_LCD_DisplayStringAt+0x32>
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	3301      	adds	r3, #1
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	617a      	str	r2, [r7, #20]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f6      	bne.n	8003620 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8003632:	f7ff ff51 	bl	80034d8 <BSP_LCD_GetXSize>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	4b35      	ldr	r3, [pc, #212]	; (8003710 <BSP_LCD_DisplayStringAt+0x11c>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	889b      	ldrh	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d014      	beq.n	8003678 <BSP_LCD_DisplayStringAt+0x84>
 800364e:	2b03      	cmp	r3, #3
 8003650:	dc23      	bgt.n	800369a <BSP_LCD_DisplayStringAt+0xa6>
 8003652:	2b01      	cmp	r3, #1
 8003654:	d002      	beq.n	800365c <BSP_LCD_DisplayStringAt+0x68>
 8003656:	2b02      	cmp	r3, #2
 8003658:	d011      	beq.n	800367e <BSP_LCD_DisplayStringAt+0x8a>
 800365a:	e01e      	b.n	800369a <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <BSP_LCD_DisplayStringAt+0x11c>)
 8003664:	6892      	ldr	r2, [r2, #8]
 8003666:	8892      	ldrh	r2, [r2, #4]
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	4413      	add	r3, r2
 8003674:	83fb      	strh	r3, [r7, #30]
      break;
 8003676:	e013      	b.n	80036a0 <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003678:	89fb      	ldrh	r3, [r7, #14]
 800367a:	83fb      	strh	r3, [r7, #30]
      break;
 800367c:	e010      	b.n	80036a0 <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	b29b      	uxth	r3, r3
 8003686:	4a22      	ldr	r2, [pc, #136]	; (8003710 <BSP_LCD_DisplayStringAt+0x11c>)
 8003688:	6892      	ldr	r2, [r2, #8]
 800368a:	8892      	ldrh	r2, [r2, #4]
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	b29a      	uxth	r2, r3
 8003692:	89fb      	ldrh	r3, [r7, #14]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	83fb      	strh	r3, [r7, #30]
      break;
 8003698:	e002      	b.n	80036a0 <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 800369a:	89fb      	ldrh	r3, [r7, #14]
 800369c:	83fb      	strh	r3, [r7, #30]
      break;
 800369e:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80036a0:	e012      	b.n	80036c8 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	89b9      	ldrh	r1, [r7, #12]
 80036a8:	8bfb      	ldrh	r3, [r7, #30]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ff78 	bl	80035a0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <BSP_LCD_DisplayStringAt+0x11c>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	889a      	ldrh	r2, [r3, #4]
 80036b6:	8bfb      	ldrh	r3, [r7, #30]
 80036b8:	4413      	add	r3, r2
 80036ba:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3301      	adds	r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
    i++;
 80036c2:	8bbb      	ldrh	r3, [r7, #28]
 80036c4:	3301      	adds	r3, #1
 80036c6:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2dc      	uxtb	r4, r3
 80036d6:	f7ff feff 	bl	80034d8 <BSP_LCD_GetXSize>
 80036da:	4603      	mov	r3, r0
 80036dc:	4619      	mov	r1, r3
 80036de:	8bbb      	ldrh	r3, [r7, #28]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <BSP_LCD_DisplayStringAt+0x11c>)
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	8892      	ldrh	r2, [r2, #4]
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	1acb      	subs	r3, r1, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4a08      	ldr	r2, [pc, #32]	; (8003710 <BSP_LCD_DisplayStringAt+0x11c>)
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	8892      	ldrh	r2, [r2, #4]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bfac      	ite	ge
 80036f8:	2301      	movge	r3, #1
 80036fa:	2300      	movlt	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	4023      	ands	r3, r4
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1cd      	bne.n	80036a2 <BSP_LCD_DisplayStringAt+0xae>
  }
}
 8003706:	bf00      	nop
 8003708:	bf00      	nop
 800370a:	3724      	adds	r7, #36	; 0x24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}
 8003710:	20000494 	.word	0x20000494

08003714 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
 800371e:	460b      	mov	r3, r1
 8003720:	80bb      	strh	r3, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <BSP_LCD_DrawPixel+0x34>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <BSP_LCD_DrawPixel+0x34>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	88b9      	ldrh	r1, [r7, #4]
 800373a:	88f8      	ldrh	r0, [r7, #6]
 800373c:	4798      	blx	r3
  }
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	2000008c 	.word	0x2000008c

0800374c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
 8003756:	460b      	mov	r3, r1
 8003758:	80bb      	strh	r3, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <BSP_LCD_DrawHLine+0x6c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <BSP_LCD_DrawHLine+0x6c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a1c      	ldr	r4, [r3, #32]
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <BSP_LCD_DrawHLine+0x70>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b298      	uxth	r0, r3
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	88ba      	ldrh	r2, [r7, #4]
 800377c:	88f9      	ldrh	r1, [r7, #6]
 800377e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003780:	e015      	b.n	80037ae <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e00e      	b.n	80037a6 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	b29a      	uxth	r2, r3
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	4413      	add	r3, r2
 8003790:	b29b      	uxth	r3, r3
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <BSP_LCD_DrawHLine+0x70>)
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	b292      	uxth	r2, r2
 8003798:	88b9      	ldrh	r1, [r7, #4]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ffba 	bl	8003714 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d3ec      	bcc.n	8003788 <BSP_LCD_DrawHLine+0x3c>
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000008c 	.word	0x2000008c
 80037bc:	20000494 	.word	0x20000494

080037c0 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
 80037ca:	460b      	mov	r3, r1
 80037cc:	80bb      	strh	r3, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <BSP_LCD_DrawVLine+0x6c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <BSP_LCD_DrawVLine+0x6c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <BSP_LCD_DrawVLine+0x70>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b298      	uxth	r0, r3
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	88ba      	ldrh	r2, [r7, #4]
 80037f0:	88f9      	ldrh	r1, [r7, #6]
 80037f2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80037f4:	e015      	b.n	8003822 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e00e      	b.n	800381a <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	88bb      	ldrh	r3, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	b299      	uxth	r1, r3
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <BSP_LCD_DrawVLine+0x70>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29a      	uxth	r2, r3
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff80 	bl	8003714 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3ec      	bcc.n	80037fc <BSP_LCD_DrawVLine+0x3c>
}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	bf00      	nop
 800382c:	2000008c 	.word	0x2000008c
 8003830:	20000494 	.word	0x20000494

08003834 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4623      	mov	r3, r4
 8003844:	80fb      	strh	r3, [r7, #6]
 8003846:	4603      	mov	r3, r0
 8003848:	80bb      	strh	r3, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	807b      	strh	r3, [r7, #2]
 800384e:	4613      	mov	r3, r2
 8003850:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	88b9      	ldrh	r1, [r7, #4]
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff77 	bl	800374c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 800385e:	88ba      	ldrh	r2, [r7, #4]
 8003860:	883b      	ldrh	r3, [r7, #0]
 8003862:	4413      	add	r3, r2
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b299      	uxth	r1, r3
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff6c 	bl	800374c <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003874:	883a      	ldrh	r2, [r7, #0]
 8003876:	88b9      	ldrh	r1, [r7, #4]
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffa0 	bl	80037c0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	4413      	add	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29b      	uxth	r3, r3
 800388c:	883a      	ldrh	r2, [r7, #0]
 800388e:	88b9      	ldrh	r1, [r7, #4]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff95 	bl	80037c0 <BSP_LCD_DrawVLine>
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}
	...

080038a0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	603a      	str	r2, [r7, #0]
 80038aa:	80fb      	strh	r3, [r7, #6]
 80038ac:	460b      	mov	r3, r1
 80038ae:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	3312      	adds	r3, #18
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	3313      	adds	r3, #19
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	441a      	add	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	441a      	add	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	3315      	adds	r3, #21
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	061b      	lsls	r3, r3, #24
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	3316      	adds	r3, #22
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	3317      	adds	r3, #23
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	441a      	add	r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3318      	adds	r3, #24
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	441a      	add	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	3319      	adds	r3, #25
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	4413      	add	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	b29b      	uxth	r3, r3
 8003910:	88b9      	ldrh	r1, [r7, #4]
 8003912:	88f8      	ldrh	r0, [r7, #6]
 8003914:	f000 f934 	bl	8003b80 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <BSP_LCD_DrawBitmap+0xb0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <BSP_LCD_DrawBitmap+0xb0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	88b9      	ldrh	r1, [r7, #4]
 800392a:	88f8      	ldrh	r0, [r7, #6]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003930:	f7ff fdd2 	bl	80034d8 <BSP_LCD_GetXSize>
 8003934:	4603      	mov	r3, r0
 8003936:	461c      	mov	r4, r3
 8003938:	f7ff fdda 	bl	80034f0 <BSP_LCD_GetYSize>
 800393c:	4603      	mov	r3, r0
 800393e:	4622      	mov	r2, r4
 8003940:	2100      	movs	r1, #0
 8003942:	2000      	movs	r0, #0
 8003944:	f000 f91c 	bl	8003b80 <SetDisplayWindow>
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	2000008c 	.word	0x2000008c

08003954 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af02      	add	r7, sp, #8
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4623      	mov	r3, r4
 8003964:	80fb      	strh	r3, [r7, #6]
 8003966:	4603      	mov	r3, r0
 8003968:	80bb      	strh	r3, [r7, #4]
 800396a:	460b      	mov	r3, r1
 800396c:	807b      	strh	r3, [r7, #2]
 800396e:	4613      	mov	r3, r2
 8003970:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <BSP_LCD_FillRect+0x40>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <BSP_LCD_FillRect+0x44>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	883d      	ldrh	r5, [r7, #0]
 8003980:	887a      	ldrh	r2, [r7, #2]
 8003982:	88b9      	ldrh	r1, [r7, #4]
 8003984:	88f8      	ldrh	r0, [r7, #6]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	462b      	mov	r3, r5
 800398a:	47a0      	blx	r4
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bdb0      	pop	{r4, r5, r7, pc}
 8003994:	2000008c 	.word	0x2000008c
 8003998:	20000494 	.word	0x20000494

0800399c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	603a      	str	r2, [r7, #0]
 80039a6:	80fb      	strh	r3, [r7, #6]
 80039a8:	460b      	mov	r3, r1
 80039aa:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	2300      	movs	r3, #0
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	82fb      	strh	r3, [r7, #22]
 80039bc:	2300      	movs	r3, #0
 80039be:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 80039cc:	4b63      	ldr	r3, [pc, #396]	; (8003b5c <DrawChar+0x1c0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	88db      	ldrh	r3, [r3, #6]
 80039d2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80039d4:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <DrawChar+0x1c0>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	889b      	ldrh	r3, [r3, #4]
 80039da:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80039dc:	8afb      	ldrh	r3, [r7, #22]
 80039de:	8aba      	ldrh	r2, [r7, #20]
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	331b      	adds	r3, #27
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4a5d      	ldr	r2, [pc, #372]	; (8003b60 <DrawChar+0x1c4>)
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	8aba      	ldrh	r2, [r7, #20]
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	331b      	adds	r3, #27
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	141a      	asrs	r2, r3, #16
 8003a00:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <DrawChar+0x1c8>)
 8003a02:	b292      	uxth	r2, r2
 8003a04:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8003a06:	4b58      	ldr	r3, [pc, #352]	; (8003b68 <DrawChar+0x1cc>)
 8003a08:	2236      	movs	r2, #54	; 0x36
 8003a0a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8003a0c:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <DrawChar+0x1d0>)
 8003a0e:	8abb      	ldrh	r3, [r7, #20]
 8003a10:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8003a12:	8abb      	ldrh	r3, [r7, #20]
 8003a14:	141a      	asrs	r2, r3, #16
 8003a16:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <DrawChar+0x1d4>)
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8003a1c:	4a55      	ldr	r2, [pc, #340]	; (8003b74 <DrawChar+0x1d8>)
 8003a1e:	8afb      	ldrh	r3, [r7, #22]
 8003a20:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8003a22:	8afb      	ldrh	r3, [r7, #22]
 8003a24:	141a      	asrs	r2, r3, #16
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <DrawChar+0x1dc>)
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8003a2c:	8abb      	ldrh	r3, [r7, #20]
 8003a2e:	3307      	adds	r3, #7
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	da00      	bge.n	8003a36 <DrawChar+0x9a>
 8003a34:	3307      	adds	r3, #7
 8003a36:	10db      	asrs	r3, r3, #3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	8abb      	ldrh	r3, [r7, #20]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e078      	b.n	8003b3e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8003a4c:	8abb      	ldrh	r3, [r7, #20]
 8003a4e:	3307      	adds	r3, #7
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da00      	bge.n	8003a56 <DrawChar+0xba>
 8003a54:	3307      	adds	r3, #7
 8003a56:	10db      	asrs	r3, r3, #3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	fb02 f303 	mul.w	r3, r2, r3
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8003a66:	8abb      	ldrh	r3, [r7, #20]
 8003a68:	3b11      	subs	r3, #17
 8003a6a:	2b07      	cmp	r3, #7
 8003a6c:	d80c      	bhi.n	8003a88 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	041a      	lsls	r2, r3, #16
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	3202      	adds	r2, #2
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8003a88:	8abb      	ldrh	r3, [r7, #20]
 8003a8a:	3b09      	subs	r3, #9
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d807      	bhi.n	8003aa0 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	3201      	adds	r2, #1
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8003aa0:	8abb      	ldrh	r3, [r7, #20]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	2b07      	cmp	r3, #7
 8003aa6:	d802      	bhi.n	8003aae <DrawChar+0x112>
    {
      line =  pchar[0];
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	e03d      	b.n	8003b30 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8003ab4:	8afa      	ldrh	r2, [r7, #22]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	8aba      	ldrh	r2, [r7, #20]
 8003abe:	fb03 f202 	mul.w	r2, r3, r2
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	331b      	adds	r3, #27
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8003acc:	8aba      	ldrh	r2, [r7, #20]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	1ad2      	subs	r2, r2, r3
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	2201      	movs	r2, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8003ae8:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <DrawChar+0x1c0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b2d9      	uxtb	r1, r3
 8003aee:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <DrawChar+0x1e0>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	460a      	mov	r2, r1
 8003af6:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <DrawChar+0x1c0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0a1a      	lsrs	r2, r3, #8
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	3301      	adds	r3, #1
 8003b02:	b2d1      	uxtb	r1, r2
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <DrawChar+0x1e0>)
 8003b06:	54d1      	strb	r1, [r2, r3]
 8003b08:	e00f      	b.n	8003b2a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <DrawChar+0x1c0>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	b2d9      	uxtb	r1, r3
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <DrawChar+0x1e0>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	460a      	mov	r2, r1
 8003b18:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <DrawChar+0x1c0>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	0a1a      	lsrs	r2, r3, #8
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	3301      	adds	r3, #1
 8003b24:	b2d1      	uxtb	r1, r2
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <DrawChar+0x1e0>)
 8003b28:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	8abb      	ldrh	r3, [r7, #20]
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d3bd      	bcc.n	8003ab4 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	8afb      	ldrh	r3, [r7, #22]
 8003b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d382      	bcc.n	8003a4c <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8003b46:	88b9      	ldrh	r1, [r7, #4]
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <DrawChar+0x1e0>)
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fea7 	bl	80038a0 <BSP_LCD_DrawBitmap>
}
 8003b52:	bf00      	nop
 8003b54:	3728      	adds	r7, #40	; 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000494 	.word	0x20000494
 8003b60:	200004a2 	.word	0x200004a2
 8003b64:	200004a4 	.word	0x200004a4
 8003b68:	200004aa 	.word	0x200004aa
 8003b6c:	200004b2 	.word	0x200004b2
 8003b70:	200004b4 	.word	0x200004b4
 8003b74:	200004b6 	.word	0x200004b6
 8003b78:	200004b8 	.word	0x200004b8
 8003b7c:	200004a0 	.word	0x200004a0

08003b80 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	80fb      	strh	r3, [r7, #6]
 8003b92:	4603      	mov	r3, r0
 8003b94:	80bb      	strh	r3, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	807b      	strh	r3, [r7, #2]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <SetDisplayWindow+0x40>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <SetDisplayWindow+0x40>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69dc      	ldr	r4, [r3, #28]
 8003bae:	883b      	ldrh	r3, [r7, #0]
 8003bb0:	887a      	ldrh	r2, [r7, #2]
 8003bb2:	88b9      	ldrh	r1, [r7, #4]
 8003bb4:	88f8      	ldrh	r0, [r7, #6]
 8003bb6:	47a0      	blx	r4
  }  
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd90      	pop	{r4, r7, pc}
 8003bc0:	2000008c 	.word	0x2000008c

08003bc4 <__NVIC_EnableIRQ>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db0b      	blt.n	8003bee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <__NVIC_EnableIRQ+0x34>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2001      	movs	r0, #1
 8003be6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <LcdDirRead+0x70>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <LcdDirRead+0x70>)
 8003c62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003c66:	6013      	str	r3, [r2, #0]
  while(d--)
 8003c68:	e008      	b.n	8003c7c <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <LcdDirRead+0x74>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8003c70:	2000      	movs	r0, #0
 8003c72:	f000 fb7f 	bl	8004374 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <LcdDirRead+0x74>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
  while(d--)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f1      	bne.n	8003c6a <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <LcdDirRead+0x70>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <LcdDirRead+0x70>)
 8003c90:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8003c94:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003c96:	e002      	b.n	8003c9e <LcdDirRead+0x4e>
    d = SPIX->DR;
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <LcdDirRead+0x78>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <LcdDirRead+0x7c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f8      	bne.n	8003c98 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <LcdDirRead+0x78>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8003cae:	4a06      	ldr	r2, [pc, #24]	; (8003cc8 <LcdDirRead+0x78>)
 8003cb0:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 8003cb4:	6013      	str	r3, [r2, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40010c04 	.word	0x40010c04
 8003cc4:	422181b4 	.word	0x422181b4
 8003cc8:	40003800 	.word	0x40003800
 8003ccc:	42070100 	.word	0x42070100

08003cd0 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <LcdDirWrite+0x5c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <LcdDirWrite+0x5c>)
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce0:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003ce2:	e002      	b.n	8003cea <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <LcdDirWrite+0x5c>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <LcdDirWrite+0x60>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f8      	bne.n	8003ce4 <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <LcdDirWrite+0x5c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8003cfa:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <LcdDirWrite+0x5c>)
 8003cfc:	f043 0308 	orr.w	r3, r3, #8
 8003d00:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8003d02:	2001      	movs	r0, #1
 8003d04:	f000 fb36 	bl	8004374 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003d08:	e002      	b.n	8003d10 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <LcdDirWrite+0x5c>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <LcdDirWrite+0x60>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f8      	bne.n	8003d0a <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <LcdDirWrite+0x5c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <LcdDirWrite+0x5c>)
 8003d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40003800 	.word	0x40003800
 8003d30:	42070100 	.word	0x42070100

08003d34 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 8003d3e:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <LcdWrite8+0x2c>)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003d44:	2002      	movs	r0, #2
 8003d46:	f000 fb15 	bl	8004374 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003d4a:	bf00      	nop
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <LcdWrite8+0x30>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1fb      	bne.n	8003d4c <LcdWrite8+0x18>
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40003800 	.word	0x40003800
 8003d64:	4207011c 	.word	0x4207011c

08003d68 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <LcdCmdWrite8+0x34>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8003d78:	4a09      	ldr	r2, [pc, #36]	; (8003da0 <LcdCmdWrite8+0x38>)
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f000 faf8 	bl	8004374 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003d84:	bf00      	nop
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <LcdCmdWrite8+0x3c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1fb      	bne.n	8003d86 <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8003d8e:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <LcdCmdWrite8+0x34>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	422181ac 	.word	0x422181ac
 8003da0:	40003800 	.word	0x40003800
 8003da4:	4207011c 	.word	0x4207011c

08003da8 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8003dac:	bf00      	nop
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <WaitForDmaEnd+0x18>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1fb      	bne.n	8003dae <WaitForDmaEnd+0x6>
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr
 8003dc0:	20000808 	.word	0x20000808

08003dc4 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <DMA1_Channel5_IRQHandler+0x64>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d023      	beq.n	8003e1c <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <DMA1_Channel5_IRQHandler+0x64>)
 8003dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dda:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <DMA1_Channel5_IRQHandler+0x68>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8003de2:	bf00      	nop
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <DMA1_Channel5_IRQHandler+0x68>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f9      	bne.n	8003de4 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <DMA1_Channel5_IRQHandler+0x6c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8003df6:	bf00      	nop
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <DMA1_Channel5_IRQHandler+0x70>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1fb      	bne.n	8003df8 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8003e00:	2003      	movs	r0, #3
 8003e02:	f000 fab7 	bl	8004374 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <DMA1_Channel5_IRQHandler+0x74>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d102      	bne.n	8003e14 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <DMA1_Channel5_IRQHandler+0x78>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <DMA1_Channel5_IRQHandler+0x74>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8003e1a:	e003      	b.n	8003e24 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <DMA1_Channel5_IRQHandler+0x64>)
 8003e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e22:	605a      	str	r2, [r3, #4]
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40020000 	.word	0x40020000
 8003e2c:	40020058 	.word	0x40020058
 8003e30:	42070084 	.word	0x42070084
 8003e34:	4207011c 	.word	0x4207011c
 8003e38:	20000808 	.word	0x20000808
 8003e3c:	422181b0 	.word	0x422181b0

08003e40 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <LCD_IO_WriteMultiData+0x74>)
 8003e4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e52:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8003e54:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <LCD_IO_WriteMultiData+0x78>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <LCD_IO_WriteMultiData+0x78>)
 8003e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5e:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8003e66:	bf00      	nop
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f9      	bne.n	8003e68 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8003e74:	4a11      	ldr	r2, [pc, #68]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003e7c:	4a10      	ldr	r2, [pc, #64]	; (8003ec0 <LCD_IO_WriteMultiData+0x80>)
 8003e7e:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <LCD_IO_WriteMultiData+0x84>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <LCD_IO_WriteMultiData+0x78>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <LCD_IO_WriteMultiData+0x78>)
 8003e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9c:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a06      	ldr	r2, [pc, #24]	; (8003ebc <LCD_IO_WriteMultiData+0x7c>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6013      	str	r3, [r2, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	40003800 	.word	0x40003800
 8003ebc:	40020058 	.word	0x40020058
 8003ec0:	4000380c 	.word	0x4000380c
 8003ec4:	42070084 	.word	0x42070084

08003ec8 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <LCD_IO_WriteMultiData8+0x98>)
 8003ee0:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	; (8003f60 <LCD_IO_WriteMultiData8+0x98>)
 8003ee4:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8003ee6:	f241 0312 	movw	r3, #4114	; 0x1012
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e030      	b.n	8003f50 <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8003eee:	f241 0392 	movw	r3, #4242	; 0x1092
 8003ef2:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8003ef4:	e02c      	b.n	8003f50 <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d80f      	bhi.n	8003f20 <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003f00:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <LCD_IO_WriteMultiData8+0x9c>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff98 	bl	8003e40 <LCD_IO_WriteMultiData>
      Size = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01a      	beq.n	8003f50 <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8003f1a:	f7ff ff45 	bl	8003da8 <WaitForDmaEnd>
 8003f1e:	e017      	b.n	8003f50 <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <LCD_IO_WriteMultiData8+0x9c>)
 8003f22:	2202      	movs	r2, #2
 8003f24:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ff87 	bl	8003e40 <LCD_IO_WriteMultiData>
      if(dinc)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003f3e:	33fe      	adds	r3, #254	; 0xfe
 8003f40:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003f48:	3bfe      	subs	r3, #254	; 0xfe
 8003f4a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003f4c:	f7ff ff2c 	bl	8003da8 <WaitForDmaEnd>
  while(Size)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1cf      	bne.n	8003ef6 <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	2000080c 	.word	0x2000080c
 8003f64:	20000808 	.word	0x20000808

08003f68 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <LCD_IO_WriteMultiData16+0xdc>)
 8003f80:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 8003f82:	4b30      	ldr	r3, [pc, #192]	; (8004044 <LCD_IO_WriteMultiData16+0xdc>)
 8003f84:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8003f86:	f241 5312 	movw	r3, #5394	; 0x1512
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e051      	b.n	8004032 <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8003f8e:	f241 5392 	movw	r3, #5522	; 0x1592
 8003f92:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8003f94:	e04d      	b.n	8004032 <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d80f      	bhi.n	8003fc0 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <LCD_IO_WriteMultiData16+0xe0>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff ff48 	bl	8003e40 <LCD_IO_WriteMultiData>
      Size = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d03b      	beq.n	8004032 <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 8003fba:	f7ff fef5 	bl	8003da8 <WaitForDmaEnd>
 8003fbe:	e038      	b.n	8004032 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a22      	ldr	r2, [pc, #136]	; (800404c <LCD_IO_WriteMultiData16+0xe4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d81b      	bhi.n	8004000 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <LCD_IO_WriteMultiData16+0xe0>)
 8003fca:	2202      	movs	r2, #2
 8003fcc:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003fd4:	3bfe      	subs	r3, #254	; 0xfe
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ff30 	bl	8003e40 <LCD_IO_WriteMultiData>
      if(dinc)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d006      	beq.n	8003ff4 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <LCD_IO_WriteMultiData16+0xe8>)
 8003fea:	4413      	add	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8003ff4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003ff8:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8003ffa:	f7ff fed5 	bl	8003da8 <WaitForDmaEnd>
 8003ffe:	e018      	b.n	8004032 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <LCD_IO_WriteMultiData16+0xe0>)
 8004002:	2202      	movs	r2, #2
 8004004:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff ff17 	bl	8003e40 <LCD_IO_WriteMultiData>
      if(dinc)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800401e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004022:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800402a:	3bfe      	subs	r3, #254	; 0xfe
 800402c:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 800402e:	f7ff febb 	bl	8003da8 <WaitForDmaEnd>
  while(Size)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ae      	bne.n	8003f96 <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000080e 	.word	0x2000080e
 8004048:	20000808 	.word	0x20000808
 800404c:	0001fffb 	.word	0x0001fffb
 8004050:	7fff0002 	.word	0x7fff0002

08004054 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <DMA1_Channel4_IRQHandler+0x98>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d03a      	beq.n	80040dc <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <DMA1_Channel4_IRQHandler+0x98>)
 8004068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800406c:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <DMA1_Channel4_IRQHandler+0x9c>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004074:	e002      	b.n	800407c <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <DMA1_Channel4_IRQHandler+0xa0>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800407c:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <DMA1_Channel4_IRQHandler+0xa4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f8      	bne.n	8004076 <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <DMA1_Channel4_IRQHandler+0xa8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <DMA1_Channel4_IRQHandler+0xa8>)
 8004092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004096:	f043 0318 	orr.w	r3, r3, #24
 800409a:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 800409c:	2001      	movs	r0, #1
 800409e:	f000 f969 	bl	8004374 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80040a2:	e003      	b.n	80040ac <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <DMA1_Channel4_IRQHandler+0xa8>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80040ac:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <DMA1_Channel4_IRQHandler+0xa4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f7      	bne.n	80040a4 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <DMA1_Channel4_IRQHandler+0xa8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a10      	ldr	r2, [pc, #64]	; (80040fc <DMA1_Channel4_IRQHandler+0xa8>)
 80040ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040be:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <DMA1_Channel4_IRQHandler+0xac>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80040c6:	bf00      	nop
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <DMA1_Channel4_IRQHandler+0xac>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f9      	bne.n	80040c8 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <DMA1_Channel4_IRQHandler+0xb0>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 80040da:	e003      	b.n	80040e4 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <DMA1_Channel4_IRQHandler+0x98>)
 80040de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040e2:	605a      	str	r2, [r3, #4]
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40020000 	.word	0x40020000
 80040f0:	42070080 	.word	0x42070080
 80040f4:	4000380c 	.word	0x4000380c
 80040f8:	42070100 	.word	0x42070100
 80040fc:	40003800 	.word	0x40003800
 8004100:	40020044 	.word	0x40020044
 8004104:	20000808 	.word	0x20000808

08004108 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <LCD_IO_ReadMultiData+0x5c>)
 8004116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800411a:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004122:	bf00      	nop
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f9      	bne.n	8004124 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8004130:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 8004138:	4a0c      	ldr	r2, [pc, #48]	; (800416c <LCD_IO_ReadMultiData+0x64>)
 800413a:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 8004142:	4a09      	ldr	r2, [pc, #36]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a06      	ldr	r2, [pc, #24]	; (8004168 <LCD_IO_ReadMultiData+0x60>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <LCD_IO_ReadMultiData+0x68>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40020000 	.word	0x40020000
 8004168:	40020044 	.word	0x40020044
 800416c:	4000380c 	.word	0x4000380c
 8004170:	42070080 	.word	0x42070080

08004174 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 800417e:	f241 0382 	movw	r3, #4226	; 0x1082
 8004182:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8004184:	e024      	b.n	80041d0 <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800418c:	4293      	cmp	r3, r2
 800418e:	d913      	bls.n	80041b8 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <LCD_IO_ReadMultiData8+0x74>)
 8004192:	2202      	movs	r2, #2
 8004194:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ffb3 	bl	8004108 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80041a8:	3bfe      	subs	r3, #254	; 0xfe
 80041aa:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80041b2:	33fe      	adds	r3, #254	; 0xfe
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	e009      	b.n	80041cc <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <LCD_IO_ReadMultiData8+0x74>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffa0 	bl	8004108 <LCD_IO_ReadMultiData>
      Size = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 80041cc:	f7ff fdec 	bl	8003da8 <WaitForDmaEnd>
  while(Size)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d7      	bne.n	8004186 <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <LCD_IO_ReadMultiData8+0x78>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 80041dc:	f7ff fd78 	bl	8003cd0 <LcdDirWrite>
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000808 	.word	0x20000808
 80041ec:	422181b0 	.word	0x422181b0

080041f0 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8004202:	4b54      	ldr	r3, [pc, #336]	; (8004354 <LCD_IO_ReadMultiData16to24+0x164>)
 8004204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004208:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 800420a:	4b53      	ldr	r3, [pc, #332]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004210:	bf00      	nop
 8004212:	4b51      	ldr	r3, [pc, #324]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f9      	bne.n	8004212 <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 800421e:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 8004220:	4a4e      	ldr	r2, [pc, #312]	; (800435c <LCD_IO_ReadMultiData16to24+0x16c>)
 8004222:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8004224:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 8004226:	4a4e      	ldr	r2, [pc, #312]	; (8004360 <LCD_IO_ReadMultiData16to24+0x170>)
 8004228:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 800422a:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 800422c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004230:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8004232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004236:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8004238:	4b47      	ldr	r3, [pc, #284]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 800423a:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 800423e:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8004240:	4b45      	ldr	r3, [pc, #276]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a44      	ldr	r2, [pc, #272]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 800424c:	4b45      	ldr	r3, [pc, #276]	; (8004364 <LCD_IO_ReadMultiData16to24+0x174>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
  while(Size)
 8004252:	e044      	b.n	80042de <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8004254:	4b40      	ldr	r3, [pc, #256]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	429a      	cmp	r2, r3
 800425c:	d03f      	beq.n	80042de <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b01      	subs	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 800426a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800426e:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	1c53      	adds	r3, r2, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1c59      	adds	r1, r3, #1
 8004280:	6139      	str	r1, [r7, #16]
 8004282:	4936      	ldr	r1, [pc, #216]	; (800435c <LCD_IO_ReadMultiData16to24+0x16c>)
 8004284:	5c8a      	ldrb	r2, [r1, r2]
 8004286:	3318      	adds	r3, #24
 8004288:	443b      	add	r3, r7
 800428a:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2bff      	cmp	r3, #255	; 0xff
 8004292:	d901      	bls.n	8004298 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d11f      	bne.n	80042de <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
        Size--;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 80042a8:	7a3b      	ldrb	r3, [r7, #8]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	b21a      	sxth	r2, r3
 80042b8:	7a7b      	ldrb	r3, [r7, #9]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	b21b      	sxth	r3, r3
 80042be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80042c2:	b21b      	sxth	r3, r3
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	7abb      	ldrb	r3, [r7, #10]
 80042ca:	08db      	lsrs	r3, r3, #3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b219      	sxth	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	b28a      	uxth	r2, r1
 80042dc:	801a      	strh	r2, [r3, #0]
  while(Size)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1b7      	bne.n	8004254 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 80042e4:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <LCD_IO_ReadMultiData16to24+0x174>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80042ea:	e003      	b.n	80042f4 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 80042ec:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <LCD_IO_ReadMultiData16to24+0x178>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <LCD_IO_ReadMultiData16to24+0x17c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f7      	bne.n	80042ec <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <LCD_IO_ReadMultiData16to24+0x178>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004304:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004308:	4a17      	ldr	r2, [pc, #92]	; (8004368 <LCD_IO_ReadMultiData16to24+0x178>)
 800430a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800430e:	f043 0308 	orr.w	r3, r3, #8
 8004312:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8004314:	2001      	movs	r0, #1
 8004316:	f000 f82d 	bl	8004374 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800431a:	e003      	b.n	8004324 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <LCD_IO_ReadMultiData16to24+0x178>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <LCD_IO_ReadMultiData16to24+0x17c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f7      	bne.n	800431c <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8004332:	bf00      	nop
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <LCD_IO_ReadMultiData16to24+0x168>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f9      	bne.n	8004334 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <LCD_IO_ReadMultiData16to24+0x180>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8004346:	f7ff fcc3 	bl	8003cd0 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40020000 	.word	0x40020000
 8004358:	40020044 	.word	0x40020044
 800435c:	20000810 	.word	0x20000810
 8004360:	4000380c 	.word	0x4000380c
 8004364:	42070080 	.word	0x42070080
 8004368:	40003800 	.word	0x40003800
 800436c:	42070100 	.word	0x42070100
 8004370:	422181b0 	.word	0x422181b0

08004374 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  while(c--);
 800437c:	bf00      	nop
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	1e5a      	subs	r2, r3, #1
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1fa      	bne.n	800437e <LCD_IO_Delay+0xa>
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f9ff 	bl	80047a0 <HAL_Delay>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <LCD_IO_Bl_OnOff+0x28>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80043c2:	e002      	b.n	80043ca <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <LCD_IO_Bl_OnOff+0x28>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	42220198 	.word	0x42220198

080043d8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80043dc:	4b3f      	ldr	r3, [pc, #252]	; (80044dc <LCD_IO_Init+0x104>)
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4a3e      	ldr	r2, [pc, #248]	; (80044dc <LCD_IO_Init+0x104>)
 80043e2:	f043 0318 	orr.w	r3, r3, #24
 80043e6:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 80043e8:	4b3c      	ldr	r3, [pc, #240]	; (80044dc <LCD_IO_Init+0x104>)
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	4a3b      	ldr	r2, [pc, #236]	; (80044dc <LCD_IO_Init+0x104>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 80043f4:	4b3a      	ldr	r3, [pc, #232]	; (80044e0 <LCD_IO_Init+0x108>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80043fc:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <LCD_IO_Init+0x108>)
 80043fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004402:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8004404:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <LCD_IO_Init+0x10c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800440c:	4a35      	ldr	r2, [pc, #212]	; (80044e4 <LCD_IO_Init+0x10c>)
 800440e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004412:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8004414:	2001      	movs	r0, #1
 8004416:	f7ff ffc9 	bl	80043ac <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <LCD_IO_Init+0x108>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004422:	4a2f      	ldr	r2, [pc, #188]	; (80044e0 <LCD_IO_Init+0x108>)
 8004424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004428:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <LCD_IO_Init+0x110>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <LCD_IO_Init+0x114>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8004436:	4b2e      	ldr	r3, [pc, #184]	; (80044f0 <LCD_IO_Init+0x118>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <LCD_IO_Init+0x108>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004444:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <LCD_IO_Init+0x108>)
 8004446:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800444a:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 800444c:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <LCD_IO_Init+0x108>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004454:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <LCD_IO_Init+0x108>)
 8004456:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800445a:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <LCD_IO_Init+0x11c>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8004462:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <LCD_IO_Init+0x120>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <LCD_IO_Init+0x108>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004470:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <LCD_IO_Init+0x108>)
 8004472:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8004476:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8004478:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <LCD_IO_Init+0x108>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <LCD_IO_Init+0x108>)
 8004482:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8004486:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8004488:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <LCD_IO_Init+0x124>)
 800448a:	f240 324f 	movw	r2, #847	; 0x34f
 800448e:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <LCD_IO_Init+0x124>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <LCD_IO_Init+0x124>)
 8004496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449a:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 800449c:	200a      	movs	r0, #10
 800449e:	f7ff ff79 	bl	8004394 <LCD_Delay>
  LCD_RST_ON;
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <LCD_IO_Init+0x110>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80044a8:	200a      	movs	r0, #10
 80044aa:	f7ff ff73 	bl	8004394 <LCD_Delay>
  LCD_RST_OFF;
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <LCD_IO_Init+0x110>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80044b4:	200a      	movs	r0, #10
 80044b6:	f7ff ff6d 	bl	8004394 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 80044ba:	210f      	movs	r1, #15
 80044bc:	200f      	movs	r0, #15
 80044be:	f7ff fb9d 	bl	8003bfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 80044c2:	200f      	movs	r0, #15
 80044c4:	f7ff fb7e 	bl	8003bc4 <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 80044c8:	210f      	movs	r1, #15
 80044ca:	200e      	movs	r0, #14
 80044cc:	f7ff fb96 	bl	8003bfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 80044d0:	200e      	movs	r0, #14
 80044d2:	f7ff fb77 	bl	8003bc4 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40010c04 	.word	0x40010c04
 80044e4:	40011000 	.word	0x40011000
 80044e8:	422181a8 	.word	0x422181a8
 80044ec:	422181ac 	.word	0x422181ac
 80044f0:	422181b0 	.word	0x422181b0
 80044f4:	422181b4 	.word	0x422181b4
 80044f8:	424203b8 	.word	0x424203b8
 80044fc:	40003800 	.word	0x40003800

08004500 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 800450a:	f7ff fc4d 	bl	8003da8 <WaitForDmaEnd>
  LcdSpiMode8();
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <LCD_IO_WriteCmd8+0x30>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <LCD_IO_WriteCmd8+0x34>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fc23 	bl	8003d68 <LcdCmdWrite8>
  LCD_CS_OFF;
 8004522:	4b04      	ldr	r3, [pc, #16]	; (8004534 <LCD_IO_WriteCmd8+0x34>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	4207002c 	.word	0x4207002c
 8004534:	422181b0 	.word	0x422181b0

08004538 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8004542:	f7ff fc31 	bl	8003da8 <WaitForDmaEnd>
  LcdSpiMode8();
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <LCD_IO_WriteData8+0x30>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <LCD_IO_WriteData8+0x34>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fbed 	bl	8003d34 <LcdWrite8>
  LCD_CS_OFF;
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <LCD_IO_WriteData8+0x34>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	4207002c 	.word	0x4207002c
 800456c:	422181b0 	.word	0x422181b0

08004570 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	603a      	str	r2, [r7, #0]
 800457a:	71fb      	strb	r3, [r7, #7]
 800457c:	460b      	mov	r3, r1
 800457e:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8004580:	f7ff fc12 	bl	8003da8 <WaitForDmaEnd>
  LcdSpiMode8();
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <LCD_IO_WriteCmd8DataFill16+0x48>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fbe8 	bl	8003d68 <LcdCmdWrite8>
  LcdSpiMode16();
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	2200      	movs	r2, #0
 80045a2:	6839      	ldr	r1, [r7, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fcdf 	bl	8003f68 <LCD_IO_WriteMultiData16>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	4207002c 	.word	0x4207002c
 80045b8:	422181b0 	.word	0x422181b0

080045bc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80045ca:	f7ff fbed 	bl	8003da8 <WaitForDmaEnd>
  LcdSpiMode8();
 80045ce:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80045d4:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fbc3 	bl	8003d68 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80045e2:	2201      	movs	r2, #1
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	68b8      	ldr	r0, [r7, #8]
 80045e8:	f7ff fc6e 	bl	8003ec8 <LCD_IO_WriteMultiData8>
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	4207002c 	.word	0x4207002c
 80045f8:	422181b0 	.word	0x422181b0

080045fc <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800460a:	f7ff fbcd 	bl	8003da8 <WaitForDmaEnd>
  LcdSpiMode8();
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fba3 	bl	8003d68 <LcdCmdWrite8>
  LcdSpiMode16();
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8004628:	2201      	movs	r2, #1
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	f7ff fc9b 	bl	8003f68 <LCD_IO_WriteMultiData16>
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	4207002c 	.word	0x4207002c
 8004640:	422181b0 	.word	0x422181b0

08004644 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8004654:	f7ff fba8 	bl	8003da8 <WaitForDmaEnd>
  LcdSpiMode8();
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fb7e 	bl	8003d68 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8004672:	6838      	ldr	r0, [r7, #0]
 8004674:	f7ff faec 	bl	8003c50 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f7ff fd7a 	bl	8004174 <LCD_IO_ReadMultiData8>
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	4207002c 	.word	0x4207002c
 800468c:	422181b0 	.word	0x422181b0

08004690 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4603      	mov	r3, r0
 800469e:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80046a0:	f7ff fb82 	bl	8003da8 <WaitForDmaEnd>
  LcdSpiMode8();
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fb58 	bl	8003d68 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 80046be:	6838      	ldr	r0, [r7, #0]
 80046c0:	f7ff fac6 	bl	8003c50 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	68b8      	ldr	r0, [r7, #8]
 80046c8:	f7ff fd92 	bl	80041f0 <LCD_IO_ReadMultiData16to24>
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	4207002c 	.word	0x4207002c
 80046d8:	422181b0 	.word	0x422181b0

080046dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_Init+0x28>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a07      	ldr	r2, [pc, #28]	; (8004704 <HAL_Init+0x28>)
 80046e6:	f043 0310 	orr.w	r3, r3, #16
 80046ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ec:	2003      	movs	r0, #3
 80046ee:	f000 fb59 	bl	8004da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046f2:	200f      	movs	r0, #15
 80046f4:	f000 f808 	bl	8004708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f8:	f7fe f87e 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40022000 	.word	0x40022000

08004708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_InitTick+0x54>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_InitTick+0x58>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800471e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fb71 	bl	8004e0e <HAL_SYSTICK_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00e      	b.n	8004754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b0f      	cmp	r3, #15
 800473a:	d80a      	bhi.n	8004752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800473c:	2200      	movs	r2, #0
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	f000 fb39 	bl	8004dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004748:	4a06      	ldr	r2, [pc, #24]	; (8004764 <HAL_InitTick+0x5c>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000044 	.word	0x20000044
 8004760:	20000094 	.word	0x20000094
 8004764:	20000090 	.word	0x20000090

08004768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_IncTick+0x1c>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_IncTick+0x20>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4413      	add	r3, r2
 8004778:	4a03      	ldr	r2, [pc, #12]	; (8004788 <HAL_IncTick+0x20>)
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr
 8004784:	20000094 	.word	0x20000094
 8004788:	20000910 	.word	0x20000910

0800478c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return uwTick;
 8004790:	4b02      	ldr	r3, [pc, #8]	; (800479c <HAL_GetTick+0x10>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	20000910 	.word	0x20000910

080047a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a8:	f7ff fff0 	bl	800478c <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d005      	beq.n	80047c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <HAL_Delay+0x44>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047c6:	bf00      	nop
 80047c8:	f7ff ffe0 	bl	800478c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d8f7      	bhi.n	80047c8 <HAL_Delay+0x28>
  {
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000094 	.word	0x20000094

080047e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0be      	b.n	8004988 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fe f818 	bl	800285c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f9ab 	bl	8004b88 <ADC_ConversionStop_Disable>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	f040 8099 	bne.w	8004976 <HAL_ADC_Init+0x18e>
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8095 	bne.w	8004976 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004854:	f023 0302 	bic.w	r3, r3, #2
 8004858:	f043 0202 	orr.w	r2, r3, #2
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004868:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7b1b      	ldrb	r3, [r3, #12]
 800486e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004870:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004880:	d003      	beq.n	800488a <HAL_ADC_Init+0xa2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d102      	bne.n	8004890 <HAL_ADC_Init+0xa8>
 800488a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800488e:	e000      	b.n	8004892 <HAL_ADC_Init+0xaa>
 8004890:	2300      	movs	r3, #0
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	7d1b      	ldrb	r3, [r3, #20]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d119      	bne.n	80048d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7b1b      	ldrb	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	035a      	lsls	r2, r3, #13
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	e00b      	b.n	80048d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_ADC_Init+0x1a8>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004904:	d003      	beq.n	800490e <HAL_ADC_Init+0x126>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d104      	bne.n	8004918 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	3b01      	subs	r3, #1
 8004914:	051b      	lsls	r3, r3, #20
 8004916:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	430a      	orrs	r2, r1
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <HAL_ADC_Init+0x1ac>)
 8004934:	4013      	ands	r3, r2
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	d10b      	bne.n	8004954 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004952:	e018      	b.n	8004986 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	f023 0312 	bic.w	r3, r3, #18
 800495c:	f043 0210 	orr.w	r2, r3, #16
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004974:	e007      	b.n	8004986 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f043 0210 	orr.w	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	ffe1f7fd 	.word	0xffe1f7fd
 8004994:	ff1f0efe 	.word	0xff1f0efe

08004998 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x20>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e0dc      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x1da>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	d81c      	bhi.n	8004a02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	3b05      	subs	r3, #5
 80049da:	221f      	movs	r2, #31
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	4019      	ands	r1, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	3b05      	subs	r3, #5
 80049f4:	fa00 f203 	lsl.w	r2, r0, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	635a      	str	r2, [r3, #52]	; 0x34
 8004a00:	e03c      	b.n	8004a7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d81c      	bhi.n	8004a44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	3b23      	subs	r3, #35	; 0x23
 8004a1c:	221f      	movs	r2, #31
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	4019      	ands	r1, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	3b23      	subs	r3, #35	; 0x23
 8004a36:	fa00 f203 	lsl.w	r2, r0, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
 8004a42:	e01b      	b.n	8004a7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	3b41      	subs	r3, #65	; 0x41
 8004a56:	221f      	movs	r2, #31
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	4019      	ands	r1, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3b41      	subs	r3, #65	; 0x41
 8004a70:	fa00 f203 	lsl.w	r2, r0, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b09      	cmp	r3, #9
 8004a82:	d91c      	bls.n	8004abe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68d9      	ldr	r1, [r3, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	4413      	add	r3, r2
 8004a94:	3b1e      	subs	r3, #30
 8004a96:	2207      	movs	r2, #7
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	4019      	ands	r1, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6898      	ldr	r0, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	3b1e      	subs	r3, #30
 8004ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	60da      	str	r2, [r3, #12]
 8004abc:	e019      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6919      	ldr	r1, [r3, #16]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	2207      	movs	r2, #7
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	4019      	ands	r1, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6898      	ldr	r0, [r3, #8]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b10      	cmp	r3, #16
 8004af8:	d003      	beq.n	8004b02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004afe:	2b11      	cmp	r3, #17
 8004b00:	d132      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_ADC_ConfigChannel+0x1e4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d125      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d126      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d11a      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <HAL_ADC_ConfigChannel+0x1e8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a13      	ldr	r2, [pc, #76]	; (8004b84 <HAL_ADC_ConfigChannel+0x1ec>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	0c9a      	lsrs	r2, r3, #18
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b48:	e002      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f9      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x1b2>
 8004b56:	e007      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	40012400 	.word	0x40012400
 8004b80:	20000044 	.word	0x20000044
 8004b84:	431bde83 	.word	0x431bde83

08004b88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d12e      	bne.n	8004c00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bb2:	f7ff fdeb 	bl	800478c <HAL_GetTick>
 8004bb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004bb8:	e01b      	b.n	8004bf2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bba:	f7ff fde7 	bl	800478c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d914      	bls.n	8004bf2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10d      	bne.n	8004bf2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	f043 0210 	orr.w	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e007      	b.n	8004c02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d0dc      	beq.n	8004bba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <__NVIC_SetPriorityGrouping>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <__NVIC_SetPriorityGrouping+0x44>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c3e:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <__NVIC_SetPriorityGrouping+0x44>)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	60d3      	str	r3, [r2, #12]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <__NVIC_GetPriorityGrouping>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <__NVIC_GetPriorityGrouping+0x18>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	f003 0307 	and.w	r3, r3, #7
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <__NVIC_EnableIRQ>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db0b      	blt.n	8004c9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	4906      	ldr	r1, [pc, #24]	; (8004ca4 <__NVIC_EnableIRQ+0x34>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2001      	movs	r0, #1
 8004c92:	fa00 f202 	lsl.w	r2, r0, r2
 8004c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr
 8004ca4:	e000e100 	.word	0xe000e100

08004ca8 <__NVIC_SetPriority>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	6039      	str	r1, [r7, #0]
 8004cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	db0a      	blt.n	8004cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	490c      	ldr	r1, [pc, #48]	; (8004cf4 <__NVIC_SetPriority+0x4c>)
 8004cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc6:	0112      	lsls	r2, r2, #4
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cd0:	e00a      	b.n	8004ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	4908      	ldr	r1, [pc, #32]	; (8004cf8 <__NVIC_SetPriority+0x50>)
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	3b04      	subs	r3, #4
 8004ce0:	0112      	lsls	r2, r2, #4
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	761a      	strb	r2, [r3, #24]
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	e000e100 	.word	0xe000e100
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <NVIC_EncodePriority>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f1c3 0307 	rsb	r3, r3, #7
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	bf28      	it	cs
 8004d1a:	2304      	movcs	r3, #4
 8004d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3304      	adds	r3, #4
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d902      	bls.n	8004d2c <NVIC_EncodePriority+0x30>
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3b03      	subs	r3, #3
 8004d2a:	e000      	b.n	8004d2e <NVIC_EncodePriority+0x32>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43da      	mvns	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	401a      	ands	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d44:	f04f 31ff 	mov.w	r1, #4294967295
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4e:	43d9      	mvns	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	4313      	orrs	r3, r2
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3724      	adds	r7, #36	; 0x24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <SysTick_Config>:
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d70:	d301      	bcc.n	8004d76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004d72:	2301      	movs	r3, #1
 8004d74:	e00f      	b.n	8004d96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d76:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <SysTick_Config+0x40>)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d7e:	210f      	movs	r1, #15
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	f7ff ff90 	bl	8004ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <SysTick_Config+0x40>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <SysTick_Config+0x40>)
 8004d90:	2207      	movs	r2, #7
 8004d92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	e000e010 	.word	0xe000e010

08004da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff2d 	bl	8004c0c <__NVIC_SetPriorityGrouping>
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b086      	sub	sp, #24
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dcc:	f7ff ff42 	bl	8004c54 <__NVIC_GetPriorityGrouping>
 8004dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	6978      	ldr	r0, [r7, #20]
 8004dd8:	f7ff ff90 	bl	8004cfc <NVIC_EncodePriority>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff5f 	bl	8004ca8 <__NVIC_SetPriority>
}
 8004dea:	bf00      	nop
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ff35 	bl	8004c70 <__NVIC_EnableIRQ>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffa2 	bl	8004d60 <SysTick_Config>
 8004e1c:	4603      	mov	r3, r0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e043      	b.n	8004ec6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <HAL_DMA_Init+0xa8>)
 8004e46:	4413      	add	r3, r2
 8004e48:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <HAL_DMA_Init+0xac>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	009a      	lsls	r2, r3, #2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1f      	ldr	r2, [pc, #124]	; (8004ed8 <HAL_DMA_Init+0xb0>)
 8004e5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004e76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	bffdfff8 	.word	0xbffdfff8
 8004ed4:	cccccccd 	.word	0xcccccccd
 8004ed8:	40020000 	.word	0x40020000

08004edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b08b      	sub	sp, #44	; 0x2c
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004eea:	2300      	movs	r3, #0
 8004eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eee:	e169      	b.n	80051c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	f040 8158 	bne.w	80051be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4a9a      	ldr	r2, [pc, #616]	; (800517c <HAL_GPIO_Init+0x2a0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d05e      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f18:	4a98      	ldr	r2, [pc, #608]	; (800517c <HAL_GPIO_Init+0x2a0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d875      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f1e:	4a98      	ldr	r2, [pc, #608]	; (8005180 <HAL_GPIO_Init+0x2a4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d058      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f24:	4a96      	ldr	r2, [pc, #600]	; (8005180 <HAL_GPIO_Init+0x2a4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d86f      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f2a:	4a96      	ldr	r2, [pc, #600]	; (8005184 <HAL_GPIO_Init+0x2a8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d052      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f30:	4a94      	ldr	r2, [pc, #592]	; (8005184 <HAL_GPIO_Init+0x2a8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d869      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f36:	4a94      	ldr	r2, [pc, #592]	; (8005188 <HAL_GPIO_Init+0x2ac>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d04c      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f3c:	4a92      	ldr	r2, [pc, #584]	; (8005188 <HAL_GPIO_Init+0x2ac>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d863      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f42:	4a92      	ldr	r2, [pc, #584]	; (800518c <HAL_GPIO_Init+0x2b0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d046      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f48:	4a90      	ldr	r2, [pc, #576]	; (800518c <HAL_GPIO_Init+0x2b0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d85d      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f4e:	2b12      	cmp	r3, #18
 8004f50:	d82a      	bhi.n	8004fa8 <HAL_GPIO_Init+0xcc>
 8004f52:	2b12      	cmp	r3, #18
 8004f54:	d859      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <HAL_GPIO_Init+0x80>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004fd7 	.word	0x08004fd7
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004fc3 	.word	0x08004fc3
 8004f68:	08005005 	.word	0x08005005
 8004f6c:	0800500b 	.word	0x0800500b
 8004f70:	0800500b 	.word	0x0800500b
 8004f74:	0800500b 	.word	0x0800500b
 8004f78:	0800500b 	.word	0x0800500b
 8004f7c:	0800500b 	.word	0x0800500b
 8004f80:	0800500b 	.word	0x0800500b
 8004f84:	0800500b 	.word	0x0800500b
 8004f88:	0800500b 	.word	0x0800500b
 8004f8c:	0800500b 	.word	0x0800500b
 8004f90:	0800500b 	.word	0x0800500b
 8004f94:	0800500b 	.word	0x0800500b
 8004f98:	0800500b 	.word	0x0800500b
 8004f9c:	0800500b 	.word	0x0800500b
 8004fa0:	08004fb9 	.word	0x08004fb9
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	4a79      	ldr	r2, [pc, #484]	; (8005190 <HAL_GPIO_Init+0x2b4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004fae:	e02c      	b.n	800500a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	623b      	str	r3, [r7, #32]
          break;
 8004fb6:	e029      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	623b      	str	r3, [r7, #32]
          break;
 8004fc0:	e024      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	623b      	str	r3, [r7, #32]
          break;
 8004fca:	e01f      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	623b      	str	r3, [r7, #32]
          break;
 8004fd4:	e01a      	b.n	800500c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fde:	2304      	movs	r3, #4
 8004fe0:	623b      	str	r3, [r7, #32]
          break;
 8004fe2:	e013      	b.n	800500c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fec:	2308      	movs	r3, #8
 8004fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	611a      	str	r2, [r3, #16]
          break;
 8004ff6:	e009      	b.n	800500c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	615a      	str	r2, [r3, #20]
          break;
 8005002:	e003      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005004:	2300      	movs	r3, #0
 8005006:	623b      	str	r3, [r7, #32]
          break;
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x130>
          break;
 800500a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2bff      	cmp	r3, #255	; 0xff
 8005010:	d801      	bhi.n	8005016 <HAL_GPIO_Init+0x13a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	e001      	b.n	800501a <HAL_GPIO_Init+0x13e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2bff      	cmp	r3, #255	; 0xff
 8005020:	d802      	bhi.n	8005028 <HAL_GPIO_Init+0x14c>
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	e002      	b.n	800502e <HAL_GPIO_Init+0x152>
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	3b08      	subs	r3, #8
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	210f      	movs	r1, #15
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	6a39      	ldr	r1, [r7, #32]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	431a      	orrs	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80b1 	beq.w	80051be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800505c:	4b4d      	ldr	r3, [pc, #308]	; (8005194 <HAL_GPIO_Init+0x2b8>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4a4c      	ldr	r2, [pc, #304]	; (8005194 <HAL_GPIO_Init+0x2b8>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6193      	str	r3, [r2, #24]
 8005068:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_GPIO_Init+0x2b8>)
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005074:	4a48      	ldr	r2, [pc, #288]	; (8005198 <HAL_GPIO_Init+0x2bc>)
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	3302      	adds	r3, #2
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a40      	ldr	r2, [pc, #256]	; (800519c <HAL_GPIO_Init+0x2c0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <HAL_GPIO_Init+0x1ec>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3f      	ldr	r2, [pc, #252]	; (80051a0 <HAL_GPIO_Init+0x2c4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00d      	beq.n	80050c4 <HAL_GPIO_Init+0x1e8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3e      	ldr	r2, [pc, #248]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <HAL_GPIO_Init+0x1e4>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3d      	ldr	r2, [pc, #244]	; (80051a8 <HAL_GPIO_Init+0x2cc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <HAL_GPIO_Init+0x1e0>
 80050b8:	2303      	movs	r3, #3
 80050ba:	e006      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050bc:	2304      	movs	r3, #4
 80050be:	e004      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e002      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050c8:	2300      	movs	r3, #0
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	f002 0203 	and.w	r2, r2, #3
 80050d0:	0092      	lsls	r2, r2, #2
 80050d2:	4093      	lsls	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050da:	492f      	ldr	r1, [pc, #188]	; (8005198 <HAL_GPIO_Init+0x2bc>)
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	3302      	adds	r3, #2
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050f4:	4b2d      	ldr	r3, [pc, #180]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	492c      	ldr	r1, [pc, #176]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005102:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	43db      	mvns	r3, r3
 800510a:	4928      	ldr	r1, [pc, #160]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 800510c:	4013      	ands	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800511c:	4b23      	ldr	r3, [pc, #140]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4922      	ldr	r1, [pc, #136]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]
 8005128:	e006      	b.n	8005138 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	43db      	mvns	r3, r3
 8005132:	491e      	ldr	r1, [pc, #120]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 8005134:	4013      	ands	r3, r2
 8005136:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	4918      	ldr	r1, [pc, #96]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	608b      	str	r3, [r1, #8]
 8005150:	e006      	b.n	8005160 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005152:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	43db      	mvns	r3, r3
 800515a:	4914      	ldr	r1, [pc, #80]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 800515c:	4013      	ands	r3, r2
 800515e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d021      	beq.n	80051b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800516c:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	490e      	ldr	r1, [pc, #56]	; (80051ac <HAL_GPIO_Init+0x2d0>)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	60cb      	str	r3, [r1, #12]
 8005178:	e021      	b.n	80051be <HAL_GPIO_Init+0x2e2>
 800517a:	bf00      	nop
 800517c:	10320000 	.word	0x10320000
 8005180:	10310000 	.word	0x10310000
 8005184:	10220000 	.word	0x10220000
 8005188:	10210000 	.word	0x10210000
 800518c:	10120000 	.word	0x10120000
 8005190:	10110000 	.word	0x10110000
 8005194:	40021000 	.word	0x40021000
 8005198:	40010000 	.word	0x40010000
 800519c:	40010800 	.word	0x40010800
 80051a0:	40010c00 	.word	0x40010c00
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_GPIO_Init+0x304>)
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	4909      	ldr	r1, [pc, #36]	; (80051e0 <HAL_GPIO_Init+0x304>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f47f ae8e 	bne.w	8004ef0 <HAL_GPIO_Init+0x14>
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	372c      	adds	r7, #44	; 0x2c
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	40010400 	.word	0x40010400

080051e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	887b      	ldrh	r3, [r7, #2]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	e001      	b.n	8005206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005202:	2300      	movs	r3, #0
 8005204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	807b      	strh	r3, [r7, #2]
 800521e:	4613      	mov	r3, r2
 8005220:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005222:	787b      	ldrb	r3, [r7, #1]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005228:	887a      	ldrh	r2, [r7, #2]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800522e:	e003      	b.n	8005238 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005230:	887b      	ldrh	r3, [r7, #2]
 8005232:	041a      	lsls	r2, r3, #16
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	611a      	str	r2, [r3, #16]
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
	...

08005244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	4013      	ands	r3, r2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d006      	beq.n	8005268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800525a:	4a05      	ldr	r2, [pc, #20]	; (8005270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	4618      	mov	r0, r3
 8005264:	f7fc ffb6 	bl	80021d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40010400 	.word	0x40010400

08005274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e12b      	b.n	80054de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fd fb1a 	bl	80028d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	; 0x24
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d8:	f000 fce4 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 80052dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4a81      	ldr	r2, [pc, #516]	; (80054e8 <HAL_I2C_Init+0x274>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d807      	bhi.n	80052f8 <HAL_I2C_Init+0x84>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4a80      	ldr	r2, [pc, #512]	; (80054ec <HAL_I2C_Init+0x278>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	bf94      	ite	ls
 80052f0:	2301      	movls	r3, #1
 80052f2:	2300      	movhi	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e006      	b.n	8005306 <HAL_I2C_Init+0x92>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a7d      	ldr	r2, [pc, #500]	; (80054f0 <HAL_I2C_Init+0x27c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	bf94      	ite	ls
 8005300:	2301      	movls	r3, #1
 8005302:	2300      	movhi	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e0e7      	b.n	80054de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a78      	ldr	r2, [pc, #480]	; (80054f4 <HAL_I2C_Init+0x280>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	0c9b      	lsrs	r3, r3, #18
 8005318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4a6a      	ldr	r2, [pc, #424]	; (80054e8 <HAL_I2C_Init+0x274>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d802      	bhi.n	8005348 <HAL_I2C_Init+0xd4>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	3301      	adds	r3, #1
 8005346:	e009      	b.n	800535c <HAL_I2C_Init+0xe8>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	4a69      	ldr	r2, [pc, #420]	; (80054f8 <HAL_I2C_Init+0x284>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	099b      	lsrs	r3, r3, #6
 800535a:	3301      	adds	r3, #1
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	430b      	orrs	r3, r1
 8005362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800536e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	495c      	ldr	r1, [pc, #368]	; (80054e8 <HAL_I2C_Init+0x274>)
 8005378:	428b      	cmp	r3, r1
 800537a:	d819      	bhi.n	80053b0 <HAL_I2C_Init+0x13c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1e59      	subs	r1, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	fbb1 f3f3 	udiv	r3, r1, r3
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005390:	400b      	ands	r3, r1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_I2C_Init+0x138>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1e59      	subs	r1, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a4:	3301      	adds	r3, #1
 80053a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053aa:	e051      	b.n	8005450 <HAL_I2C_Init+0x1dc>
 80053ac:	2304      	movs	r3, #4
 80053ae:	e04f      	b.n	8005450 <HAL_I2C_Init+0x1dc>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d111      	bne.n	80053dc <HAL_I2C_Init+0x168>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1e58      	subs	r0, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	440b      	add	r3, r1
 80053c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ca:	3301      	adds	r3, #1
 80053cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e012      	b.n	8005402 <HAL_I2C_Init+0x18e>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1e58      	subs	r0, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6859      	ldr	r1, [r3, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	0099      	lsls	r1, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80053f2:	3301      	adds	r3, #1
 80053f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_Init+0x196>
 8005406:	2301      	movs	r3, #1
 8005408:	e022      	b.n	8005450 <HAL_I2C_Init+0x1dc>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10e      	bne.n	8005430 <HAL_I2C_Init+0x1bc>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1e58      	subs	r0, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6859      	ldr	r1, [r3, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	440b      	add	r3, r1
 8005420:	fbb0 f3f3 	udiv	r3, r0, r3
 8005424:	3301      	adds	r3, #1
 8005426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542e:	e00f      	b.n	8005450 <HAL_I2C_Init+0x1dc>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	1e58      	subs	r0, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6859      	ldr	r1, [r3, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	0099      	lsls	r1, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	fbb0 f3f3 	udiv	r3, r0, r3
 8005446:	3301      	adds	r3, #1
 8005448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	6809      	ldr	r1, [r1, #0]
 8005454:	4313      	orrs	r3, r2
 8005456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800547e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6911      	ldr	r1, [r2, #16]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68d2      	ldr	r2, [r2, #12]
 800548a:	4311      	orrs	r1, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	430b      	orrs	r3, r1
 8005492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	000186a0 	.word	0x000186a0
 80054ec:	001e847f 	.word	0x001e847f
 80054f0:	003d08ff 	.word	0x003d08ff
 80054f4:	431bde83 	.word	0x431bde83
 80054f8:	10624dd3 	.word	0x10624dd3

080054fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e272      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8087 	beq.w	800562a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800551c:	4b92      	ldr	r3, [pc, #584]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b04      	cmp	r3, #4
 8005526:	d00c      	beq.n	8005542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005528:	4b8f      	ldr	r3, [pc, #572]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	2b08      	cmp	r3, #8
 8005532:	d112      	bne.n	800555a <HAL_RCC_OscConfig+0x5e>
 8005534:	4b8c      	ldr	r3, [pc, #560]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005540:	d10b      	bne.n	800555a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005542:	4b89      	ldr	r3, [pc, #548]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d06c      	beq.n	8005628 <HAL_RCC_OscConfig+0x12c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d168      	bne.n	8005628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e24c      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x76>
 8005564:	4b80      	ldr	r3, [pc, #512]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a7f      	ldr	r2, [pc, #508]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 800556a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e02e      	b.n	80055d0 <HAL_RCC_OscConfig+0xd4>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x98>
 800557a:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a7a      	ldr	r2, [pc, #488]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b78      	ldr	r3, [pc, #480]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a77      	ldr	r2, [pc, #476]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 800558c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e01d      	b.n	80055d0 <HAL_RCC_OscConfig+0xd4>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0xbc>
 800559e:	4b72      	ldr	r3, [pc, #456]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a71      	ldr	r2, [pc, #452]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b6f      	ldr	r3, [pc, #444]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6e      	ldr	r2, [pc, #440]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_OscConfig+0xd4>
 80055b8:	4b6b      	ldr	r3, [pc, #428]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a6a      	ldr	r2, [pc, #424]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b68      	ldr	r3, [pc, #416]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a67      	ldr	r2, [pc, #412]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7ff f8d8 	bl	800478c <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e0:	f7ff f8d4 	bl	800478c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	; 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e200      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f2:	4b5d      	ldr	r3, [pc, #372]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0xe4>
 80055fe:	e014      	b.n	800562a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7ff f8c4 	bl	800478c <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005608:	f7ff f8c0 	bl	800478c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	; 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1ec      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561a:	4b53      	ldr	r3, [pc, #332]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x10c>
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d063      	beq.n	80056fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005636:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005642:	4b49      	ldr	r3, [pc, #292]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b08      	cmp	r3, #8
 800564c:	d11c      	bne.n	8005688 <HAL_RCC_OscConfig+0x18c>
 800564e:	4b46      	ldr	r3, [pc, #280]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d116      	bne.n	8005688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	4b43      	ldr	r3, [pc, #268]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_RCC_OscConfig+0x176>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e1c0      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005672:	4b3d      	ldr	r3, [pc, #244]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4939      	ldr	r1, [pc, #228]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005686:	e03a      	b.n	80056fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d020      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005690:	4b36      	ldr	r3, [pc, #216]	; (800576c <HAL_RCC_OscConfig+0x270>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005696:	f7ff f879 	bl	800478c <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800569e:	f7ff f875 	bl	800478c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e1a1      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b0:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056bc:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4927      	ldr	r1, [pc, #156]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]
 80056d0:	e015      	b.n	80056fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d2:	4b26      	ldr	r3, [pc, #152]	; (800576c <HAL_RCC_OscConfig+0x270>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7ff f858 	bl	800478c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e0:	f7ff f854 	bl	800478c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e180      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d03a      	beq.n	8005780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <HAL_RCC_OscConfig+0x274>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005718:	f7ff f838 	bl	800478c <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005720:	f7ff f834 	bl	800478c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e160      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <HAL_RCC_OscConfig+0x26c>)
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800573e:	2001      	movs	r0, #1
 8005740:	f000 fac4 	bl	8005ccc <RCC_Delay>
 8005744:	e01c      	b.n	8005780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005746:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <HAL_RCC_OscConfig+0x274>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574c:	f7ff f81e 	bl	800478c <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005752:	e00f      	b.n	8005774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005754:	f7ff f81a 	bl	800478c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d908      	bls.n	8005774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e146      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
 8005766:	bf00      	nop
 8005768:	40021000 	.word	0x40021000
 800576c:	42420000 	.word	0x42420000
 8005770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005774:	4b92      	ldr	r3, [pc, #584]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e9      	bne.n	8005754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80a6 	beq.w	80058da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800578e:	2300      	movs	r3, #0
 8005790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005792:	4b8b      	ldr	r3, [pc, #556]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10d      	bne.n	80057ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800579e:	4b88      	ldr	r3, [pc, #544]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	4a87      	ldr	r2, [pc, #540]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	61d3      	str	r3, [r2, #28]
 80057aa:	4b85      	ldr	r3, [pc, #532]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ba:	4b82      	ldr	r3, [pc, #520]	; (80059c4 <HAL_RCC_OscConfig+0x4c8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d118      	bne.n	80057f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057c6:	4b7f      	ldr	r3, [pc, #508]	; (80059c4 <HAL_RCC_OscConfig+0x4c8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a7e      	ldr	r2, [pc, #504]	; (80059c4 <HAL_RCC_OscConfig+0x4c8>)
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d2:	f7fe ffdb 	bl	800478c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057da:	f7fe ffd7 	bl	800478c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b64      	cmp	r3, #100	; 0x64
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e103      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ec:	4b75      	ldr	r3, [pc, #468]	; (80059c4 <HAL_RCC_OscConfig+0x4c8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d106      	bne.n	800580e <HAL_RCC_OscConfig+0x312>
 8005800:	4b6f      	ldr	r3, [pc, #444]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	4a6e      	ldr	r2, [pc, #440]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	6213      	str	r3, [r2, #32]
 800580c:	e02d      	b.n	800586a <HAL_RCC_OscConfig+0x36e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10c      	bne.n	8005830 <HAL_RCC_OscConfig+0x334>
 8005816:	4b6a      	ldr	r3, [pc, #424]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	4a69      	ldr	r2, [pc, #420]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	6213      	str	r3, [r2, #32]
 8005822:	4b67      	ldr	r3, [pc, #412]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	4a66      	ldr	r2, [pc, #408]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005828:	f023 0304 	bic.w	r3, r3, #4
 800582c:	6213      	str	r3, [r2, #32]
 800582e:	e01c      	b.n	800586a <HAL_RCC_OscConfig+0x36e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b05      	cmp	r3, #5
 8005836:	d10c      	bne.n	8005852 <HAL_RCC_OscConfig+0x356>
 8005838:	4b61      	ldr	r3, [pc, #388]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	4a60      	ldr	r2, [pc, #384]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 800583e:	f043 0304 	orr.w	r3, r3, #4
 8005842:	6213      	str	r3, [r2, #32]
 8005844:	4b5e      	ldr	r3, [pc, #376]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	4a5d      	ldr	r2, [pc, #372]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	6213      	str	r3, [r2, #32]
 8005850:	e00b      	b.n	800586a <HAL_RCC_OscConfig+0x36e>
 8005852:	4b5b      	ldr	r3, [pc, #364]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	4a5a      	ldr	r2, [pc, #360]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	6213      	str	r3, [r2, #32]
 800585e:	4b58      	ldr	r3, [pc, #352]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	4a57      	ldr	r2, [pc, #348]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	f023 0304 	bic.w	r3, r3, #4
 8005868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d015      	beq.n	800589e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005872:	f7fe ff8b 	bl	800478c <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005878:	e00a      	b.n	8005890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587a:	f7fe ff87 	bl	800478c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e0b1      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005890:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ee      	beq.n	800587a <HAL_RCC_OscConfig+0x37e>
 800589c:	e014      	b.n	80058c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589e:	f7fe ff75 	bl	800478c <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a4:	e00a      	b.n	80058bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fe ff71 	bl	800478c <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e09b      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058bc:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ee      	bne.n	80058a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ce:	4b3c      	ldr	r3, [pc, #240]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4a3b      	ldr	r2, [pc, #236]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80058d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8087 	beq.w	80059f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058e4:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d061      	beq.n	80059b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d146      	bne.n	8005986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f8:	4b33      	ldr	r3, [pc, #204]	; (80059c8 <HAL_RCC_OscConfig+0x4cc>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fe ff45 	bl	800478c <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005906:	f7fe ff41 	bl	800478c <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e06d      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005918:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1f0      	bne.n	8005906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d108      	bne.n	8005940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800592e:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	4921      	ldr	r1, [pc, #132]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 800593c:	4313      	orrs	r3, r2
 800593e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a19      	ldr	r1, [r3, #32]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	430b      	orrs	r3, r1
 8005952:	491b      	ldr	r1, [pc, #108]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 8005954:	4313      	orrs	r3, r2
 8005956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005958:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <HAL_RCC_OscConfig+0x4cc>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595e:	f7fe ff15 	bl	800478c <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005966:	f7fe ff11 	bl	800478c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e03d      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005978:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x46a>
 8005984:	e035      	b.n	80059f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <HAL_RCC_OscConfig+0x4cc>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598c:	f7fe fefe 	bl	800478c <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005994:	f7fe fefa 	bl	800478c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e026      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0x498>
 80059b2:	e01e      	b.n	80059f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e019      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40007000 	.word	0x40007000
 80059c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <HAL_RCC_OscConfig+0x500>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d106      	bne.n	80059ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d001      	beq.n	80059f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000

08005a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0d0      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a14:	4b6a      	ldr	r3, [pc, #424]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d910      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b67      	ldr	r3, [pc, #412]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f023 0207 	bic.w	r2, r3, #7
 8005a2a:	4965      	ldr	r1, [pc, #404]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a32:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0b8      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a74:	4b53      	ldr	r3, [pc, #332]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a52      	ldr	r2, [pc, #328]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a80:	4b50      	ldr	r3, [pc, #320]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	494d      	ldr	r1, [pc, #308]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d040      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d115      	bne.n	8005ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e07f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abe:	4b41      	ldr	r3, [pc, #260]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e073      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ace:	4b3d      	ldr	r3, [pc, #244]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e06b      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ade:	4b39      	ldr	r3, [pc, #228]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f023 0203 	bic.w	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4936      	ldr	r1, [pc, #216]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af0:	f7fe fe4c 	bl	800478c <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af6:	e00a      	b.n	8005b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af8:	f7fe fe48 	bl	800478c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e053      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0e:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 020c 	and.w	r2, r3, #12
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d1eb      	bne.n	8005af8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b20:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d210      	bcs.n	8005b50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 0207 	bic.w	r2, r3, #7
 8005b36:	4922      	ldr	r1, [pc, #136]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e032      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b5c:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4916      	ldr	r1, [pc, #88]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	490e      	ldr	r1, [pc, #56]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b8e:	f000 f821 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005b92:	4602      	mov	r2, r0
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	490a      	ldr	r1, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba0:	5ccb      	ldrb	r3, [r1, r3]
 8005ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <HAL_RCC_ClockConfig+0x1cc>)
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fdaa 	bl	8004708 <HAL_InitTick>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40022000 	.word	0x40022000
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	0800e3d8 	.word	0x0800e3d8
 8005bcc:	20000044 	.word	0x20000044
 8005bd0:	20000090 	.word	0x20000090

08005bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd4:	b490      	push	{r4, r7}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xac>)
 8005bdc:	1d3c      	adds	r4, r7, #4
 8005bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005be0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005be4:	f240 2301 	movw	r3, #513	; 0x201
 8005be8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bfe:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f003 030c 	and.w	r3, r3, #12
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d002      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x40>
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d003      	beq.n	8005c1a <HAL_RCC_GetSysClockFreq+0x46>
 8005c12:	e02b      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c14:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c16:	623b      	str	r3, [r7, #32]
      break;
 8005c18:	e02b      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	0c9b      	lsrs	r3, r3, #18
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	3328      	adds	r3, #40	; 0x28
 8005c24:	443b      	add	r3, r7
 8005c26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d012      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c36:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	0c5b      	lsrs	r3, r3, #17
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	3328      	adds	r3, #40	; 0x28
 8005c42:	443b      	add	r3, r7
 8005c44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c4e:	fb03 f202 	mul.w	r2, r3, r2
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5a:	e004      	b.n	8005c66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4a0b      	ldr	r2, [pc, #44]	; (8005c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	623b      	str	r3, [r7, #32]
      break;
 8005c6a:	e002      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c6e:	623b      	str	r3, [r7, #32]
      break;
 8005c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c72:	6a3b      	ldr	r3, [r7, #32]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3728      	adds	r7, #40	; 0x28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc90      	pop	{r4, r7}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	08007b0c 	.word	0x08007b0c
 8005c84:	40021000 	.word	0x40021000
 8005c88:	007a1200 	.word	0x007a1200
 8005c8c:	003d0900 	.word	0x003d0900

08005c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c96:	681b      	ldr	r3, [r3, #0]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr
 8005ca0:	20000044 	.word	0x20000044

08005ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ca8:	f7ff fff2 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8005cac:	4602      	mov	r2, r0
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	4903      	ldr	r1, [pc, #12]	; (8005cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cba:	5ccb      	ldrb	r3, [r1, r3]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	0800e3e8 	.word	0x0800e3e8

08005ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <RCC_Delay+0x34>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <RCC_Delay+0x38>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0a5b      	lsrs	r3, r3, #9
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ce8:	bf00      	nop
  }
  while (Delay --);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	60fa      	str	r2, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f9      	bne.n	8005ce8 <RCC_Delay+0x1c>
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr
 8005d00:	20000044 	.word	0x20000044
 8005d04:	10624dd3 	.word	0x10624dd3

08005d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d07d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d24:	2300      	movs	r3, #0
 8005d26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d28:	4b4f      	ldr	r3, [pc, #316]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10d      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d34:	4b4c      	ldr	r3, [pc, #304]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	4a4b      	ldr	r2, [pc, #300]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	61d3      	str	r3, [r2, #28]
 8005d40:	4b49      	ldr	r3, [pc, #292]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d118      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5c:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a42      	ldr	r2, [pc, #264]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d68:	f7fe fd10 	bl	800478c <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6e:	e008      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d70:	f7fe fd0c 	bl	800478c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e06d      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	4b3a      	ldr	r3, [pc, #232]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02e      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d027      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dac:	4b2e      	ldr	r3, [pc, #184]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005db6:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dbc:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dc2:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d014      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fe fcdb 	bl	800478c <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd8:	e00a      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fe fcd7 	bl	800478c <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e036      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ee      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4917      	ldr	r1, [pc, #92]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e14:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e2c:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	490b      	ldr	r1, [pc, #44]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e4a:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4904      	ldr	r1, [pc, #16]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	40007000 	.word	0x40007000
 8005e70:	42420440 	.word	0x42420440

08005e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e076      	b.n	8005f74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d108      	bne.n	8005ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e96:	d009      	beq.n	8005eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	61da      	str	r2, [r3, #28]
 8005e9e:	e005      	b.n	8005eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fc fd42 	bl	8002950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	ea42 0103 	orr.w	r1, r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	0c1a      	lsrs	r2, r3, #16
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f002 0204 	and.w	r2, r2, #4
 8005f52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69da      	ldr	r2, [r3, #28]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e041      	b.n	8006014 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fc fd73 	bl	8002a90 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f000 f82d 	bl	800601c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0208 	bic.w	r2, r2, #8
 8005fd0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6819      	ldr	r1, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a29      	ldr	r2, [pc, #164]	; (80060d4 <TIM_Base_SetConfig+0xb8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0x30>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0x30>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <TIM_Base_SetConfig+0xbc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0x30>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a25      	ldr	r2, [pc, #148]	; (80060dc <TIM_Base_SetConfig+0xc0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <TIM_Base_SetConfig+0xb8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00b      	beq.n	800607e <TIM_Base_SetConfig+0x62>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606c:	d007      	beq.n	800607e <TIM_Base_SetConfig+0x62>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <TIM_Base_SetConfig+0xbc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <TIM_Base_SetConfig+0x62>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <TIM_Base_SetConfig+0xc0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d108      	bne.n	8006090 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a07      	ldr	r2, [pc, #28]	; (80060d4 <TIM_Base_SetConfig+0xb8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d103      	bne.n	80060c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	615a      	str	r2, [r3, #20]
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800

080060e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e046      	b.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a16      	ldr	r2, [pc, #88]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d009      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a12      	ldr	r2, [pc, #72]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a10      	ldr	r2, [pc, #64]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10c      	bne.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4313      	orrs	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800

0800619c <__assert_func>:
 800619c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800619e:	4614      	mov	r4, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <__assert_func+0x2c>)
 80061a4:	4605      	mov	r5, r0
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68d8      	ldr	r0, [r3, #12]
 80061aa:	b14c      	cbz	r4, 80061c0 <__assert_func+0x24>
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <__assert_func+0x30>)
 80061ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061b2:	9100      	str	r1, [sp, #0]
 80061b4:	462b      	mov	r3, r5
 80061b6:	4906      	ldr	r1, [pc, #24]	; (80061d0 <__assert_func+0x34>)
 80061b8:	f000 f814 	bl	80061e4 <fiprintf>
 80061bc:	f000 fda0 	bl	8006d00 <abort>
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <__assert_func+0x38>)
 80061c2:	461c      	mov	r4, r3
 80061c4:	e7f3      	b.n	80061ae <__assert_func+0x12>
 80061c6:	bf00      	nop
 80061c8:	20000098 	.word	0x20000098
 80061cc:	0800e3f0 	.word	0x0800e3f0
 80061d0:	0800e3fd 	.word	0x0800e3fd
 80061d4:	0800e42b 	.word	0x0800e42b

080061d8 <__errno>:
 80061d8:	4b01      	ldr	r3, [pc, #4]	; (80061e0 <__errno+0x8>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000098 	.word	0x20000098

080061e4 <fiprintf>:
 80061e4:	b40e      	push	{r1, r2, r3}
 80061e6:	b503      	push	{r0, r1, lr}
 80061e8:	4601      	mov	r1, r0
 80061ea:	ab03      	add	r3, sp, #12
 80061ec:	4805      	ldr	r0, [pc, #20]	; (8006204 <fiprintf+0x20>)
 80061ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f2:	6800      	ldr	r0, [r0, #0]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	f000 f93f 	bl	8006478 <_vfiprintf_r>
 80061fa:	b002      	add	sp, #8
 80061fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006200:	b003      	add	sp, #12
 8006202:	4770      	bx	lr
 8006204:	20000098 	.word	0x20000098

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	2600      	movs	r6, #0
 800620c:	4d0c      	ldr	r5, [pc, #48]	; (8006240 <__libc_init_array+0x38>)
 800620e:	4c0d      	ldr	r4, [pc, #52]	; (8006244 <__libc_init_array+0x3c>)
 8006210:	1b64      	subs	r4, r4, r5
 8006212:	10a4      	asrs	r4, r4, #2
 8006214:	42a6      	cmp	r6, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	f001 fa5a 	bl	80076d0 <_init>
 800621c:	2600      	movs	r6, #0
 800621e:	4d0a      	ldr	r5, [pc, #40]	; (8006248 <__libc_init_array+0x40>)
 8006220:	4c0a      	ldr	r4, [pc, #40]	; (800624c <__libc_init_array+0x44>)
 8006222:	1b64      	subs	r4, r4, r5
 8006224:	10a4      	asrs	r4, r4, #2
 8006226:	42a6      	cmp	r6, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006230:	4798      	blx	r3
 8006232:	3601      	adds	r6, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	f855 3b04 	ldr.w	r3, [r5], #4
 800623a:	4798      	blx	r3
 800623c:	3601      	adds	r6, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	0800e4c4 	.word	0x0800e4c4
 8006244:	0800e4c4 	.word	0x0800e4c4
 8006248:	0800e4c4 	.word	0x0800e4c4
 800624c:	0800e4c8 	.word	0x0800e4c8

08006250 <malloc>:
 8006250:	4b02      	ldr	r3, [pc, #8]	; (800625c <malloc+0xc>)
 8006252:	4601      	mov	r1, r0
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	f000 b873 	b.w	8006340 <_malloc_r>
 800625a:	bf00      	nop
 800625c:	20000098 	.word	0x20000098

08006260 <memset>:
 8006260:	4603      	mov	r3, r0
 8006262:	4402      	add	r2, r0
 8006264:	4293      	cmp	r3, r2
 8006266:	d100      	bne.n	800626a <memset+0xa>
 8006268:	4770      	bx	lr
 800626a:	f803 1b01 	strb.w	r1, [r3], #1
 800626e:	e7f9      	b.n	8006264 <memset+0x4>

08006270 <_free_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4605      	mov	r5, r0
 8006274:	2900      	cmp	r1, #0
 8006276:	d040      	beq.n	80062fa <_free_r+0x8a>
 8006278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627c:	1f0c      	subs	r4, r1, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	bfb8      	it	lt
 8006282:	18e4      	addlt	r4, r4, r3
 8006284:	f000 ff96 	bl	80071b4 <__malloc_lock>
 8006288:	4a1c      	ldr	r2, [pc, #112]	; (80062fc <_free_r+0x8c>)
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	b933      	cbnz	r3, 800629c <_free_r+0x2c>
 800628e:	6063      	str	r3, [r4, #4]
 8006290:	6014      	str	r4, [r2, #0]
 8006292:	4628      	mov	r0, r5
 8006294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006298:	f000 bf92 	b.w	80071c0 <__malloc_unlock>
 800629c:	42a3      	cmp	r3, r4
 800629e:	d908      	bls.n	80062b2 <_free_r+0x42>
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	1821      	adds	r1, r4, r0
 80062a4:	428b      	cmp	r3, r1
 80062a6:	bf01      	itttt	eq
 80062a8:	6819      	ldreq	r1, [r3, #0]
 80062aa:	685b      	ldreq	r3, [r3, #4]
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	e7ed      	b.n	800628e <_free_r+0x1e>
 80062b2:	461a      	mov	r2, r3
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b10b      	cbz	r3, 80062bc <_free_r+0x4c>
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d9fa      	bls.n	80062b2 <_free_r+0x42>
 80062bc:	6811      	ldr	r1, [r2, #0]
 80062be:	1850      	adds	r0, r2, r1
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d10b      	bne.n	80062dc <_free_r+0x6c>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	4401      	add	r1, r0
 80062c8:	1850      	adds	r0, r2, r1
 80062ca:	4283      	cmp	r3, r0
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	d1e0      	bne.n	8006292 <_free_r+0x22>
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4401      	add	r1, r0
 80062d6:	6011      	str	r1, [r2, #0]
 80062d8:	6053      	str	r3, [r2, #4]
 80062da:	e7da      	b.n	8006292 <_free_r+0x22>
 80062dc:	d902      	bls.n	80062e4 <_free_r+0x74>
 80062de:	230c      	movs	r3, #12
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	e7d6      	b.n	8006292 <_free_r+0x22>
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	1821      	adds	r1, r4, r0
 80062e8:	428b      	cmp	r3, r1
 80062ea:	bf01      	itttt	eq
 80062ec:	6819      	ldreq	r1, [r3, #0]
 80062ee:	685b      	ldreq	r3, [r3, #4]
 80062f0:	1809      	addeq	r1, r1, r0
 80062f2:	6021      	streq	r1, [r4, #0]
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	6054      	str	r4, [r2, #4]
 80062f8:	e7cb      	b.n	8006292 <_free_r+0x22>
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	20000914 	.word	0x20000914

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0e      	ldr	r6, [pc, #56]	; (800633c <sbrk_aligned+0x3c>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f000 fc08 	bl	8006b20 <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 fc03 	bl	8006b20 <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d00a      	beq.n	8006334 <sbrk_aligned+0x34>
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d007      	beq.n	8006338 <sbrk_aligned+0x38>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f000 fbf8 	bl	8006b20 <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d101      	bne.n	8006338 <sbrk_aligned+0x38>
 8006334:	f04f 34ff 	mov.w	r4, #4294967295
 8006338:	4620      	mov	r0, r4
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	20000918 	.word	0x20000918

08006340 <_malloc_r>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4607      	mov	r7, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d905      	bls.n	8006368 <_malloc_r+0x28>
 800635c:	230c      	movs	r3, #12
 800635e:	2600      	movs	r6, #0
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	4630      	mov	r0, r6
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	4e2e      	ldr	r6, [pc, #184]	; (8006424 <_malloc_r+0xe4>)
 800636a:	f000 ff23 	bl	80071b4 <__malloc_lock>
 800636e:	6833      	ldr	r3, [r6, #0]
 8006370:	461c      	mov	r4, r3
 8006372:	bb34      	cbnz	r4, 80063c2 <_malloc_r+0x82>
 8006374:	4629      	mov	r1, r5
 8006376:	4638      	mov	r0, r7
 8006378:	f7ff ffc2 	bl	8006300 <sbrk_aligned>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	4604      	mov	r4, r0
 8006380:	d14d      	bne.n	800641e <_malloc_r+0xde>
 8006382:	6834      	ldr	r4, [r6, #0]
 8006384:	4626      	mov	r6, r4
 8006386:	2e00      	cmp	r6, #0
 8006388:	d140      	bne.n	800640c <_malloc_r+0xcc>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	4631      	mov	r1, r6
 800638e:	4638      	mov	r0, r7
 8006390:	eb04 0803 	add.w	r8, r4, r3
 8006394:	f000 fbc4 	bl	8006b20 <_sbrk_r>
 8006398:	4580      	cmp	r8, r0
 800639a:	d13a      	bne.n	8006412 <_malloc_r+0xd2>
 800639c:	6821      	ldr	r1, [r4, #0]
 800639e:	3503      	adds	r5, #3
 80063a0:	1a6d      	subs	r5, r5, r1
 80063a2:	f025 0503 	bic.w	r5, r5, #3
 80063a6:	3508      	adds	r5, #8
 80063a8:	2d0c      	cmp	r5, #12
 80063aa:	bf38      	it	cc
 80063ac:	250c      	movcc	r5, #12
 80063ae:	4638      	mov	r0, r7
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7ff ffa5 	bl	8006300 <sbrk_aligned>
 80063b6:	3001      	adds	r0, #1
 80063b8:	d02b      	beq.n	8006412 <_malloc_r+0xd2>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	442b      	add	r3, r5
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	e00e      	b.n	80063e0 <_malloc_r+0xa0>
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	1b52      	subs	r2, r2, r5
 80063c6:	d41e      	bmi.n	8006406 <_malloc_r+0xc6>
 80063c8:	2a0b      	cmp	r2, #11
 80063ca:	d916      	bls.n	80063fa <_malloc_r+0xba>
 80063cc:	1961      	adds	r1, r4, r5
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	6025      	str	r5, [r4, #0]
 80063d2:	bf18      	it	ne
 80063d4:	6059      	strne	r1, [r3, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	bf08      	it	eq
 80063da:	6031      	streq	r1, [r6, #0]
 80063dc:	5162      	str	r2, [r4, r5]
 80063de:	604b      	str	r3, [r1, #4]
 80063e0:	4638      	mov	r0, r7
 80063e2:	f104 060b 	add.w	r6, r4, #11
 80063e6:	f000 feeb 	bl	80071c0 <__malloc_unlock>
 80063ea:	f026 0607 	bic.w	r6, r6, #7
 80063ee:	1d23      	adds	r3, r4, #4
 80063f0:	1af2      	subs	r2, r6, r3
 80063f2:	d0b6      	beq.n	8006362 <_malloc_r+0x22>
 80063f4:	1b9b      	subs	r3, r3, r6
 80063f6:	50a3      	str	r3, [r4, r2]
 80063f8:	e7b3      	b.n	8006362 <_malloc_r+0x22>
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	bf0c      	ite	eq
 8006400:	6032      	streq	r2, [r6, #0]
 8006402:	605a      	strne	r2, [r3, #4]
 8006404:	e7ec      	b.n	80063e0 <_malloc_r+0xa0>
 8006406:	4623      	mov	r3, r4
 8006408:	6864      	ldr	r4, [r4, #4]
 800640a:	e7b2      	b.n	8006372 <_malloc_r+0x32>
 800640c:	4634      	mov	r4, r6
 800640e:	6876      	ldr	r6, [r6, #4]
 8006410:	e7b9      	b.n	8006386 <_malloc_r+0x46>
 8006412:	230c      	movs	r3, #12
 8006414:	4638      	mov	r0, r7
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	f000 fed2 	bl	80071c0 <__malloc_unlock>
 800641c:	e7a1      	b.n	8006362 <_malloc_r+0x22>
 800641e:	6025      	str	r5, [r4, #0]
 8006420:	e7de      	b.n	80063e0 <_malloc_r+0xa0>
 8006422:	bf00      	nop
 8006424:	20000914 	.word	0x20000914

08006428 <__sfputc_r>:
 8006428:	6893      	ldr	r3, [r2, #8]
 800642a:	b410      	push	{r4}
 800642c:	3b01      	subs	r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	6093      	str	r3, [r2, #8]
 8006432:	da07      	bge.n	8006444 <__sfputc_r+0x1c>
 8006434:	6994      	ldr	r4, [r2, #24]
 8006436:	42a3      	cmp	r3, r4
 8006438:	db01      	blt.n	800643e <__sfputc_r+0x16>
 800643a:	290a      	cmp	r1, #10
 800643c:	d102      	bne.n	8006444 <__sfputc_r+0x1c>
 800643e:	bc10      	pop	{r4}
 8006440:	f000 bb9e 	b.w	8006b80 <__swbuf_r>
 8006444:	6813      	ldr	r3, [r2, #0]
 8006446:	1c58      	adds	r0, r3, #1
 8006448:	6010      	str	r0, [r2, #0]
 800644a:	7019      	strb	r1, [r3, #0]
 800644c:	4608      	mov	r0, r1
 800644e:	bc10      	pop	{r4}
 8006450:	4770      	bx	lr

08006452 <__sfputs_r>:
 8006452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006454:	4606      	mov	r6, r0
 8006456:	460f      	mov	r7, r1
 8006458:	4614      	mov	r4, r2
 800645a:	18d5      	adds	r5, r2, r3
 800645c:	42ac      	cmp	r4, r5
 800645e:	d101      	bne.n	8006464 <__sfputs_r+0x12>
 8006460:	2000      	movs	r0, #0
 8006462:	e007      	b.n	8006474 <__sfputs_r+0x22>
 8006464:	463a      	mov	r2, r7
 8006466:	4630      	mov	r0, r6
 8006468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646c:	f7ff ffdc 	bl	8006428 <__sfputc_r>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d1f3      	bne.n	800645c <__sfputs_r+0xa>
 8006474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006478 <_vfiprintf_r>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	460d      	mov	r5, r1
 800647e:	4614      	mov	r4, r2
 8006480:	4698      	mov	r8, r3
 8006482:	4606      	mov	r6, r0
 8006484:	b09d      	sub	sp, #116	; 0x74
 8006486:	b118      	cbz	r0, 8006490 <_vfiprintf_r+0x18>
 8006488:	6983      	ldr	r3, [r0, #24]
 800648a:	b90b      	cbnz	r3, 8006490 <_vfiprintf_r+0x18>
 800648c:	f000 fd56 	bl	8006f3c <__sinit>
 8006490:	4b89      	ldr	r3, [pc, #548]	; (80066b8 <_vfiprintf_r+0x240>)
 8006492:	429d      	cmp	r5, r3
 8006494:	d11b      	bne.n	80064ce <_vfiprintf_r+0x56>
 8006496:	6875      	ldr	r5, [r6, #4]
 8006498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800649a:	07d9      	lsls	r1, r3, #31
 800649c:	d405      	bmi.n	80064aa <_vfiprintf_r+0x32>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	059a      	lsls	r2, r3, #22
 80064a2:	d402      	bmi.n	80064aa <_vfiprintf_r+0x32>
 80064a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064a6:	f000 fde7 	bl	8007078 <__retarget_lock_acquire_recursive>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	071b      	lsls	r3, r3, #28
 80064ae:	d501      	bpl.n	80064b4 <_vfiprintf_r+0x3c>
 80064b0:	692b      	ldr	r3, [r5, #16]
 80064b2:	b9eb      	cbnz	r3, 80064f0 <_vfiprintf_r+0x78>
 80064b4:	4629      	mov	r1, r5
 80064b6:	4630      	mov	r0, r6
 80064b8:	f000 fbb4 	bl	8006c24 <__swsetup_r>
 80064bc:	b1c0      	cbz	r0, 80064f0 <_vfiprintf_r+0x78>
 80064be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064c0:	07dc      	lsls	r4, r3, #31
 80064c2:	d50e      	bpl.n	80064e2 <_vfiprintf_r+0x6a>
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	b01d      	add	sp, #116	; 0x74
 80064ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ce:	4b7b      	ldr	r3, [pc, #492]	; (80066bc <_vfiprintf_r+0x244>)
 80064d0:	429d      	cmp	r5, r3
 80064d2:	d101      	bne.n	80064d8 <_vfiprintf_r+0x60>
 80064d4:	68b5      	ldr	r5, [r6, #8]
 80064d6:	e7df      	b.n	8006498 <_vfiprintf_r+0x20>
 80064d8:	4b79      	ldr	r3, [pc, #484]	; (80066c0 <_vfiprintf_r+0x248>)
 80064da:	429d      	cmp	r5, r3
 80064dc:	bf08      	it	eq
 80064de:	68f5      	ldreq	r5, [r6, #12]
 80064e0:	e7da      	b.n	8006498 <_vfiprintf_r+0x20>
 80064e2:	89ab      	ldrh	r3, [r5, #12]
 80064e4:	0598      	lsls	r0, r3, #22
 80064e6:	d4ed      	bmi.n	80064c4 <_vfiprintf_r+0x4c>
 80064e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ea:	f000 fdc6 	bl	800707a <__retarget_lock_release_recursive>
 80064ee:	e7e9      	b.n	80064c4 <_vfiprintf_r+0x4c>
 80064f0:	2300      	movs	r3, #0
 80064f2:	9309      	str	r3, [sp, #36]	; 0x24
 80064f4:	2320      	movs	r3, #32
 80064f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064fa:	2330      	movs	r3, #48	; 0x30
 80064fc:	f04f 0901 	mov.w	r9, #1
 8006500:	f8cd 800c 	str.w	r8, [sp, #12]
 8006504:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80066c4 <_vfiprintf_r+0x24c>
 8006508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800650c:	4623      	mov	r3, r4
 800650e:	469a      	mov	sl, r3
 8006510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006514:	b10a      	cbz	r2, 800651a <_vfiprintf_r+0xa2>
 8006516:	2a25      	cmp	r2, #37	; 0x25
 8006518:	d1f9      	bne.n	800650e <_vfiprintf_r+0x96>
 800651a:	ebba 0b04 	subs.w	fp, sl, r4
 800651e:	d00b      	beq.n	8006538 <_vfiprintf_r+0xc0>
 8006520:	465b      	mov	r3, fp
 8006522:	4622      	mov	r2, r4
 8006524:	4629      	mov	r1, r5
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff ff93 	bl	8006452 <__sfputs_r>
 800652c:	3001      	adds	r0, #1
 800652e:	f000 80aa 	beq.w	8006686 <_vfiprintf_r+0x20e>
 8006532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006534:	445a      	add	r2, fp
 8006536:	9209      	str	r2, [sp, #36]	; 0x24
 8006538:	f89a 3000 	ldrb.w	r3, [sl]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80a2 	beq.w	8006686 <_vfiprintf_r+0x20e>
 8006542:	2300      	movs	r3, #0
 8006544:	f04f 32ff 	mov.w	r2, #4294967295
 8006548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800654c:	f10a 0a01 	add.w	sl, sl, #1
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	9307      	str	r3, [sp, #28]
 8006554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006558:	931a      	str	r3, [sp, #104]	; 0x68
 800655a:	4654      	mov	r4, sl
 800655c:	2205      	movs	r2, #5
 800655e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006562:	4858      	ldr	r0, [pc, #352]	; (80066c4 <_vfiprintf_r+0x24c>)
 8006564:	f000 fdf0 	bl	8007148 <memchr>
 8006568:	9a04      	ldr	r2, [sp, #16]
 800656a:	b9d8      	cbnz	r0, 80065a4 <_vfiprintf_r+0x12c>
 800656c:	06d1      	lsls	r1, r2, #27
 800656e:	bf44      	itt	mi
 8006570:	2320      	movmi	r3, #32
 8006572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006576:	0713      	lsls	r3, r2, #28
 8006578:	bf44      	itt	mi
 800657a:	232b      	movmi	r3, #43	; 0x2b
 800657c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006580:	f89a 3000 	ldrb.w	r3, [sl]
 8006584:	2b2a      	cmp	r3, #42	; 0x2a
 8006586:	d015      	beq.n	80065b4 <_vfiprintf_r+0x13c>
 8006588:	4654      	mov	r4, sl
 800658a:	2000      	movs	r0, #0
 800658c:	f04f 0c0a 	mov.w	ip, #10
 8006590:	9a07      	ldr	r2, [sp, #28]
 8006592:	4621      	mov	r1, r4
 8006594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006598:	3b30      	subs	r3, #48	; 0x30
 800659a:	2b09      	cmp	r3, #9
 800659c:	d94e      	bls.n	800663c <_vfiprintf_r+0x1c4>
 800659e:	b1b0      	cbz	r0, 80065ce <_vfiprintf_r+0x156>
 80065a0:	9207      	str	r2, [sp, #28]
 80065a2:	e014      	b.n	80065ce <_vfiprintf_r+0x156>
 80065a4:	eba0 0308 	sub.w	r3, r0, r8
 80065a8:	fa09 f303 	lsl.w	r3, r9, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	46a2      	mov	sl, r4
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	e7d2      	b.n	800655a <_vfiprintf_r+0xe2>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	1d19      	adds	r1, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	9103      	str	r1, [sp, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bfbb      	ittet	lt
 80065c0:	425b      	neglt	r3, r3
 80065c2:	f042 0202 	orrlt.w	r2, r2, #2
 80065c6:	9307      	strge	r3, [sp, #28]
 80065c8:	9307      	strlt	r3, [sp, #28]
 80065ca:	bfb8      	it	lt
 80065cc:	9204      	strlt	r2, [sp, #16]
 80065ce:	7823      	ldrb	r3, [r4, #0]
 80065d0:	2b2e      	cmp	r3, #46	; 0x2e
 80065d2:	d10c      	bne.n	80065ee <_vfiprintf_r+0x176>
 80065d4:	7863      	ldrb	r3, [r4, #1]
 80065d6:	2b2a      	cmp	r3, #42	; 0x2a
 80065d8:	d135      	bne.n	8006646 <_vfiprintf_r+0x1ce>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	3402      	adds	r4, #2
 80065de:	1d1a      	adds	r2, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	9203      	str	r2, [sp, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bfb8      	it	lt
 80065e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80066c8 <_vfiprintf_r+0x250>
 80065f2:	2203      	movs	r2, #3
 80065f4:	4650      	mov	r0, sl
 80065f6:	7821      	ldrb	r1, [r4, #0]
 80065f8:	f000 fda6 	bl	8007148 <memchr>
 80065fc:	b140      	cbz	r0, 8006610 <_vfiprintf_r+0x198>
 80065fe:	2340      	movs	r3, #64	; 0x40
 8006600:	eba0 000a 	sub.w	r0, r0, sl
 8006604:	fa03 f000 	lsl.w	r0, r3, r0
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	3401      	adds	r4, #1
 800660c:	4303      	orrs	r3, r0
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006614:	2206      	movs	r2, #6
 8006616:	482d      	ldr	r0, [pc, #180]	; (80066cc <_vfiprintf_r+0x254>)
 8006618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800661c:	f000 fd94 	bl	8007148 <memchr>
 8006620:	2800      	cmp	r0, #0
 8006622:	d03f      	beq.n	80066a4 <_vfiprintf_r+0x22c>
 8006624:	4b2a      	ldr	r3, [pc, #168]	; (80066d0 <_vfiprintf_r+0x258>)
 8006626:	bb1b      	cbnz	r3, 8006670 <_vfiprintf_r+0x1f8>
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	3307      	adds	r3, #7
 800662c:	f023 0307 	bic.w	r3, r3, #7
 8006630:	3308      	adds	r3, #8
 8006632:	9303      	str	r3, [sp, #12]
 8006634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006636:	443b      	add	r3, r7
 8006638:	9309      	str	r3, [sp, #36]	; 0x24
 800663a:	e767      	b.n	800650c <_vfiprintf_r+0x94>
 800663c:	460c      	mov	r4, r1
 800663e:	2001      	movs	r0, #1
 8006640:	fb0c 3202 	mla	r2, ip, r2, r3
 8006644:	e7a5      	b.n	8006592 <_vfiprintf_r+0x11a>
 8006646:	2300      	movs	r3, #0
 8006648:	f04f 0c0a 	mov.w	ip, #10
 800664c:	4619      	mov	r1, r3
 800664e:	3401      	adds	r4, #1
 8006650:	9305      	str	r3, [sp, #20]
 8006652:	4620      	mov	r0, r4
 8006654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006658:	3a30      	subs	r2, #48	; 0x30
 800665a:	2a09      	cmp	r2, #9
 800665c:	d903      	bls.n	8006666 <_vfiprintf_r+0x1ee>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0c5      	beq.n	80065ee <_vfiprintf_r+0x176>
 8006662:	9105      	str	r1, [sp, #20]
 8006664:	e7c3      	b.n	80065ee <_vfiprintf_r+0x176>
 8006666:	4604      	mov	r4, r0
 8006668:	2301      	movs	r3, #1
 800666a:	fb0c 2101 	mla	r1, ip, r1, r2
 800666e:	e7f0      	b.n	8006652 <_vfiprintf_r+0x1da>
 8006670:	ab03      	add	r3, sp, #12
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	462a      	mov	r2, r5
 8006676:	4630      	mov	r0, r6
 8006678:	4b16      	ldr	r3, [pc, #88]	; (80066d4 <_vfiprintf_r+0x25c>)
 800667a:	a904      	add	r1, sp, #16
 800667c:	f3af 8000 	nop.w
 8006680:	4607      	mov	r7, r0
 8006682:	1c78      	adds	r0, r7, #1
 8006684:	d1d6      	bne.n	8006634 <_vfiprintf_r+0x1bc>
 8006686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006688:	07d9      	lsls	r1, r3, #31
 800668a:	d405      	bmi.n	8006698 <_vfiprintf_r+0x220>
 800668c:	89ab      	ldrh	r3, [r5, #12]
 800668e:	059a      	lsls	r2, r3, #22
 8006690:	d402      	bmi.n	8006698 <_vfiprintf_r+0x220>
 8006692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006694:	f000 fcf1 	bl	800707a <__retarget_lock_release_recursive>
 8006698:	89ab      	ldrh	r3, [r5, #12]
 800669a:	065b      	lsls	r3, r3, #25
 800669c:	f53f af12 	bmi.w	80064c4 <_vfiprintf_r+0x4c>
 80066a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066a2:	e711      	b.n	80064c8 <_vfiprintf_r+0x50>
 80066a4:	ab03      	add	r3, sp, #12
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	462a      	mov	r2, r5
 80066aa:	4630      	mov	r0, r6
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <_vfiprintf_r+0x25c>)
 80066ae:	a904      	add	r1, sp, #16
 80066b0:	f000 f882 	bl	80067b8 <_printf_i>
 80066b4:	e7e4      	b.n	8006680 <_vfiprintf_r+0x208>
 80066b6:	bf00      	nop
 80066b8:	0800e484 	.word	0x0800e484
 80066bc:	0800e4a4 	.word	0x0800e4a4
 80066c0:	0800e464 	.word	0x0800e464
 80066c4:	0800e430 	.word	0x0800e430
 80066c8:	0800e436 	.word	0x0800e436
 80066cc:	0800e43a 	.word	0x0800e43a
 80066d0:	00000000 	.word	0x00000000
 80066d4:	08006453 	.word	0x08006453

080066d8 <_printf_common>:
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	4616      	mov	r6, r2
 80066de:	4699      	mov	r9, r3
 80066e0:	688a      	ldr	r2, [r1, #8]
 80066e2:	690b      	ldr	r3, [r1, #16]
 80066e4:	4607      	mov	r7, r0
 80066e6:	4293      	cmp	r3, r2
 80066e8:	bfb8      	it	lt
 80066ea:	4613      	movlt	r3, r2
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066f2:	460c      	mov	r4, r1
 80066f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066f8:	b10a      	cbz	r2, 80066fe <_printf_common+0x26>
 80066fa:	3301      	adds	r3, #1
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	0699      	lsls	r1, r3, #26
 8006702:	bf42      	ittt	mi
 8006704:	6833      	ldrmi	r3, [r6, #0]
 8006706:	3302      	addmi	r3, #2
 8006708:	6033      	strmi	r3, [r6, #0]
 800670a:	6825      	ldr	r5, [r4, #0]
 800670c:	f015 0506 	ands.w	r5, r5, #6
 8006710:	d106      	bne.n	8006720 <_printf_common+0x48>
 8006712:	f104 0a19 	add.w	sl, r4, #25
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	6832      	ldr	r2, [r6, #0]
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	42ab      	cmp	r3, r5
 800671e:	dc28      	bgt.n	8006772 <_printf_common+0x9a>
 8006720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006724:	1e13      	subs	r3, r2, #0
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	bf18      	it	ne
 800672a:	2301      	movne	r3, #1
 800672c:	0692      	lsls	r2, r2, #26
 800672e:	d42d      	bmi.n	800678c <_printf_common+0xb4>
 8006730:	4649      	mov	r1, r9
 8006732:	4638      	mov	r0, r7
 8006734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006738:	47c0      	blx	r8
 800673a:	3001      	adds	r0, #1
 800673c:	d020      	beq.n	8006780 <_printf_common+0xa8>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	68e5      	ldr	r5, [r4, #12]
 8006742:	f003 0306 	and.w	r3, r3, #6
 8006746:	2b04      	cmp	r3, #4
 8006748:	bf18      	it	ne
 800674a:	2500      	movne	r5, #0
 800674c:	6832      	ldr	r2, [r6, #0]
 800674e:	f04f 0600 	mov.w	r6, #0
 8006752:	68a3      	ldr	r3, [r4, #8]
 8006754:	bf08      	it	eq
 8006756:	1aad      	subeq	r5, r5, r2
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	bf08      	it	eq
 800675c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006760:	4293      	cmp	r3, r2
 8006762:	bfc4      	itt	gt
 8006764:	1a9b      	subgt	r3, r3, r2
 8006766:	18ed      	addgt	r5, r5, r3
 8006768:	341a      	adds	r4, #26
 800676a:	42b5      	cmp	r5, r6
 800676c:	d11a      	bne.n	80067a4 <_printf_common+0xcc>
 800676e:	2000      	movs	r0, #0
 8006770:	e008      	b.n	8006784 <_printf_common+0xac>
 8006772:	2301      	movs	r3, #1
 8006774:	4652      	mov	r2, sl
 8006776:	4649      	mov	r1, r9
 8006778:	4638      	mov	r0, r7
 800677a:	47c0      	blx	r8
 800677c:	3001      	adds	r0, #1
 800677e:	d103      	bne.n	8006788 <_printf_common+0xb0>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	3501      	adds	r5, #1
 800678a:	e7c4      	b.n	8006716 <_printf_common+0x3e>
 800678c:	2030      	movs	r0, #48	; 0x30
 800678e:	18e1      	adds	r1, r4, r3
 8006790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800679a:	4422      	add	r2, r4
 800679c:	3302      	adds	r3, #2
 800679e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067a2:	e7c5      	b.n	8006730 <_printf_common+0x58>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4622      	mov	r2, r4
 80067a8:	4649      	mov	r1, r9
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c0      	blx	r8
 80067ae:	3001      	adds	r0, #1
 80067b0:	d0e6      	beq.n	8006780 <_printf_common+0xa8>
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7d9      	b.n	800676a <_printf_common+0x92>
	...

080067b8 <_printf_i>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	7e0f      	ldrb	r7, [r1, #24]
 80067be:	4691      	mov	r9, r2
 80067c0:	2f78      	cmp	r7, #120	; 0x78
 80067c2:	4680      	mov	r8, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	469a      	mov	sl, r3
 80067c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ce:	d807      	bhi.n	80067e0 <_printf_i+0x28>
 80067d0:	2f62      	cmp	r7, #98	; 0x62
 80067d2:	d80a      	bhi.n	80067ea <_printf_i+0x32>
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	f000 80d9 	beq.w	800698c <_printf_i+0x1d4>
 80067da:	2f58      	cmp	r7, #88	; 0x58
 80067dc:	f000 80a4 	beq.w	8006928 <_printf_i+0x170>
 80067e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067e8:	e03a      	b.n	8006860 <_printf_i+0xa8>
 80067ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ee:	2b15      	cmp	r3, #21
 80067f0:	d8f6      	bhi.n	80067e0 <_printf_i+0x28>
 80067f2:	a101      	add	r1, pc, #4	; (adr r1, 80067f8 <_printf_i+0x40>)
 80067f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006865 	.word	0x08006865
 8006800:	080067e1 	.word	0x080067e1
 8006804:	080067e1 	.word	0x080067e1
 8006808:	080067e1 	.word	0x080067e1
 800680c:	080067e1 	.word	0x080067e1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067e1 	.word	0x080067e1
 8006818:	080067e1 	.word	0x080067e1
 800681c:	080067e1 	.word	0x080067e1
 8006820:	080067e1 	.word	0x080067e1
 8006824:	08006973 	.word	0x08006973
 8006828:	08006895 	.word	0x08006895
 800682c:	08006955 	.word	0x08006955
 8006830:	080067e1 	.word	0x080067e1
 8006834:	080067e1 	.word	0x080067e1
 8006838:	08006995 	.word	0x08006995
 800683c:	080067e1 	.word	0x080067e1
 8006840:	08006895 	.word	0x08006895
 8006844:	080067e1 	.word	0x080067e1
 8006848:	080067e1 	.word	0x080067e1
 800684c:	0800695d 	.word	0x0800695d
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	602a      	str	r2, [r5, #0]
 8006858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e0a4      	b.n	80069ae <_printf_i+0x1f6>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	6829      	ldr	r1, [r5, #0]
 8006868:	0606      	lsls	r6, r0, #24
 800686a:	f101 0304 	add.w	r3, r1, #4
 800686e:	d50a      	bpl.n	8006886 <_printf_i+0xce>
 8006870:	680e      	ldr	r6, [r1, #0]
 8006872:	602b      	str	r3, [r5, #0]
 8006874:	2e00      	cmp	r6, #0
 8006876:	da03      	bge.n	8006880 <_printf_i+0xc8>
 8006878:	232d      	movs	r3, #45	; 0x2d
 800687a:	4276      	negs	r6, r6
 800687c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006880:	230a      	movs	r3, #10
 8006882:	485e      	ldr	r0, [pc, #376]	; (80069fc <_printf_i+0x244>)
 8006884:	e019      	b.n	80068ba <_printf_i+0x102>
 8006886:	680e      	ldr	r6, [r1, #0]
 8006888:	f010 0f40 	tst.w	r0, #64	; 0x40
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	bf18      	it	ne
 8006890:	b236      	sxthne	r6, r6
 8006892:	e7ef      	b.n	8006874 <_printf_i+0xbc>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	1d19      	adds	r1, r3, #4
 800689a:	6029      	str	r1, [r5, #0]
 800689c:	0601      	lsls	r1, r0, #24
 800689e:	d501      	bpl.n	80068a4 <_printf_i+0xec>
 80068a0:	681e      	ldr	r6, [r3, #0]
 80068a2:	e002      	b.n	80068aa <_printf_i+0xf2>
 80068a4:	0646      	lsls	r6, r0, #25
 80068a6:	d5fb      	bpl.n	80068a0 <_printf_i+0xe8>
 80068a8:	881e      	ldrh	r6, [r3, #0]
 80068aa:	2f6f      	cmp	r7, #111	; 0x6f
 80068ac:	bf0c      	ite	eq
 80068ae:	2308      	moveq	r3, #8
 80068b0:	230a      	movne	r3, #10
 80068b2:	4852      	ldr	r0, [pc, #328]	; (80069fc <_printf_i+0x244>)
 80068b4:	2100      	movs	r1, #0
 80068b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ba:	6865      	ldr	r5, [r4, #4]
 80068bc:	2d00      	cmp	r5, #0
 80068be:	bfa8      	it	ge
 80068c0:	6821      	ldrge	r1, [r4, #0]
 80068c2:	60a5      	str	r5, [r4, #8]
 80068c4:	bfa4      	itt	ge
 80068c6:	f021 0104 	bicge.w	r1, r1, #4
 80068ca:	6021      	strge	r1, [r4, #0]
 80068cc:	b90e      	cbnz	r6, 80068d2 <_printf_i+0x11a>
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	d04d      	beq.n	800696e <_printf_i+0x1b6>
 80068d2:	4615      	mov	r5, r2
 80068d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80068d8:	fb03 6711 	mls	r7, r3, r1, r6
 80068dc:	5dc7      	ldrb	r7, [r0, r7]
 80068de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068e2:	4637      	mov	r7, r6
 80068e4:	42bb      	cmp	r3, r7
 80068e6:	460e      	mov	r6, r1
 80068e8:	d9f4      	bls.n	80068d4 <_printf_i+0x11c>
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d10b      	bne.n	8006906 <_printf_i+0x14e>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	07de      	lsls	r6, r3, #31
 80068f2:	d508      	bpl.n	8006906 <_printf_i+0x14e>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	6861      	ldr	r1, [r4, #4]
 80068f8:	4299      	cmp	r1, r3
 80068fa:	bfde      	ittt	le
 80068fc:	2330      	movle	r3, #48	; 0x30
 80068fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006902:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006906:	1b52      	subs	r2, r2, r5
 8006908:	6122      	str	r2, [r4, #16]
 800690a:	464b      	mov	r3, r9
 800690c:	4621      	mov	r1, r4
 800690e:	4640      	mov	r0, r8
 8006910:	f8cd a000 	str.w	sl, [sp]
 8006914:	aa03      	add	r2, sp, #12
 8006916:	f7ff fedf 	bl	80066d8 <_printf_common>
 800691a:	3001      	adds	r0, #1
 800691c:	d14c      	bne.n	80069b8 <_printf_i+0x200>
 800691e:	f04f 30ff 	mov.w	r0, #4294967295
 8006922:	b004      	add	sp, #16
 8006924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006928:	4834      	ldr	r0, [pc, #208]	; (80069fc <_printf_i+0x244>)
 800692a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800692e:	6829      	ldr	r1, [r5, #0]
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	f851 6b04 	ldr.w	r6, [r1], #4
 8006936:	6029      	str	r1, [r5, #0]
 8006938:	061d      	lsls	r5, r3, #24
 800693a:	d514      	bpl.n	8006966 <_printf_i+0x1ae>
 800693c:	07df      	lsls	r7, r3, #31
 800693e:	bf44      	itt	mi
 8006940:	f043 0320 	orrmi.w	r3, r3, #32
 8006944:	6023      	strmi	r3, [r4, #0]
 8006946:	b91e      	cbnz	r6, 8006950 <_printf_i+0x198>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	f023 0320 	bic.w	r3, r3, #32
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	2310      	movs	r3, #16
 8006952:	e7af      	b.n	80068b4 <_printf_i+0xfc>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	f043 0320 	orr.w	r3, r3, #32
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	2378      	movs	r3, #120	; 0x78
 800695e:	4828      	ldr	r0, [pc, #160]	; (8006a00 <_printf_i+0x248>)
 8006960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006964:	e7e3      	b.n	800692e <_printf_i+0x176>
 8006966:	0659      	lsls	r1, r3, #25
 8006968:	bf48      	it	mi
 800696a:	b2b6      	uxthmi	r6, r6
 800696c:	e7e6      	b.n	800693c <_printf_i+0x184>
 800696e:	4615      	mov	r5, r2
 8006970:	e7bb      	b.n	80068ea <_printf_i+0x132>
 8006972:	682b      	ldr	r3, [r5, #0]
 8006974:	6826      	ldr	r6, [r4, #0]
 8006976:	1d18      	adds	r0, r3, #4
 8006978:	6961      	ldr	r1, [r4, #20]
 800697a:	6028      	str	r0, [r5, #0]
 800697c:	0635      	lsls	r5, r6, #24
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	d501      	bpl.n	8006986 <_printf_i+0x1ce>
 8006982:	6019      	str	r1, [r3, #0]
 8006984:	e002      	b.n	800698c <_printf_i+0x1d4>
 8006986:	0670      	lsls	r0, r6, #25
 8006988:	d5fb      	bpl.n	8006982 <_printf_i+0x1ca>
 800698a:	8019      	strh	r1, [r3, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	4615      	mov	r5, r2
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	e7ba      	b.n	800690a <_printf_i+0x152>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	2100      	movs	r1, #0
 8006998:	1d1a      	adds	r2, r3, #4
 800699a:	602a      	str	r2, [r5, #0]
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	6862      	ldr	r2, [r4, #4]
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 fbd1 	bl	8007148 <memchr>
 80069a6:	b108      	cbz	r0, 80069ac <_printf_i+0x1f4>
 80069a8:	1b40      	subs	r0, r0, r5
 80069aa:	6060      	str	r0, [r4, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	2300      	movs	r3, #0
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b6:	e7a8      	b.n	800690a <_printf_i+0x152>
 80069b8:	462a      	mov	r2, r5
 80069ba:	4649      	mov	r1, r9
 80069bc:	4640      	mov	r0, r8
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	47d0      	blx	sl
 80069c2:	3001      	adds	r0, #1
 80069c4:	d0ab      	beq.n	800691e <_printf_i+0x166>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	079b      	lsls	r3, r3, #30
 80069ca:	d413      	bmi.n	80069f4 <_printf_i+0x23c>
 80069cc:	68e0      	ldr	r0, [r4, #12]
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	4298      	cmp	r0, r3
 80069d2:	bfb8      	it	lt
 80069d4:	4618      	movlt	r0, r3
 80069d6:	e7a4      	b.n	8006922 <_printf_i+0x16a>
 80069d8:	2301      	movs	r3, #1
 80069da:	4632      	mov	r2, r6
 80069dc:	4649      	mov	r1, r9
 80069de:	4640      	mov	r0, r8
 80069e0:	47d0      	blx	sl
 80069e2:	3001      	adds	r0, #1
 80069e4:	d09b      	beq.n	800691e <_printf_i+0x166>
 80069e6:	3501      	adds	r5, #1
 80069e8:	68e3      	ldr	r3, [r4, #12]
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	1a5b      	subs	r3, r3, r1
 80069ee:	42ab      	cmp	r3, r5
 80069f0:	dcf2      	bgt.n	80069d8 <_printf_i+0x220>
 80069f2:	e7eb      	b.n	80069cc <_printf_i+0x214>
 80069f4:	2500      	movs	r5, #0
 80069f6:	f104 0619 	add.w	r6, r4, #25
 80069fa:	e7f5      	b.n	80069e8 <_printf_i+0x230>
 80069fc:	0800e441 	.word	0x0800e441
 8006a00:	0800e452 	.word	0x0800e452

08006a04 <iprintf>:
 8006a04:	b40f      	push	{r0, r1, r2, r3}
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <iprintf+0x2c>)
 8006a08:	b513      	push	{r0, r1, r4, lr}
 8006a0a:	681c      	ldr	r4, [r3, #0]
 8006a0c:	b124      	cbz	r4, 8006a18 <iprintf+0x14>
 8006a0e:	69a3      	ldr	r3, [r4, #24]
 8006a10:	b913      	cbnz	r3, 8006a18 <iprintf+0x14>
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fa92 	bl	8006f3c <__sinit>
 8006a18:	ab05      	add	r3, sp, #20
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	9a04      	ldr	r2, [sp, #16]
 8006a1e:	68a1      	ldr	r1, [r4, #8]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	f7ff fd29 	bl	8006478 <_vfiprintf_r>
 8006a26:	b002      	add	sp, #8
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	b004      	add	sp, #16
 8006a2e:	4770      	bx	lr
 8006a30:	20000098 	.word	0x20000098

08006a34 <_puts_r>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	460e      	mov	r6, r1
 8006a38:	4605      	mov	r5, r0
 8006a3a:	b118      	cbz	r0, 8006a44 <_puts_r+0x10>
 8006a3c:	6983      	ldr	r3, [r0, #24]
 8006a3e:	b90b      	cbnz	r3, 8006a44 <_puts_r+0x10>
 8006a40:	f000 fa7c 	bl	8006f3c <__sinit>
 8006a44:	69ab      	ldr	r3, [r5, #24]
 8006a46:	68ac      	ldr	r4, [r5, #8]
 8006a48:	b913      	cbnz	r3, 8006a50 <_puts_r+0x1c>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 fa76 	bl	8006f3c <__sinit>
 8006a50:	4b2c      	ldr	r3, [pc, #176]	; (8006b04 <_puts_r+0xd0>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d120      	bne.n	8006a98 <_puts_r+0x64>
 8006a56:	686c      	ldr	r4, [r5, #4]
 8006a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a5a:	07db      	lsls	r3, r3, #31
 8006a5c:	d405      	bmi.n	8006a6a <_puts_r+0x36>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	0598      	lsls	r0, r3, #22
 8006a62:	d402      	bmi.n	8006a6a <_puts_r+0x36>
 8006a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a66:	f000 fb07 	bl	8007078 <__retarget_lock_acquire_recursive>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	0719      	lsls	r1, r3, #28
 8006a6e:	d51d      	bpl.n	8006aac <_puts_r+0x78>
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	b1db      	cbz	r3, 8006aac <_puts_r+0x78>
 8006a74:	3e01      	subs	r6, #1
 8006a76:	68a3      	ldr	r3, [r4, #8]
 8006a78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	60a3      	str	r3, [r4, #8]
 8006a80:	bb39      	cbnz	r1, 8006ad2 <_puts_r+0x9e>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da38      	bge.n	8006af8 <_puts_r+0xc4>
 8006a86:	4622      	mov	r2, r4
 8006a88:	210a      	movs	r1, #10
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f000 f878 	bl	8006b80 <__swbuf_r>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d011      	beq.n	8006ab8 <_puts_r+0x84>
 8006a94:	250a      	movs	r5, #10
 8006a96:	e011      	b.n	8006abc <_puts_r+0x88>
 8006a98:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <_puts_r+0xd4>)
 8006a9a:	429c      	cmp	r4, r3
 8006a9c:	d101      	bne.n	8006aa2 <_puts_r+0x6e>
 8006a9e:	68ac      	ldr	r4, [r5, #8]
 8006aa0:	e7da      	b.n	8006a58 <_puts_r+0x24>
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <_puts_r+0xd8>)
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	bf08      	it	eq
 8006aa8:	68ec      	ldreq	r4, [r5, #12]
 8006aaa:	e7d5      	b.n	8006a58 <_puts_r+0x24>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f8b8 	bl	8006c24 <__swsetup_r>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d0dd      	beq.n	8006a74 <_puts_r+0x40>
 8006ab8:	f04f 35ff 	mov.w	r5, #4294967295
 8006abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006abe:	07da      	lsls	r2, r3, #31
 8006ac0:	d405      	bmi.n	8006ace <_puts_r+0x9a>
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	059b      	lsls	r3, r3, #22
 8006ac6:	d402      	bmi.n	8006ace <_puts_r+0x9a>
 8006ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aca:	f000 fad6 	bl	800707a <__retarget_lock_release_recursive>
 8006ace:	4628      	mov	r0, r5
 8006ad0:	bd70      	pop	{r4, r5, r6, pc}
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	da04      	bge.n	8006ae0 <_puts_r+0xac>
 8006ad6:	69a2      	ldr	r2, [r4, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	dc06      	bgt.n	8006aea <_puts_r+0xb6>
 8006adc:	290a      	cmp	r1, #10
 8006ade:	d004      	beq.n	8006aea <_puts_r+0xb6>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	6022      	str	r2, [r4, #0]
 8006ae6:	7019      	strb	r1, [r3, #0]
 8006ae8:	e7c5      	b.n	8006a76 <_puts_r+0x42>
 8006aea:	4622      	mov	r2, r4
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 f847 	bl	8006b80 <__swbuf_r>
 8006af2:	3001      	adds	r0, #1
 8006af4:	d1bf      	bne.n	8006a76 <_puts_r+0x42>
 8006af6:	e7df      	b.n	8006ab8 <_puts_r+0x84>
 8006af8:	250a      	movs	r5, #10
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	701d      	strb	r5, [r3, #0]
 8006b02:	e7db      	b.n	8006abc <_puts_r+0x88>
 8006b04:	0800e484 	.word	0x0800e484
 8006b08:	0800e4a4 	.word	0x0800e4a4
 8006b0c:	0800e464 	.word	0x0800e464

08006b10 <puts>:
 8006b10:	4b02      	ldr	r3, [pc, #8]	; (8006b1c <puts+0xc>)
 8006b12:	4601      	mov	r1, r0
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	f7ff bf8d 	b.w	8006a34 <_puts_r>
 8006b1a:	bf00      	nop
 8006b1c:	20000098 	.word	0x20000098

08006b20 <_sbrk_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	2300      	movs	r3, #0
 8006b24:	4d05      	ldr	r5, [pc, #20]	; (8006b3c <_sbrk_r+0x1c>)
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fc f866 	bl	8002bfc <_sbrk>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_sbrk_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_sbrk_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000920 	.word	0x20000920

08006b40 <siprintf>:
 8006b40:	b40e      	push	{r1, r2, r3}
 8006b42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b46:	b500      	push	{lr}
 8006b48:	b09c      	sub	sp, #112	; 0x70
 8006b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b4c:	9002      	str	r0, [sp, #8]
 8006b4e:	9006      	str	r0, [sp, #24]
 8006b50:	9107      	str	r1, [sp, #28]
 8006b52:	9104      	str	r1, [sp, #16]
 8006b54:	4808      	ldr	r0, [pc, #32]	; (8006b78 <siprintf+0x38>)
 8006b56:	4909      	ldr	r1, [pc, #36]	; (8006b7c <siprintf+0x3c>)
 8006b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b5c:	9105      	str	r1, [sp, #20]
 8006b5e:	6800      	ldr	r0, [r0, #0]
 8006b60:	a902      	add	r1, sp, #8
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	f000 fbbc 	bl	80072e0 <_svfiprintf_r>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	b01c      	add	sp, #112	; 0x70
 8006b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b74:	b003      	add	sp, #12
 8006b76:	4770      	bx	lr
 8006b78:	20000098 	.word	0x20000098
 8006b7c:	ffff0208 	.word	0xffff0208

08006b80 <__swbuf_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	4605      	mov	r5, r0
 8006b88:	b118      	cbz	r0, 8006b92 <__swbuf_r+0x12>
 8006b8a:	6983      	ldr	r3, [r0, #24]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <__swbuf_r+0x12>
 8006b8e:	f000 f9d5 	bl	8006f3c <__sinit>
 8006b92:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <__swbuf_r+0x98>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	d12b      	bne.n	8006bf0 <__swbuf_r+0x70>
 8006b98:	686c      	ldr	r4, [r5, #4]
 8006b9a:	69a3      	ldr	r3, [r4, #24]
 8006b9c:	60a3      	str	r3, [r4, #8]
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	071a      	lsls	r2, r3, #28
 8006ba2:	d52f      	bpl.n	8006c04 <__swbuf_r+0x84>
 8006ba4:	6923      	ldr	r3, [r4, #16]
 8006ba6:	b36b      	cbz	r3, 8006c04 <__swbuf_r+0x84>
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	b2f6      	uxtb	r6, r6
 8006bae:	1ac0      	subs	r0, r0, r3
 8006bb0:	6963      	ldr	r3, [r4, #20]
 8006bb2:	4637      	mov	r7, r6
 8006bb4:	4283      	cmp	r3, r0
 8006bb6:	dc04      	bgt.n	8006bc2 <__swbuf_r+0x42>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 f92a 	bl	8006e14 <_fflush_r>
 8006bc0:	bb30      	cbnz	r0, 8006c10 <__swbuf_r+0x90>
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	60a3      	str	r3, [r4, #8]
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	6022      	str	r2, [r4, #0]
 8006bd0:	701e      	strb	r6, [r3, #0]
 8006bd2:	6963      	ldr	r3, [r4, #20]
 8006bd4:	4283      	cmp	r3, r0
 8006bd6:	d004      	beq.n	8006be2 <__swbuf_r+0x62>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	07db      	lsls	r3, r3, #31
 8006bdc:	d506      	bpl.n	8006bec <__swbuf_r+0x6c>
 8006bde:	2e0a      	cmp	r6, #10
 8006be0:	d104      	bne.n	8006bec <__swbuf_r+0x6c>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 f915 	bl	8006e14 <_fflush_r>
 8006bea:	b988      	cbnz	r0, 8006c10 <__swbuf_r+0x90>
 8006bec:	4638      	mov	r0, r7
 8006bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <__swbuf_r+0x9c>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <__swbuf_r+0x7a>
 8006bf6:	68ac      	ldr	r4, [r5, #8]
 8006bf8:	e7cf      	b.n	8006b9a <__swbuf_r+0x1a>
 8006bfa:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <__swbuf_r+0xa0>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68ec      	ldreq	r4, [r5, #12]
 8006c02:	e7ca      	b.n	8006b9a <__swbuf_r+0x1a>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 f80c 	bl	8006c24 <__swsetup_r>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d0cb      	beq.n	8006ba8 <__swbuf_r+0x28>
 8006c10:	f04f 37ff 	mov.w	r7, #4294967295
 8006c14:	e7ea      	b.n	8006bec <__swbuf_r+0x6c>
 8006c16:	bf00      	nop
 8006c18:	0800e484 	.word	0x0800e484
 8006c1c:	0800e4a4 	.word	0x0800e4a4
 8006c20:	0800e464 	.word	0x0800e464

08006c24 <__swsetup_r>:
 8006c24:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <__swsetup_r+0xcc>)
 8006c26:	b570      	push	{r4, r5, r6, lr}
 8006c28:	681d      	ldr	r5, [r3, #0]
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	b125      	cbz	r5, 8006c3a <__swsetup_r+0x16>
 8006c30:	69ab      	ldr	r3, [r5, #24]
 8006c32:	b913      	cbnz	r3, 8006c3a <__swsetup_r+0x16>
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f981 	bl	8006f3c <__sinit>
 8006c3a:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <__swsetup_r+0xd0>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	d10f      	bne.n	8006c60 <__swsetup_r+0x3c>
 8006c40:	686c      	ldr	r4, [r5, #4]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c48:	0719      	lsls	r1, r3, #28
 8006c4a:	d42c      	bmi.n	8006ca6 <__swsetup_r+0x82>
 8006c4c:	06dd      	lsls	r5, r3, #27
 8006c4e:	d411      	bmi.n	8006c74 <__swsetup_r+0x50>
 8006c50:	2309      	movs	r3, #9
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	e03e      	b.n	8006cde <__swsetup_r+0xba>
 8006c60:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <__swsetup_r+0xd4>)
 8006c62:	429c      	cmp	r4, r3
 8006c64:	d101      	bne.n	8006c6a <__swsetup_r+0x46>
 8006c66:	68ac      	ldr	r4, [r5, #8]
 8006c68:	e7eb      	b.n	8006c42 <__swsetup_r+0x1e>
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <__swsetup_r+0xd8>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	bf08      	it	eq
 8006c70:	68ec      	ldreq	r4, [r5, #12]
 8006c72:	e7e6      	b.n	8006c42 <__swsetup_r+0x1e>
 8006c74:	0758      	lsls	r0, r3, #29
 8006c76:	d512      	bpl.n	8006c9e <__swsetup_r+0x7a>
 8006c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c7a:	b141      	cbz	r1, 8006c8e <__swsetup_r+0x6a>
 8006c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c80:	4299      	cmp	r1, r3
 8006c82:	d002      	beq.n	8006c8a <__swsetup_r+0x66>
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7ff faf3 	bl	8006270 <_free_r>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	2300      	movs	r3, #0
 8006c98:	6063      	str	r3, [r4, #4]
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	f043 0308 	orr.w	r3, r3, #8
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	b94b      	cbnz	r3, 8006cbe <__swsetup_r+0x9a>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d003      	beq.n	8006cbe <__swsetup_r+0x9a>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 fa05 	bl	80070c8 <__smakebuf_r>
 8006cbe:	89a0      	ldrh	r0, [r4, #12]
 8006cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc4:	f010 0301 	ands.w	r3, r0, #1
 8006cc8:	d00a      	beq.n	8006ce0 <__swsetup_r+0xbc>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60a3      	str	r3, [r4, #8]
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	425b      	negs	r3, r3
 8006cd2:	61a3      	str	r3, [r4, #24]
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	b943      	cbnz	r3, 8006cea <__swsetup_r+0xc6>
 8006cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cdc:	d1ba      	bne.n	8006c54 <__swsetup_r+0x30>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	0781      	lsls	r1, r0, #30
 8006ce2:	bf58      	it	pl
 8006ce4:	6963      	ldrpl	r3, [r4, #20]
 8006ce6:	60a3      	str	r3, [r4, #8]
 8006ce8:	e7f4      	b.n	8006cd4 <__swsetup_r+0xb0>
 8006cea:	2000      	movs	r0, #0
 8006cec:	e7f7      	b.n	8006cde <__swsetup_r+0xba>
 8006cee:	bf00      	nop
 8006cf0:	20000098 	.word	0x20000098
 8006cf4:	0800e484 	.word	0x0800e484
 8006cf8:	0800e4a4 	.word	0x0800e4a4
 8006cfc:	0800e464 	.word	0x0800e464

08006d00 <abort>:
 8006d00:	2006      	movs	r0, #6
 8006d02:	b508      	push	{r3, lr}
 8006d04:	f000 fc14 	bl	8007530 <raise>
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f7fb ff1f 	bl	8002b4c <_exit>
	...

08006d10 <__sflush_r>:
 8006d10:	898a      	ldrh	r2, [r1, #12]
 8006d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d14:	4605      	mov	r5, r0
 8006d16:	0710      	lsls	r0, r2, #28
 8006d18:	460c      	mov	r4, r1
 8006d1a:	d457      	bmi.n	8006dcc <__sflush_r+0xbc>
 8006d1c:	684b      	ldr	r3, [r1, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dc04      	bgt.n	8006d2c <__sflush_r+0x1c>
 8006d22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dc01      	bgt.n	8006d2c <__sflush_r+0x1c>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	d0fa      	beq.n	8006d28 <__sflush_r+0x18>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d38:	682f      	ldr	r7, [r5, #0]
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	d032      	beq.n	8006da4 <__sflush_r+0x94>
 8006d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	075a      	lsls	r2, r3, #29
 8006d44:	d505      	bpl.n	8006d52 <__sflush_r+0x42>
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	1ac0      	subs	r0, r0, r3
 8006d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d4c:	b10b      	cbz	r3, 8006d52 <__sflush_r+0x42>
 8006d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d50:	1ac0      	subs	r0, r0, r3
 8006d52:	2300      	movs	r3, #0
 8006d54:	4602      	mov	r2, r0
 8006d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d58:	4628      	mov	r0, r5
 8006d5a:	6a21      	ldr	r1, [r4, #32]
 8006d5c:	47b0      	blx	r6
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	d106      	bne.n	8006d72 <__sflush_r+0x62>
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	291d      	cmp	r1, #29
 8006d68:	d82c      	bhi.n	8006dc4 <__sflush_r+0xb4>
 8006d6a:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <__sflush_r+0x100>)
 8006d6c:	40ca      	lsrs	r2, r1
 8006d6e:	07d6      	lsls	r6, r2, #31
 8006d70:	d528      	bpl.n	8006dc4 <__sflush_r+0xb4>
 8006d72:	2200      	movs	r2, #0
 8006d74:	6062      	str	r2, [r4, #4]
 8006d76:	6922      	ldr	r2, [r4, #16]
 8006d78:	04d9      	lsls	r1, r3, #19
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	d504      	bpl.n	8006d88 <__sflush_r+0x78>
 8006d7e:	1c42      	adds	r2, r0, #1
 8006d80:	d101      	bne.n	8006d86 <__sflush_r+0x76>
 8006d82:	682b      	ldr	r3, [r5, #0]
 8006d84:	b903      	cbnz	r3, 8006d88 <__sflush_r+0x78>
 8006d86:	6560      	str	r0, [r4, #84]	; 0x54
 8006d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8a:	602f      	str	r7, [r5, #0]
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d0cb      	beq.n	8006d28 <__sflush_r+0x18>
 8006d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d94:	4299      	cmp	r1, r3
 8006d96:	d002      	beq.n	8006d9e <__sflush_r+0x8e>
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7ff fa69 	bl	8006270 <_free_r>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	6360      	str	r0, [r4, #52]	; 0x34
 8006da2:	e7c2      	b.n	8006d2a <__sflush_r+0x1a>
 8006da4:	6a21      	ldr	r1, [r4, #32]
 8006da6:	2301      	movs	r3, #1
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b0      	blx	r6
 8006dac:	1c41      	adds	r1, r0, #1
 8006dae:	d1c7      	bne.n	8006d40 <__sflush_r+0x30>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0c4      	beq.n	8006d40 <__sflush_r+0x30>
 8006db6:	2b1d      	cmp	r3, #29
 8006db8:	d001      	beq.n	8006dbe <__sflush_r+0xae>
 8006dba:	2b16      	cmp	r3, #22
 8006dbc:	d101      	bne.n	8006dc2 <__sflush_r+0xb2>
 8006dbe:	602f      	str	r7, [r5, #0]
 8006dc0:	e7b2      	b.n	8006d28 <__sflush_r+0x18>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	e7ae      	b.n	8006d2a <__sflush_r+0x1a>
 8006dcc:	690f      	ldr	r7, [r1, #16]
 8006dce:	2f00      	cmp	r7, #0
 8006dd0:	d0aa      	beq.n	8006d28 <__sflush_r+0x18>
 8006dd2:	0793      	lsls	r3, r2, #30
 8006dd4:	bf18      	it	ne
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	680e      	ldr	r6, [r1, #0]
 8006dda:	bf08      	it	eq
 8006ddc:	694b      	ldreq	r3, [r1, #20]
 8006dde:	1bf6      	subs	r6, r6, r7
 8006de0:	600f      	str	r7, [r1, #0]
 8006de2:	608b      	str	r3, [r1, #8]
 8006de4:	2e00      	cmp	r6, #0
 8006de6:	dd9f      	ble.n	8006d28 <__sflush_r+0x18>
 8006de8:	4633      	mov	r3, r6
 8006dea:	463a      	mov	r2, r7
 8006dec:	4628      	mov	r0, r5
 8006dee:	6a21      	ldr	r1, [r4, #32]
 8006df0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006df4:	47e0      	blx	ip
 8006df6:	2800      	cmp	r0, #0
 8006df8:	dc06      	bgt.n	8006e08 <__sflush_r+0xf8>
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	e790      	b.n	8006d2a <__sflush_r+0x1a>
 8006e08:	4407      	add	r7, r0
 8006e0a:	1a36      	subs	r6, r6, r0
 8006e0c:	e7ea      	b.n	8006de4 <__sflush_r+0xd4>
 8006e0e:	bf00      	nop
 8006e10:	20400001 	.word	0x20400001

08006e14 <_fflush_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	690b      	ldr	r3, [r1, #16]
 8006e18:	4605      	mov	r5, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	b913      	cbnz	r3, 8006e24 <_fflush_r+0x10>
 8006e1e:	2500      	movs	r5, #0
 8006e20:	4628      	mov	r0, r5
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	b118      	cbz	r0, 8006e2e <_fflush_r+0x1a>
 8006e26:	6983      	ldr	r3, [r0, #24]
 8006e28:	b90b      	cbnz	r3, 8006e2e <_fflush_r+0x1a>
 8006e2a:	f000 f887 	bl	8006f3c <__sinit>
 8006e2e:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <_fflush_r+0x6c>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	d11b      	bne.n	8006e6c <_fflush_r+0x58>
 8006e34:	686c      	ldr	r4, [r5, #4]
 8006e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0ef      	beq.n	8006e1e <_fflush_r+0xa>
 8006e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e40:	07d0      	lsls	r0, r2, #31
 8006e42:	d404      	bmi.n	8006e4e <_fflush_r+0x3a>
 8006e44:	0599      	lsls	r1, r3, #22
 8006e46:	d402      	bmi.n	8006e4e <_fflush_r+0x3a>
 8006e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e4a:	f000 f915 	bl	8007078 <__retarget_lock_acquire_recursive>
 8006e4e:	4628      	mov	r0, r5
 8006e50:	4621      	mov	r1, r4
 8006e52:	f7ff ff5d 	bl	8006d10 <__sflush_r>
 8006e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e58:	4605      	mov	r5, r0
 8006e5a:	07da      	lsls	r2, r3, #31
 8006e5c:	d4e0      	bmi.n	8006e20 <_fflush_r+0xc>
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	059b      	lsls	r3, r3, #22
 8006e62:	d4dd      	bmi.n	8006e20 <_fflush_r+0xc>
 8006e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e66:	f000 f908 	bl	800707a <__retarget_lock_release_recursive>
 8006e6a:	e7d9      	b.n	8006e20 <_fflush_r+0xc>
 8006e6c:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <_fflush_r+0x70>)
 8006e6e:	429c      	cmp	r4, r3
 8006e70:	d101      	bne.n	8006e76 <_fflush_r+0x62>
 8006e72:	68ac      	ldr	r4, [r5, #8]
 8006e74:	e7df      	b.n	8006e36 <_fflush_r+0x22>
 8006e76:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <_fflush_r+0x74>)
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	bf08      	it	eq
 8006e7c:	68ec      	ldreq	r4, [r5, #12]
 8006e7e:	e7da      	b.n	8006e36 <_fflush_r+0x22>
 8006e80:	0800e484 	.word	0x0800e484
 8006e84:	0800e4a4 	.word	0x0800e4a4
 8006e88:	0800e464 	.word	0x0800e464

08006e8c <std>:
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	4604      	mov	r4, r0
 8006e92:	e9c0 3300 	strd	r3, r3, [r0]
 8006e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e9a:	6083      	str	r3, [r0, #8]
 8006e9c:	8181      	strh	r1, [r0, #12]
 8006e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006ea0:	81c2      	strh	r2, [r0, #14]
 8006ea2:	6183      	str	r3, [r0, #24]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	305c      	adds	r0, #92	; 0x5c
 8006eaa:	f7ff f9d9 	bl	8006260 <memset>
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <std+0x38>)
 8006eb0:	6224      	str	r4, [r4, #32]
 8006eb2:	6263      	str	r3, [r4, #36]	; 0x24
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <std+0x3c>)
 8006eb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <std+0x40>)
 8006eba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <std+0x44>)
 8006ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop
 8006ec4:	08007569 	.word	0x08007569
 8006ec8:	0800758b 	.word	0x0800758b
 8006ecc:	080075c3 	.word	0x080075c3
 8006ed0:	080075e7 	.word	0x080075e7

08006ed4 <_cleanup_r>:
 8006ed4:	4901      	ldr	r1, [pc, #4]	; (8006edc <_cleanup_r+0x8>)
 8006ed6:	f000 b8af 	b.w	8007038 <_fwalk_reent>
 8006eda:	bf00      	nop
 8006edc:	08006e15 	.word	0x08006e15

08006ee0 <__sfmoreglue>:
 8006ee0:	2268      	movs	r2, #104	; 0x68
 8006ee2:	b570      	push	{r4, r5, r6, lr}
 8006ee4:	1e4d      	subs	r5, r1, #1
 8006ee6:	4355      	muls	r5, r2
 8006ee8:	460e      	mov	r6, r1
 8006eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eee:	f7ff fa27 	bl	8006340 <_malloc_r>
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	b140      	cbz	r0, 8006f08 <__sfmoreglue+0x28>
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8006efc:	300c      	adds	r0, #12
 8006efe:	60a0      	str	r0, [r4, #8]
 8006f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f04:	f7ff f9ac 	bl	8006260 <memset>
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}

08006f0c <__sfp_lock_acquire>:
 8006f0c:	4801      	ldr	r0, [pc, #4]	; (8006f14 <__sfp_lock_acquire+0x8>)
 8006f0e:	f000 b8b3 	b.w	8007078 <__retarget_lock_acquire_recursive>
 8006f12:	bf00      	nop
 8006f14:	2000091d 	.word	0x2000091d

08006f18 <__sfp_lock_release>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__sfp_lock_release+0x8>)
 8006f1a:	f000 b8ae 	b.w	800707a <__retarget_lock_release_recursive>
 8006f1e:	bf00      	nop
 8006f20:	2000091d 	.word	0x2000091d

08006f24 <__sinit_lock_acquire>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sinit_lock_acquire+0x8>)
 8006f26:	f000 b8a7 	b.w	8007078 <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	2000091e 	.word	0x2000091e

08006f30 <__sinit_lock_release>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sinit_lock_release+0x8>)
 8006f32:	f000 b8a2 	b.w	800707a <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	2000091e 	.word	0x2000091e

08006f3c <__sinit>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4604      	mov	r4, r0
 8006f40:	f7ff fff0 	bl	8006f24 <__sinit_lock_acquire>
 8006f44:	69a3      	ldr	r3, [r4, #24]
 8006f46:	b11b      	cbz	r3, 8006f50 <__sinit+0x14>
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	f7ff bff0 	b.w	8006f30 <__sinit_lock_release>
 8006f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f54:	6523      	str	r3, [r4, #80]	; 0x50
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <__sinit+0x68>)
 8006f58:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <__sinit+0x6c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f5e:	42a3      	cmp	r3, r4
 8006f60:	bf08      	it	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	4620      	mov	r0, r4
 8006f66:	bf08      	it	eq
 8006f68:	61a3      	streq	r3, [r4, #24]
 8006f6a:	f000 f81f 	bl	8006fac <__sfp>
 8006f6e:	6060      	str	r0, [r4, #4]
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 f81b 	bl	8006fac <__sfp>
 8006f76:	60a0      	str	r0, [r4, #8]
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f817 	bl	8006fac <__sfp>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2104      	movs	r1, #4
 8006f82:	60e0      	str	r0, [r4, #12]
 8006f84:	6860      	ldr	r0, [r4, #4]
 8006f86:	f7ff ff81 	bl	8006e8c <std>
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	2109      	movs	r1, #9
 8006f8e:	68a0      	ldr	r0, [r4, #8]
 8006f90:	f7ff ff7c 	bl	8006e8c <std>
 8006f94:	2202      	movs	r2, #2
 8006f96:	2112      	movs	r1, #18
 8006f98:	68e0      	ldr	r0, [r4, #12]
 8006f9a:	f7ff ff77 	bl	8006e8c <std>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	61a3      	str	r3, [r4, #24]
 8006fa2:	e7d1      	b.n	8006f48 <__sinit+0xc>
 8006fa4:	0800e42c 	.word	0x0800e42c
 8006fa8:	08006ed5 	.word	0x08006ed5

08006fac <__sfp>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	4607      	mov	r7, r0
 8006fb0:	f7ff ffac 	bl	8006f0c <__sfp_lock_acquire>
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <__sfp+0x84>)
 8006fb6:	681e      	ldr	r6, [r3, #0]
 8006fb8:	69b3      	ldr	r3, [r6, #24]
 8006fba:	b913      	cbnz	r3, 8006fc2 <__sfp+0x16>
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff ffbd 	bl	8006f3c <__sinit>
 8006fc2:	3648      	adds	r6, #72	; 0x48
 8006fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	d503      	bpl.n	8006fd4 <__sfp+0x28>
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	b30b      	cbz	r3, 8007014 <__sfp+0x68>
 8006fd0:	6836      	ldr	r6, [r6, #0]
 8006fd2:	e7f7      	b.n	8006fc4 <__sfp+0x18>
 8006fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fd8:	b9d5      	cbnz	r5, 8007010 <__sfp+0x64>
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <__sfp+0x88>)
 8006fdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fe0:	60e3      	str	r3, [r4, #12]
 8006fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8006fe4:	f000 f847 	bl	8007076 <__retarget_lock_init_recursive>
 8006fe8:	f7ff ff96 	bl	8006f18 <__sfp_lock_release>
 8006fec:	2208      	movs	r2, #8
 8006fee:	4629      	mov	r1, r5
 8006ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ff8:	6025      	str	r5, [r4, #0]
 8006ffa:	61a5      	str	r5, [r4, #24]
 8006ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007000:	f7ff f92e 	bl	8006260 <memset>
 8007004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800700c:	4620      	mov	r0, r4
 800700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007010:	3468      	adds	r4, #104	; 0x68
 8007012:	e7d9      	b.n	8006fc8 <__sfp+0x1c>
 8007014:	2104      	movs	r1, #4
 8007016:	4638      	mov	r0, r7
 8007018:	f7ff ff62 	bl	8006ee0 <__sfmoreglue>
 800701c:	4604      	mov	r4, r0
 800701e:	6030      	str	r0, [r6, #0]
 8007020:	2800      	cmp	r0, #0
 8007022:	d1d5      	bne.n	8006fd0 <__sfp+0x24>
 8007024:	f7ff ff78 	bl	8006f18 <__sfp_lock_release>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	e7ee      	b.n	800700c <__sfp+0x60>
 800702e:	bf00      	nop
 8007030:	0800e42c 	.word	0x0800e42c
 8007034:	ffff0001 	.word	0xffff0001

08007038 <_fwalk_reent>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	4606      	mov	r6, r0
 800703e:	4688      	mov	r8, r1
 8007040:	2700      	movs	r7, #0
 8007042:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800704a:	f1b9 0901 	subs.w	r9, r9, #1
 800704e:	d505      	bpl.n	800705c <_fwalk_reent+0x24>
 8007050:	6824      	ldr	r4, [r4, #0]
 8007052:	2c00      	cmp	r4, #0
 8007054:	d1f7      	bne.n	8007046 <_fwalk_reent+0xe>
 8007056:	4638      	mov	r0, r7
 8007058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705c:	89ab      	ldrh	r3, [r5, #12]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d907      	bls.n	8007072 <_fwalk_reent+0x3a>
 8007062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007066:	3301      	adds	r3, #1
 8007068:	d003      	beq.n	8007072 <_fwalk_reent+0x3a>
 800706a:	4629      	mov	r1, r5
 800706c:	4630      	mov	r0, r6
 800706e:	47c0      	blx	r8
 8007070:	4307      	orrs	r7, r0
 8007072:	3568      	adds	r5, #104	; 0x68
 8007074:	e7e9      	b.n	800704a <_fwalk_reent+0x12>

08007076 <__retarget_lock_init_recursive>:
 8007076:	4770      	bx	lr

08007078 <__retarget_lock_acquire_recursive>:
 8007078:	4770      	bx	lr

0800707a <__retarget_lock_release_recursive>:
 800707a:	4770      	bx	lr

0800707c <__swhatbuf_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	460e      	mov	r6, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	4614      	mov	r4, r2
 8007086:	2900      	cmp	r1, #0
 8007088:	461d      	mov	r5, r3
 800708a:	b096      	sub	sp, #88	; 0x58
 800708c:	da08      	bge.n	80070a0 <__swhatbuf_r+0x24>
 800708e:	2200      	movs	r2, #0
 8007090:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	061a      	lsls	r2, r3, #24
 8007098:	d410      	bmi.n	80070bc <__swhatbuf_r+0x40>
 800709a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800709e:	e00e      	b.n	80070be <__swhatbuf_r+0x42>
 80070a0:	466a      	mov	r2, sp
 80070a2:	f000 fac7 	bl	8007634 <_fstat_r>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	dbf1      	blt.n	800708e <__swhatbuf_r+0x12>
 80070aa:	9a01      	ldr	r2, [sp, #4]
 80070ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070b4:	425a      	negs	r2, r3
 80070b6:	415a      	adcs	r2, r3
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	e7ee      	b.n	800709a <__swhatbuf_r+0x1e>
 80070bc:	2340      	movs	r3, #64	; 0x40
 80070be:	2000      	movs	r0, #0
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	b016      	add	sp, #88	; 0x58
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070c8 <__smakebuf_r>:
 80070c8:	898b      	ldrh	r3, [r1, #12]
 80070ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070cc:	079d      	lsls	r5, r3, #30
 80070ce:	4606      	mov	r6, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	d507      	bpl.n	80070e4 <__smakebuf_r+0x1c>
 80070d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	2301      	movs	r3, #1
 80070de:	6163      	str	r3, [r4, #20]
 80070e0:	b002      	add	sp, #8
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	466a      	mov	r2, sp
 80070e6:	ab01      	add	r3, sp, #4
 80070e8:	f7ff ffc8 	bl	800707c <__swhatbuf_r>
 80070ec:	9900      	ldr	r1, [sp, #0]
 80070ee:	4605      	mov	r5, r0
 80070f0:	4630      	mov	r0, r6
 80070f2:	f7ff f925 	bl	8006340 <_malloc_r>
 80070f6:	b948      	cbnz	r0, 800710c <__smakebuf_r+0x44>
 80070f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fc:	059a      	lsls	r2, r3, #22
 80070fe:	d4ef      	bmi.n	80070e0 <__smakebuf_r+0x18>
 8007100:	f023 0303 	bic.w	r3, r3, #3
 8007104:	f043 0302 	orr.w	r3, r3, #2
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e7e3      	b.n	80070d4 <__smakebuf_r+0xc>
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <__smakebuf_r+0x7c>)
 800710e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	6020      	str	r0, [r4, #0]
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	9b00      	ldr	r3, [sp, #0]
 800711c:	6120      	str	r0, [r4, #16]
 800711e:	6163      	str	r3, [r4, #20]
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	b15b      	cbz	r3, 800713c <__smakebuf_r+0x74>
 8007124:	4630      	mov	r0, r6
 8007126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712a:	f000 fa95 	bl	8007658 <_isatty_r>
 800712e:	b128      	cbz	r0, 800713c <__smakebuf_r+0x74>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	89a0      	ldrh	r0, [r4, #12]
 800713e:	4305      	orrs	r5, r0
 8007140:	81a5      	strh	r5, [r4, #12]
 8007142:	e7cd      	b.n	80070e0 <__smakebuf_r+0x18>
 8007144:	08006ed5 	.word	0x08006ed5

08007148 <memchr>:
 8007148:	4603      	mov	r3, r0
 800714a:	b510      	push	{r4, lr}
 800714c:	b2c9      	uxtb	r1, r1
 800714e:	4402      	add	r2, r0
 8007150:	4293      	cmp	r3, r2
 8007152:	4618      	mov	r0, r3
 8007154:	d101      	bne.n	800715a <memchr+0x12>
 8007156:	2000      	movs	r0, #0
 8007158:	e003      	b.n	8007162 <memchr+0x1a>
 800715a:	7804      	ldrb	r4, [r0, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	428c      	cmp	r4, r1
 8007160:	d1f6      	bne.n	8007150 <memchr+0x8>
 8007162:	bd10      	pop	{r4, pc}

08007164 <memcpy>:
 8007164:	440a      	add	r2, r1
 8007166:	4291      	cmp	r1, r2
 8007168:	f100 33ff 	add.w	r3, r0, #4294967295
 800716c:	d100      	bne.n	8007170 <memcpy+0xc>
 800716e:	4770      	bx	lr
 8007170:	b510      	push	{r4, lr}
 8007172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007176:	4291      	cmp	r1, r2
 8007178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717c:	d1f9      	bne.n	8007172 <memcpy+0xe>
 800717e:	bd10      	pop	{r4, pc}

08007180 <memmove>:
 8007180:	4288      	cmp	r0, r1
 8007182:	b510      	push	{r4, lr}
 8007184:	eb01 0402 	add.w	r4, r1, r2
 8007188:	d902      	bls.n	8007190 <memmove+0x10>
 800718a:	4284      	cmp	r4, r0
 800718c:	4623      	mov	r3, r4
 800718e:	d807      	bhi.n	80071a0 <memmove+0x20>
 8007190:	1e43      	subs	r3, r0, #1
 8007192:	42a1      	cmp	r1, r4
 8007194:	d008      	beq.n	80071a8 <memmove+0x28>
 8007196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800719a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800719e:	e7f8      	b.n	8007192 <memmove+0x12>
 80071a0:	4601      	mov	r1, r0
 80071a2:	4402      	add	r2, r0
 80071a4:	428a      	cmp	r2, r1
 80071a6:	d100      	bne.n	80071aa <memmove+0x2a>
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071b2:	e7f7      	b.n	80071a4 <memmove+0x24>

080071b4 <__malloc_lock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__malloc_lock+0x8>)
 80071b6:	f7ff bf5f 	b.w	8007078 <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	2000091c 	.word	0x2000091c

080071c0 <__malloc_unlock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__malloc_unlock+0x8>)
 80071c2:	f7ff bf5a 	b.w	800707a <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	2000091c 	.word	0x2000091c

080071cc <_realloc_r>:
 80071cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	4680      	mov	r8, r0
 80071d2:	4614      	mov	r4, r2
 80071d4:	460e      	mov	r6, r1
 80071d6:	b921      	cbnz	r1, 80071e2 <_realloc_r+0x16>
 80071d8:	4611      	mov	r1, r2
 80071da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071de:	f7ff b8af 	b.w	8006340 <_malloc_r>
 80071e2:	b92a      	cbnz	r2, 80071f0 <_realloc_r+0x24>
 80071e4:	f7ff f844 	bl	8006270 <_free_r>
 80071e8:	4625      	mov	r5, r4
 80071ea:	4628      	mov	r0, r5
 80071ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f0:	f000 fa54 	bl	800769c <_malloc_usable_size_r>
 80071f4:	4284      	cmp	r4, r0
 80071f6:	4607      	mov	r7, r0
 80071f8:	d802      	bhi.n	8007200 <_realloc_r+0x34>
 80071fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071fe:	d812      	bhi.n	8007226 <_realloc_r+0x5a>
 8007200:	4621      	mov	r1, r4
 8007202:	4640      	mov	r0, r8
 8007204:	f7ff f89c 	bl	8006340 <_malloc_r>
 8007208:	4605      	mov	r5, r0
 800720a:	2800      	cmp	r0, #0
 800720c:	d0ed      	beq.n	80071ea <_realloc_r+0x1e>
 800720e:	42bc      	cmp	r4, r7
 8007210:	4622      	mov	r2, r4
 8007212:	4631      	mov	r1, r6
 8007214:	bf28      	it	cs
 8007216:	463a      	movcs	r2, r7
 8007218:	f7ff ffa4 	bl	8007164 <memcpy>
 800721c:	4631      	mov	r1, r6
 800721e:	4640      	mov	r0, r8
 8007220:	f7ff f826 	bl	8006270 <_free_r>
 8007224:	e7e1      	b.n	80071ea <_realloc_r+0x1e>
 8007226:	4635      	mov	r5, r6
 8007228:	e7df      	b.n	80071ea <_realloc_r+0x1e>

0800722a <__ssputs_r>:
 800722a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722e:	688e      	ldr	r6, [r1, #8]
 8007230:	4682      	mov	sl, r0
 8007232:	429e      	cmp	r6, r3
 8007234:	460c      	mov	r4, r1
 8007236:	4690      	mov	r8, r2
 8007238:	461f      	mov	r7, r3
 800723a:	d838      	bhi.n	80072ae <__ssputs_r+0x84>
 800723c:	898a      	ldrh	r2, [r1, #12]
 800723e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007242:	d032      	beq.n	80072aa <__ssputs_r+0x80>
 8007244:	6825      	ldr	r5, [r4, #0]
 8007246:	6909      	ldr	r1, [r1, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	eba5 0901 	sub.w	r9, r5, r1
 800724e:	6965      	ldr	r5, [r4, #20]
 8007250:	444b      	add	r3, r9
 8007252:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800725a:	106d      	asrs	r5, r5, #1
 800725c:	429d      	cmp	r5, r3
 800725e:	bf38      	it	cc
 8007260:	461d      	movcc	r5, r3
 8007262:	0553      	lsls	r3, r2, #21
 8007264:	d531      	bpl.n	80072ca <__ssputs_r+0xa0>
 8007266:	4629      	mov	r1, r5
 8007268:	f7ff f86a 	bl	8006340 <_malloc_r>
 800726c:	4606      	mov	r6, r0
 800726e:	b950      	cbnz	r0, 8007286 <__ssputs_r+0x5c>
 8007270:	230c      	movs	r3, #12
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	f8ca 3000 	str.w	r3, [sl]
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007280:	81a3      	strh	r3, [r4, #12]
 8007282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007286:	464a      	mov	r2, r9
 8007288:	6921      	ldr	r1, [r4, #16]
 800728a:	f7ff ff6b 	bl	8007164 <memcpy>
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	6126      	str	r6, [r4, #16]
 800729c:	444e      	add	r6, r9
 800729e:	6026      	str	r6, [r4, #0]
 80072a0:	463e      	mov	r6, r7
 80072a2:	6165      	str	r5, [r4, #20]
 80072a4:	eba5 0509 	sub.w	r5, r5, r9
 80072a8:	60a5      	str	r5, [r4, #8]
 80072aa:	42be      	cmp	r6, r7
 80072ac:	d900      	bls.n	80072b0 <__ssputs_r+0x86>
 80072ae:	463e      	mov	r6, r7
 80072b0:	4632      	mov	r2, r6
 80072b2:	4641      	mov	r1, r8
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	f7ff ff63 	bl	8007180 <memmove>
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	2000      	movs	r0, #0
 80072be:	1b9b      	subs	r3, r3, r6
 80072c0:	60a3      	str	r3, [r4, #8]
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	4433      	add	r3, r6
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	e7db      	b.n	8007282 <__ssputs_r+0x58>
 80072ca:	462a      	mov	r2, r5
 80072cc:	f7ff ff7e 	bl	80071cc <_realloc_r>
 80072d0:	4606      	mov	r6, r0
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d1e1      	bne.n	800729a <__ssputs_r+0x70>
 80072d6:	4650      	mov	r0, sl
 80072d8:	6921      	ldr	r1, [r4, #16]
 80072da:	f7fe ffc9 	bl	8006270 <_free_r>
 80072de:	e7c7      	b.n	8007270 <__ssputs_r+0x46>

080072e0 <_svfiprintf_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	4698      	mov	r8, r3
 80072e6:	898b      	ldrh	r3, [r1, #12]
 80072e8:	4607      	mov	r7, r0
 80072ea:	061b      	lsls	r3, r3, #24
 80072ec:	460d      	mov	r5, r1
 80072ee:	4614      	mov	r4, r2
 80072f0:	b09d      	sub	sp, #116	; 0x74
 80072f2:	d50e      	bpl.n	8007312 <_svfiprintf_r+0x32>
 80072f4:	690b      	ldr	r3, [r1, #16]
 80072f6:	b963      	cbnz	r3, 8007312 <_svfiprintf_r+0x32>
 80072f8:	2140      	movs	r1, #64	; 0x40
 80072fa:	f7ff f821 	bl	8006340 <_malloc_r>
 80072fe:	6028      	str	r0, [r5, #0]
 8007300:	6128      	str	r0, [r5, #16]
 8007302:	b920      	cbnz	r0, 800730e <_svfiprintf_r+0x2e>
 8007304:	230c      	movs	r3, #12
 8007306:	603b      	str	r3, [r7, #0]
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e0d1      	b.n	80074b2 <_svfiprintf_r+0x1d2>
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	616b      	str	r3, [r5, #20]
 8007312:	2300      	movs	r3, #0
 8007314:	9309      	str	r3, [sp, #36]	; 0x24
 8007316:	2320      	movs	r3, #32
 8007318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800731c:	2330      	movs	r3, #48	; 0x30
 800731e:	f04f 0901 	mov.w	r9, #1
 8007322:	f8cd 800c 	str.w	r8, [sp, #12]
 8007326:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074cc <_svfiprintf_r+0x1ec>
 800732a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800732e:	4623      	mov	r3, r4
 8007330:	469a      	mov	sl, r3
 8007332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007336:	b10a      	cbz	r2, 800733c <_svfiprintf_r+0x5c>
 8007338:	2a25      	cmp	r2, #37	; 0x25
 800733a:	d1f9      	bne.n	8007330 <_svfiprintf_r+0x50>
 800733c:	ebba 0b04 	subs.w	fp, sl, r4
 8007340:	d00b      	beq.n	800735a <_svfiprintf_r+0x7a>
 8007342:	465b      	mov	r3, fp
 8007344:	4622      	mov	r2, r4
 8007346:	4629      	mov	r1, r5
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff ff6e 	bl	800722a <__ssputs_r>
 800734e:	3001      	adds	r0, #1
 8007350:	f000 80aa 	beq.w	80074a8 <_svfiprintf_r+0x1c8>
 8007354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007356:	445a      	add	r2, fp
 8007358:	9209      	str	r2, [sp, #36]	; 0x24
 800735a:	f89a 3000 	ldrb.w	r3, [sl]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80a2 	beq.w	80074a8 <_svfiprintf_r+0x1c8>
 8007364:	2300      	movs	r3, #0
 8007366:	f04f 32ff 	mov.w	r2, #4294967295
 800736a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800736e:	f10a 0a01 	add.w	sl, sl, #1
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	9307      	str	r3, [sp, #28]
 8007376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800737a:	931a      	str	r3, [sp, #104]	; 0x68
 800737c:	4654      	mov	r4, sl
 800737e:	2205      	movs	r2, #5
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	4851      	ldr	r0, [pc, #324]	; (80074cc <_svfiprintf_r+0x1ec>)
 8007386:	f7ff fedf 	bl	8007148 <memchr>
 800738a:	9a04      	ldr	r2, [sp, #16]
 800738c:	b9d8      	cbnz	r0, 80073c6 <_svfiprintf_r+0xe6>
 800738e:	06d0      	lsls	r0, r2, #27
 8007390:	bf44      	itt	mi
 8007392:	2320      	movmi	r3, #32
 8007394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007398:	0711      	lsls	r1, r2, #28
 800739a:	bf44      	itt	mi
 800739c:	232b      	movmi	r3, #43	; 0x2b
 800739e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a2:	f89a 3000 	ldrb.w	r3, [sl]
 80073a6:	2b2a      	cmp	r3, #42	; 0x2a
 80073a8:	d015      	beq.n	80073d6 <_svfiprintf_r+0xf6>
 80073aa:	4654      	mov	r4, sl
 80073ac:	2000      	movs	r0, #0
 80073ae:	f04f 0c0a 	mov.w	ip, #10
 80073b2:	9a07      	ldr	r2, [sp, #28]
 80073b4:	4621      	mov	r1, r4
 80073b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ba:	3b30      	subs	r3, #48	; 0x30
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d94e      	bls.n	800745e <_svfiprintf_r+0x17e>
 80073c0:	b1b0      	cbz	r0, 80073f0 <_svfiprintf_r+0x110>
 80073c2:	9207      	str	r2, [sp, #28]
 80073c4:	e014      	b.n	80073f0 <_svfiprintf_r+0x110>
 80073c6:	eba0 0308 	sub.w	r3, r0, r8
 80073ca:	fa09 f303 	lsl.w	r3, r9, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	46a2      	mov	sl, r4
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	e7d2      	b.n	800737c <_svfiprintf_r+0x9c>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	1d19      	adds	r1, r3, #4
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	9103      	str	r1, [sp, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfbb      	ittet	lt
 80073e2:	425b      	neglt	r3, r3
 80073e4:	f042 0202 	orrlt.w	r2, r2, #2
 80073e8:	9307      	strge	r3, [sp, #28]
 80073ea:	9307      	strlt	r3, [sp, #28]
 80073ec:	bfb8      	it	lt
 80073ee:	9204      	strlt	r2, [sp, #16]
 80073f0:	7823      	ldrb	r3, [r4, #0]
 80073f2:	2b2e      	cmp	r3, #46	; 0x2e
 80073f4:	d10c      	bne.n	8007410 <_svfiprintf_r+0x130>
 80073f6:	7863      	ldrb	r3, [r4, #1]
 80073f8:	2b2a      	cmp	r3, #42	; 0x2a
 80073fa:	d135      	bne.n	8007468 <_svfiprintf_r+0x188>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	3402      	adds	r4, #2
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	9203      	str	r2, [sp, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfb8      	it	lt
 800740a:	f04f 33ff 	movlt.w	r3, #4294967295
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80074d0 <_svfiprintf_r+0x1f0>
 8007414:	2203      	movs	r2, #3
 8007416:	4650      	mov	r0, sl
 8007418:	7821      	ldrb	r1, [r4, #0]
 800741a:	f7ff fe95 	bl	8007148 <memchr>
 800741e:	b140      	cbz	r0, 8007432 <_svfiprintf_r+0x152>
 8007420:	2340      	movs	r3, #64	; 0x40
 8007422:	eba0 000a 	sub.w	r0, r0, sl
 8007426:	fa03 f000 	lsl.w	r0, r3, r0
 800742a:	9b04      	ldr	r3, [sp, #16]
 800742c:	3401      	adds	r4, #1
 800742e:	4303      	orrs	r3, r0
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007436:	2206      	movs	r2, #6
 8007438:	4826      	ldr	r0, [pc, #152]	; (80074d4 <_svfiprintf_r+0x1f4>)
 800743a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800743e:	f7ff fe83 	bl	8007148 <memchr>
 8007442:	2800      	cmp	r0, #0
 8007444:	d038      	beq.n	80074b8 <_svfiprintf_r+0x1d8>
 8007446:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <_svfiprintf_r+0x1f8>)
 8007448:	bb1b      	cbnz	r3, 8007492 <_svfiprintf_r+0x1b2>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	3307      	adds	r3, #7
 800744e:	f023 0307 	bic.w	r3, r3, #7
 8007452:	3308      	adds	r3, #8
 8007454:	9303      	str	r3, [sp, #12]
 8007456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007458:	4433      	add	r3, r6
 800745a:	9309      	str	r3, [sp, #36]	; 0x24
 800745c:	e767      	b.n	800732e <_svfiprintf_r+0x4e>
 800745e:	460c      	mov	r4, r1
 8007460:	2001      	movs	r0, #1
 8007462:	fb0c 3202 	mla	r2, ip, r2, r3
 8007466:	e7a5      	b.n	80073b4 <_svfiprintf_r+0xd4>
 8007468:	2300      	movs	r3, #0
 800746a:	f04f 0c0a 	mov.w	ip, #10
 800746e:	4619      	mov	r1, r3
 8007470:	3401      	adds	r4, #1
 8007472:	9305      	str	r3, [sp, #20]
 8007474:	4620      	mov	r0, r4
 8007476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800747a:	3a30      	subs	r2, #48	; 0x30
 800747c:	2a09      	cmp	r2, #9
 800747e:	d903      	bls.n	8007488 <_svfiprintf_r+0x1a8>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0c5      	beq.n	8007410 <_svfiprintf_r+0x130>
 8007484:	9105      	str	r1, [sp, #20]
 8007486:	e7c3      	b.n	8007410 <_svfiprintf_r+0x130>
 8007488:	4604      	mov	r4, r0
 800748a:	2301      	movs	r3, #1
 800748c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007490:	e7f0      	b.n	8007474 <_svfiprintf_r+0x194>
 8007492:	ab03      	add	r3, sp, #12
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	462a      	mov	r2, r5
 8007498:	4638      	mov	r0, r7
 800749a:	4b10      	ldr	r3, [pc, #64]	; (80074dc <_svfiprintf_r+0x1fc>)
 800749c:	a904      	add	r1, sp, #16
 800749e:	f3af 8000 	nop.w
 80074a2:	1c42      	adds	r2, r0, #1
 80074a4:	4606      	mov	r6, r0
 80074a6:	d1d6      	bne.n	8007456 <_svfiprintf_r+0x176>
 80074a8:	89ab      	ldrh	r3, [r5, #12]
 80074aa:	065b      	lsls	r3, r3, #25
 80074ac:	f53f af2c 	bmi.w	8007308 <_svfiprintf_r+0x28>
 80074b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b2:	b01d      	add	sp, #116	; 0x74
 80074b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	462a      	mov	r2, r5
 80074be:	4638      	mov	r0, r7
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <_svfiprintf_r+0x1fc>)
 80074c2:	a904      	add	r1, sp, #16
 80074c4:	f7ff f978 	bl	80067b8 <_printf_i>
 80074c8:	e7eb      	b.n	80074a2 <_svfiprintf_r+0x1c2>
 80074ca:	bf00      	nop
 80074cc:	0800e430 	.word	0x0800e430
 80074d0:	0800e436 	.word	0x0800e436
 80074d4:	0800e43a 	.word	0x0800e43a
 80074d8:	00000000 	.word	0x00000000
 80074dc:	0800722b 	.word	0x0800722b

080074e0 <_raise_r>:
 80074e0:	291f      	cmp	r1, #31
 80074e2:	b538      	push	{r3, r4, r5, lr}
 80074e4:	4604      	mov	r4, r0
 80074e6:	460d      	mov	r5, r1
 80074e8:	d904      	bls.n	80074f4 <_raise_r+0x14>
 80074ea:	2316      	movs	r3, #22
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074f6:	b112      	cbz	r2, 80074fe <_raise_r+0x1e>
 80074f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074fc:	b94b      	cbnz	r3, 8007512 <_raise_r+0x32>
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f830 	bl	8007564 <_getpid_r>
 8007504:	462a      	mov	r2, r5
 8007506:	4601      	mov	r1, r0
 8007508:	4620      	mov	r0, r4
 800750a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800750e:	f000 b817 	b.w	8007540 <_kill_r>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d00a      	beq.n	800752c <_raise_r+0x4c>
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	d103      	bne.n	8007522 <_raise_r+0x42>
 800751a:	2316      	movs	r3, #22
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	2001      	movs	r0, #1
 8007520:	e7e7      	b.n	80074f2 <_raise_r+0x12>
 8007522:	2400      	movs	r4, #0
 8007524:	4628      	mov	r0, r5
 8007526:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800752a:	4798      	blx	r3
 800752c:	2000      	movs	r0, #0
 800752e:	e7e0      	b.n	80074f2 <_raise_r+0x12>

08007530 <raise>:
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <raise+0xc>)
 8007532:	4601      	mov	r1, r0
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	f7ff bfd3 	b.w	80074e0 <_raise_r>
 800753a:	bf00      	nop
 800753c:	20000098 	.word	0x20000098

08007540 <_kill_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	2300      	movs	r3, #0
 8007544:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_kill_r+0x20>)
 8007546:	4604      	mov	r4, r0
 8007548:	4608      	mov	r0, r1
 800754a:	4611      	mov	r1, r2
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	f7fb faed 	bl	8002b2c <_kill>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	d102      	bne.n	800755c <_kill_r+0x1c>
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	b103      	cbz	r3, 800755c <_kill_r+0x1c>
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	bd38      	pop	{r3, r4, r5, pc}
 800755e:	bf00      	nop
 8007560:	20000920 	.word	0x20000920

08007564 <_getpid_r>:
 8007564:	f7fb badb 	b.w	8002b1e <_getpid>

08007568 <__sread>:
 8007568:	b510      	push	{r4, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	f000 f89c 	bl	80076ac <_read_r>
 8007574:	2800      	cmp	r0, #0
 8007576:	bfab      	itete	ge
 8007578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800757a:	89a3      	ldrhlt	r3, [r4, #12]
 800757c:	181b      	addge	r3, r3, r0
 800757e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007582:	bfac      	ite	ge
 8007584:	6563      	strge	r3, [r4, #84]	; 0x54
 8007586:	81a3      	strhlt	r3, [r4, #12]
 8007588:	bd10      	pop	{r4, pc}

0800758a <__swrite>:
 800758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	461f      	mov	r7, r3
 8007590:	898b      	ldrh	r3, [r1, #12]
 8007592:	4605      	mov	r5, r0
 8007594:	05db      	lsls	r3, r3, #23
 8007596:	460c      	mov	r4, r1
 8007598:	4616      	mov	r6, r2
 800759a:	d505      	bpl.n	80075a8 <__swrite+0x1e>
 800759c:	2302      	movs	r3, #2
 800759e:	2200      	movs	r2, #0
 80075a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a4:	f000 f868 	bl	8007678 <_lseek_r>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	4632      	mov	r2, r6
 80075ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	4628      	mov	r0, r5
 80075b4:	463b      	mov	r3, r7
 80075b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	f000 b817 	b.w	80075f0 <_write_r>

080075c2 <__sseek>:
 80075c2:	b510      	push	{r4, lr}
 80075c4:	460c      	mov	r4, r1
 80075c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ca:	f000 f855 	bl	8007678 <_lseek_r>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	bf15      	itete	ne
 80075d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075de:	81a3      	strheq	r3, [r4, #12]
 80075e0:	bf18      	it	ne
 80075e2:	81a3      	strhne	r3, [r4, #12]
 80075e4:	bd10      	pop	{r4, pc}

080075e6 <__sclose>:
 80075e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ea:	f000 b813 	b.w	8007614 <_close_r>
	...

080075f0 <_write_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	2200      	movs	r2, #0
 80075fa:	4d05      	ldr	r5, [pc, #20]	; (8007610 <_write_r+0x20>)
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7f9 fd43 	bl	800108a <_write>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_write_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_write_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	20000920 	.word	0x20000920

08007614 <_close_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	2300      	movs	r3, #0
 8007618:	4d05      	ldr	r5, [pc, #20]	; (8007630 <_close_r+0x1c>)
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	f7fb fabb 	bl	8002b9a <_close>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_close_r+0x1a>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b103      	cbz	r3, 800762e <_close_r+0x1a>
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	20000920 	.word	0x20000920

08007634 <_fstat_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	2300      	movs	r3, #0
 8007638:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_fstat_r+0x20>)
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7fb fab5 	bl	8002bb0 <_fstat>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_fstat_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_fstat_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	20000920 	.word	0x20000920

08007658 <_isatty_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	2300      	movs	r3, #0
 800765c:	4d05      	ldr	r5, [pc, #20]	; (8007674 <_isatty_r+0x1c>)
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fb fab3 	bl	8002bce <_isatty>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_isatty_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_isatty_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000920 	.word	0x20000920

08007678 <_lseek_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	4611      	mov	r1, r2
 8007680:	2200      	movs	r2, #0
 8007682:	4d05      	ldr	r5, [pc, #20]	; (8007698 <_lseek_r+0x20>)
 8007684:	602a      	str	r2, [r5, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	f7fb faab 	bl	8002be2 <_lseek>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_lseek_r+0x1e>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_lseek_r+0x1e>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	20000920 	.word	0x20000920

0800769c <_malloc_usable_size_r>:
 800769c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a0:	1f18      	subs	r0, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfbc      	itt	lt
 80076a6:	580b      	ldrlt	r3, [r1, r0]
 80076a8:	18c0      	addlt	r0, r0, r3
 80076aa:	4770      	bx	lr

080076ac <_read_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	2200      	movs	r2, #0
 80076b6:	4d05      	ldr	r5, [pc, #20]	; (80076cc <_read_r+0x20>)
 80076b8:	602a      	str	r2, [r5, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f7fb fa50 	bl	8002b60 <_read>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_read_r+0x1e>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_read_r+0x1e>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	20000920 	.word	0x20000920

080076d0 <_init>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	bf00      	nop
 80076d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d6:	bc08      	pop	{r3}
 80076d8:	469e      	mov	lr, r3
 80076da:	4770      	bx	lr

080076dc <_fini>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr
