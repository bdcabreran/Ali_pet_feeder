
lcd_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003218  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d68  08003328  08003328  00013328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008090  08008090  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08008090  08008090  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008090  08008090  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08008098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000068  080080fc  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  080080fc  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a64c  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f24  00000000  00000000  0002a6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016514  00000000  00000000  0002d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c0b0  00000000  00000000  000436f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008648a  00000000  00000000  0004f7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000d5c2e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ae0  00000000  00000000  000d5c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f0c  00000000  00000000  000d6760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800330c 	.word	0x0800330c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800330c 	.word	0x0800330c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 ff8a 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8e6 	bl	8000328 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8be 	bl	80002dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f892 	bl	8000288 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000164:	f000 f85a 	bl	800021c <MX_SPI2_Init>

  BSP_LCD_Init();
 8000168:	f000 ff4e 	bl	8001008 <BSP_LCD_Init>
  /* USER CODE BEGIN 2 */

//  BSP_LCD_SetBackColor(0x55AA);
  BSP_LCD_SetFont(&Font24);
 800016c:	4807      	ldr	r0, [pc, #28]	; (800018c <main+0x40>)
 800016e:	f000 ff83 	bl	8001078 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, "Hello LCD!", CENTER_MODE);
 8000172:	2301      	movs	r3, #1
 8000174:	4a06      	ldr	r2, [pc, #24]	; (8000190 <main+0x44>)
 8000176:	2100      	movs	r1, #0
 8000178:	2000      	movs	r0, #0
 800017a:	f000 ffb5 	bl	80010e8 <BSP_LCD_DisplayStringAt>

  BSP_LCD_DrawBitmap(0,0, (uint8_t*)&beer_60x100_16);
 800017e:	4a05      	ldr	r2, [pc, #20]	; (8000194 <main+0x48>)
 8000180:	2100      	movs	r1, #0
 8000182:	2000      	movs	r0, #0
 8000184:	f001 f840 	bl	8001208 <BSP_LCD_DrawBitmap>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000188:	e7fe      	b.n	8000188 <main+0x3c>
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	08003328 	.word	0x08003328
 8000194:	08005160 	.word	0x08005160

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	; 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f003 f8a8 	bl	80032fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ba:	2302      	movs	r3, #2
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c2:	2310      	movs	r3, #16
 80001c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c6:	2302      	movs	r3, #2
 80001c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ca:	2300      	movs	r3, #0
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d4:	f107 0318 	add.w	r3, r7, #24
 80001d8:	4618      	mov	r0, r3
 80001da:	f002 faf1 	bl	80027c0 <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001e4:	f000 f926 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2102      	movs	r1, #2
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fd5e 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800020e:	f000 f911 	bl	8000434 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <MX_SPI2_Init+0x64>)
 8000222:	4a18      	ldr	r2, [pc, #96]	; (8000284 <MX_SPI2_Init+0x68>)
 8000224:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <MX_SPI2_Init+0x64>)
 8000228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800022c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800022e:	4b14      	ldr	r3, [pc, #80]	; (8000280 <MX_SPI2_Init+0x64>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <MX_SPI2_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_SPI2_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <MX_SPI2_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_SPI2_Init+0x64>)
 8000248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800024c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <MX_SPI2_Init+0x64>)
 8000250:	2200      	movs	r2, #0
 8000252:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <MX_SPI2_Init+0x64>)
 8000256:	2200      	movs	r2, #0
 8000258:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <MX_SPI2_Init+0x64>)
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <MX_SPI2_Init+0x64>)
 8000262:	2200      	movs	r2, #0
 8000264:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <MX_SPI2_Init+0x64>)
 8000268:	220a      	movs	r2, #10
 800026a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <MX_SPI2_Init+0x64>)
 800026e:	f002 fec1 	bl	8002ff4 <HAL_SPI_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000278:	f000 f8dc 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000084 	.word	0x20000084
 8000284:	40003800 	.word	0x40003800

08000288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 800028e:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <MX_USART2_UART_Init+0x50>)
 8000290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 8000294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_USART2_UART_Init+0x4c>)
 80002c0:	f002 ff1c 	bl	80030fc <HAL_UART_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ca:	f000 f8b3 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000164 	.word	0x20000164
 80002d8:	40004400 	.word	0x40004400

080002dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <MX_DMA_Init+0x48>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a0f      	ldr	r2, [pc, #60]	; (8000324 <MX_DMA_Init+0x48>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_DMA_Init+0x48>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	200e      	movs	r0, #14
 8000300:	f002 f80f 	bl	8002322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000304:	200e      	movs	r0, #14
 8000306:	f002 f828 	bl	800235a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	200f      	movs	r0, #15
 8000310:	f002 f807 	bl	8002322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000314:	200f      	movs	r0, #15
 8000316:	f002 f820 	bl	800235a <HAL_NVIC_EnableIRQ>

}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033c:	4b38      	ldr	r3, [pc, #224]	; (8000420 <MX_GPIO_Init+0xf8>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a37      	ldr	r2, [pc, #220]	; (8000420 <MX_GPIO_Init+0xf8>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b35      	ldr	r3, [pc, #212]	; (8000420 <MX_GPIO_Init+0xf8>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0310 	and.w	r3, r3, #16
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <MX_GPIO_Init+0xf8>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a31      	ldr	r2, [pc, #196]	; (8000420 <MX_GPIO_Init+0xf8>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b2f      	ldr	r3, [pc, #188]	; (8000420 <MX_GPIO_Init+0xf8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0320 	and.w	r3, r3, #32
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_GPIO_Init+0xf8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a2b      	ldr	r2, [pc, #172]	; (8000420 <MX_GPIO_Init+0xf8>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b29      	ldr	r3, [pc, #164]	; (8000420 <MX_GPIO_Init+0xf8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <MX_GPIO_Init+0xf8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a25      	ldr	r2, [pc, #148]	; (8000420 <MX_GPIO_Init+0xf8>)
 800038a:	f043 0308 	orr.w	r3, r3, #8
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b23      	ldr	r3, [pc, #140]	; (8000420 <MX_GPIO_Init+0xf8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0308 	and.w	r3, r3, #8
 8000398:	603b      	str	r3, [r7, #0]
 800039a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2120      	movs	r1, #32
 80003a0:	4820      	ldr	r0, [pc, #128]	; (8000424 <MX_GPIO_Init+0xfc>)
 80003a2:	f002 f9d3 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80003ac:	481e      	ldr	r0, [pc, #120]	; (8000428 <MX_GPIO_Init+0x100>)
 80003ae:	f002 f9cd 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <MX_GPIO_Init+0x104>)
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	4619      	mov	r1, r3
 80003c6:	481a      	ldr	r0, [pc, #104]	; (8000430 <MX_GPIO_Init+0x108>)
 80003c8:	f002 f83c 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003cc:	2320      	movs	r3, #32
 80003ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	4810      	ldr	r0, [pc, #64]	; (8000424 <MX_GPIO_Init+0xfc>)
 80003e4:	f002 f82e 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80003e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <MX_GPIO_Init+0x100>)
 8000402:	f002 f81f 	bl	8002444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	2028      	movs	r0, #40	; 0x28
 800040c:	f001 ff89 	bl	8002322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000410:	2028      	movs	r0, #40	; 0x28
 8000412:	f001 ffa2 	bl	800235a <HAL_NVIC_EnableIRQ>

}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00
 800042c:	10110000 	.word	0x10110000
 8000430:	40011000 	.word	0x40011000

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_MspInit+0x5c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x5c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x60>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x60>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a43      	ldr	r2, [pc, #268]	; (80005cc <HAL_SPI_MspInit+0x128>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d17f      	bne.n	80005c4 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004c4:	4b42      	ldr	r3, [pc, #264]	; (80005d0 <HAL_SPI_MspInit+0x12c>)
 80004c6:	69db      	ldr	r3, [r3, #28]
 80004c8:	4a41      	ldr	r2, [pc, #260]	; (80005d0 <HAL_SPI_MspInit+0x12c>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	61d3      	str	r3, [r2, #28]
 80004d0:	4b3f      	ldr	r3, [pc, #252]	; (80005d0 <HAL_SPI_MspInit+0x12c>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	4b3c      	ldr	r3, [pc, #240]	; (80005d0 <HAL_SPI_MspInit+0x12c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a3b      	ldr	r2, [pc, #236]	; (80005d0 <HAL_SPI_MspInit+0x12c>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b39      	ldr	r3, [pc, #228]	; (80005d0 <HAL_SPI_MspInit+0x12c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0308 	and.w	r3, r3, #8
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80004f4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	2302      	movs	r3, #2
 80004fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fe:	2303      	movs	r3, #3
 8000500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	4832      	ldr	r0, [pc, #200]	; (80005d4 <HAL_SPI_MspInit+0x130>)
 800050a:	f001 ff9b 	bl	8002444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 800050e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	482c      	ldr	r0, [pc, #176]	; (80005d4 <HAL_SPI_MspInit+0x130>)
 8000524:	f001 ff8e 	bl	8002444 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000528:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 800052a:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <HAL_SPI_MspInit+0x138>)
 800052c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 8000554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000558:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800055a:	481f      	ldr	r0, [pc, #124]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 800055c:	f001 ff18 	bl	8002390 <HAL_DMA_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8000566:	f7ff ff65 	bl	8000434 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 800056e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <HAL_SPI_MspInit+0x134>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 8000578:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <HAL_SPI_MspInit+0x140>)
 800057a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 800057e:	2210      	movs	r2, #16
 8000580:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 80005a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 80005aa:	f001 fef1 	bl	8002390 <HAL_DMA_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 80005b4:	f7ff ff3e 	bl	8000434 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 80005bc:	649a      	str	r2, [r3, #72]	; 0x48
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_SPI_MspInit+0x13c>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40003800 	.word	0x40003800
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010c00 	.word	0x40010c00
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	40020044 	.word	0x40020044
 80005e0:	20000120 	.word	0x20000120
 80005e4:	40020058 	.word	0x40020058

080005e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <HAL_UART_MspInit+0x70>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d123      	bne.n	8000650 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <HAL_UART_MspInit+0x74>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <HAL_UART_MspInit+0x74>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	61d3      	str	r3, [r2, #28]
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_UART_MspInit+0x74>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_UART_MspInit+0x74>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <HAL_UART_MspInit+0x74>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_UART_MspInit+0x74>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000638:	230c      	movs	r3, #12
 800063a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HAL_UART_MspInit+0x78>)
 800064c:	f001 fefa 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40004400 	.word	0x40004400
 800065c:	40021000 	.word	0x40021000
 8000660:	40010800 	.word	0x40010800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f001 fd23 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006ba:	f002 f85f 	bl	800277c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ffe4 	bl	80006c2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f002 fddb 	bl	80032b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd25 	bl	800014c <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800070c:	08008098 	.word	0x08008098
  ldr r2, =_sbss
 8000710:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000714:	2000063c 	.word	0x2000063c

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>

0800071a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f001 faee 	bl	8001d00 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8000724:	2011      	movs	r0, #17
 8000726:	f001 fb95 	bl	8001e54 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 8000732:	2010      	movs	r0, #16
 8000734:	f001 fb8e 	bl	8001e54 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 8000738:	2000      	movs	r0, #0
 800073a:	f001 fae1 	bl	8001d00 <LCD_IO_Bl_OnOff>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}

08000742 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8000746:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8000756:	23f0      	movs	r3, #240	; 0xf0
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 800076a:	1d39      	adds	r1, r7, #4
 800076c:	2301      	movs	r3, #1
 800076e:	2203      	movs	r2, #3
 8000770:	20d3      	movs	r0, #211	; 0xd3
 8000772:	f001 fc2d 	bl	8001fd0 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <ili9341_ReadID+0x30>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d102      	bne.n	8000784 <ili9341_ReadID+0x24>
    return 0x9341;
 800077e:	f249 3341 	movw	r3, #37697	; 0x9341
 8000782:	e000      	b.n	8000786 <ili9341_ReadID+0x26>
  else
    return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	00419300 	.word	0x00419300

08000794 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <ili9341_Init+0x150>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d115      	bne.n	80007d2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80007a6:	4b4f      	ldr	r3, [pc, #316]	; (80008e4 <ili9341_Init+0x150>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <ili9341_Init+0x150>)
 80007b2:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80007b4:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <ili9341_Init+0x150>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d101      	bne.n	80007c4 <ili9341_Init+0x30>
      LCD_IO_Init();
 80007c0:	f001 fab4 	bl	8001d2c <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80007c4:	4b47      	ldr	r3, [pc, #284]	; (80008e4 <ili9341_Init+0x150>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b45      	ldr	r3, [pc, #276]	; (80008e4 <ili9341_Init+0x150>)
 80007d0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80007d2:	200a      	movs	r0, #10
 80007d4:	f001 fa88 	bl	8001ce8 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80007d8:	2001      	movs	r0, #1
 80007da:	f001 fb3b 	bl	8001e54 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80007de:	200a      	movs	r0, #10
 80007e0:	f001 fa82 	bl	8001ce8 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80007e4:	2203      	movs	r2, #3
 80007e6:	4940      	ldr	r1, [pc, #256]	; (80008e8 <ili9341_Init+0x154>)
 80007e8:	20ef      	movs	r0, #239	; 0xef
 80007ea:	f001 fbad 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80007ee:	2203      	movs	r2, #3
 80007f0:	493e      	ldr	r1, [pc, #248]	; (80008ec <ili9341_Init+0x158>)
 80007f2:	20cf      	movs	r0, #207	; 0xcf
 80007f4:	f001 fba8 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80007f8:	2204      	movs	r2, #4
 80007fa:	493d      	ldr	r1, [pc, #244]	; (80008f0 <ili9341_Init+0x15c>)
 80007fc:	20ed      	movs	r0, #237	; 0xed
 80007fe:	f001 fba3 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8000802:	2203      	movs	r2, #3
 8000804:	493b      	ldr	r1, [pc, #236]	; (80008f4 <ili9341_Init+0x160>)
 8000806:	20e8      	movs	r0, #232	; 0xe8
 8000808:	f001 fb9e 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 800080c:	2205      	movs	r2, #5
 800080e:	493a      	ldr	r1, [pc, #232]	; (80008f8 <ili9341_Init+0x164>)
 8000810:	20cb      	movs	r0, #203	; 0xcb
 8000812:	f001 fb99 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8000816:	2201      	movs	r2, #1
 8000818:	4938      	ldr	r1, [pc, #224]	; (80008fc <ili9341_Init+0x168>)
 800081a:	20f7      	movs	r0, #247	; 0xf7
 800081c:	f001 fb94 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000820:	2202      	movs	r2, #2
 8000822:	4937      	ldr	r1, [pc, #220]	; (8000900 <ili9341_Init+0x16c>)
 8000824:	20ea      	movs	r0, #234	; 0xea
 8000826:	f001 fb8f 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800082a:	2201      	movs	r2, #1
 800082c:	4935      	ldr	r1, [pc, #212]	; (8000904 <ili9341_Init+0x170>)
 800082e:	20c0      	movs	r0, #192	; 0xc0
 8000830:	f001 fb8a 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000834:	2201      	movs	r2, #1
 8000836:	4934      	ldr	r1, [pc, #208]	; (8000908 <ili9341_Init+0x174>)
 8000838:	20c1      	movs	r0, #193	; 0xc1
 800083a:	f001 fb85 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800083e:	2202      	movs	r2, #2
 8000840:	4932      	ldr	r1, [pc, #200]	; (800090c <ili9341_Init+0x178>)
 8000842:	20c5      	movs	r0, #197	; 0xc5
 8000844:	f001 fb80 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000848:	2201      	movs	r2, #1
 800084a:	4931      	ldr	r1, [pc, #196]	; (8000910 <ili9341_Init+0x17c>)
 800084c:	20c7      	movs	r0, #199	; 0xc7
 800084e:	f001 fb7b 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000852:	2201      	movs	r2, #1
 8000854:	492f      	ldr	r1, [pc, #188]	; (8000914 <ili9341_Init+0x180>)
 8000856:	2037      	movs	r0, #55	; 0x37
 8000858:	f001 fb76 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 800085c:	2201      	movs	r2, #1
 800085e:	492e      	ldr	r1, [pc, #184]	; (8000918 <ili9341_Init+0x184>)
 8000860:	203a      	movs	r0, #58	; 0x3a
 8000862:	f001 fb71 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8000866:	2202      	movs	r2, #2
 8000868:	492c      	ldr	r1, [pc, #176]	; (800091c <ili9341_Init+0x188>)
 800086a:	20b1      	movs	r0, #177	; 0xb1
 800086c:	f001 fb6c 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8000870:	2203      	movs	r2, #3
 8000872:	492b      	ldr	r1, [pc, #172]	; (8000920 <ili9341_Init+0x18c>)
 8000874:	20b6      	movs	r0, #182	; 0xb6
 8000876:	f001 fb67 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800087a:	2201      	movs	r2, #1
 800087c:	4925      	ldr	r1, [pc, #148]	; (8000914 <ili9341_Init+0x180>)
 800087e:	20f2      	movs	r0, #242	; 0xf2
 8000880:	f001 fb62 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8000884:	2201      	movs	r2, #1
 8000886:	4927      	ldr	r1, [pc, #156]	; (8000924 <ili9341_Init+0x190>)
 8000888:	2026      	movs	r0, #38	; 0x26
 800088a:	f001 fb5d 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800088e:	220f      	movs	r2, #15
 8000890:	4925      	ldr	r1, [pc, #148]	; (8000928 <ili9341_Init+0x194>)
 8000892:	20e0      	movs	r0, #224	; 0xe0
 8000894:	f001 fb58 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8000898:	220f      	movs	r2, #15
 800089a:	4924      	ldr	r1, [pc, #144]	; (800092c <ili9341_Init+0x198>)
 800089c:	20e1      	movs	r0, #225	; 0xe1
 800089e:	f001 fb53 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80008a2:	2036      	movs	r0, #54	; 0x36
 80008a4:	f001 fad6 	bl	8001e54 <LCD_IO_WriteCmd8>
 80008a8:	20e8      	movs	r0, #232	; 0xe8
 80008aa:	f001 faef 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80008ae:	2011      	movs	r0, #17
 80008b0:	f001 fad0 	bl	8001e54 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80008b4:	200a      	movs	r0, #10
 80008b6:	f001 fa17 	bl	8001ce8 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80008ba:	2300      	movs	r3, #0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	23f0      	movs	r3, #240	; 0xf0
 80008c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fa2c 	bl	8000d24 <ili9341_FillRect>
  LCD_Delay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f001 fa0b 	bl	8001ce8 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80008d2:	2029      	movs	r0, #41	; 0x29
 80008d4:	f001 fabe 	bl	8001e54 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80008d8:	200a      	movs	r0, #10
 80008da:	f001 fa05 	bl	8001ce8 <LCD_Delay>
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200001a8 	.word	0x200001a8
 80008e8:	08003334 	.word	0x08003334
 80008ec:	08003338 	.word	0x08003338
 80008f0:	0800333c 	.word	0x0800333c
 80008f4:	08003344 	.word	0x08003344
 80008f8:	08003348 	.word	0x08003348
 80008fc:	08003350 	.word	0x08003350
 8000900:	08003354 	.word	0x08003354
 8000904:	08003358 	.word	0x08003358
 8000908:	0800335c 	.word	0x0800335c
 800090c:	08003360 	.word	0x08003360
 8000910:	08003364 	.word	0x08003364
 8000914:	08003368 	.word	0x08003368
 8000918:	0800336c 	.word	0x0800336c
 800091c:	08003370 	.word	0x08003370
 8000920:	08003374 	.word	0x08003374
 8000924:	08003378 	.word	0x08003378
 8000928:	0800337c 	.word	0x0800337c
 800092c:	0800338c 	.word	0x0800338c

08000930 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	460a      	mov	r2, r1
 800093a:	80fb      	strh	r3, [r7, #6]
 800093c:	4613      	mov	r3, r2
 800093e:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000940:	202a      	movs	r0, #42	; 0x2a
 8000942:	f001 fa87 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fa9c 	bl	8001e8c <LCD_IO_WriteData8>
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fa97 	bl	8001e8c <LCD_IO_WriteData8>
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29b      	uxth	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fa90 	bl	8001e8c <LCD_IO_WriteData8>
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fa8b 	bl	8001e8c <LCD_IO_WriteData8>
 8000976:	202b      	movs	r0, #43	; 0x2b
 8000978:	f001 fa6c 	bl	8001e54 <LCD_IO_WriteCmd8>
 800097c:	88bb      	ldrh	r3, [r7, #4]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fa81 	bl	8001e8c <LCD_IO_WriteData8>
 800098a:	88bb      	ldrh	r3, [r7, #4]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fa7c 	bl	8001e8c <LCD_IO_WriteData8>
 8000994:	88bb      	ldrh	r3, [r7, #4]
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	b29b      	uxth	r3, r3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fa75 	bl	8001e8c <LCD_IO_WriteData8>
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fa70 	bl	8001e8c <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80009c6:	202a      	movs	r0, #42	; 0x2a
 80009c8:	f001 fa44 	bl	8001e54 <LCD_IO_WriteCmd8>
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	0a1b      	lsrs	r3, r3, #8
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fa59 	bl	8001e8c <LCD_IO_WriteData8>
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fa54 	bl	8001e8c <LCD_IO_WriteData8>
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fa4d 	bl	8001e8c <LCD_IO_WriteData8>
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fa48 	bl	8001e8c <LCD_IO_WriteData8>
 80009fc:	202b      	movs	r0, #43	; 0x2b
 80009fe:	f001 fa29 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fa3e 	bl	8001e8c <LCD_IO_WriteData8>
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fa39 	bl	8001e8c <LCD_IO_WriteData8>
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fa32 	bl	8001e8c <LCD_IO_WriteData8>
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fa2d 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000a32:	202c      	movs	r0, #44	; 0x2c
 8000a34:	f001 fa0e 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fa42 	bl	8001ec4 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	80fb      	strh	r3, [r7, #6]
 8000a54:	4613      	mov	r3, r2
 8000a56:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4925      	ldr	r1, [pc, #148]	; (8000af0 <ili9341_ReadPixel+0xa8>)
 8000a5c:	203a      	movs	r0, #58	; 0x3a
 8000a5e:	f001 fa73 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000a62:	202a      	movs	r0, #42	; 0x2a
 8000a64:	f001 f9f6 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fa0b 	bl	8001e8c <LCD_IO_WriteData8>
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fa06 	bl	8001e8c <LCD_IO_WriteData8>
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 f9ff 	bl	8001e8c <LCD_IO_WriteData8>
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f9fa 	bl	8001e8c <LCD_IO_WriteData8>
 8000a98:	202b      	movs	r0, #43	; 0x2b
 8000a9a:	f001 f9db 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f9f0 	bl	8001e8c <LCD_IO_WriteData8>
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f9eb 	bl	8001e8c <LCD_IO_WriteData8>
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 f9e4 	bl	8001e8c <LCD_IO_WriteData8>
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 f9df 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 8000ace:	f107 010e 	add.w	r1, r7, #14
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	202e      	movs	r0, #46	; 0x2e
 8000ad8:	f001 faa0 	bl	800201c <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000adc:	2201      	movs	r2, #1
 8000ade:	4905      	ldr	r1, [pc, #20]	; (8000af4 <ili9341_ReadPixel+0xac>)
 8000ae0:	203a      	movs	r0, #58	; 0x3a
 8000ae2:	f001 fa31 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	0800339c 	.word	0x0800339c
 8000af4:	0800336c 	.word	0x0800336c

08000af8 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4604      	mov	r4, r0
 8000b00:	4608      	mov	r0, r1
 8000b02:	4611      	mov	r1, r2
 8000b04:	461a      	mov	r2, r3
 8000b06:	4623      	mov	r3, r4
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80bb      	strh	r3, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	807b      	strh	r3, [r7, #2]
 8000b12:	4613      	mov	r3, r2
 8000b14:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000b16:	4a2a      	ldr	r2, [pc, #168]	; (8000bc0 <ili9341_SetDisplayWindow+0xc8>)
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	8013      	strh	r3, [r2, #0]
 8000b1c:	88ba      	ldrh	r2, [r7, #4]
 8000b1e:	883b      	ldrh	r3, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3b01      	subs	r3, #1
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <ili9341_SetDisplayWindow+0xcc>)
 8000b2a:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000b2c:	202a      	movs	r0, #42	; 0x2a
 8000b2e:	f001 f991 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f9a6 	bl	8001e8c <LCD_IO_WriteData8>
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 f9a1 	bl	8001e8c <LCD_IO_WriteData8>
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	4413      	add	r3, r2
 8000b50:	3b01      	subs	r3, #1
 8000b52:	121b      	asrs	r3, r3, #8
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f998 	bl	8001e8c <LCD_IO_WriteData8>
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4413      	add	r3, r2
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 f98d 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8000b72:	202b      	movs	r0, #43	; 0x2b
 8000b74:	f001 f96e 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f983 	bl	8001e8c <LCD_IO_WriteData8>
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f97e 	bl	8001e8c <LCD_IO_WriteData8>
 8000b90:	88ba      	ldrh	r2, [r7, #4]
 8000b92:	883b      	ldrh	r3, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	3b01      	subs	r3, #1
 8000b98:	121b      	asrs	r3, r3, #8
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 f975 	bl	8001e8c <LCD_IO_WriteData8>
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	883b      	ldrh	r3, [r7, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 f96a 	bl	8001e8c <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	200001aa 	.word	0x200001aa
 8000bc4:	200001ac 	.word	0x200001ac

08000bc8 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4623      	mov	r3, r4
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]
 8000be2:	4613      	mov	r3, r2
 8000be4:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8000be6:	202a      	movs	r0, #42	; 0x2a
 8000be8:	f001 f934 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 f949 	bl	8001e8c <LCD_IO_WriteData8>
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f944 	bl	8001e8c <LCD_IO_WriteData8>
 8000c04:	88ba      	ldrh	r2, [r7, #4]
 8000c06:	883b      	ldrh	r3, [r7, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	121b      	asrs	r3, r3, #8
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 f93b 	bl	8001e8c <LCD_IO_WriteData8>
 8000c16:	88bb      	ldrh	r3, [r7, #4]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	883b      	ldrh	r3, [r7, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3b01      	subs	r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 f930 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8000c2c:	202b      	movs	r0, #43	; 0x2b
 8000c2e:	f001 f911 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f926 	bl	8001e8c <LCD_IO_WriteData8>
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 f921 	bl	8001e8c <LCD_IO_WriteData8>
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 f91a 	bl	8001e8c <LCD_IO_WriteData8>
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 f915 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8000c62:	883a      	ldrh	r2, [r7, #0]
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	4619      	mov	r1, r3
 8000c68:	202c      	movs	r0, #44	; 0x2c
 8000c6a:	f001 f947 	bl	8001efc <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}

08000c76 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000c76:	b590      	push	{r4, r7, lr}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	4611      	mov	r1, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	4623      	mov	r3, r4
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4603      	mov	r3, r0
 8000c8a:	80bb      	strh	r3, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
 8000c90:	4613      	mov	r3, r2
 8000c92:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8000c94:	202a      	movs	r0, #42	; 0x2a
 8000c96:	f001 f8dd 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f8f2 	bl	8001e8c <LCD_IO_WriteData8>
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 f8ed 	bl	8001e8c <LCD_IO_WriteData8>
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 f8e6 	bl	8001e8c <LCD_IO_WriteData8>
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 f8e1 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8000cca:	202b      	movs	r0, #43	; 0x2b
 8000ccc:	f001 f8c2 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	0a1b      	lsrs	r3, r3, #8
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 f8d7 	bl	8001e8c <LCD_IO_WriteData8>
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f8d2 	bl	8001e8c <LCD_IO_WriteData8>
 8000ce8:	887a      	ldrh	r2, [r7, #2]
 8000cea:	883b      	ldrh	r3, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	121b      	asrs	r3, r3, #8
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 f8c9 	bl	8001e8c <LCD_IO_WriteData8>
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	883b      	ldrh	r3, [r7, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 f8be 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8000d10:	883a      	ldrh	r2, [r7, #0]
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4619      	mov	r1, r3
 8000d16:	202c      	movs	r0, #44	; 0x2c
 8000d18:	f001 f8f0 	bl	8001efc <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}

08000d24 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	4623      	mov	r3, r4
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	4603      	mov	r3, r0
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000d42:	202a      	movs	r0, #42	; 0x2a
 8000d44:	f001 f886 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 f89b 	bl	8001e8c <LCD_IO_WriteData8>
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 f896 	bl	8001e8c <LCD_IO_WriteData8>
 8000d60:	88fa      	ldrh	r2, [r7, #6]
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	4413      	add	r3, r2
 8000d66:	3b01      	subs	r3, #1
 8000d68:	121b      	asrs	r3, r3, #8
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f88d 	bl	8001e8c <LCD_IO_WriteData8>
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 f882 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000d88:	202b      	movs	r0, #43	; 0x2b
 8000d8a:	f001 f863 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 f878 	bl	8001e8c <LCD_IO_WriteData8>
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 f873 	bl	8001e8c <LCD_IO_WriteData8>
 8000da6:	88ba      	ldrh	r2, [r7, #4]
 8000da8:	883b      	ldrh	r3, [r7, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	3b01      	subs	r3, #1
 8000dae:	121b      	asrs	r3, r3, #8
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 f86a 	bl	8001e8c <LCD_IO_WriteData8>
 8000db8:	88bb      	ldrh	r3, [r7, #4]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	883b      	ldrh	r3, [r7, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 f85f 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	883a      	ldrh	r2, [r7, #0]
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	8b3b      	ldrh	r3, [r7, #24]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	202c      	movs	r0, #44	; 0x2c
 8000dde:	f001 f88d 	bl	8001efc <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd90      	pop	{r4, r7, pc}
	...

08000dec <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	603a      	str	r2, [r7, #0]
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e02:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000e0a:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 8000e1e:	2036      	movs	r0, #54	; 0x36
 8000e20:	f001 f818 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000e24:	20a8      	movs	r0, #168	; 0xa8
 8000e26:	f001 f831 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 8000e2a:	202b      	movs	r0, #43	; 0x2b
 8000e2c:	f001 f812 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <ili9341_DrawBitmap+0xb0>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8000e38:	121b      	asrs	r3, r3, #8
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f825 	bl	8001e8c <LCD_IO_WriteData8>
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <ili9341_DrawBitmap+0xb0>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	f06f 0310 	mvn.w	r3, #16
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f81b 	bl	8001e8c <LCD_IO_WriteData8>
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <ili9341_DrawBitmap+0xb4>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8000e5e:	121b      	asrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 f812 	bl	8001e8c <LCD_IO_WriteData8>
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <ili9341_DrawBitmap+0xb4>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	f06f 0310 	mvn.w	r3, #16
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f808 	bl	8001e8c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	202c      	movs	r0, #44	; 0x2c
 8000e82:	f001 f881 	bl	8001f88 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8000e86:	2036      	movs	r0, #54	; 0x36
 8000e88:	f000 ffe4 	bl	8001e54 <LCD_IO_WriteCmd8>
 8000e8c:	20e8      	movs	r0, #232	; 0xe8
 8000e8e:	f000 fffd 	bl	8001e8c <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200001ac 	.word	0x200001ac
 8000ea0:	200001aa 	.word	0x200001aa

08000ea4 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80bb      	strh	r3, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	807b      	strh	r3, [r7, #2]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000ec2:	883b      	ldrh	r3, [r7, #0]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88b9      	ldrh	r1, [r7, #4]
 8000ec8:	88f8      	ldrh	r0, [r7, #6]
 8000eca:	f7ff fe15 	bl	8000af8 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	883a      	ldrh	r2, [r7, #0]
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	69b9      	ldr	r1, [r7, #24]
 8000eda:	202c      	movs	r0, #44	; 0x2c
 8000edc:	f001 f854 	bl	8001f88 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	80fb      	strh	r3, [r7, #6]
 8000efa:	4603      	mov	r3, r0
 8000efc:	80bb      	strh	r3, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	807b      	strh	r3, [r7, #2]
 8000f02:	4613      	mov	r3, r2
 8000f04:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000f06:	883b      	ldrh	r3, [r7, #0]
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	88b9      	ldrh	r1, [r7, #4]
 8000f0c:	88f8      	ldrh	r0, [r7, #6]
 8000f0e:	f7ff fdf3 	bl	8000af8 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000f12:	2201      	movs	r2, #1
 8000f14:	490b      	ldr	r1, [pc, #44]	; (8000f44 <ili9341_ReadRGBImage+0x5c>)
 8000f16:	203a      	movs	r0, #58	; 0x3a
 8000f18:	f001 f816 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	883a      	ldrh	r2, [r7, #0]
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	2301      	movs	r3, #1
 8000f28:	69b9      	ldr	r1, [r7, #24]
 8000f2a:	202e      	movs	r0, #46	; 0x2e
 8000f2c:	f001 f876 	bl	800201c <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000f30:	2201      	movs	r2, #1
 8000f32:	4905      	ldr	r1, [pc, #20]	; (8000f48 <ili9341_ReadRGBImage+0x60>)
 8000f34:	203a      	movs	r0, #58	; 0x3a
 8000f36:	f001 f807 	bl	8001f48 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	0800339c 	.word	0x0800339c
 8000f48:	0800336c 	.word	0x0800336c

08000f4c <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	460b      	mov	r3, r1
 8000f58:	80bb      	strh	r3, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <ili9341_Scroll+0xb4>)
 8000f60:	88db      	ldrh	r3, [r3, #6]
 8000f62:	88ba      	ldrh	r2, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d104      	bne.n	8000f72 <ili9341_Scroll+0x26>
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <ili9341_Scroll+0xb4>)
 8000f6a:	885b      	ldrh	r3, [r3, #2]
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d013      	beq.n	8000f9a <ili9341_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <ili9341_Scroll+0xb4>)
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <ili9341_Scroll+0xb4>)
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8000f7e:	88ba      	ldrh	r2, [r7, #4]
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <ili9341_Scroll+0xb4>)
 8000f8e:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 8000f90:	2203      	movs	r2, #3
 8000f92:	491c      	ldr	r1, [pc, #112]	; (8001004 <ili9341_Scroll+0xb8>)
 8000f94:	2033      	movs	r0, #51	; 0x33
 8000f96:	f000 fff7 	bl	8001f88 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	4a18      	ldr	r2, [pc, #96]	; (8001000 <ili9341_Scroll+0xb4>)
 8000fa0:	8892      	ldrh	r2, [r2, #4]
 8000fa2:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fa6:	fb01 f202 	mul.w	r2, r1, r2
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da0a      	bge.n	8000fcc <ili9341_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <ili9341_Scroll+0xb4>)
 8000fb8:	889a      	ldrh	r2, [r3, #4]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <ili9341_Scroll+0xb4>)
 8000fc2:	885b      	ldrh	r3, [r3, #2]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	e005      	b.n	8000fd8 <ili9341_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <ili9341_Scroll+0xb4>)
 8000fce:	885a      	ldrh	r2, [r3, #2]
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8000fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fdc:	4a08      	ldr	r2, [pc, #32]	; (8001000 <ili9341_Scroll+0xb4>)
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d009      	beq.n	8000ff8 <ili9341_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 8000fe4:	88fa      	ldrh	r2, [r7, #6]
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <ili9341_Scroll+0xb4>)
 8000fe8:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <ili9341_Scroll+0xb4>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2037      	movs	r0, #55	; 0x37
 8000ff4:	f000 ff82 	bl	8001efc <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200001b0 	.word	0x200001b0
 8001004:	200001b2 	.word	0x200001b2

08001008 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <BSP_LCD_Init+0x34>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <BSP_LCD_Init+0x38>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <BSP_LCD_Init+0x38>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <BSP_LCD_Init+0x38>)
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <BSP_LCD_Init+0x3c>)
 800102c:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000058 	.word	0x20000058
 8001040:	200001b8 	.word	0x200001b8
 8001044:	20000008 	.word	0x20000008

08001048 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <BSP_LCD_GetXSize+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001052:	4798      	blx	r3
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000058 	.word	0x20000058

08001060 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <BSP_LCD_GetYSize+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	4798      	blx	r3
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000058 	.word	0x20000058

08001078 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001080:	4a03      	ldr	r2, [pc, #12]	; (8001090 <BSP_LCD_SetFont+0x18>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6093      	str	r3, [r2, #8]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	200001b8 	.word	0x200001b8

08001094 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	80bb      	strh	r3, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <BSP_LCD_DisplayChar+0x50>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <BSP_LCD_DisplayChar+0x50>)
 80010b2:	6889      	ldr	r1, [r1, #8]
 80010b4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80010b6:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <BSP_LCD_DisplayChar+0x50>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	3307      	adds	r3, #7
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da00      	bge.n	80010c8 <BSP_LCD_DisplayChar+0x34>
 80010c6:	3307      	adds	r3, #7
 80010c8:	10db      	asrs	r3, r3, #3
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80010ce:	441a      	add	r2, r3
 80010d0:	88b9      	ldrh	r1, [r7, #4]
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f8f1 	bl	80012bc <DrawChar>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001b8 	.word	0x200001b8

080010e8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60ba      	str	r2, [r7, #8]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	81fb      	strh	r3, [r7, #14]
 80010f6:	460b      	mov	r3, r1
 80010f8:	81bb      	strh	r3, [r7, #12]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80010fe:	2301      	movs	r3, #1
 8001100:	83fb      	strh	r3, [r7, #30]
 8001102:	2300      	movs	r3, #0
 8001104:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001112:	e002      	b.n	800111a <BSP_LCD_DisplayStringAt+0x32>
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	3301      	adds	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f6      	bne.n	8001114 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001126:	f7ff ff8f 	bl	8001048 <BSP_LCD_GetXSize>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <BSP_LCD_DisplayStringAt+0x11c>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	fbb2 f3f3 	udiv	r3, r2, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d014      	beq.n	800116c <BSP_LCD_DisplayStringAt+0x84>
 8001142:	2b03      	cmp	r3, #3
 8001144:	dc23      	bgt.n	800118e <BSP_LCD_DisplayStringAt+0xa6>
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <BSP_LCD_DisplayStringAt+0x68>
 800114a:	2b02      	cmp	r3, #2
 800114c:	d011      	beq.n	8001172 <BSP_LCD_DisplayStringAt+0x8a>
 800114e:	e01e      	b.n	800118e <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <BSP_LCD_DisplayStringAt+0x11c>)
 8001158:	6892      	ldr	r2, [r2, #8]
 800115a:	8892      	ldrh	r2, [r2, #4]
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	4413      	add	r3, r2
 8001168:	83fb      	strh	r3, [r7, #30]
      break;
 800116a:	e013      	b.n	8001194 <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800116c:	89fb      	ldrh	r3, [r7, #14]
 800116e:	83fb      	strh	r3, [r7, #30]
      break;
 8001170:	e010      	b.n	8001194 <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b29b      	uxth	r3, r3
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <BSP_LCD_DisplayStringAt+0x11c>)
 800117c:	6892      	ldr	r2, [r2, #8]
 800117e:	8892      	ldrh	r2, [r2, #4]
 8001180:	fb02 f303 	mul.w	r3, r2, r3
 8001184:	b29a      	uxth	r2, r3
 8001186:	89fb      	ldrh	r3, [r7, #14]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	83fb      	strh	r3, [r7, #30]
      break;
 800118c:	e002      	b.n	8001194 <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	83fb      	strh	r3, [r7, #30]
      break;
 8001192:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001194:	e012      	b.n	80011bc <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	89b9      	ldrh	r1, [r7, #12]
 800119c:	8bfb      	ldrh	r3, [r7, #30]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff78 	bl	8001094 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <BSP_LCD_DisplayStringAt+0x11c>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	889a      	ldrh	r2, [r3, #4]
 80011aa:	8bfb      	ldrh	r3, [r7, #30]
 80011ac:	4413      	add	r3, r2
 80011ae:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	3301      	adds	r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
    i++;
 80011b6:	8bbb      	ldrh	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf14      	ite	ne
 80011c4:	2301      	movne	r3, #1
 80011c6:	2300      	moveq	r3, #0
 80011c8:	b2dc      	uxtb	r4, r3
 80011ca:	f7ff ff3d 	bl	8001048 <BSP_LCD_GetXSize>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4619      	mov	r1, r3
 80011d2:	8bbb      	ldrh	r3, [r7, #28]
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <BSP_LCD_DisplayStringAt+0x11c>)
 80011d6:	6892      	ldr	r2, [r2, #8]
 80011d8:	8892      	ldrh	r2, [r2, #4]
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	1acb      	subs	r3, r1, r3
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <BSP_LCD_DisplayStringAt+0x11c>)
 80011e4:	6892      	ldr	r2, [r2, #8]
 80011e6:	8892      	ldrh	r2, [r2, #4]
 80011e8:	4293      	cmp	r3, r2
 80011ea:	bfac      	ite	ge
 80011ec:	2301      	movge	r3, #1
 80011ee:	2300      	movlt	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4023      	ands	r3, r4
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1cd      	bne.n	8001196 <BSP_LCD_DisplayStringAt+0xae>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3724      	adds	r7, #36	; 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	200001b8 	.word	0x200001b8

08001208 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	603a      	str	r2, [r7, #0]
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	460b      	mov	r3, r1
 8001216:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3312      	adds	r3, #18
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3313      	adds	r3, #19
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	441a      	add	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3314      	adds	r3, #20
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	441a      	add	r2, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	3315      	adds	r3, #21
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	061b      	lsls	r3, r3, #24
 8001244:	4413      	add	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3316      	adds	r3, #22
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3317      	adds	r3, #23
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	441a      	add	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3318      	adds	r3, #24
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	041b      	lsls	r3, r3, #16
 8001262:	441a      	add	r2, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3319      	adds	r3, #25
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	061b      	lsls	r3, r3, #24
 800126c:	4413      	add	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	b29b      	uxth	r3, r3
 8001278:	88b9      	ldrh	r1, [r7, #4]
 800127a:	88f8      	ldrh	r0, [r7, #6]
 800127c:	f000 f910 	bl	80014a0 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <BSP_LCD_DrawBitmap+0xb0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <BSP_LCD_DrawBitmap+0xb0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	88b9      	ldrh	r1, [r7, #4]
 8001292:	88f8      	ldrh	r0, [r7, #6]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001298:	f7ff fed6 	bl	8001048 <BSP_LCD_GetXSize>
 800129c:	4603      	mov	r3, r0
 800129e:	461c      	mov	r4, r3
 80012a0:	f7ff fede 	bl	8001060 <BSP_LCD_GetYSize>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4622      	mov	r2, r4
 80012a8:	2100      	movs	r1, #0
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f8f8 	bl	80014a0 <SetDisplayWindow>
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	20000058 	.word	0x20000058

080012bc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	603a      	str	r2, [r7, #0]
 80012c6:	80fb      	strh	r3, [r7, #6]
 80012c8:	460b      	mov	r3, r1
 80012ca:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	82fb      	strh	r3, [r7, #22]
 80012dc:	2300      	movs	r3, #0
 80012de:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 80012ec:	4b63      	ldr	r3, [pc, #396]	; (800147c <DrawChar+0x1c0>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	88db      	ldrh	r3, [r3, #6]
 80012f2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80012f4:	4b61      	ldr	r3, [pc, #388]	; (800147c <DrawChar+0x1c0>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80012fc:	8afb      	ldrh	r3, [r7, #22]
 80012fe:	8aba      	ldrh	r2, [r7, #20]
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	b29b      	uxth	r3, r3
 8001306:	331b      	adds	r3, #27
 8001308:	b29b      	uxth	r3, r3
 800130a:	4a5d      	ldr	r2, [pc, #372]	; (8001480 <DrawChar+0x1c4>)
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b29b      	uxth	r3, r3
 8001310:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8001312:	8afb      	ldrh	r3, [r7, #22]
 8001314:	8aba      	ldrh	r2, [r7, #20]
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	331b      	adds	r3, #27
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	141a      	asrs	r2, r3, #16
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <DrawChar+0x1c8>)
 8001322:	b292      	uxth	r2, r2
 8001324:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <DrawChar+0x1cc>)
 8001328:	2236      	movs	r2, #54	; 0x36
 800132a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 800132c:	4a57      	ldr	r2, [pc, #348]	; (800148c <DrawChar+0x1d0>)
 800132e:	8abb      	ldrh	r3, [r7, #20]
 8001330:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8001332:	8abb      	ldrh	r3, [r7, #20]
 8001334:	141a      	asrs	r2, r3, #16
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <DrawChar+0x1d4>)
 8001338:	b292      	uxth	r2, r2
 800133a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 800133c:	4a55      	ldr	r2, [pc, #340]	; (8001494 <DrawChar+0x1d8>)
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8001342:	8afb      	ldrh	r3, [r7, #22]
 8001344:	141a      	asrs	r2, r3, #16
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <DrawChar+0x1dc>)
 8001348:	b292      	uxth	r2, r2
 800134a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 800134c:	8abb      	ldrh	r3, [r7, #20]
 800134e:	3307      	adds	r3, #7
 8001350:	2b00      	cmp	r3, #0
 8001352:	da00      	bge.n	8001356 <DrawChar+0x9a>
 8001354:	3307      	adds	r3, #7
 8001356:	10db      	asrs	r3, r3, #3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	b2da      	uxtb	r2, r3
 800135e:	8abb      	ldrh	r3, [r7, #20]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	e078      	b.n	800145e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800136c:	8abb      	ldrh	r3, [r7, #20]
 800136e:	3307      	adds	r3, #7
 8001370:	2b00      	cmp	r3, #0
 8001372:	da00      	bge.n	8001376 <DrawChar+0xba>
 8001374:	3307      	adds	r3, #7
 8001376:	10db      	asrs	r3, r3, #3
 8001378:	461a      	mov	r2, r3
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8001386:	8abb      	ldrh	r3, [r7, #20]
 8001388:	3b11      	subs	r3, #17
 800138a:	2b07      	cmp	r3, #7
 800138c:	d80c      	bhi.n	80013a8 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	041a      	lsls	r2, r3, #16
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4313      	orrs	r3, r2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	3202      	adds	r2, #2
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 80013a8:	8abb      	ldrh	r3, [r7, #20]
 80013aa:	3b09      	subs	r3, #9
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d807      	bhi.n	80013c0 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	3201      	adds	r2, #1
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 80013c0:	8abb      	ldrh	r3, [r7, #20]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	d802      	bhi.n	80013ce <DrawChar+0x112>
    {
      line =  pchar[0];
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	e03d      	b.n	8001450 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 80013d4:	8afa      	ldrh	r2, [r7, #22]
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	8aba      	ldrh	r2, [r7, #20]
 80013de:	fb03 f202 	mul.w	r2, r3, r2
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	4413      	add	r3, r2
 80013e6:	331b      	adds	r3, #27
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 80013ec:	8aba      	ldrh	r2, [r7, #20]
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	1ad2      	subs	r2, r2, r3
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	4413      	add	r3, r2
 80013f6:	3b01      	subs	r3, #1
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d010      	beq.n	800142a <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <DrawChar+0x1c0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b2d9      	uxtb	r1, r3
 800140e:	4a23      	ldr	r2, [pc, #140]	; (800149c <DrawChar+0x1e0>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4413      	add	r3, r2
 8001414:	460a      	mov	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <DrawChar+0x1c0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0a1a      	lsrs	r2, r3, #8
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	3301      	adds	r3, #1
 8001422:	b2d1      	uxtb	r1, r2
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <DrawChar+0x1e0>)
 8001426:	54d1      	strb	r1, [r2, r3]
 8001428:	e00f      	b.n	800144a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <DrawChar+0x1c0>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	b2d9      	uxtb	r1, r3
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <DrawChar+0x1e0>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4413      	add	r3, r2
 8001436:	460a      	mov	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <DrawChar+0x1c0>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0a1a      	lsrs	r2, r3, #8
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	3301      	adds	r3, #1
 8001444:	b2d1      	uxtb	r1, r2
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <DrawChar+0x1e0>)
 8001448:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	3301      	adds	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	8abb      	ldrh	r3, [r7, #20]
 8001452:	6a3a      	ldr	r2, [r7, #32]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3bd      	bcc.n	80013d4 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	3301      	adds	r3, #1
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	8afb      	ldrh	r3, [r7, #22]
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	429a      	cmp	r2, r3
 8001464:	d382      	bcc.n	800136c <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8001466:	88b9      	ldrh	r1, [r7, #4]
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <DrawChar+0x1e0>)
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fecb 	bl	8001208 <BSP_LCD_DrawBitmap>
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001b8 	.word	0x200001b8
 8001480:	200001c6 	.word	0x200001c6
 8001484:	200001c8 	.word	0x200001c8
 8001488:	200001ce 	.word	0x200001ce
 800148c:	200001d6 	.word	0x200001d6
 8001490:	200001d8 	.word	0x200001d8
 8001494:	200001da 	.word	0x200001da
 8001498:	200001dc 	.word	0x200001dc
 800149c:	200001c4 	.word	0x200001c4

080014a0 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	4623      	mov	r3, r4
 80014b0:	80fb      	strh	r3, [r7, #6]
 80014b2:	4603      	mov	r3, r0
 80014b4:	80bb      	strh	r3, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]
 80014ba:	4613      	mov	r3, r2
 80014bc:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <SetDisplayWindow+0x40>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SetDisplayWindow+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	69dc      	ldr	r4, [r3, #28]
 80014ce:	883b      	ldrh	r3, [r7, #0]
 80014d0:	887a      	ldrh	r2, [r7, #2]
 80014d2:	88b9      	ldrh	r1, [r7, #4]
 80014d4:	88f8      	ldrh	r0, [r7, #6]
 80014d6:	47a0      	blx	r4
  }  
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	20000058 	.word	0x20000058

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4906      	ldr	r1, [pc, #24]	; (8001518 <__NVIC_EnableIRQ+0x34>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <LcdDirRead+0x70>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <LcdDirRead+0x70>)
 8001582:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001586:	6013      	str	r3, [r2, #0]
  while(d--)
 8001588:	e008      	b.n	800159c <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <LcdDirRead+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8001590:	2000      	movs	r0, #0
 8001592:	f000 fb99 	bl	8001cc8 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <LcdDirRead+0x74>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  while(d--)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	1e5a      	subs	r2, r3, #1
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f1      	bne.n	800158a <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <LcdDirRead+0x70>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <LcdDirRead+0x70>)
 80015b0:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80015b4:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80015b6:	e002      	b.n	80015be <LcdDirRead+0x4e>
    d = SPIX->DR;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <LcdDirRead+0x78>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <LcdDirRead+0x7c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f8      	bne.n	80015b8 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <LcdDirRead+0x78>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <LcdDirRead+0x78>)
 80015d0:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010c04 	.word	0x40010c04
 80015e4:	422181b4 	.word	0x422181b4
 80015e8:	40003800 	.word	0x40003800
 80015ec:	42070100 	.word	0x42070100

080015f0 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <LcdDirWrite+0x5c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <LcdDirWrite+0x5c>)
 80015fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001600:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001602:	e002      	b.n	800160a <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <LcdDirWrite+0x5c>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <LcdDirWrite+0x60>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f8      	bne.n	8001604 <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <LcdDirWrite+0x5c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <LcdDirWrite+0x5c>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fb50 	bl	8001cc8 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001628:	e002      	b.n	8001630 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <LcdDirWrite+0x5c>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <LcdDirWrite+0x60>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f8      	bne.n	800162a <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <LcdDirWrite+0x5c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a03      	ldr	r2, [pc, #12]	; (800164c <LcdDirWrite+0x5c>)
 800163e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40003800 	.word	0x40003800
 8001650:	42070100 	.word	0x42070100

08001654 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <LcdWrite8+0x2c>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8001664:	2002      	movs	r0, #2
 8001666:	f000 fb2f 	bl	8001cc8 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800166a:	bf00      	nop
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <LcdWrite8+0x30>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1fb      	bne.n	800166c <LcdWrite8+0x18>
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40003800 	.word	0x40003800
 8001684:	4207011c 	.word	0x4207011c

08001688 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <LcdCmdWrite8+0x34>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <LcdCmdWrite8+0x38>)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 800169e:	2002      	movs	r0, #2
 80016a0:	f000 fb12 	bl	8001cc8 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80016a4:	bf00      	nop
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <LcdCmdWrite8+0x3c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1fb      	bne.n	80016a6 <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <LcdCmdWrite8+0x34>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	422181ac 	.word	0x422181ac
 80016c0:	40003800 	.word	0x40003800
 80016c4:	4207011c 	.word	0x4207011c

080016c8 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <LcdWrite16+0x2c>)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 80016d8:	2001      	movs	r0, #1
 80016da:	f000 faf5 	bl	8001cc8 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80016de:	bf00      	nop
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <LcdWrite16+0x30>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1fb      	bne.n	80016e0 <LcdWrite16+0x18>
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40003800 	.word	0x40003800
 80016f8:	4207011c 	.word	0x4207011c

080016fc <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8001700:	bf00      	nop
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <WaitForDmaEnd+0x18>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1fb      	bne.n	8001702 <WaitForDmaEnd+0x6>
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	2000052c 	.word	0x2000052c

08001718 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <DMA1_Channel5_IRQHandler+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d023      	beq.n	8001770 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <DMA1_Channel5_IRQHandler+0x64>)
 800172a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172e:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <DMA1_Channel5_IRQHandler+0x68>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001736:	bf00      	nop
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <DMA1_Channel5_IRQHandler+0x68>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f9      	bne.n	8001738 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <DMA1_Channel5_IRQHandler+0x6c>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800174a:	bf00      	nop
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <DMA1_Channel5_IRQHandler+0x70>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1fb      	bne.n	800174c <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 fab7 	bl	8001cc8 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <DMA1_Channel5_IRQHandler+0x74>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d102      	bne.n	8001768 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <DMA1_Channel5_IRQHandler+0x78>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <DMA1_Channel5_IRQHandler+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 800176e:	e003      	b.n	8001778 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <DMA1_Channel5_IRQHandler+0x64>)
 8001772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001776:	605a      	str	r2, [r3, #4]
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020000 	.word	0x40020000
 8001780:	40020058 	.word	0x40020058
 8001784:	42070084 	.word	0x42070084
 8001788:	4207011c 	.word	0x4207011c
 800178c:	2000052c 	.word	0x2000052c
 8001790:	422181b0 	.word	0x422181b0

08001794 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <LCD_IO_WriteMultiData+0x74>)
 80017a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017a6:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <LCD_IO_WriteMultiData+0x78>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <LCD_IO_WriteMultiData+0x78>)
 80017ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017b2:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 80017ba:	bf00      	nop
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 80017c8:	4a11      	ldr	r2, [pc, #68]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017d0:	4a10      	ldr	r2, [pc, #64]	; (8001814 <LCD_IO_WriteMultiData+0x80>)
 80017d2:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 80017da:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <LCD_IO_WriteMultiData+0x84>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <LCD_IO_WriteMultiData+0x78>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <LCD_IO_WriteMultiData+0x78>)
 80017ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f0:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a06      	ldr	r2, [pc, #24]	; (8001810 <LCD_IO_WriteMultiData+0x7c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6013      	str	r3, [r2, #0]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40020000 	.word	0x40020000
 800180c:	40003800 	.word	0x40003800
 8001810:	40020058 	.word	0x40020058
 8001814:	4000380c 	.word	0x4000380c
 8001818:	42070084 	.word	0x42070084

0800181c <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <LCD_IO_WriteMultiData8+0x98>)
 8001834:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <LCD_IO_WriteMultiData8+0x98>)
 8001838:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 800183a:	f241 0312 	movw	r3, #4114	; 0x1012
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e030      	b.n	80018a4 <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001842:	f241 0392 	movw	r3, #4242	; 0x1092
 8001846:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8001848:	e02c      	b.n	80018a4 <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001850:	4293      	cmp	r3, r2
 8001852:	d80f      	bhi.n	8001874 <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <LCD_IO_WriteMultiData8+0x9c>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff ff98 	bl	8001794 <LCD_IO_WriteMultiData>
      Size = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01a      	beq.n	80018a4 <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 800186e:	f7ff ff45 	bl	80016fc <WaitForDmaEnd>
 8001872:	e017      	b.n	80018a4 <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <LCD_IO_WriteMultiData8+0x9c>)
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7ff ff87 	bl	8001794 <LCD_IO_WriteMultiData>
      if(dinc)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001892:	33fe      	adds	r3, #254	; 0xfe
 8001894:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800189c:	3bfe      	subs	r3, #254	; 0xfe
 800189e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 80018a0:	f7ff ff2c 	bl	80016fc <WaitForDmaEnd>
  while(Size)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1cf      	bne.n	800184a <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000530 	.word	0x20000530
 80018b8:	2000052c 	.word	0x2000052c

080018bc <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	881a      	ldrh	r2, [r3, #0]
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <LCD_IO_WriteMultiData16+0xdc>)
 80018d4:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <LCD_IO_WriteMultiData16+0xdc>)
 80018d8:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 80018da:	f241 5312 	movw	r3, #5394	; 0x1512
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e051      	b.n	8001986 <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 80018e2:	f241 5392 	movw	r3, #5522	; 0x1592
 80018e6:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 80018e8:	e04d      	b.n	8001986 <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d80f      	bhi.n	8001914 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <LCD_IO_WriteMultiData16+0xe0>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff ff48 	bl	8001794 <LCD_IO_WriteMultiData>
      Size = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03b      	beq.n	8001986 <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 800190e:	f7ff fef5 	bl	80016fc <WaitForDmaEnd>
 8001912:	e038      	b.n	8001986 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <LCD_IO_WriteMultiData16+0xe4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d81b      	bhi.n	8001954 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <LCD_IO_WriteMultiData16+0xe0>)
 800191e:	2202      	movs	r2, #2
 8001920:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001928:	3bfe      	subs	r3, #254	; 0xfe
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4619      	mov	r1, r3
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7ff ff30 	bl	8001794 <LCD_IO_WriteMultiData>
      if(dinc)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <LCD_IO_WriteMultiData16+0xe8>)
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8001948:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800194c:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 800194e:	f7ff fed5 	bl	80016fc <WaitForDmaEnd>
 8001952:	e018      	b.n	8001986 <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <LCD_IO_WriteMultiData16+0xe0>)
 8001956:	2202      	movs	r2, #2
 8001958:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff ff17 	bl	8001794 <LCD_IO_WriteMultiData>
      if(dinc)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8001972:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001976:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800197e:	3bfe      	subs	r3, #254	; 0xfe
 8001980:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001982:	f7ff febb 	bl	80016fc <WaitForDmaEnd>
  while(Size)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ae      	bne.n	80018ea <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000532 	.word	0x20000532
 800199c:	2000052c 	.word	0x2000052c
 80019a0:	0001fffb 	.word	0x0001fffb
 80019a4:	7fff0002 	.word	0x7fff0002

080019a8 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <DMA1_Channel4_IRQHandler+0x98>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d03a      	beq.n	8001a30 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <DMA1_Channel4_IRQHandler+0x98>)
 80019bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c0:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <DMA1_Channel4_IRQHandler+0x9c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80019c8:	e002      	b.n	80019d0 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <DMA1_Channel4_IRQHandler+0xa0>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <DMA1_Channel4_IRQHandler+0xa4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f8      	bne.n	80019ca <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <DMA1_Channel4_IRQHandler+0xa8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80019e4:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <DMA1_Channel4_IRQHandler+0xa8>)
 80019e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ea:	f043 0318 	orr.w	r3, r3, #24
 80019ee:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f000 f969 	bl	8001cc8 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80019f6:	e003      	b.n	8001a00 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <DMA1_Channel4_IRQHandler+0xa8>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <DMA1_Channel4_IRQHandler+0xa4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f7      	bne.n	80019f8 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <DMA1_Channel4_IRQHandler+0xa8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <DMA1_Channel4_IRQHandler+0xa8>)
 8001a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a12:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <DMA1_Channel4_IRQHandler+0xac>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001a1a:	bf00      	nop
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <DMA1_Channel4_IRQHandler+0xac>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <DMA1_Channel4_IRQHandler+0xb0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8001a2e:	e003      	b.n	8001a38 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <DMA1_Channel4_IRQHandler+0x98>)
 8001a32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a36:	605a      	str	r2, [r3, #4]
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40020000 	.word	0x40020000
 8001a44:	42070080 	.word	0x42070080
 8001a48:	4000380c 	.word	0x4000380c
 8001a4c:	42070100 	.word	0x42070100
 8001a50:	40003800 	.word	0x40003800
 8001a54:	40020044 	.word	0x40020044
 8001a58:	2000052c 	.word	0x2000052c

08001a5c <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <LCD_IO_ReadMultiData+0x5c>)
 8001a6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a6e:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001a76:	bf00      	nop
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <LCD_IO_ReadMultiData+0x64>)
 8001a8e:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <LCD_IO_ReadMultiData+0x60>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <LCD_IO_ReadMultiData+0x68>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020044 	.word	0x40020044
 8001ac0:	4000380c 	.word	0x4000380c
 8001ac4:	42070080 	.word	0x42070080

08001ac8 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8001ad2:	f241 0382 	movw	r3, #4226	; 0x1082
 8001ad6:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8001ad8:	e024      	b.n	8001b24 <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d913      	bls.n	8001b0c <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <LCD_IO_ReadMultiData8+0x74>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffb3 	bl	8001a5c <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001afc:	3bfe      	subs	r3, #254	; 0xfe
 8001afe:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b06:	33fe      	adds	r3, #254	; 0xfe
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	e009      	b.n	8001b20 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <LCD_IO_ReadMultiData8+0x74>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa0 	bl	8001a5c <LCD_IO_ReadMultiData>
      Size = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8001b20:	f7ff fdec 	bl	80016fc <WaitForDmaEnd>
  while(Size)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1d7      	bne.n	8001ada <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <LCD_IO_ReadMultiData8+0x78>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8001b30:	f7ff fd5e 	bl	80015f0 <LcdDirWrite>
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000052c 	.word	0x2000052c
 8001b40:	422181b0 	.word	0x422181b0

08001b44 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001b56:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <LCD_IO_ReadMultiData16to24+0x164>)
 8001b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b5c:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8001b5e:	4b53      	ldr	r3, [pc, #332]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001b64:	bf00      	nop
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f9      	bne.n	8001b66 <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8001b72:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b74:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <LCD_IO_ReadMultiData16to24+0x16c>)
 8001b76:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8001b78:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b7a:	4a4e      	ldr	r2, [pc, #312]	; (8001cb4 <LCD_IO_ReadMultiData16to24+0x170>)
 8001b7c:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b84:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8001b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8a:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8001b8c:	4b47      	ldr	r3, [pc, #284]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b8e:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 8001b92:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a44      	ldr	r2, [pc, #272]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 8001ba0:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <LCD_IO_ReadMultiData16to24+0x174>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
  while(Size)
 8001ba6:	e044      	b.n	8001c32 <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d03f      	beq.n	8001c32 <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8001bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc2:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	1c53      	adds	r3, r2, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	6139      	str	r1, [r7, #16]
 8001bd6:	4936      	ldr	r1, [pc, #216]	; (8001cb0 <LCD_IO_ReadMultiData16to24+0x16c>)
 8001bd8:	5c8a      	ldrb	r2, [r1, r2]
 8001bda:	3318      	adds	r3, #24
 8001bdc:	443b      	add	r3, r7
 8001bde:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2bff      	cmp	r3, #255	; 0xff
 8001be6:	d901      	bls.n	8001bec <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d11f      	bne.n	8001c32 <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
        Size--;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8001bfc:	7a3b      	ldrb	r3, [r7, #8]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c06:	f023 0307 	bic.w	r3, r3, #7
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	7abb      	ldrb	r3, [r7, #10]
 8001c1e:	08db      	lsrs	r3, r3, #3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b219      	sxth	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1c9a      	adds	r2, r3, #2
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	b28a      	uxth	r2, r1
 8001c30:	801a      	strh	r2, [r3, #0]
  while(Size)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1b7      	bne.n	8001ba8 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <LCD_IO_ReadMultiData16to24+0x174>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001c3e:	e003      	b.n	8001c48 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <LCD_IO_ReadMultiData16to24+0x178>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <LCD_IO_ReadMultiData16to24+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f7      	bne.n	8001c40 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <LCD_IO_ReadMultiData16to24+0x178>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c58:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <LCD_IO_ReadMultiData16to24+0x178>)
 8001c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f000 f82d 	bl	8001cc8 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001c6e:	e003      	b.n	8001c78 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <LCD_IO_ReadMultiData16to24+0x178>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <LCD_IO_ReadMultiData16to24+0x17c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f7      	bne.n	8001c70 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001c86:	bf00      	nop
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <LCD_IO_ReadMultiData16to24+0x168>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <LCD_IO_ReadMultiData16to24+0x180>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8001c9a:	f7ff fca9 	bl	80015f0 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020044 	.word	0x40020044
 8001cb0:	20000538 	.word	0x20000538
 8001cb4:	4000380c 	.word	0x4000380c
 8001cb8:	42070080 	.word	0x42070080
 8001cbc:	40003800 	.word	0x40003800
 8001cc0:	42070100 	.word	0x42070100
 8001cc4:	422181b0 	.word	0x422181b0

08001cc8 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  while(c--);
 8001cd0:	bf00      	nop
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1fa      	bne.n	8001cd2 <LCD_IO_Delay+0xa>
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fa1b 	bl	800212c <HAL_Delay>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <LCD_IO_Bl_OnOff+0x28>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8001d16:	e002      	b.n	8001d1e <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <LCD_IO_Bl_OnOff+0x28>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	42220198 	.word	0x42220198

08001d2c <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8001d30:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <LCD_IO_Init+0x104>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a3e      	ldr	r2, [pc, #248]	; (8001e30 <LCD_IO_Init+0x104>)
 8001d36:	f043 0318 	orr.w	r3, r3, #24
 8001d3a:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <LCD_IO_Init+0x104>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <LCD_IO_Init+0x104>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <LCD_IO_Init+0x108>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001d50:	4a38      	ldr	r2, [pc, #224]	; (8001e34 <LCD_IO_Init+0x108>)
 8001d52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d56:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <LCD_IO_Init+0x10c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001d60:	4a35      	ldr	r2, [pc, #212]	; (8001e38 <LCD_IO_Init+0x10c>)
 8001d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d66:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f7ff ffc9 	bl	8001d00 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <LCD_IO_Init+0x108>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d76:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <LCD_IO_Init+0x108>)
 8001d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7c:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <LCD_IO_Init+0x110>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <LCD_IO_Init+0x114>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <LCD_IO_Init+0x118>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <LCD_IO_Init+0x108>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <LCD_IO_Init+0x108>)
 8001d9a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d9e:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <LCD_IO_Init+0x108>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <LCD_IO_Init+0x108>)
 8001daa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001dae:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <LCD_IO_Init+0x11c>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <LCD_IO_Init+0x120>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <LCD_IO_Init+0x108>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <LCD_IO_Init+0x108>)
 8001dc6:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8001dca:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <LCD_IO_Init+0x108>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001dd4:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <LCD_IO_Init+0x108>)
 8001dd6:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8001dda:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <LCD_IO_Init+0x124>)
 8001dde:	f240 324f 	movw	r2, #847	; 0x34f
 8001de2:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <LCD_IO_Init+0x124>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <LCD_IO_Init+0x124>)
 8001dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dee:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8001df0:	200a      	movs	r0, #10
 8001df2:	f7ff ff79 	bl	8001ce8 <LCD_Delay>
  LCD_RST_ON;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <LCD_IO_Init+0x110>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f7ff ff73 	bl	8001ce8 <LCD_Delay>
  LCD_RST_OFF;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <LCD_IO_Init+0x110>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f7ff ff6d 	bl	8001ce8 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8001e0e:	210f      	movs	r1, #15
 8001e10:	200f      	movs	r0, #15
 8001e12:	f7ff fb83 	bl	800151c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8001e16:	200f      	movs	r0, #15
 8001e18:	f7ff fb64 	bl	80014e4 <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8001e1c:	210f      	movs	r1, #15
 8001e1e:	200e      	movs	r0, #14
 8001e20:	f7ff fb7c 	bl	800151c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8001e24:	200e      	movs	r0, #14
 8001e26:	f7ff fb5d 	bl	80014e4 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010c04 	.word	0x40010c04
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	422181a8 	.word	0x422181a8
 8001e40:	422181ac 	.word	0x422181ac
 8001e44:	422181b0 	.word	0x422181b0
 8001e48:	422181b4 	.word	0x422181b4
 8001e4c:	424203b8 	.word	0x424203b8
 8001e50:	40003800 	.word	0x40003800

08001e54 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8001e5e:	f7ff fc4d 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode8();
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <LCD_IO_WriteCmd8+0x30>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <LCD_IO_WriteCmd8+0x34>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fc09 	bl	8001688 <LcdCmdWrite8>
  LCD_CS_OFF;
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <LCD_IO_WriteCmd8+0x34>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	4207002c 	.word	0x4207002c
 8001e88:	422181b0 	.word	0x422181b0

08001e8c <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8001e96:	f7ff fc31 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode8();
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LCD_IO_WriteData8+0x30>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <LCD_IO_WriteData8+0x34>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fbd3 	bl	8001654 <LcdWrite8>
  LCD_CS_OFF;
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <LCD_IO_WriteData8+0x34>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	4207002c 	.word	0x4207002c
 8001ec0:	422181b0 	.word	0x422181b0

08001ec4 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
 8001ece:	f7ff fc15 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode16();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <LCD_IO_WriteData16+0x30>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <LCD_IO_WriteData16+0x34>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fbf1 	bl	80016c8 <LcdWrite16>
  LCD_CS_OFF;
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <LCD_IO_WriteData16+0x34>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	4207002c 	.word	0x4207002c
 8001ef8:	422181b0 	.word	0x422181b0

08001efc <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	603a      	str	r2, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8001f0c:	f7ff fbf6 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode8();
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fbb2 	bl	8001688 <LcdCmdWrite8>
  LcdSpiMode16();
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fcc3 	bl	80018bc <LCD_IO_WriteMultiData16>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	4207002c 	.word	0x4207002c
 8001f44:	422181b0 	.word	0x422181b0

08001f48 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001f56:	f7ff fbd1 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode8();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fb8d 	bl	8001688 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68b8      	ldr	r0, [r7, #8]
 8001f74:	f7ff fc52 	bl	800181c <LCD_IO_WriteMultiData8>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	4207002c 	.word	0x4207002c
 8001f84:	422181b0 	.word	0x422181b0

08001f88 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001f96:	f7ff fbb1 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode8();
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fb6d 	bl	8001688 <LcdCmdWrite8>
  LcdSpiMode16();
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68b8      	ldr	r0, [r7, #8]
 8001fba:	f7ff fc7f 	bl	80018bc <LCD_IO_WriteMultiData16>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	4207002c 	.word	0x4207002c
 8001fcc:	422181b0 	.word	0x422181b0

08001fd0 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001fe0:	f7ff fb8c 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode8();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fb48 	bl	8001688 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001ffe:	6838      	ldr	r0, [r7, #0]
 8002000:	f7ff fab6 	bl	8001570 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	68b8      	ldr	r0, [r7, #8]
 8002008:	f7ff fd5e 	bl	8001ac8 <LCD_IO_ReadMultiData8>
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	4207002c 	.word	0x4207002c
 8002018:	422181b0 	.word	0x422181b0

0800201c <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800202c:	f7ff fb66 	bl	80016fc <WaitForDmaEnd>
  LcdSpiMode8();
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fb22 	bl	8001688 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 800204a:	6838      	ldr	r0, [r7, #0]
 800204c:	f7ff fa90 	bl	8001570 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	68b8      	ldr	r0, [r7, #8]
 8002054:	f7ff fd76 	bl	8001b44 <LCD_IO_ReadMultiData16to24>
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	4207002c 	.word	0x4207002c
 8002064:	422181b0 	.word	0x422181b0

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_Init+0x28>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_Init+0x28>)
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 f947 	bl	800230c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207e:	2000      	movs	r0, #0
 8002080:	f000 f808 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002084:	f7fe f9dc 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x54>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f95f 	bl	8002376 <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 f927 	bl	8002322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_InitTick+0x5c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000010 	.word	0x20000010
 80020ec:	20000060 	.word	0x20000060
 80020f0:	2000005c 	.word	0x2000005c

080020f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_IncTick+0x1c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_IncTick+0x20>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_IncTick+0x20>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000060 	.word	0x20000060
 8002114:	20000638 	.word	0x20000638

08002118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b02      	ldr	r3, [pc, #8]	; (8002128 <HAL_GetTick+0x10>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	20000638 	.word	0x20000638

0800212c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff fff0 	bl	8002118 <HAL_GetTick>
 8002138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d005      	beq.n	8002152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_Delay+0x44>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002152:	bf00      	nop
 8002154:	f7ff ffe0 	bl	8002118 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d8f7      	bhi.n	8002154 <HAL_Delay+0x28>
  {
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000060 	.word	0x20000060

08002174 <__NVIC_SetPriorityGrouping>:
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_EnableIRQ>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db0b      	blt.n	8002202 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <__NVIC_EnableIRQ+0x34>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d8:	d301      	bcc.n	80022de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022da:	2301      	movs	r3, #1
 80022dc:	e00f      	b.n	80022fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <SysTick_Config+0x40>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e6:	210f      	movs	r1, #15
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f7ff ff90 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <SysTick_Config+0x40>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SysTick_Config+0x40>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff2d 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002334:	f7ff ff42 	bl	80021bc <__NVIC_GetPriorityGrouping>
 8002338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7ff ff90 	bl	8002264 <NVIC_EncodePriority>
 8002344:	4602      	mov	r2, r0
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff5f 	bl	8002210 <__NVIC_SetPriority>
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff35 	bl	80021d8 <__NVIC_EnableIRQ>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ffa2 	bl	80022c8 <SysTick_Config>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e043      	b.n	800242e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_DMA_Init+0xa8>)
 80023ae:	4413      	add	r3, r2
 80023b0:	4a22      	ldr	r2, [pc, #136]	; (800243c <HAL_DMA_Init+0xac>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_DMA_Init+0xb0>)
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	bffdfff8 	.word	0xbffdfff8
 800243c:	cccccccd 	.word	0xcccccccd
 8002440:	40020000 	.word	0x40020000

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b08b      	sub	sp, #44	; 0x2c
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e169      	b.n	800272c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002458:	2201      	movs	r2, #1
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	429a      	cmp	r2, r3
 8002472:	f040 8158 	bne.w	8002726 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a9a      	ldr	r2, [pc, #616]	; (80026e4 <HAL_GPIO_Init+0x2a0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d05e      	beq.n	800253e <HAL_GPIO_Init+0xfa>
 8002480:	4a98      	ldr	r2, [pc, #608]	; (80026e4 <HAL_GPIO_Init+0x2a0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d875      	bhi.n	8002572 <HAL_GPIO_Init+0x12e>
 8002486:	4a98      	ldr	r2, [pc, #608]	; (80026e8 <HAL_GPIO_Init+0x2a4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d058      	beq.n	800253e <HAL_GPIO_Init+0xfa>
 800248c:	4a96      	ldr	r2, [pc, #600]	; (80026e8 <HAL_GPIO_Init+0x2a4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d86f      	bhi.n	8002572 <HAL_GPIO_Init+0x12e>
 8002492:	4a96      	ldr	r2, [pc, #600]	; (80026ec <HAL_GPIO_Init+0x2a8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d052      	beq.n	800253e <HAL_GPIO_Init+0xfa>
 8002498:	4a94      	ldr	r2, [pc, #592]	; (80026ec <HAL_GPIO_Init+0x2a8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d869      	bhi.n	8002572 <HAL_GPIO_Init+0x12e>
 800249e:	4a94      	ldr	r2, [pc, #592]	; (80026f0 <HAL_GPIO_Init+0x2ac>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d04c      	beq.n	800253e <HAL_GPIO_Init+0xfa>
 80024a4:	4a92      	ldr	r2, [pc, #584]	; (80026f0 <HAL_GPIO_Init+0x2ac>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d863      	bhi.n	8002572 <HAL_GPIO_Init+0x12e>
 80024aa:	4a92      	ldr	r2, [pc, #584]	; (80026f4 <HAL_GPIO_Init+0x2b0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d046      	beq.n	800253e <HAL_GPIO_Init+0xfa>
 80024b0:	4a90      	ldr	r2, [pc, #576]	; (80026f4 <HAL_GPIO_Init+0x2b0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d85d      	bhi.n	8002572 <HAL_GPIO_Init+0x12e>
 80024b6:	2b12      	cmp	r3, #18
 80024b8:	d82a      	bhi.n	8002510 <HAL_GPIO_Init+0xcc>
 80024ba:	2b12      	cmp	r3, #18
 80024bc:	d859      	bhi.n	8002572 <HAL_GPIO_Init+0x12e>
 80024be:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <HAL_GPIO_Init+0x80>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	0800253f 	.word	0x0800253f
 80024c8:	08002519 	.word	0x08002519
 80024cc:	0800252b 	.word	0x0800252b
 80024d0:	0800256d 	.word	0x0800256d
 80024d4:	08002573 	.word	0x08002573
 80024d8:	08002573 	.word	0x08002573
 80024dc:	08002573 	.word	0x08002573
 80024e0:	08002573 	.word	0x08002573
 80024e4:	08002573 	.word	0x08002573
 80024e8:	08002573 	.word	0x08002573
 80024ec:	08002573 	.word	0x08002573
 80024f0:	08002573 	.word	0x08002573
 80024f4:	08002573 	.word	0x08002573
 80024f8:	08002573 	.word	0x08002573
 80024fc:	08002573 	.word	0x08002573
 8002500:	08002573 	.word	0x08002573
 8002504:	08002573 	.word	0x08002573
 8002508:	08002521 	.word	0x08002521
 800250c:	08002535 	.word	0x08002535
 8002510:	4a79      	ldr	r2, [pc, #484]	; (80026f8 <HAL_GPIO_Init+0x2b4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002516:	e02c      	b.n	8002572 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	623b      	str	r3, [r7, #32]
          break;
 800251e:	e029      	b.n	8002574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	3304      	adds	r3, #4
 8002526:	623b      	str	r3, [r7, #32]
          break;
 8002528:	e024      	b.n	8002574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	3308      	adds	r3, #8
 8002530:	623b      	str	r3, [r7, #32]
          break;
 8002532:	e01f      	b.n	8002574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	330c      	adds	r3, #12
 800253a:	623b      	str	r3, [r7, #32]
          break;
 800253c:	e01a      	b.n	8002574 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002546:	2304      	movs	r3, #4
 8002548:	623b      	str	r3, [r7, #32]
          break;
 800254a:	e013      	b.n	8002574 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002554:	2308      	movs	r3, #8
 8002556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	611a      	str	r2, [r3, #16]
          break;
 800255e:	e009      	b.n	8002574 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002560:	2308      	movs	r3, #8
 8002562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	615a      	str	r2, [r3, #20]
          break;
 800256a:	e003      	b.n	8002574 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
          break;
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x130>
          break;
 8002572:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2bff      	cmp	r3, #255	; 0xff
 8002578:	d801      	bhi.n	800257e <HAL_GPIO_Init+0x13a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_Init+0x13e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d802      	bhi.n	8002590 <HAL_GPIO_Init+0x14c>
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	e002      	b.n	8002596 <HAL_GPIO_Init+0x152>
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3b08      	subs	r3, #8
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	210f      	movs	r1, #15
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	431a      	orrs	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80b1 	beq.w	8002726 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c4:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_GPIO_Init+0x2b8>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <HAL_GPIO_Init+0x2b8>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_GPIO_Init+0x2b8>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025dc:	4a48      	ldr	r2, [pc, #288]	; (8002700 <HAL_GPIO_Init+0x2bc>)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4013      	ands	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a40      	ldr	r2, [pc, #256]	; (8002704 <HAL_GPIO_Init+0x2c0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_GPIO_Init+0x1ec>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3f      	ldr	r2, [pc, #252]	; (8002708 <HAL_GPIO_Init+0x2c4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00d      	beq.n	800262c <HAL_GPIO_Init+0x1e8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a3e      	ldr	r2, [pc, #248]	; (800270c <HAL_GPIO_Init+0x2c8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <HAL_GPIO_Init+0x1e4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a3d      	ldr	r2, [pc, #244]	; (8002710 <HAL_GPIO_Init+0x2cc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_GPIO_Init+0x1e0>
 8002620:	2303      	movs	r3, #3
 8002622:	e006      	b.n	8002632 <HAL_GPIO_Init+0x1ee>
 8002624:	2304      	movs	r3, #4
 8002626:	e004      	b.n	8002632 <HAL_GPIO_Init+0x1ee>
 8002628:	2302      	movs	r3, #2
 800262a:	e002      	b.n	8002632 <HAL_GPIO_Init+0x1ee>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_GPIO_Init+0x1ee>
 8002630:	2300      	movs	r3, #0
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	f002 0203 	and.w	r2, r2, #3
 8002638:	0092      	lsls	r2, r2, #2
 800263a:	4093      	lsls	r3, r2
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002642:	492f      	ldr	r1, [pc, #188]	; (8002700 <HAL_GPIO_Init+0x2bc>)
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	492c      	ldr	r1, [pc, #176]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	43db      	mvns	r3, r3
 8002672:	4928      	ldr	r1, [pc, #160]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 8002674:	4013      	ands	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4922      	ldr	r1, [pc, #136]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	43db      	mvns	r3, r3
 800269a:	491e      	ldr	r1, [pc, #120]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 800269c:	4013      	ands	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4918      	ldr	r1, [pc, #96]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	4914      	ldr	r1, [pc, #80]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d021      	beq.n	8002718 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
 80026e0:	e021      	b.n	8002726 <HAL_GPIO_Init+0x2e2>
 80026e2:	bf00      	nop
 80026e4:	10320000 	.word	0x10320000
 80026e8:	10310000 	.word	0x10310000
 80026ec:	10220000 	.word	0x10220000
 80026f0:	10210000 	.word	0x10210000
 80026f4:	10120000 	.word	0x10120000
 80026f8:	10110000 	.word	0x10110000
 80026fc:	40021000 	.word	0x40021000
 8002700:	40010000 	.word	0x40010000
 8002704:	40010800 	.word	0x40010800
 8002708:	40010c00 	.word	0x40010c00
 800270c:	40011000 	.word	0x40011000
 8002710:	40011400 	.word	0x40011400
 8002714:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_GPIO_Init+0x304>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	43db      	mvns	r3, r3
 8002720:	4909      	ldr	r1, [pc, #36]	; (8002748 <HAL_GPIO_Init+0x304>)
 8002722:	4013      	ands	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f ae8e 	bne.w	8002458 <HAL_GPIO_Init+0x14>
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	372c      	adds	r7, #44	; 0x2c
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	611a      	str	r2, [r3, #16]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f806 	bl	80027ac <HAL_GPIO_EXTI_Callback>
  }
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e272      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8087 	beq.w	80028ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e0:	4b92      	ldr	r3, [pc, #584]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d00c      	beq.n	8002806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ec:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d112      	bne.n	800281e <HAL_RCC_OscConfig+0x5e>
 80027f8:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06c      	beq.n	80028ec <HAL_RCC_OscConfig+0x12c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d168      	bne.n	80028ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e24c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x76>
 8002828:	4b80      	ldr	r3, [pc, #512]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a7f      	ldr	r2, [pc, #508]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e02e      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x98>
 800283e:	4b7b      	ldr	r3, [pc, #492]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7a      	ldr	r2, [pc, #488]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a77      	ldr	r2, [pc, #476]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0xbc>
 8002862:	4b72      	ldr	r3, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6f      	ldr	r3, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6e      	ldr	r2, [pc, #440]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 800287c:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a67      	ldr	r2, [pc, #412]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff fc3c 	bl	8002118 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff fc38 	bl	8002118 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e200      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xe4>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff fc28 	bl	8002118 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fc24 	bl	8002118 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1ec      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x10c>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028fa:	4b4c      	ldr	r3, [pc, #304]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002906:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x18c>
 8002912:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c0      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4939      	ldr	r1, [pc, #228]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7ff fbdd 	bl	8002118 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002962:	f7ff fbd9 	bl	8002118 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4927      	ldr	r1, [pc, #156]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff fbbc 	bl	8002118 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7ff fbb8 	bl	8002118 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e180      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03a      	beq.n	8002a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d019      	beq.n	8002a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_RCC_OscConfig+0x274>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7ff fb9c 	bl	8002118 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e4:	f7ff fb98 	bl	8002118 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e160      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f000 fad8 	bl	8002fb8 <RCC_Delay>
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7ff fb82 	bl	8002118 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a16:	e00f      	b.n	8002a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a18:	f7ff fb7e 	bl	8002118 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d908      	bls.n	8002a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e146      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	42420000 	.word	0x42420000
 8002a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e9      	bne.n	8002a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a6 	beq.w	8002b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b8b      	ldr	r3, [pc, #556]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10d      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4a87      	ldr	r2, [pc, #540]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	61d3      	str	r3, [r2, #28]
 8002a6e:	4b85      	ldr	r3, [pc, #532]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b82      	ldr	r3, [pc, #520]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7e      	ldr	r2, [pc, #504]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7ff fb3f 	bl	8002118 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7ff fb3b 	bl	8002118 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e103      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x312>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	e02d      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x334>
 8002ada:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a66      	ldr	r2, [pc, #408]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	e01c      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d10c      	bne.n	8002b16 <HAL_RCC_OscConfig+0x356>
 8002afc:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6213      	str	r3, [r2, #32]
 8002b14:	e00b      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002b16:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a5a      	ldr	r2, [pc, #360]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a57      	ldr	r2, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d015      	beq.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7ff faef 	bl	8002118 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7ff faeb 	bl	8002118 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0b1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ee      	beq.n	8002b3e <HAL_RCC_OscConfig+0x37e>
 8002b60:	e014      	b.n	8002b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7ff fad9 	bl	8002118 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7ff fad5 	bl	8002118 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e09b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ee      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b3c      	ldr	r3, [pc, #240]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a3b      	ldr	r2, [pc, #236]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8087 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d061      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d146      	bne.n	8002c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7ff faa9 	bl	8002118 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7ff faa5 	bl	8002118 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e06d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4921      	ldr	r1, [pc, #132]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a19      	ldr	r1, [r3, #32]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	430b      	orrs	r3, r1
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff fa79 	bl	8002118 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7ff fa75 	bl	8002118 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e03d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46a>
 8002c48:	e035      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fa62 	bl	8002118 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff fa5e 	bl	8002118 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e026      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x498>
 8002c76:	e01e      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e019      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x500>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d0      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4965      	ldr	r1, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d040      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d115      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e073      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4936      	ldr	r1, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7ff f9b0 	bl	8002118 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7ff f9ac 	bl	8002118 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e053      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d210      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4922      	ldr	r1, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1cc>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f90e 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08008078 	.word	0x08008078
 8002e90:	20000010 	.word	0x20000010
 8002e94:	2000005c 	.word	0x2000005c

08002e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b490      	push	{r4, r7}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e9e:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ea0:	1d3c      	adds	r4, r7, #4
 8002ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ea8:	f240 2301 	movw	r3, #513	; 0x201
 8002eac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x46>
 8002ed6:	e02b      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eda:	623b      	str	r3, [r7, #32]
      break;
 8002edc:	e02b      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	0c9b      	lsrs	r3, r3, #18
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3328      	adds	r3, #40	; 0x28
 8002ee8:	443b      	add	r3, r7
 8002eea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d012      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0c5b      	lsrs	r3, r3, #17
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	3328      	adds	r3, #40	; 0x28
 8002f06:	443b      	add	r3, r7
 8002f08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	e004      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	623b      	str	r3, [r7, #32]
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f32:	623b      	str	r3, [r7, #32]
      break;
 8002f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f36:	6a3b      	ldr	r3, [r7, #32]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc90      	pop	{r4, r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	080033a0 	.word	0x080033a0
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	007a1200 	.word	0x007a1200
 8002f50:	003d0900 	.word	0x003d0900

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	20000010 	.word	0x20000010

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f6c:	f7ff fff2 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08008088 	.word	0x08008088

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f94:	f7ff ffde 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	0adb      	lsrs	r3, r3, #11
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08008088 	.word	0x08008088

08002fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <RCC_Delay+0x34>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <RCC_Delay+0x38>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0a5b      	lsrs	r3, r3, #9
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd4:	bf00      	nop
  }
  while (Delay --);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	60fa      	str	r2, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f9      	bne.n	8002fd4 <RCC_Delay+0x1c>
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	10624dd3 	.word	0x10624dd3

08002ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e076      	b.n	80030f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003016:	d009      	beq.n	800302c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
 800301e:	e005      	b.n	800302c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fa2c 	bl	80004a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	ea42 0103 	orr.w	r1, r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	0c1a      	lsrs	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f002 0204 	and.w	r2, r2, #4
 80030d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e03f      	b.n	800318e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd fa60 	bl	80005e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f829 	bl	8003198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031d2:	f023 030c 	bic.w	r3, r3, #12
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	430b      	orrs	r3, r1
 80031de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <UART_SetConfig+0x114>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d103      	bne.n	8003208 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7ff fec6 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	e002      	b.n	800320e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7ff feae 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 800320c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <UART_SetConfig+0x118>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	0119      	lsls	r1, r3, #4
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fbb2 f2f3 	udiv	r2, r2, r3
 8003244:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <UART_SetConfig+0x118>)
 8003246:	fba3 0302 	umull	r0, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2064      	movs	r0, #100	; 0x64
 800324e:	fb00 f303 	mul.w	r3, r0, r3
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	3332      	adds	r3, #50	; 0x32
 8003258:	4a15      	ldr	r2, [pc, #84]	; (80032b0 <UART_SetConfig+0x118>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003264:	4419      	add	r1, r3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f2f3 	udiv	r2, r2, r3
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <UART_SetConfig+0x118>)
 800327e:	fba3 0302 	umull	r0, r3, r3, r2
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2064      	movs	r0, #100	; 0x64
 8003286:	fb00 f303 	mul.w	r3, r0, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	3332      	adds	r3, #50	; 0x32
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <UART_SetConfig+0x118>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	f003 020f 	and.w	r2, r3, #15
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	440a      	add	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40013800 	.word	0x40013800
 80032b0:	51eb851f 	.word	0x51eb851f

080032b4 <__libc_init_array>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	2600      	movs	r6, #0
 80032b8:	4d0c      	ldr	r5, [pc, #48]	; (80032ec <__libc_init_array+0x38>)
 80032ba:	4c0d      	ldr	r4, [pc, #52]	; (80032f0 <__libc_init_array+0x3c>)
 80032bc:	1b64      	subs	r4, r4, r5
 80032be:	10a4      	asrs	r4, r4, #2
 80032c0:	42a6      	cmp	r6, r4
 80032c2:	d109      	bne.n	80032d8 <__libc_init_array+0x24>
 80032c4:	f000 f822 	bl	800330c <_init>
 80032c8:	2600      	movs	r6, #0
 80032ca:	4d0a      	ldr	r5, [pc, #40]	; (80032f4 <__libc_init_array+0x40>)
 80032cc:	4c0a      	ldr	r4, [pc, #40]	; (80032f8 <__libc_init_array+0x44>)
 80032ce:	1b64      	subs	r4, r4, r5
 80032d0:	10a4      	asrs	r4, r4, #2
 80032d2:	42a6      	cmp	r6, r4
 80032d4:	d105      	bne.n	80032e2 <__libc_init_array+0x2e>
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032dc:	4798      	blx	r3
 80032de:	3601      	adds	r6, #1
 80032e0:	e7ee      	b.n	80032c0 <__libc_init_array+0xc>
 80032e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e6:	4798      	blx	r3
 80032e8:	3601      	adds	r6, #1
 80032ea:	e7f2      	b.n	80032d2 <__libc_init_array+0x1e>
 80032ec:	08008090 	.word	0x08008090
 80032f0:	08008090 	.word	0x08008090
 80032f4:	08008090 	.word	0x08008090
 80032f8:	08008094 	.word	0x08008094

080032fc <memset>:
 80032fc:	4603      	mov	r3, r0
 80032fe:	4402      	add	r2, r0
 8003300:	4293      	cmp	r3, r2
 8003302:	d100      	bne.n	8003306 <memset+0xa>
 8003304:	4770      	bx	lr
 8003306:	f803 1b01 	strb.w	r1, [r3], #1
 800330a:	e7f9      	b.n	8003300 <memset+0x4>

0800330c <_init>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	bf00      	nop
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr

08003318 <_fini>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr
