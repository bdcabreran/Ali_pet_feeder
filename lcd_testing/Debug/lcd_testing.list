
lcd_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009af8  08003080  08003080  00013080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb78  0800cb78  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb78  0800cb78  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb78  0800cb78  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb78  0800cb78  0001cb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb7c  0800cb7c  0001cb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800cb80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000060  0800cbdc  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800cbdc  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2ec  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220a  00000000  00000000  0002b371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016849  00000000  00000000  0002e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d624  00000000  00000000  00044a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008660a  00000000  00000000  0005205d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000d8667  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ae0  00000000  00000000  000d86b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f0c  00000000  00000000  000d9198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003064 	.word	0x08003064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003064 	.word	0x08003064

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fe36 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f864 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f92a 	bl	80003b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f902 	bl	8000364 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8d6 	bl	8000310 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000164:	f000 f89e 	bl	80002a4 <MX_SPI2_Init>

  BSP_LCD_Init();
 8000168:	f000 ff92 	bl	8001090 <BSP_LCD_Init>
//  BSP_LCD_DrawHLine(BSP_LCD_GetXSize()/2 + 1, BSP_LCD_GetYSize()/2 + battery_icon.infoHeader.biHeight +1, battery_icon.infoHeader.biWidth);
//  BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()/2 + 1 , BSP_LCD_GetYSize()/2 + 1, (uint8_t*)&battery_icon);

//  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&back_icon);
//  HAL_Delay(1000);
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&batt_error_icon);
 800016c:	4a24      	ldr	r2, [pc, #144]	; (8000200 <main+0xb4>)
 800016e:	2100      	movs	r1, #0
 8000170:	2000      	movs	r0, #0
 8000172:	f000 ffe7 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f001 fe83 	bl	8001e84 <HAL_Delay>
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&batt_warning_icon);
 800017e:	4a21      	ldr	r2, [pc, #132]	; (8000204 <main+0xb8>)
 8000180:	2100      	movs	r1, #0
 8000182:	2000      	movs	r0, #0
 8000184:	f000 ffde 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 8000188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018c:	f001 fe7a 	bl	8001e84 <HAL_Delay>
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&battery_icon);
 8000190:	4a1d      	ldr	r2, [pc, #116]	; (8000208 <main+0xbc>)
 8000192:	2100      	movs	r1, #0
 8000194:	2000      	movs	r0, #0
 8000196:	f000 ffd5 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 800019a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019e:	f001 fe71 	bl	8001e84 <HAL_Delay>
//  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&drawers_icon);
//  HAL_Delay(1000);
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&enable_icon);
 80001a2:	4a1a      	ldr	r2, [pc, #104]	; (800020c <main+0xc0>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	2000      	movs	r0, #0
 80001a8:	f000 ffcc 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 80001ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b0:	f001 fe68 	bl	8001e84 <HAL_Delay>
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&play_icon);
 80001b4:	4a16      	ldr	r2, [pc, #88]	; (8000210 <main+0xc4>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 ffc3 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 80001be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c2:	f001 fe5f 	bl	8001e84 <HAL_Delay>
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&recording_icon);
 80001c6:	4a13      	ldr	r2, [pc, #76]	; (8000214 <main+0xc8>)
 80001c8:	2100      	movs	r1, #0
 80001ca:	2000      	movs	r0, #0
 80001cc:	f000 ffba 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 80001d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d4:	f001 fe56 	bl	8001e84 <HAL_Delay>
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&thermostat_icon);
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <main+0xcc>)
 80001da:	2100      	movs	r1, #0
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 ffb1 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 80001e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e6:	f001 fe4d 	bl	8001e84 <HAL_Delay>
  BSP_LCD_DrawBitmap(0  , 0, (uint8_t*)&trash_icon);
 80001ea:	4a0c      	ldr	r2, [pc, #48]	; (800021c <main+0xd0>)
 80001ec:	2100      	movs	r1, #0
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 ffa8 	bl	8001144 <BSP_LCD_DrawBitmap>
  HAL_Delay(1000);
 80001f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f8:	f001 fe44 	bl	8001e84 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0xb0>
 80001fe:	bf00      	nop
 8000200:	080033f8 	.word	0x080033f8
 8000204:	08003c30 	.word	0x08003c30
 8000208:	08003fb0 	.word	0x08003fb0
 800020c:	08006340 	.word	0x08006340
 8000210:	08007540 	.word	0x08007540
 8000214:	08008770 	.word	0x08008770
 8000218:	08009df0 	.word	0x08009df0
 800021c:	0800b190 	.word	0x0800b190

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 ff10 	bl	8003054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000256:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f002 f959 	bl	8002518 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800026c:	f000 f926 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fbc6 	bl	8002a1c <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000296:	f000 f911 	bl	80004bc <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_SPI2_Init+0x64>)
 80002aa:	4a18      	ldr	r2, [pc, #96]	; (800030c <MX_SPI2_Init+0x68>)
 80002ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002ae:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_SPI2_Init+0x64>)
 80002b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_SPI2_Init+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <MX_SPI2_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_SPI2_Init+0x64>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_SPI2_Init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_SPI2_Init+0x64>)
 80002d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_SPI2_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_SPI2_Init+0x64>)
 80002de:	2200      	movs	r2, #0
 80002e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_SPI2_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MX_SPI2_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_SPI2_Init+0x64>)
 80002f0:	220a      	movs	r2, #10
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_SPI2_Init+0x64>)
 80002f6:	f002 fd29 	bl	8002d4c <HAL_SPI_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000300:	f000 f8dc 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000007c 	.word	0x2000007c
 800030c:	40003800 	.word	0x40003800

08000310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_USART2_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800031c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000348:	f002 fd84 	bl	8002e54 <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f8b3 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	2000015c 	.word	0x2000015c
 8000360:	40004400 	.word	0x40004400

08000364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <MX_DMA_Init+0x48>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <MX_DMA_Init+0x48>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <MX_DMA_Init+0x48>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	2100      	movs	r1, #0
 8000386:	200e      	movs	r0, #14
 8000388:	f001 fe77 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800038c:	200e      	movs	r0, #14
 800038e:	f001 fe90 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	200f      	movs	r0, #15
 8000398:	f001 fe6f 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800039c:	200f      	movs	r0, #15
 800039e:	f001 fe88 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0310 	and.w	r3, r3, #16
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b2f      	ldr	r3, [pc, #188]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0320 	and.w	r3, r3, #32
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MX_GPIO_Init+0xf8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a25      	ldr	r2, [pc, #148]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <MX_GPIO_Init+0xf8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	4820      	ldr	r0, [pc, #128]	; (80004ac <MX_GPIO_Init+0xfc>)
 800042a:	f002 f83b 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000434:	481e      	ldr	r0, [pc, #120]	; (80004b0 <MX_GPIO_Init+0x100>)
 8000436:	f002 f835 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_GPIO_Init+0x104>)
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	481a      	ldr	r0, [pc, #104]	; (80004b8 <MX_GPIO_Init+0x108>)
 8000450:	f001 fea4 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000454:	2320      	movs	r3, #32
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2302      	movs	r3, #2
 8000462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <MX_GPIO_Init+0xfc>)
 800046c:	f001 fe96 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000470:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <MX_GPIO_Init+0x100>)
 800048a:	f001 fe87 	bl	800219c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	2028      	movs	r0, #40	; 0x28
 8000494:	f001 fdf1 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000498:	2028      	movs	r0, #40	; 0x28
 800049a:	f001 fe0a 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	40010c00 	.word	0x40010c00
 80004b4:	10110000 	.word	0x10110000
 80004b8:	40011000 	.word	0x40011000

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <Error_Handler+0x8>
	...

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_MspInit+0x5c>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a14      	ldr	r2, [pc, #80]	; (8000524 <HAL_MspInit+0x5c>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_MspInit+0x5c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_MspInit+0x5c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_MspInit+0x5c>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <HAL_MspInit+0x5c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_MspInit+0x60>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_MspInit+0x60>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000
 8000528:	40010000 	.word	0x40010000

0800052c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a43      	ldr	r2, [pc, #268]	; (8000654 <HAL_SPI_MspInit+0x128>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d17f      	bne.n	800064c <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800054c:	4b42      	ldr	r3, [pc, #264]	; (8000658 <HAL_SPI_MspInit+0x12c>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	4a41      	ldr	r2, [pc, #260]	; (8000658 <HAL_SPI_MspInit+0x12c>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	61d3      	str	r3, [r2, #28]
 8000558:	4b3f      	ldr	r3, [pc, #252]	; (8000658 <HAL_SPI_MspInit+0x12c>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b3c      	ldr	r3, [pc, #240]	; (8000658 <HAL_SPI_MspInit+0x12c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a3b      	ldr	r2, [pc, #236]	; (8000658 <HAL_SPI_MspInit+0x12c>)
 800056a:	f043 0308 	orr.w	r3, r3, #8
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b39      	ldr	r3, [pc, #228]	; (8000658 <HAL_SPI_MspInit+0x12c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0308 	and.w	r3, r3, #8
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800057c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	4619      	mov	r1, r3
 8000590:	4832      	ldr	r0, [pc, #200]	; (800065c <HAL_SPI_MspInit+0x130>)
 8000592:	f001 fe03 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8000596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800059a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	482c      	ldr	r0, [pc, #176]	; (800065c <HAL_SPI_MspInit+0x130>)
 80005ac:	f001 fdf6 	bl	800219c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80005b0:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005b2:	4a2c      	ldr	r2, [pc, #176]	; (8000664 <HAL_SPI_MspInit+0x138>)
 80005b4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80005e2:	481f      	ldr	r0, [pc, #124]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005e4:	f001 fd80 	bl	80020e8 <HAL_DMA_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80005ee:	f7ff ff65 	bl	80004bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80005f8:	4a19      	ldr	r2, [pc, #100]	; (8000660 <HAL_SPI_MspInit+0x134>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <HAL_SPI_MspInit+0x140>)
 8000602:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000606:	2210      	movs	r2, #16
 8000608:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 800062a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800062e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000632:	f001 fd59 	bl	80020e8 <HAL_DMA_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 800063c:	f7ff ff3e 	bl	80004bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000644:	649a      	str	r2, [r3, #72]	; 0x48
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_SPI_MspInit+0x13c>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40003800 	.word	0x40003800
 8000658:	40021000 	.word	0x40021000
 800065c:	40010c00 	.word	0x40010c00
 8000660:	200000d4 	.word	0x200000d4
 8000664:	40020044 	.word	0x40020044
 8000668:	20000118 	.word	0x20000118
 800066c:	40020058 	.word	0x40020058

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <HAL_UART_MspInit+0x70>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d123      	bne.n	80006d8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_UART_MspInit+0x74>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <HAL_UART_MspInit+0x74>)
 8000696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069a:	61d3      	str	r3, [r2, #28]
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_UART_MspInit+0x74>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_UART_MspInit+0x74>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <HAL_UART_MspInit+0x74>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_UART_MspInit+0x74>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006c0:	230c      	movs	r3, #12
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HAL_UART_MspInit+0x78>)
 80006d4:	f001 fd62 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40004400 	.word	0x40004400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <NMI_Handler+0x4>

080006f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <MemManage_Handler+0x4>

080006fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <BusFault_Handler+0x4>

08000704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <UsageFault_Handler+0x4>

0800070a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000732:	f001 fb8b 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}

0800073a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800073e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000742:	f001 fec7 	bl	80024d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}

0800074a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
	...

08000758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800075a:	490d      	ldr	r1, [pc, #52]	; (8000790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000770:	4c0a      	ldr	r4, [pc, #40]	; (800079c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800077e:	f7ff ffe4 	bl	800074a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000782:	f002 fc43 	bl	800300c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fce1 	bl	800014c <main>
  bx lr
 800078a:	4770      	bx	lr
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000794:	0800cb80 	.word	0x0800cb80
  ldr r2, =_sbss
 8000798:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800079c:	200002cc 	.word	0x200002cc

080007a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_2_IRQHandler>

080007a2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 f956 	bl	8001a58 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80007ac:	2011      	movs	r0, #17
 80007ae:	f001 f9fd 	bl	8001bac <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 80007ba:	2010      	movs	r0, #16
 80007bc:	f001 f9f6 	bl	8001bac <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f001 f949 	bl	8001a58 <LCD_IO_Bl_OnOff>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80007ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80007de:	23f0      	movs	r3, #240	; 0xf0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 80007f2:	1d39      	adds	r1, r7, #4
 80007f4:	2301      	movs	r3, #1
 80007f6:	2203      	movs	r2, #3
 80007f8:	20d3      	movs	r0, #211	; 0xd3
 80007fa:	f001 fa95 	bl	8001d28 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <ili9341_ReadID+0x30>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d102      	bne.n	800080c <ili9341_ReadID+0x24>
    return 0x9341;
 8000806:	f249 3341 	movw	r3, #37697	; 0x9341
 800080a:	e000      	b.n	800080e <ili9341_ReadID+0x26>
  else
    return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	00419300 	.word	0x00419300

0800081c <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8000822:	4b52      	ldr	r3, [pc, #328]	; (800096c <ili9341_Init+0x150>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d115      	bne.n	800085a <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <ili9341_Init+0x150>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <ili9341_Init+0x150>)
 800083a:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 800083c:	4b4b      	ldr	r3, [pc, #300]	; (800096c <ili9341_Init+0x150>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <ili9341_Init+0x30>
      LCD_IO_Init();
 8000848:	f001 f91c 	bl	8001a84 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <ili9341_Init+0x150>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <ili9341_Init+0x150>)
 8000858:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800085a:	200a      	movs	r0, #10
 800085c:	f001 f8f0 	bl	8001a40 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8000860:	2001      	movs	r0, #1
 8000862:	f001 f9a3 	bl	8001bac <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f001 f8ea 	bl	8001a40 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 800086c:	2203      	movs	r2, #3
 800086e:	4940      	ldr	r1, [pc, #256]	; (8000970 <ili9341_Init+0x154>)
 8000870:	20ef      	movs	r0, #239	; 0xef
 8000872:	f001 fa15 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8000876:	2203      	movs	r2, #3
 8000878:	493e      	ldr	r1, [pc, #248]	; (8000974 <ili9341_Init+0x158>)
 800087a:	20cf      	movs	r0, #207	; 0xcf
 800087c:	f001 fa10 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8000880:	2204      	movs	r2, #4
 8000882:	493d      	ldr	r1, [pc, #244]	; (8000978 <ili9341_Init+0x15c>)
 8000884:	20ed      	movs	r0, #237	; 0xed
 8000886:	f001 fa0b 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800088a:	2203      	movs	r2, #3
 800088c:	493b      	ldr	r1, [pc, #236]	; (800097c <ili9341_Init+0x160>)
 800088e:	20e8      	movs	r0, #232	; 0xe8
 8000890:	f001 fa06 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8000894:	2205      	movs	r2, #5
 8000896:	493a      	ldr	r1, [pc, #232]	; (8000980 <ili9341_Init+0x164>)
 8000898:	20cb      	movs	r0, #203	; 0xcb
 800089a:	f001 fa01 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	4938      	ldr	r1, [pc, #224]	; (8000984 <ili9341_Init+0x168>)
 80008a2:	20f7      	movs	r0, #247	; 0xf7
 80008a4:	f001 f9fc 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 80008a8:	2202      	movs	r2, #2
 80008aa:	4937      	ldr	r1, [pc, #220]	; (8000988 <ili9341_Init+0x16c>)
 80008ac:	20ea      	movs	r0, #234	; 0xea
 80008ae:	f001 f9f7 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4935      	ldr	r1, [pc, #212]	; (800098c <ili9341_Init+0x170>)
 80008b6:	20c0      	movs	r0, #192	; 0xc0
 80008b8:	f001 f9f2 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	4934      	ldr	r1, [pc, #208]	; (8000990 <ili9341_Init+0x174>)
 80008c0:	20c1      	movs	r0, #193	; 0xc1
 80008c2:	f001 f9ed 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 80008c6:	2202      	movs	r2, #2
 80008c8:	4932      	ldr	r1, [pc, #200]	; (8000994 <ili9341_Init+0x178>)
 80008ca:	20c5      	movs	r0, #197	; 0xc5
 80008cc:	f001 f9e8 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	4931      	ldr	r1, [pc, #196]	; (8000998 <ili9341_Init+0x17c>)
 80008d4:	20c7      	movs	r0, #199	; 0xc7
 80008d6:	f001 f9e3 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80008da:	2201      	movs	r2, #1
 80008dc:	492f      	ldr	r1, [pc, #188]	; (800099c <ili9341_Init+0x180>)
 80008de:	2037      	movs	r0, #55	; 0x37
 80008e0:	f001 f9de 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	492e      	ldr	r1, [pc, #184]	; (80009a0 <ili9341_Init+0x184>)
 80008e8:	203a      	movs	r0, #58	; 0x3a
 80008ea:	f001 f9d9 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80008ee:	2202      	movs	r2, #2
 80008f0:	492c      	ldr	r1, [pc, #176]	; (80009a4 <ili9341_Init+0x188>)
 80008f2:	20b1      	movs	r0, #177	; 0xb1
 80008f4:	f001 f9d4 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80008f8:	2203      	movs	r2, #3
 80008fa:	492b      	ldr	r1, [pc, #172]	; (80009a8 <ili9341_Init+0x18c>)
 80008fc:	20b6      	movs	r0, #182	; 0xb6
 80008fe:	f001 f9cf 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8000902:	2201      	movs	r2, #1
 8000904:	4925      	ldr	r1, [pc, #148]	; (800099c <ili9341_Init+0x180>)
 8000906:	20f2      	movs	r0, #242	; 0xf2
 8000908:	f001 f9ca 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 800090c:	2201      	movs	r2, #1
 800090e:	4927      	ldr	r1, [pc, #156]	; (80009ac <ili9341_Init+0x190>)
 8000910:	2026      	movs	r0, #38	; 0x26
 8000912:	f001 f9c5 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8000916:	220f      	movs	r2, #15
 8000918:	4925      	ldr	r1, [pc, #148]	; (80009b0 <ili9341_Init+0x194>)
 800091a:	20e0      	movs	r0, #224	; 0xe0
 800091c:	f001 f9c0 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8000920:	220f      	movs	r2, #15
 8000922:	4924      	ldr	r1, [pc, #144]	; (80009b4 <ili9341_Init+0x198>)
 8000924:	20e1      	movs	r0, #225	; 0xe1
 8000926:	f001 f9bb 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 800092a:	2036      	movs	r0, #54	; 0x36
 800092c:	f001 f93e 	bl	8001bac <LCD_IO_WriteCmd8>
 8000930:	20e8      	movs	r0, #232	; 0xe8
 8000932:	f001 f957 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8000936:	2011      	movs	r0, #17
 8000938:	f001 f938 	bl	8001bac <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800093c:	200a      	movs	r0, #10
 800093e:	f001 f87f 	bl	8001a40 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	23f0      	movs	r3, #240	; 0xf0
 8000948:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800094c:	2100      	movs	r1, #0
 800094e:	2000      	movs	r0, #0
 8000950:	f000 fa2c 	bl	8000dac <ili9341_FillRect>
  LCD_Delay(10);
 8000954:	200a      	movs	r0, #10
 8000956:	f001 f873 	bl	8001a40 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 800095a:	2029      	movs	r0, #41	; 0x29
 800095c:	f001 f926 	bl	8001bac <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f001 f86d 	bl	8001a40 <LCD_Delay>
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001a0 	.word	0x200001a0
 8000970:	08003080 	.word	0x08003080
 8000974:	08003084 	.word	0x08003084
 8000978:	08003088 	.word	0x08003088
 800097c:	08003090 	.word	0x08003090
 8000980:	08003094 	.word	0x08003094
 8000984:	0800309c 	.word	0x0800309c
 8000988:	080030a0 	.word	0x080030a0
 800098c:	080030a4 	.word	0x080030a4
 8000990:	080030a8 	.word	0x080030a8
 8000994:	080030ac 	.word	0x080030ac
 8000998:	080030b0 	.word	0x080030b0
 800099c:	080030b4 	.word	0x080030b4
 80009a0:	080030b8 	.word	0x080030b8
 80009a4:	080030bc 	.word	0x080030bc
 80009a8:	080030c0 	.word	0x080030c0
 80009ac:	080030c4 	.word	0x080030c4
 80009b0:	080030c8 	.word	0x080030c8
 80009b4:	080030d8 	.word	0x080030d8

080009b8 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	80fb      	strh	r3, [r7, #6]
 80009c4:	4613      	mov	r3, r2
 80009c6:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80009c8:	202a      	movs	r0, #42	; 0x2a
 80009ca:	f001 f8ef 	bl	8001bac <LCD_IO_WriteCmd8>
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f904 	bl	8001be4 <LCD_IO_WriteData8>
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 f8ff 	bl	8001be4 <LCD_IO_WriteData8>
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f8f8 	bl	8001be4 <LCD_IO_WriteData8>
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 f8f3 	bl	8001be4 <LCD_IO_WriteData8>
 80009fe:	202b      	movs	r0, #43	; 0x2b
 8000a00:	f001 f8d4 	bl	8001bac <LCD_IO_WriteCmd8>
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 f8e9 	bl	8001be4 <LCD_IO_WriteData8>
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 f8e4 	bl	8001be4 <LCD_IO_WriteData8>
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f8dd 	bl	8001be4 <LCD_IO_WriteData8>
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 f8d8 	bl	8001be4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	460b      	mov	r3, r1
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000a4e:	202a      	movs	r0, #42	; 0x2a
 8000a50:	f001 f8ac 	bl	8001bac <LCD_IO_WriteCmd8>
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 f8c1 	bl	8001be4 <LCD_IO_WriteData8>
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f8bc 	bl	8001be4 <LCD_IO_WriteData8>
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	0a1b      	lsrs	r3, r3, #8
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f8b5 	bl	8001be4 <LCD_IO_WriteData8>
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f8b0 	bl	8001be4 <LCD_IO_WriteData8>
 8000a84:	202b      	movs	r0, #43	; 0x2b
 8000a86:	f001 f891 	bl	8001bac <LCD_IO_WriteCmd8>
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f8a6 	bl	8001be4 <LCD_IO_WriteData8>
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f8a1 	bl	8001be4 <LCD_IO_WriteData8>
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f89a 	bl	8001be4 <LCD_IO_WriteData8>
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 f895 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000aba:	202c      	movs	r0, #44	; 0x2c
 8000abc:	f001 f876 	bl	8001bac <LCD_IO_WriteCmd8>
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f8aa 	bl	8001c1c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	80fb      	strh	r3, [r7, #6]
 8000adc:	4613      	mov	r3, r2
 8000ade:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4925      	ldr	r1, [pc, #148]	; (8000b78 <ili9341_ReadPixel+0xa8>)
 8000ae4:	203a      	movs	r0, #58	; 0x3a
 8000ae6:	f001 f8db 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000aea:	202a      	movs	r0, #42	; 0x2a
 8000aec:	f001 f85e 	bl	8001bac <LCD_IO_WriteCmd8>
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 f873 	bl	8001be4 <LCD_IO_WriteData8>
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 f86e 	bl	8001be4 <LCD_IO_WriteData8>
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 f867 	bl	8001be4 <LCD_IO_WriteData8>
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f862 	bl	8001be4 <LCD_IO_WriteData8>
 8000b20:	202b      	movs	r0, #43	; 0x2b
 8000b22:	f001 f843 	bl	8001bac <LCD_IO_WriteCmd8>
 8000b26:	88bb      	ldrh	r3, [r7, #4]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f858 	bl	8001be4 <LCD_IO_WriteData8>
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f853 	bl	8001be4 <LCD_IO_WriteData8>
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f84c 	bl	8001be4 <LCD_IO_WriteData8>
 8000b4c:	88bb      	ldrh	r3, [r7, #4]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 f847 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 8000b56:	f107 010e 	add.w	r1, r7, #14
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	202e      	movs	r0, #46	; 0x2e
 8000b60:	f001 f908 	bl	8001d74 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000b64:	2201      	movs	r2, #1
 8000b66:	4905      	ldr	r1, [pc, #20]	; (8000b7c <ili9341_ReadPixel+0xac>)
 8000b68:	203a      	movs	r0, #58	; 0x3a
 8000b6a:	f001 f899 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	080030e8 	.word	0x080030e8
 8000b7c:	080030b8 	.word	0x080030b8

08000b80 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4604      	mov	r4, r0
 8000b88:	4608      	mov	r0, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4623      	mov	r3, r4
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	4603      	mov	r3, r0
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	807b      	strh	r3, [r7, #2]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000b9e:	4a2a      	ldr	r2, [pc, #168]	; (8000c48 <ili9341_SetDisplayWindow+0xc8>)
 8000ba0:	88bb      	ldrh	r3, [r7, #4]
 8000ba2:	8013      	strh	r3, [r2, #0]
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	883b      	ldrh	r3, [r7, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <ili9341_SetDisplayWindow+0xcc>)
 8000bb2:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000bb4:	202a      	movs	r0, #42	; 0x2a
 8000bb6:	f000 fff9 	bl	8001bac <LCD_IO_WriteCmd8>
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 f80e 	bl	8001be4 <LCD_IO_WriteData8>
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 f809 	bl	8001be4 <LCD_IO_WriteData8>
 8000bd2:	88fa      	ldrh	r2, [r7, #6]
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	121b      	asrs	r3, r3, #8
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f800 	bl	8001be4 <LCD_IO_WriteData8>
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fff5 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8000bfa:	202b      	movs	r0, #43	; 0x2b
 8000bfc:	f000 ffd6 	bl	8001bac <LCD_IO_WriteCmd8>
 8000c00:	88bb      	ldrh	r3, [r7, #4]
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 ffeb 	bl	8001be4 <LCD_IO_WriteData8>
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 ffe6 	bl	8001be4 <LCD_IO_WriteData8>
 8000c18:	88ba      	ldrh	r2, [r7, #4]
 8000c1a:	883b      	ldrh	r3, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	121b      	asrs	r3, r3, #8
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 ffdd 	bl	8001be4 <LCD_IO_WriteData8>
 8000c2a:	88bb      	ldrh	r3, [r7, #4]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	883b      	ldrh	r3, [r7, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 ffd2 	bl	8001be4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	200001a2 	.word	0x200001a2
 8000c4c:	200001a4 	.word	0x200001a4

08000c50 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4604      	mov	r4, r0
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	4603      	mov	r3, r0
 8000c64:	80bb      	strh	r3, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	807b      	strh	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8000c6e:	202a      	movs	r0, #42	; 0x2a
 8000c70:	f000 ff9c 	bl	8001bac <LCD_IO_WriteCmd8>
 8000c74:	88bb      	ldrh	r3, [r7, #4]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 ffb1 	bl	8001be4 <LCD_IO_WriteData8>
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ffac 	bl	8001be4 <LCD_IO_WriteData8>
 8000c8c:	88ba      	ldrh	r2, [r7, #4]
 8000c8e:	883b      	ldrh	r3, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	3b01      	subs	r3, #1
 8000c94:	121b      	asrs	r3, r3, #8
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 ffa3 	bl	8001be4 <LCD_IO_WriteData8>
 8000c9e:	88bb      	ldrh	r3, [r7, #4]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ff98 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8000cb4:	202b      	movs	r0, #43	; 0x2b
 8000cb6:	f000 ff79 	bl	8001bac <LCD_IO_WriteCmd8>
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 ff8e 	bl	8001be4 <LCD_IO_WriteData8>
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 ff89 	bl	8001be4 <LCD_IO_WriteData8>
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff82 	bl	8001be4 <LCD_IO_WriteData8>
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 ff7d 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8000cea:	883a      	ldrh	r2, [r7, #0]
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	202c      	movs	r0, #44	; 0x2c
 8000cf2:	f000 ffaf 	bl	8001c54 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd90      	pop	{r4, r7, pc}

08000cfe <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000cfe:	b590      	push	{r4, r7, lr}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4604      	mov	r4, r0
 8000d06:	4608      	mov	r0, r1
 8000d08:	4611      	mov	r1, r2
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	80fb      	strh	r3, [r7, #6]
 8000d10:	4603      	mov	r3, r0
 8000d12:	80bb      	strh	r3, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8000d1c:	202a      	movs	r0, #42	; 0x2a
 8000d1e:	f000 ff45 	bl	8001bac <LCD_IO_WriteCmd8>
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 ff5a 	bl	8001be4 <LCD_IO_WriteData8>
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 ff55 	bl	8001be4 <LCD_IO_WriteData8>
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 ff4e 	bl	8001be4 <LCD_IO_WriteData8>
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 ff49 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8000d52:	202b      	movs	r0, #43	; 0x2b
 8000d54:	f000 ff2a 	bl	8001bac <LCD_IO_WriteCmd8>
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 ff3f 	bl	8001be4 <LCD_IO_WriteData8>
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 ff3a 	bl	8001be4 <LCD_IO_WriteData8>
 8000d70:	887a      	ldrh	r2, [r7, #2]
 8000d72:	883b      	ldrh	r3, [r7, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	3b01      	subs	r3, #1
 8000d78:	121b      	asrs	r3, r3, #8
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 ff31 	bl	8001be4 <LCD_IO_WriteData8>
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	883b      	ldrh	r3, [r7, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 ff26 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8000d98:	883a      	ldrh	r2, [r7, #0]
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	202c      	movs	r0, #44	; 0x2c
 8000da0:	f000 ff58 	bl	8001c54 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}

08000dac <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4604      	mov	r4, r0
 8000db4:	4608      	mov	r0, r1
 8000db6:	4611      	mov	r1, r2
 8000db8:	461a      	mov	r2, r3
 8000dba:	4623      	mov	r3, r4
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80bb      	strh	r3, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	807b      	strh	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000dca:	202a      	movs	r0, #42	; 0x2a
 8000dcc:	f000 feee 	bl	8001bac <LCD_IO_WriteCmd8>
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	0a1b      	lsrs	r3, r3, #8
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 ff03 	bl	8001be4 <LCD_IO_WriteData8>
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fefe 	bl	8001be4 <LCD_IO_WriteData8>
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	4413      	add	r3, r2
 8000dee:	3b01      	subs	r3, #1
 8000df0:	121b      	asrs	r3, r3, #8
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fef5 	bl	8001be4 <LCD_IO_WriteData8>
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	887b      	ldrh	r3, [r7, #2]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3b01      	subs	r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 feea 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000e10:	202b      	movs	r0, #43	; 0x2b
 8000e12:	f000 fecb 	bl	8001bac <LCD_IO_WriteCmd8>
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fee0 	bl	8001be4 <LCD_IO_WriteData8>
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fedb 	bl	8001be4 <LCD_IO_WriteData8>
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	883b      	ldrh	r3, [r7, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	3b01      	subs	r3, #1
 8000e36:	121b      	asrs	r3, r3, #8
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fed2 	bl	8001be4 <LCD_IO_WriteData8>
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	883b      	ldrh	r3, [r7, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fec7 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	883a      	ldrh	r2, [r7, #0]
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	8b3b      	ldrh	r3, [r7, #24]
 8000e62:	4619      	mov	r1, r3
 8000e64:	202c      	movs	r0, #44	; 0x2c
 8000e66:	f000 fef5 	bl	8001c54 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd90      	pop	{r4, r7, pc}
	...

08000e74 <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	603a      	str	r2, [r7, #0]
 8000e7e:	80fb      	strh	r3, [r7, #6]
 8000e80:	460b      	mov	r3, r1
 8000e82:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e8a:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000e92:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 8000ea6:	2036      	movs	r0, #54	; 0x36
 8000ea8:	f000 fe80 	bl	8001bac <LCD_IO_WriteCmd8>
 8000eac:	20a8      	movs	r0, #168	; 0xa8
 8000eae:	f000 fe99 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 8000eb2:	202b      	movs	r0, #43	; 0x2b
 8000eb4:	f000 fe7a 	bl	8001bac <LCD_IO_WriteCmd8>
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <ili9341_DrawBitmap+0xb0>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8000ec0:	121b      	asrs	r3, r3, #8
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fe8d 	bl	8001be4 <LCD_IO_WriteData8>
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <ili9341_DrawBitmap+0xb0>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	f06f 0310 	mvn.w	r3, #16
 8000ed4:	1a9b      	subs	r3, r3, r2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fe83 	bl	8001be4 <LCD_IO_WriteData8>
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <ili9341_DrawBitmap+0xb4>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8000ee6:	121b      	asrs	r3, r3, #8
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fe7a 	bl	8001be4 <LCD_IO_WriteData8>
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <ili9341_DrawBitmap+0xb4>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	f06f 0310 	mvn.w	r3, #16
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fe70 	bl	8001be4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	6839      	ldr	r1, [r7, #0]
 8000f08:	202c      	movs	r0, #44	; 0x2c
 8000f0a:	f000 fee9 	bl	8001ce0 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8000f0e:	2036      	movs	r0, #54	; 0x36
 8000f10:	f000 fe4c 	bl	8001bac <LCD_IO_WriteCmd8>
 8000f14:	20e8      	movs	r0, #232	; 0xe8
 8000f16:	f000 fe65 	bl	8001be4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001a4 	.word	0x200001a4
 8000f28:	200001a2 	.word	0x200001a2

08000f2c <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4604      	mov	r4, r0
 8000f34:	4608      	mov	r0, r1
 8000f36:	4611      	mov	r1, r2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	80fb      	strh	r3, [r7, #6]
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80bb      	strh	r3, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
 8000f46:	4613      	mov	r3, r2
 8000f48:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	887a      	ldrh	r2, [r7, #2]
 8000f4e:	88b9      	ldrh	r1, [r7, #4]
 8000f50:	88f8      	ldrh	r0, [r7, #6]
 8000f52:	f7ff fe15 	bl	8000b80 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	883a      	ldrh	r2, [r7, #0]
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	69b9      	ldr	r1, [r7, #24]
 8000f62:	202c      	movs	r0, #44	; 0x2c
 8000f64:	f000 febc 	bl	8001ce0 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	4603      	mov	r3, r0
 8000f84:	80bb      	strh	r3, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000f8e:	883b      	ldrh	r3, [r7, #0]
 8000f90:	887a      	ldrh	r2, [r7, #2]
 8000f92:	88b9      	ldrh	r1, [r7, #4]
 8000f94:	88f8      	ldrh	r0, [r7, #6]
 8000f96:	f7ff fdf3 	bl	8000b80 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	490b      	ldr	r1, [pc, #44]	; (8000fcc <ili9341_ReadRGBImage+0x5c>)
 8000f9e:	203a      	movs	r0, #58	; 0x3a
 8000fa0:	f000 fe7e 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	883a      	ldrh	r2, [r7, #0]
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2301      	movs	r3, #1
 8000fb0:	69b9      	ldr	r1, [r7, #24]
 8000fb2:	202e      	movs	r0, #46	; 0x2e
 8000fb4:	f000 fede 	bl	8001d74 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4905      	ldr	r1, [pc, #20]	; (8000fd0 <ili9341_ReadRGBImage+0x60>)
 8000fbc:	203a      	movs	r0, #58	; 0x3a
 8000fbe:	f000 fe6f 	bl	8001ca0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	080030e8 	.word	0x080030e8
 8000fd0:	080030b8 	.word	0x080030b8

08000fd4 <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <ili9341_Scroll+0xb4>)
 8000fe8:	88db      	ldrh	r3, [r3, #6]
 8000fea:	88ba      	ldrh	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d104      	bne.n	8000ffa <ili9341_Scroll+0x26>
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <ili9341_Scroll+0xb4>)
 8000ff2:	885b      	ldrh	r3, [r3, #2]
 8000ff4:	887a      	ldrh	r2, [r7, #2]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d013      	beq.n	8001022 <ili9341_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <ili9341_Scroll+0xb4>)
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <ili9341_Scroll+0xb4>)
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8001006:	88ba      	ldrh	r2, [r7, #4]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <ili9341_Scroll+0xb4>)
 8001016:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 8001018:	2203      	movs	r2, #3
 800101a:	491c      	ldr	r1, [pc, #112]	; (800108c <ili9341_Scroll+0xb8>)
 800101c:	2033      	movs	r0, #51	; 0x33
 800101e:	f000 fe5f 	bl	8001ce0 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8001022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <ili9341_Scroll+0xb4>)
 8001028:	8892      	ldrh	r2, [r2, #4]
 800102a:	fb93 f1f2 	sdiv	r1, r3, r2
 800102e:	fb01 f202 	mul.w	r2, r1, r2
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8001036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da0a      	bge.n	8001054 <ili9341_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <ili9341_Scroll+0xb4>)
 8001040:	889a      	ldrh	r2, [r3, #4]
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4413      	add	r3, r2
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <ili9341_Scroll+0xb4>)
 800104a:	885b      	ldrh	r3, [r3, #2]
 800104c:	4413      	add	r3, r2
 800104e:	b29b      	uxth	r3, r3
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	e005      	b.n	8001060 <ili9341_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <ili9341_Scroll+0xb4>)
 8001056:	885a      	ldrh	r2, [r3, #2]
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4413      	add	r3, r2
 800105c:	b29b      	uxth	r3, r3
 800105e:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <ili9341_Scroll+0xb4>)
 8001066:	8812      	ldrh	r2, [r2, #0]
 8001068:	4293      	cmp	r3, r2
 800106a:	d009      	beq.n	8001080 <ili9341_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 800106c:	88fa      	ldrh	r2, [r7, #6]
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <ili9341_Scroll+0xb4>)
 8001070:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <ili9341_Scroll+0xb4>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	4619      	mov	r1, r3
 800107a:	2037      	movs	r0, #55	; 0x37
 800107c:	f000 fdea 	bl	8001c54 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001a8 	.word	0x200001a8
 800108c:	200001aa 	.word	0x200001aa

08001090 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <BSP_LCD_Init+0x3c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <BSP_LCD_Init+0x40>)
 80010a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a8:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <BSP_LCD_Init+0x40>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <BSP_LCD_Init+0x40>)
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <BSP_LCD_Init+0x44>)
 80010b4:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 80010b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010ba:	f000 f825 	bl	8001108 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000050 	.word	0x20000050
 80010d0:	200001b0 	.word	0x200001b0
 80010d4:	20000000 	.word	0x20000000

080010d8 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <BSP_LCD_GetXSize+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	4798      	blx	r3
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000050 	.word	0x20000050

080010f0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <BSP_LCD_GetYSize+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	4798      	blx	r3
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000050 	.word	0x20000050

08001108 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <BSP_LCD_Clear+0x38>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001118:	f7ff ffde 	bl	80010d8 <BSP_LCD_GetXSize>
 800111c:	4603      	mov	r3, r0
 800111e:	461d      	mov	r5, r3
 8001120:	f7ff ffe6 	bl	80010f0 <BSP_LCD_GetYSize>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	462a      	mov	r2, r5
 8001130:	2100      	movs	r1, #0
 8001132:	2000      	movs	r0, #0
 8001134:	47a0      	blx	r4
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	20000050 	.word	0x20000050

08001144 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	603a      	str	r2, [r7, #0]
 800114e:	80fb      	strh	r3, [r7, #6]
 8001150:	460b      	mov	r3, r1
 8001152:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	3312      	adds	r3, #18
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	3313      	adds	r3, #19
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	441a      	add	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3314      	adds	r3, #20
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	441a      	add	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3315      	adds	r3, #21
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	061b      	lsls	r3, r3, #24
 8001180:	4413      	add	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3316      	adds	r3, #22
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3317      	adds	r3, #23
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	441a      	add	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	3318      	adds	r3, #24
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	441a      	add	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3319      	adds	r3, #25
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	061b      	lsls	r3, r3, #24
 80011a8:	4413      	add	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	88b9      	ldrh	r1, [r7, #4]
 80011b6:	88f8      	ldrh	r0, [r7, #6]
 80011b8:	f000 f81e 	bl	80011f8 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <BSP_LCD_DrawBitmap+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <BSP_LCD_DrawBitmap+0xb0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	88b9      	ldrh	r1, [r7, #4]
 80011ce:	88f8      	ldrh	r0, [r7, #6]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80011d4:	f7ff ff80 	bl	80010d8 <BSP_LCD_GetXSize>
 80011d8:	4603      	mov	r3, r0
 80011da:	461c      	mov	r4, r3
 80011dc:	f7ff ff88 	bl	80010f0 <BSP_LCD_GetYSize>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4622      	mov	r2, r4
 80011e4:	2100      	movs	r1, #0
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f806 	bl	80011f8 <SetDisplayWindow>
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	20000050 	.word	0x20000050

080011f8 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	4603      	mov	r3, r0
 800120c:	80bb      	strh	r3, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <SetDisplayWindow+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SetDisplayWindow+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	69dc      	ldr	r4, [r3, #28]
 8001226:	883b      	ldrh	r3, [r7, #0]
 8001228:	887a      	ldrh	r2, [r7, #2]
 800122a:	88b9      	ldrh	r1, [r7, #4]
 800122c:	88f8      	ldrh	r0, [r7, #6]
 800122e:	47a0      	blx	r4
  }  
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	20000050 	.word	0x20000050

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4906      	ldr	r1, [pc, #24]	; (8001270 <__NVIC_EnableIRQ+0x34>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <LcdDirRead+0x70>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <LcdDirRead+0x70>)
 80012da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80012de:	6013      	str	r3, [r2, #0]
  while(d--)
 80012e0:	e008      	b.n	80012f4 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <LcdDirRead+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fb99 	bl	8001a20 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <LcdDirRead+0x74>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
  while(d--)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f1      	bne.n	80012e2 <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <LcdDirRead+0x70>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <LcdDirRead+0x70>)
 8001308:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 800130c:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800130e:	e002      	b.n	8001316 <LcdDirRead+0x4e>
    d = SPIX->DR;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LcdDirRead+0x78>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <LcdDirRead+0x7c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f8      	bne.n	8001310 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <LcdDirRead+0x78>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <LcdDirRead+0x78>)
 8001328:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 800132c:	6013      	str	r3, [r2, #0]
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010c04 	.word	0x40010c04
 800133c:	422181b4 	.word	0x422181b4
 8001340:	40003800 	.word	0x40003800
 8001344:	42070100 	.word	0x42070100

08001348 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <LcdDirWrite+0x5c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <LcdDirWrite+0x5c>)
 8001354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001358:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800135a:	e002      	b.n	8001362 <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <LcdDirWrite+0x5c>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <LcdDirWrite+0x60>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f8      	bne.n	800135c <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <LcdDirWrite+0x5c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <LcdDirWrite+0x5c>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 fb50 	bl	8001a20 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001380:	e002      	b.n	8001388 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <LcdDirWrite+0x5c>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <LcdDirWrite+0x60>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f8      	bne.n	8001382 <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <LcdDirWrite+0x5c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <LcdDirWrite+0x5c>)
 8001396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40003800 	.word	0x40003800
 80013a8:	42070100 	.word	0x42070100

080013ac <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <LcdWrite8+0x2c>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 80013bc:	2002      	movs	r0, #2
 80013be:	f000 fb2f 	bl	8001a20 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80013c2:	bf00      	nop
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <LcdWrite8+0x30>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1fb      	bne.n	80013c4 <LcdWrite8+0x18>
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40003800 	.word	0x40003800
 80013dc:	4207011c 	.word	0x4207011c

080013e0 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <LcdCmdWrite8+0x34>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <LcdCmdWrite8+0x38>)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 80013f6:	2002      	movs	r0, #2
 80013f8:	f000 fb12 	bl	8001a20 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80013fc:	bf00      	nop
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <LcdCmdWrite8+0x3c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1fb      	bne.n	80013fe <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <LcdCmdWrite8+0x34>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	422181ac 	.word	0x422181ac
 8001418:	40003800 	.word	0x40003800
 800141c:	4207011c 	.word	0x4207011c

08001420 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <LcdWrite16+0x2c>)
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f000 faf5 	bl	8001a20 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8001436:	bf00      	nop
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LcdWrite16+0x30>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1fb      	bne.n	8001438 <LcdWrite16+0x18>
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40003800 	.word	0x40003800
 8001450:	4207011c 	.word	0x4207011c

08001454 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8001458:	bf00      	nop
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <WaitForDmaEnd+0x18>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1fb      	bne.n	800145a <WaitForDmaEnd+0x6>
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	200001bc 	.word	0x200001bc

08001470 <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <DMA1_Channel5_IRQHandler+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <DMA1_Channel5_IRQHandler+0x64>)
 8001482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001486:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <DMA1_Channel5_IRQHandler+0x68>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 800148e:	bf00      	nop
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <DMA1_Channel5_IRQHandler+0x68>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <DMA1_Channel5_IRQHandler+0x6c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80014a2:	bf00      	nop
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <DMA1_Channel5_IRQHandler+0x70>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1fb      	bne.n	80014a4 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 fab7 	bl	8001a20 <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <DMA1_Channel5_IRQHandler+0x74>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <DMA1_Channel5_IRQHandler+0x78>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <DMA1_Channel5_IRQHandler+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 80014c6:	e003      	b.n	80014d0 <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <DMA1_Channel5_IRQHandler+0x64>)
 80014ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ce:	605a      	str	r2, [r3, #4]
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020058 	.word	0x40020058
 80014dc:	42070084 	.word	0x42070084
 80014e0:	4207011c 	.word	0x4207011c
 80014e4:	200001bc 	.word	0x200001bc
 80014e8:	422181b0 	.word	0x422181b0

080014ec <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <LCD_IO_WriteMultiData+0x74>)
 80014fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014fe:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <LCD_IO_WriteMultiData+0x78>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a17      	ldr	r2, [pc, #92]	; (8001564 <LCD_IO_WriteMultiData+0x78>)
 8001506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800150a:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001512:	bf00      	nop
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f9      	bne.n	8001514 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <LCD_IO_WriteMultiData+0x80>)
 800152a:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <LCD_IO_WriteMultiData+0x84>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <LCD_IO_WriteMultiData+0x78>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <LCD_IO_WriteMultiData+0x78>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <LCD_IO_WriteMultiData+0x7c>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40020000 	.word	0x40020000
 8001564:	40003800 	.word	0x40003800
 8001568:	40020058 	.word	0x40020058
 800156c:	4000380c 	.word	0x4000380c
 8001570:	42070084 	.word	0x42070084

08001574 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <LCD_IO_WriteMultiData8+0x98>)
 800158c:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <LCD_IO_WriteMultiData8+0x98>)
 8001590:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001592:	f241 0312 	movw	r3, #4114	; 0x1012
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e030      	b.n	80015fc <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 800159a:	f241 0392 	movw	r3, #4242	; 0x1092
 800159e:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 80015a0:	e02c      	b.n	80015fc <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d80f      	bhi.n	80015cc <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <LCD_IO_WriteMultiData8+0x9c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f7ff ff98 	bl	80014ec <LCD_IO_WriteMultiData>
      Size = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d01a      	beq.n	80015fc <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 80015c6:	f7ff ff45 	bl	8001454 <WaitForDmaEnd>
 80015ca:	e017      	b.n	80015fc <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <LCD_IO_WriteMultiData8+0x9c>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff ff87 	bl	80014ec <LCD_IO_WriteMultiData>
      if(dinc)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d004      	beq.n	80015ee <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015ea:	33fe      	adds	r3, #254	; 0xfe
 80015ec:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80015f4:	3bfe      	subs	r3, #254	; 0xfe
 80015f6:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 80015f8:	f7ff ff2c 	bl	8001454 <WaitForDmaEnd>
  while(Size)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1cf      	bne.n	80015a2 <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200001c0 	.word	0x200001c0
 8001610:	200001bc 	.word	0x200001bc

08001614 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <LCD_IO_WriteMultiData16+0xdc>)
 800162c:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <LCD_IO_WriteMultiData16+0xdc>)
 8001630:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8001632:	f241 5312 	movw	r3, #5394	; 0x1512
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e051      	b.n	80016de <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 800163a:	f241 5392 	movw	r3, #5522	; 0x1592
 800163e:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8001640:	e04d      	b.n	80016de <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001648:	4293      	cmp	r3, r2
 800164a:	d80f      	bhi.n	800166c <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800164c:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <LCD_IO_WriteMultiData16+0xe0>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff ff48 	bl	80014ec <LCD_IO_WriteMultiData>
      Size = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03b      	beq.n	80016de <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 8001666:	f7ff fef5 	bl	8001454 <WaitForDmaEnd>
 800166a:	e038      	b.n	80016de <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <LCD_IO_WriteMultiData16+0xe4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d81b      	bhi.n	80016ac <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <LCD_IO_WriteMultiData16+0xe0>)
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001680:	3bfe      	subs	r3, #254	; 0xfe
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4619      	mov	r1, r3
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff ff30 	bl	80014ec <LCD_IO_WriteMultiData>
      if(dinc)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <LCD_IO_WriteMultiData16+0xe8>)
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 80016a0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80016a4:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 80016a6:	f7ff fed5 	bl	8001454 <WaitForDmaEnd>
 80016aa:	e018      	b.n	80016de <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <LCD_IO_WriteMultiData16+0xe0>)
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7ff ff17 	bl	80014ec <LCD_IO_WriteMultiData>
      if(dinc)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80016ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016ce:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80016d6:	3bfe      	subs	r3, #254	; 0xfe
 80016d8:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 80016da:	f7ff febb 	bl	8001454 <WaitForDmaEnd>
  while(Size)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ae      	bne.n	8001642 <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200001c2 	.word	0x200001c2
 80016f4:	200001bc 	.word	0x200001bc
 80016f8:	0001fffb 	.word	0x0001fffb
 80016fc:	7fff0002 	.word	0x7fff0002

08001700 <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <DMA1_Channel4_IRQHandler+0x98>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03a      	beq.n	8001788 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <DMA1_Channel4_IRQHandler+0x98>)
 8001714:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001718:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <DMA1_Channel4_IRQHandler+0x9c>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001720:	e002      	b.n	8001728 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <DMA1_Channel4_IRQHandler+0xa0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <DMA1_Channel4_IRQHandler+0xa4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f8      	bne.n	8001722 <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <DMA1_Channel4_IRQHandler+0xa8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001738:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <DMA1_Channel4_IRQHandler+0xa8>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	f043 0318 	orr.w	r3, r3, #24
 8001746:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8001748:	2001      	movs	r0, #1
 800174a:	f000 f969 	bl	8001a20 <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800174e:	e003      	b.n	8001758 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <DMA1_Channel4_IRQHandler+0xa8>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <DMA1_Channel4_IRQHandler+0xa4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f7      	bne.n	8001750 <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <DMA1_Channel4_IRQHandler+0xa8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <DMA1_Channel4_IRQHandler+0xa8>)
 8001766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176a:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <DMA1_Channel4_IRQHandler+0xac>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001772:	bf00      	nop
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <DMA1_Channel4_IRQHandler+0xac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f9      	bne.n	8001774 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <DMA1_Channel4_IRQHandler+0xb0>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8001786:	e003      	b.n	8001790 <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <DMA1_Channel4_IRQHandler+0x98>)
 800178a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40020000 	.word	0x40020000
 800179c:	42070080 	.word	0x42070080
 80017a0:	4000380c 	.word	0x4000380c
 80017a4:	42070100 	.word	0x42070100
 80017a8:	40003800 	.word	0x40003800
 80017ac:	40020044 	.word	0x40020044
 80017b0:	200001bc 	.word	0x200001bc

080017b4 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <LCD_IO_ReadMultiData+0x5c>)
 80017c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c6:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80017ce:	bf00      	nop
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <LCD_IO_ReadMultiData+0x64>)
 80017e6:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <LCD_IO_ReadMultiData+0x60>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <LCD_IO_ReadMultiData+0x68>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40020000 	.word	0x40020000
 8001814:	40020044 	.word	0x40020044
 8001818:	4000380c 	.word	0x4000380c
 800181c:	42070080 	.word	0x42070080

08001820 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 800182a:	f241 0382 	movw	r3, #4226	; 0x1082
 800182e:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8001830:	e024      	b.n	800187c <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001838:	4293      	cmp	r3, r2
 800183a:	d913      	bls.n	8001864 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <LCD_IO_ReadMultiData8+0x74>)
 800183e:	2202      	movs	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ffb3 	bl	80017b4 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001854:	3bfe      	subs	r3, #254	; 0xfe
 8001856:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800185e:	33fe      	adds	r3, #254	; 0xfe
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	e009      	b.n	8001878 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <LCD_IO_ReadMultiData8+0x74>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa0 	bl	80017b4 <LCD_IO_ReadMultiData>
      Size = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8001878:	f7ff fdec 	bl	8001454 <WaitForDmaEnd>
  while(Size)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1d7      	bne.n	8001832 <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <LCD_IO_ReadMultiData8+0x78>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8001888:	f7ff fd5e 	bl	8001348 <LcdDirWrite>
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200001bc 	.word	0x200001bc
 8001898:	422181b0 	.word	0x422181b0

0800189c <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80018ae:	4b54      	ldr	r3, [pc, #336]	; (8001a00 <LCD_IO_ReadMultiData16to24+0x164>)
 80018b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b4:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80018bc:	bf00      	nop
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <LCD_IO_ReadMultiData16to24+0x16c>)
 80018ce:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018d2:	4a4e      	ldr	r2, [pc, #312]	; (8001a0c <LCD_IO_ReadMultiData16to24+0x170>)
 80018d4:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 80018d6:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018dc:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 80018de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e2:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018e6:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 80018ea:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a44      	ldr	r2, [pc, #272]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <LCD_IO_ReadMultiData16to24+0x174>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
  while(Size)
 80018fe:	e044      	b.n	800198a <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	429a      	cmp	r2, r3
 8001908:	d03f      	beq.n	800198a <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8001916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191a:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	1c53      	adds	r3, r2, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	6139      	str	r1, [r7, #16]
 800192e:	4936      	ldr	r1, [pc, #216]	; (8001a08 <LCD_IO_ReadMultiData16to24+0x16c>)
 8001930:	5c8a      	ldrb	r2, [r1, r2]
 8001932:	3318      	adds	r3, #24
 8001934:	443b      	add	r3, r7
 8001936:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2bff      	cmp	r3, #255	; 0xff
 800193e:	d901      	bls.n	8001944 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d11f      	bne.n	800198a <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
        Size--;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3b01      	subs	r3, #1
 8001952:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8001954:	7a3b      	ldrb	r3, [r7, #8]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21b      	sxth	r3, r3
 800195a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800195e:	f023 0307 	bic.w	r3, r3, #7
 8001962:	b21a      	sxth	r2, r3
 8001964:	7a7b      	ldrb	r3, [r7, #9]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	b21b      	sxth	r3, r3
 800196a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21a      	sxth	r2, r3
 8001974:	7abb      	ldrb	r3, [r7, #10]
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	b21b      	sxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b219      	sxth	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1c9a      	adds	r2, r3, #2
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	b28a      	uxth	r2, r1
 8001988:	801a      	strh	r2, [r3, #0]
  while(Size)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1b7      	bne.n	8001900 <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <LCD_IO_ReadMultiData16to24+0x174>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001996:	e003      	b.n	80019a0 <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <LCD_IO_ReadMultiData16to24+0x178>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <LCD_IO_ReadMultiData16to24+0x17c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f7      	bne.n	8001998 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <LCD_IO_ReadMultiData16to24+0x178>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019b0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <LCD_IO_ReadMultiData16to24+0x178>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f000 f82d 	bl	8001a20 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80019c6:	e003      	b.n	80019d0 <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <LCD_IO_ReadMultiData16to24+0x178>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <LCD_IO_ReadMultiData16to24+0x17c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f7      	bne.n	80019c8 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80019de:	bf00      	nop
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LCD_IO_ReadMultiData16to24+0x168>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f9      	bne.n	80019e0 <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <LCD_IO_ReadMultiData16to24+0x180>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 80019f2:	f7ff fca9 	bl	8001348 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020044 	.word	0x40020044
 8001a08:	200001c8 	.word	0x200001c8
 8001a0c:	4000380c 	.word	0x4000380c
 8001a10:	42070080 	.word	0x42070080
 8001a14:	40003800 	.word	0x40003800
 8001a18:	42070100 	.word	0x42070100
 8001a1c:	422181b0 	.word	0x422181b0

08001a20 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  while(c--);
 8001a28:	bf00      	nop
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1fa      	bne.n	8001a2a <LCD_IO_Delay+0xa>
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fa1b 	bl	8001e84 <HAL_Delay>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <LCD_IO_Bl_OnOff+0x28>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8001a6e:	e002      	b.n	8001a76 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <LCD_IO_Bl_OnOff+0x28>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	42220198 	.word	0x42220198

08001a84 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <LCD_IO_Init+0x104>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a3e      	ldr	r2, [pc, #248]	; (8001b88 <LCD_IO_Init+0x104>)
 8001a8e:	f043 0318 	orr.w	r3, r3, #24
 8001a92:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 8001a94:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <LCD_IO_Init+0x104>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <LCD_IO_Init+0x104>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <LCD_IO_Init+0x108>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001aa8:	4a38      	ldr	r2, [pc, #224]	; (8001b8c <LCD_IO_Init+0x108>)
 8001aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aae:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <LCD_IO_Init+0x10c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ab8:	4a35      	ldr	r2, [pc, #212]	; (8001b90 <LCD_IO_Init+0x10c>)
 8001aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001abe:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff ffc9 	bl	8001a58 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <LCD_IO_Init+0x108>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <LCD_IO_Init+0x108>)
 8001ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad4:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <LCD_IO_Init+0x110>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <LCD_IO_Init+0x114>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <LCD_IO_Init+0x118>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <LCD_IO_Init+0x108>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <LCD_IO_Init+0x108>)
 8001af2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001af6:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <LCD_IO_Init+0x108>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <LCD_IO_Init+0x108>)
 8001b02:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001b06:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <LCD_IO_Init+0x11c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <LCD_IO_Init+0x120>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <LCD_IO_Init+0x108>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <LCD_IO_Init+0x108>)
 8001b1e:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8001b22:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <LCD_IO_Init+0x108>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <LCD_IO_Init+0x108>)
 8001b2e:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8001b32:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <LCD_IO_Init+0x124>)
 8001b36:	f240 324f 	movw	r2, #847	; 0x34f
 8001b3a:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <LCD_IO_Init+0x124>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <LCD_IO_Init+0x124>)
 8001b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b46:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f7ff ff79 	bl	8001a40 <LCD_Delay>
  LCD_RST_ON;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <LCD_IO_Init+0x110>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8001b54:	200a      	movs	r0, #10
 8001b56:	f7ff ff73 	bl	8001a40 <LCD_Delay>
  LCD_RST_OFF;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <LCD_IO_Init+0x110>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8001b60:	200a      	movs	r0, #10
 8001b62:	f7ff ff6d 	bl	8001a40 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8001b66:	210f      	movs	r1, #15
 8001b68:	200f      	movs	r0, #15
 8001b6a:	f7ff fb83 	bl	8001274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f7ff fb64 	bl	800123c <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8001b74:	210f      	movs	r1, #15
 8001b76:	200e      	movs	r0, #14
 8001b78:	f7ff fb7c 	bl	8001274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8001b7c:	200e      	movs	r0, #14
 8001b7e:	f7ff fb5d 	bl	800123c <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010c04 	.word	0x40010c04
 8001b90:	40011000 	.word	0x40011000
 8001b94:	422181a8 	.word	0x422181a8
 8001b98:	422181ac 	.word	0x422181ac
 8001b9c:	422181b0 	.word	0x422181b0
 8001ba0:	422181b4 	.word	0x422181b4
 8001ba4:	424203b8 	.word	0x424203b8
 8001ba8:	40003800 	.word	0x40003800

08001bac <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8001bb6:	f7ff fc4d 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode8();
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <LCD_IO_WriteCmd8+0x30>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <LCD_IO_WriteCmd8+0x34>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fc09 	bl	80013e0 <LcdCmdWrite8>
  LCD_CS_OFF;
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <LCD_IO_WriteCmd8+0x34>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	4207002c 	.word	0x4207002c
 8001be0:	422181b0 	.word	0x422181b0

08001be4 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8001bee:	f7ff fc31 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode8();
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <LCD_IO_WriteData8+0x30>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <LCD_IO_WriteData8+0x34>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fbd3 	bl	80013ac <LcdWrite8>
  LCD_CS_OFF;
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <LCD_IO_WriteData8+0x34>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	4207002c 	.word	0x4207002c
 8001c18:	422181b0 	.word	0x422181b0

08001c1c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
 8001c26:	f7ff fc15 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode16();
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LCD_IO_WriteData16+0x30>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <LCD_IO_WriteData16+0x34>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fbf1 	bl	8001420 <LcdWrite16>
  LCD_CS_OFF;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <LCD_IO_WriteData16+0x34>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	4207002c 	.word	0x4207002c
 8001c50:	422181b0 	.word	0x422181b0

08001c54 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	603a      	str	r2, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
 8001c60:	460b      	mov	r3, r1
 8001c62:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8001c64:	f7ff fbf6 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode8();
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <LCD_IO_WriteCmd8DataFill16+0x48>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fbb2 	bl	80013e0 <LcdCmdWrite8>
  LcdSpiMode16();
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fcc3 	bl	8001614 <LCD_IO_WriteMultiData16>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	4207002c 	.word	0x4207002c
 8001c9c:	422181b0 	.word	0x422181b0

08001ca0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001cae:	f7ff fbd1 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode8();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fb8d 	bl	80013e0 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	68b8      	ldr	r0, [r7, #8]
 8001ccc:	f7ff fc52 	bl	8001574 <LCD_IO_WriteMultiData8>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	4207002c 	.word	0x4207002c
 8001cdc:	422181b0 	.word	0x422181b0

08001ce0 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001cee:	f7ff fbb1 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode8();
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fb6d 	bl	80013e0 <LcdCmdWrite8>
  LcdSpiMode16();
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68b8      	ldr	r0, [r7, #8]
 8001d12:	f7ff fc7f 	bl	8001614 <LCD_IO_WriteMultiData16>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	4207002c 	.word	0x4207002c
 8001d24:	422181b0 	.word	0x422181b0

08001d28 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001d38:	f7ff fb8c 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode8();
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fb48 	bl	80013e0 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001d56:	6838      	ldr	r0, [r7, #0]
 8001d58:	f7ff fab6 	bl	80012c8 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	68b8      	ldr	r0, [r7, #8]
 8001d60:	f7ff fd5e 	bl	8001820 <LCD_IO_ReadMultiData8>
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	4207002c 	.word	0x4207002c
 8001d70:	422181b0 	.word	0x422181b0

08001d74 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001d84:	f7ff fb66 	bl	8001454 <WaitForDmaEnd>
  LcdSpiMode8();
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fb22 	bl	80013e0 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff fa90 	bl	80012c8 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f7ff fd76 	bl	800189c <LCD_IO_ReadMultiData16to24>
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	4207002c 	.word	0x4207002c
 8001dbc:	422181b0 	.word	0x422181b0

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_Init+0x28>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_Init+0x28>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f947 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 f808 	bl	8001dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7fe fb74 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x54>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x58>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f95f 	bl	80020ce <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 f927 	bl	800207a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_InitTick+0x5c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000058 	.word	0x20000058
 8001e48:	20000054 	.word	0x20000054

08001e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x1c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x20>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <HAL_IncTick+0x20>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000058 	.word	0x20000058
 8001e6c:	200002c8 	.word	0x200002c8

08001e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <HAL_GetTick+0x10>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	200002c8 	.word	0x200002c8

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffe0 	bl	8001e70 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000058 	.word	0x20000058

08001ecc <__NVIC_SetPriorityGrouping>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4906      	ldr	r1, [pc, #24]	; (8001f64 <__NVIC_EnableIRQ+0x34>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff90 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff2d 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff42 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff90 	bl	8001fbc <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5f 	bl	8001f68 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff35 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffa2 	bl	8002020 <SysTick_Config>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e043      	b.n	8002186 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_DMA_Init+0xa8>)
 8002106:	4413      	add	r3, r2
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <HAL_DMA_Init+0xac>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_DMA_Init+0xb0>)
 800211a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002132:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002136:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	bffdfff8 	.word	0xbffdfff8
 8002194:	cccccccd 	.word	0xcccccccd
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b08b      	sub	sp, #44	; 0x2c
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e169      	b.n	8002484 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b0:	2201      	movs	r2, #1
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 8158 	bne.w	800247e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a9a      	ldr	r2, [pc, #616]	; (800243c <HAL_GPIO_Init+0x2a0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d05e      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021d8:	4a98      	ldr	r2, [pc, #608]	; (800243c <HAL_GPIO_Init+0x2a0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d875      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021de:	4a98      	ldr	r2, [pc, #608]	; (8002440 <HAL_GPIO_Init+0x2a4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d058      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021e4:	4a96      	ldr	r2, [pc, #600]	; (8002440 <HAL_GPIO_Init+0x2a4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d86f      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021ea:	4a96      	ldr	r2, [pc, #600]	; (8002444 <HAL_GPIO_Init+0x2a8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d052      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021f0:	4a94      	ldr	r2, [pc, #592]	; (8002444 <HAL_GPIO_Init+0x2a8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d869      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021f6:	4a94      	ldr	r2, [pc, #592]	; (8002448 <HAL_GPIO_Init+0x2ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d04c      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021fc:	4a92      	ldr	r2, [pc, #584]	; (8002448 <HAL_GPIO_Init+0x2ac>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d863      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 8002202:	4a92      	ldr	r2, [pc, #584]	; (800244c <HAL_GPIO_Init+0x2b0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d046      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 8002208:	4a90      	ldr	r2, [pc, #576]	; (800244c <HAL_GPIO_Init+0x2b0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d85d      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 800220e:	2b12      	cmp	r3, #18
 8002210:	d82a      	bhi.n	8002268 <HAL_GPIO_Init+0xcc>
 8002212:	2b12      	cmp	r3, #18
 8002214:	d859      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 8002216:	a201      	add	r2, pc, #4	; (adr r2, 800221c <HAL_GPIO_Init+0x80>)
 8002218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221c:	08002297 	.word	0x08002297
 8002220:	08002271 	.word	0x08002271
 8002224:	08002283 	.word	0x08002283
 8002228:	080022c5 	.word	0x080022c5
 800222c:	080022cb 	.word	0x080022cb
 8002230:	080022cb 	.word	0x080022cb
 8002234:	080022cb 	.word	0x080022cb
 8002238:	080022cb 	.word	0x080022cb
 800223c:	080022cb 	.word	0x080022cb
 8002240:	080022cb 	.word	0x080022cb
 8002244:	080022cb 	.word	0x080022cb
 8002248:	080022cb 	.word	0x080022cb
 800224c:	080022cb 	.word	0x080022cb
 8002250:	080022cb 	.word	0x080022cb
 8002254:	080022cb 	.word	0x080022cb
 8002258:	080022cb 	.word	0x080022cb
 800225c:	080022cb 	.word	0x080022cb
 8002260:	08002279 	.word	0x08002279
 8002264:	0800228d 	.word	0x0800228d
 8002268:	4a79      	ldr	r2, [pc, #484]	; (8002450 <HAL_GPIO_Init+0x2b4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226e:	e02c      	b.n	80022ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	623b      	str	r3, [r7, #32]
          break;
 8002276:	e029      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	3304      	adds	r3, #4
 800227e:	623b      	str	r3, [r7, #32]
          break;
 8002280:	e024      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	3308      	adds	r3, #8
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e01f      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	330c      	adds	r3, #12
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e01a      	b.n	80022cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800229e:	2304      	movs	r3, #4
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e013      	b.n	80022cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ac:	2308      	movs	r3, #8
 80022ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	611a      	str	r2, [r3, #16]
          break;
 80022b6:	e009      	b.n	80022cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b8:	2308      	movs	r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	615a      	str	r2, [r3, #20]
          break;
 80022c2:	e003      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
          break;
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x130>
          break;
 80022ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d801      	bhi.n	80022d6 <HAL_GPIO_Init+0x13a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	e001      	b.n	80022da <HAL_GPIO_Init+0x13e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	; 0xff
 80022e0:	d802      	bhi.n	80022e8 <HAL_GPIO_Init+0x14c>
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	e002      	b.n	80022ee <HAL_GPIO_Init+0x152>
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3b08      	subs	r3, #8
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	210f      	movs	r1, #15
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	6a39      	ldr	r1, [r7, #32]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80b1 	beq.w	800247e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800231c:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <HAL_GPIO_Init+0x2b8>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <HAL_GPIO_Init+0x2b8>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_GPIO_Init+0x2b8>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002334:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_GPIO_Init+0x2bc>)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_GPIO_Init+0x2c0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_GPIO_Init+0x1ec>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <HAL_GPIO_Init+0x2c4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00d      	beq.n	8002384 <HAL_GPIO_Init+0x1e8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x1e4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3d      	ldr	r2, [pc, #244]	; (8002468 <HAL_GPIO_Init+0x2cc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_GPIO_Init+0x1e0>
 8002378:	2303      	movs	r3, #3
 800237a:	e006      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 800237c:	2304      	movs	r3, #4
 800237e:	e004      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 8002380:	2302      	movs	r3, #2
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 8002388:	2300      	movs	r3, #0
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	f002 0203 	and.w	r2, r2, #3
 8002390:	0092      	lsls	r2, r2, #2
 8002392:	4093      	lsls	r3, r2
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800239a:	492f      	ldr	r1, [pc, #188]	; (8002458 <HAL_GPIO_Init+0x2bc>)
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	492c      	ldr	r1, [pc, #176]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4928      	ldr	r1, [pc, #160]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4922      	ldr	r1, [pc, #136]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	491e      	ldr	r1, [pc, #120]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_GPIO_Init+0x2d0>)
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4918      	ldr	r1, [pc, #96]	; (800246c <HAL_GPIO_Init+0x2d0>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_GPIO_Init+0x2d0>)
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	43db      	mvns	r3, r3
 800241a:	4914      	ldr	r1, [pc, #80]	; (800246c <HAL_GPIO_Init+0x2d0>)
 800241c:	4013      	ands	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d021      	beq.n	8002470 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_GPIO_Init+0x2d0>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_GPIO_Init+0x2d0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
 8002438:	e021      	b.n	800247e <HAL_GPIO_Init+0x2e2>
 800243a:	bf00      	nop
 800243c:	10320000 	.word	0x10320000
 8002440:	10310000 	.word	0x10310000
 8002444:	10220000 	.word	0x10220000
 8002448:	10210000 	.word	0x10210000
 800244c:	10120000 	.word	0x10120000
 8002450:	10110000 	.word	0x10110000
 8002454:	40021000 	.word	0x40021000
 8002458:	40010000 	.word	0x40010000
 800245c:	40010800 	.word	0x40010800
 8002460:	40010c00 	.word	0x40010c00
 8002464:	40011000 	.word	0x40011000
 8002468:	40011400 	.word	0x40011400
 800246c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_GPIO_Init+0x304>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	43db      	mvns	r3, r3
 8002478:	4909      	ldr	r1, [pc, #36]	; (80024a0 <HAL_GPIO_Init+0x304>)
 800247a:	4013      	ands	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3301      	adds	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f ae8e 	bne.w	80021b0 <HAL_GPIO_Init+0x14>
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	372c      	adds	r7, #44	; 0x2c
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40010400 	.word	0x40010400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f806 	bl	8002504 <HAL_GPIO_EXTI_Callback>
  }
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e272      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8087 	beq.w	8002646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00c      	beq.n	800255e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002544:	4b8f      	ldr	r3, [pc, #572]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d112      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d10b      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d06c      	beq.n	8002644 <HAL_RCC_OscConfig+0x12c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d168      	bne.n	8002644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e24c      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x76>
 8002580:	4b80      	ldr	r3, [pc, #512]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e02e      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x98>
 8002596:	4b7b      	ldr	r3, [pc, #492]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7a      	ldr	r2, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b78      	ldr	r3, [pc, #480]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xbc>
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a71      	ldr	r2, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff fc3c 	bl	8001e70 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff fc38 	bl	8001e70 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e200      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xe4>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff fc28 	bl	8001e70 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fc24 	bl	8001e70 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1ec      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x10c>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1c0      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4939      	ldr	r1, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7ff fbdd 	bl	8001e70 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff fbd9 	bl	8001e70 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1a1      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4927      	ldr	r1, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fbbc 	bl	8001e70 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff fbb8 	bl	8001e70 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e180      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03a      	beq.n	800279c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7ff fb9c 	bl	8001e70 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff fb98 	bl	8001e70 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e160      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800275a:	2001      	movs	r0, #1
 800275c:	f000 fad8 	bl	8002d10 <RCC_Delay>
 8002760:	e01c      	b.n	800279c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7ff fb82 	bl	8001e70 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff fb7e 	bl	8001e70 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d908      	bls.n	8002790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e146      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	42420000 	.word	0x42420000
 800278c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	4b92      	ldr	r3, [pc, #584]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e9      	bne.n	8002770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a6 	beq.w	80028f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b8b      	ldr	r3, [pc, #556]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b88      	ldr	r3, [pc, #544]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a87      	ldr	r2, [pc, #540]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b85      	ldr	r3, [pc, #532]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b82      	ldr	r3, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x4c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <HAL_RCC_OscConfig+0x4c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7e      	ldr	r2, [pc, #504]	; (80029e0 <HAL_RCC_OscConfig+0x4c8>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7ff fb3f 	bl	8001e70 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7ff fb3b 	bl	8001e70 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e103      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x4c8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x312>
 800281c:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a6e      	ldr	r2, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e02d      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x334>
 8002832:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a69      	ldr	r2, [pc, #420]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	e01c      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x356>
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a5a      	ldr	r2, [pc, #360]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a57      	ldr	r2, [pc, #348]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d015      	beq.n	80028ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff faef 	bl	8001e70 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7ff faeb 	bl	8001e70 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0b1      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ee      	beq.n	8002896 <HAL_RCC_OscConfig+0x37e>
 80028b8:	e014      	b.n	80028e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7ff fad9 	bl	8001e70 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7ff fad5 	bl	8001e70 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e09b      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d8:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8087 	beq.w	8002a0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d061      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d146      	bne.n	80029a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7ff faa9 	bl	8001e70 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff faa5 	bl	8001e70 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e06d      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d108      	bne.n	800295c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4921      	ldr	r1, [pc, #132]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a19      	ldr	r1, [r3, #32]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	430b      	orrs	r3, r1
 800296e:	491b      	ldr	r1, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7ff fa79 	bl	8001e70 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7ff fa75 	bl	8001e70 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e03d      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x46a>
 80029a0:	e035      	b.n	8002a0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fa62 	bl	8001e70 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff fa5e 	bl	8001e70 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e026      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x498>
 80029ce:	e01e      	b.n	8002a0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e019      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
 80029e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_OscConfig+0x500>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0d0      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4965      	ldr	r1, [pc, #404]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b8      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a78:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a90:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9c:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	494d      	ldr	r1, [pc, #308]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d040      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d115      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e073      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e06b      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4936      	ldr	r1, [pc, #216]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7ff f9b0 	bl	8001e70 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7ff f9ac 	bl	8001e70 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e053      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d210      	bcs.n	8002b6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	4922      	ldr	r1, [pc, #136]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e032      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4916      	ldr	r1, [pc, #88]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002baa:	f000 f821 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	490a      	ldr	r1, [pc, #40]	; (8002be4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	5ccb      	ldrb	r3, [r1, r3]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1d0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f90e 	bl	8001dec <HAL_InitTick>

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40021000 	.word	0x40021000
 8002be4:	0800cb60 	.word	0x0800cb60
 8002be8:	20000008 	.word	0x20000008
 8002bec:	20000054 	.word	0x20000054

08002bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf0:	b490      	push	{r4, r7}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xac>)
 8002bf8:	1d3c      	adds	r4, r7, #4
 8002bfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c00:	f240 2301 	movw	r3, #513	; 0x201
 8002c04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d002      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x46>
 8002c2e:	e02b      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c32:	623b      	str	r3, [r7, #32]
      break;
 8002c34:	e02b      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	0c9b      	lsrs	r3, r3, #18
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3328      	adds	r3, #40	; 0x28
 8002c40:	443b      	add	r3, r7
 8002c42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0c5b      	lsrs	r3, r3, #17
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	3328      	adds	r3, #40	; 0x28
 8002c5e:	443b      	add	r3, r7
 8002c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c6a:	fb03 f202 	mul.w	r2, r3, r2
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e004      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	623b      	str	r3, [r7, #32]
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c8a:	623b      	str	r3, [r7, #32]
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc90      	pop	{r4, r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	080030ec 	.word	0x080030ec
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	003d0900 	.word	0x003d0900

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000008 	.word	0x20000008

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	0800cb70 	.word	0x0800cb70

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffde 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	0800cb70 	.word	0x0800cb70

08002d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <RCC_Delay+0x34>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <RCC_Delay+0x38>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d2c:	bf00      	nop
  }
  while (Delay --);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <RCC_Delay+0x1c>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000008 	.word	0x20000008
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e076      	b.n	8002e4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6e:	d009      	beq.n	8002d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
 8002d76:	e005      	b.n	8002d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd fbc4 	bl	800052c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	ea42 0103 	orr.w	r1, r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	0c1a      	lsrs	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f002 0204 	and.w	r2, r2, #4
 8002e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e03f      	b.n	8002ee6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fbf8 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f829 	bl	8002ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f2a:	f023 030c 	bic.w	r3, r3, #12
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <UART_SetConfig+0x114>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d103      	bne.n	8002f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f58:	f7ff fec6 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	e002      	b.n	8002f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f60:	f7ff feae 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8002f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009a      	lsls	r2, r3, #2
 8002f70:	441a      	add	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	4a22      	ldr	r2, [pc, #136]	; (8003008 <UART_SetConfig+0x118>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	0119      	lsls	r1, r3, #4
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009a      	lsls	r2, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <UART_SetConfig+0x118>)
 8002f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2064      	movs	r0, #100	; 0x64
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	3332      	adds	r3, #50	; 0x32
 8002fb0:	4a15      	ldr	r2, [pc, #84]	; (8003008 <UART_SetConfig+0x118>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fbc:	4419      	add	r1, r3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009a      	lsls	r2, r3, #2
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <UART_SetConfig+0x118>)
 8002fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2064      	movs	r0, #100	; 0x64
 8002fde:	fb00 f303 	mul.w	r3, r0, r3
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	3332      	adds	r3, #50	; 0x32
 8002fe8:	4a07      	ldr	r2, [pc, #28]	; (8003008 <UART_SetConfig+0x118>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	f003 020f 	and.w	r2, r3, #15
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40013800 	.word	0x40013800
 8003008:	51eb851f 	.word	0x51eb851f

0800300c <__libc_init_array>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	2600      	movs	r6, #0
 8003010:	4d0c      	ldr	r5, [pc, #48]	; (8003044 <__libc_init_array+0x38>)
 8003012:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <__libc_init_array+0x3c>)
 8003014:	1b64      	subs	r4, r4, r5
 8003016:	10a4      	asrs	r4, r4, #2
 8003018:	42a6      	cmp	r6, r4
 800301a:	d109      	bne.n	8003030 <__libc_init_array+0x24>
 800301c:	f000 f822 	bl	8003064 <_init>
 8003020:	2600      	movs	r6, #0
 8003022:	4d0a      	ldr	r5, [pc, #40]	; (800304c <__libc_init_array+0x40>)
 8003024:	4c0a      	ldr	r4, [pc, #40]	; (8003050 <__libc_init_array+0x44>)
 8003026:	1b64      	subs	r4, r4, r5
 8003028:	10a4      	asrs	r4, r4, #2
 800302a:	42a6      	cmp	r6, r4
 800302c:	d105      	bne.n	800303a <__libc_init_array+0x2e>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	f855 3b04 	ldr.w	r3, [r5], #4
 8003034:	4798      	blx	r3
 8003036:	3601      	adds	r6, #1
 8003038:	e7ee      	b.n	8003018 <__libc_init_array+0xc>
 800303a:	f855 3b04 	ldr.w	r3, [r5], #4
 800303e:	4798      	blx	r3
 8003040:	3601      	adds	r6, #1
 8003042:	e7f2      	b.n	800302a <__libc_init_array+0x1e>
 8003044:	0800cb78 	.word	0x0800cb78
 8003048:	0800cb78 	.word	0x0800cb78
 800304c:	0800cb78 	.word	0x0800cb78
 8003050:	0800cb7c 	.word	0x0800cb7c

08003054 <memset>:
 8003054:	4603      	mov	r3, r0
 8003056:	4402      	add	r2, r0
 8003058:	4293      	cmp	r3, r2
 800305a:	d100      	bne.n	800305e <memset+0xa>
 800305c:	4770      	bx	lr
 800305e:	f803 1b01 	strb.w	r1, [r3], #1
 8003062:	e7f9      	b.n	8003058 <memset+0x4>

08003064 <_init>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr

08003070 <_fini>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	bf00      	nop
 8003074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003076:	bc08      	pop	{r3}
 8003078:	469e      	mov	lr, r3
 800307a:	4770      	bx	lr
