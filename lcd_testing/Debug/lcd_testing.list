
lcd_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ecc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005858  08002fd8  08002fd8  00012fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008830  08008830  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08008830  08008830  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008830  08008830  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000060  08008894  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08008894  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a467  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e73  00000000  00000000  0002a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000164a1  00000000  00000000  0002cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000bd3a  00000000  00000000  000433c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086451  00000000  00000000  0004f103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000d5554  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ae0  00000000  00000000  000d55a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f0c  00000000  00000000  000d6088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fc0 	.word	0x08002fc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002fc0 	.word	0x08002fc0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fde4 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d8 	bl	800030c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8b0 	bl	80002c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f884 	bl	800026c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000164:	f000 f84c 	bl	8000200 <MX_SPI2_Init>

  BSP_LCD_Init();
 8000168:	f000 ff40 	bl	8000fec <BSP_LCD_Init>
  // BSP_LCD_SetFont(&Font24);
  // BSP_LCD_DisplayStringAt(0, 0, "Hello LCD!", CENTER_MODE);

//  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
//  BSP_LCD_FillRect(0,0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
  BSP_LCD_DrawBitmap(0,0, (uint8_t*)&battery);
 800016c:	4a02      	ldr	r2, [pc, #8]	; (8000178 <main+0x2c>)
 800016e:	2100      	movs	r1, #0
 8000170:	2000      	movs	r0, #0
 8000172:	f000 ff95 	bl	80010a0 <BSP_LCD_DrawBitmap>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000176:	e7fe      	b.n	8000176 <main+0x2a>
 8000178:	08003350 	.word	0x08003350

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	; 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f002 ff10 	bl	8002fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019e:	2302      	movs	r3, #2
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a6:	2310      	movs	r3, #16
 80001a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2302      	movs	r3, #2
 80001ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ae:	2300      	movs	r3, #0
 80001b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 f959 	bl	8002474 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c8:	f000 f926 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fbc6 	bl	8002978 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f2:	f000 f911 	bl	8000418 <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <MX_SPI2_Init+0x64>)
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <MX_SPI2_Init+0x68>)
 8000208:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <MX_SPI2_Init+0x64>)
 800020c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000210:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <MX_SPI2_Init+0x64>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <MX_SPI2_Init+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_SPI2_Init+0x64>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_SPI2_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_SPI2_Init+0x64>)
 800022c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000230:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_SPI2_Init+0x64>)
 8000234:	2200      	movs	r2, #0
 8000236:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <MX_SPI2_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_SPI2_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <MX_SPI2_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_SPI2_Init+0x64>)
 800024c:	220a      	movs	r2, #10
 800024e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <MX_SPI2_Init+0x64>)
 8000252:	f002 fd29 	bl	8002ca8 <HAL_SPI_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800025c:	f000 f8dc 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	2000007c 	.word	0x2000007c
 8000268:	40003800 	.word	0x40003800

0800026c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_USART2_UART_Init+0x50>)
 8000274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800027c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f002 fd84 	bl	8002db0 <HAL_UART_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ae:	f000 f8b3 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000015c 	.word	0x2000015c
 80002bc:	40004400 	.word	0x40004400

080002c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_DMA_Init+0x48>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a0f      	ldr	r2, [pc, #60]	; (8000308 <MX_DMA_Init+0x48>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <MX_DMA_Init+0x48>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2100      	movs	r1, #0
 80002e2:	200e      	movs	r0, #14
 80002e4:	f001 fe77 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002e8:	200e      	movs	r0, #14
 80002ea:	f001 fe90 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	200f      	movs	r0, #15
 80002f4:	f001 fe6f 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002f8:	200f      	movs	r0, #15
 80002fa:	f001 fe88 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000320:	4b38      	ldr	r3, [pc, #224]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a37      	ldr	r2, [pc, #220]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b35      	ldr	r3, [pc, #212]	; (8000404 <MX_GPIO_Init+0xf8>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0310 	and.w	r3, r3, #16
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000338:	4b32      	ldr	r3, [pc, #200]	; (8000404 <MX_GPIO_Init+0xf8>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a31      	ldr	r2, [pc, #196]	; (8000404 <MX_GPIO_Init+0xf8>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b2f      	ldr	r3, [pc, #188]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0320 	and.w	r3, r3, #32
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a2b      	ldr	r2, [pc, #172]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_GPIO_Init+0xf8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <MX_GPIO_Init+0xf8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a25      	ldr	r2, [pc, #148]	; (8000404 <MX_GPIO_Init+0xf8>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2120      	movs	r1, #32
 8000384:	4820      	ldr	r0, [pc, #128]	; (8000408 <MX_GPIO_Init+0xfc>)
 8000386:	f002 f83b 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000390:	481e      	ldr	r0, [pc, #120]	; (800040c <MX_GPIO_Init+0x100>)
 8000392:	f002 f835 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800039c:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <MX_GPIO_Init+0x104>)
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	481a      	ldr	r0, [pc, #104]	; (8000414 <MX_GPIO_Init+0x108>)
 80003ac:	f001 fea4 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003b0:	2320      	movs	r3, #32
 80003b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2302      	movs	r3, #2
 80003be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	4619      	mov	r1, r3
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <MX_GPIO_Init+0xfc>)
 80003c8:	f001 fe96 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80003cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <MX_GPIO_Init+0x100>)
 80003e6:	f001 fe87 	bl	80020f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	2028      	movs	r0, #40	; 0x28
 80003f0:	f001 fdf1 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003f4:	2028      	movs	r0, #40	; 0x28
 80003f6:	f001 fe0a 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 80003fa:	bf00      	nop
 80003fc:	3720      	adds	r7, #32
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000
 8000408:	40010800 	.word	0x40010800
 800040c:	40010c00 	.word	0x40010c00
 8000410:	10110000 	.word	0x10110000
 8000414:	40011000 	.word	0x40011000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_MspInit+0x5c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x5c>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_MspInit+0x60>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_MspInit+0x60>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a43      	ldr	r2, [pc, #268]	; (80005b0 <HAL_SPI_MspInit+0x128>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d17f      	bne.n	80005a8 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004a8:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <HAL_SPI_MspInit+0x12c>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4a41      	ldr	r2, [pc, #260]	; (80005b4 <HAL_SPI_MspInit+0x12c>)
 80004ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b2:	61d3      	str	r3, [r2, #28]
 80004b4:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <HAL_SPI_MspInit+0x12c>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <HAL_SPI_MspInit+0x12c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a3b      	ldr	r2, [pc, #236]	; (80005b4 <HAL_SPI_MspInit+0x12c>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <HAL_SPI_MspInit+0x12c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80004d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004de:	2302      	movs	r3, #2
 80004e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4832      	ldr	r0, [pc, #200]	; (80005b8 <HAL_SPI_MspInit+0x130>)
 80004ee:	f001 fe03 	bl	80020f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80004f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	482c      	ldr	r0, [pc, #176]	; (80005b8 <HAL_SPI_MspInit+0x130>)
 8000508:	f001 fdf6 	bl	80020f8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <HAL_SPI_MspInit+0x134>)
 800050e:	4a2c      	ldr	r2, [pc, #176]	; (80005c0 <HAL_SPI_MspInit+0x138>)
 8000510:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <HAL_SPI_MspInit+0x134>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <HAL_SPI_MspInit+0x134>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800053c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800053e:	481f      	ldr	r0, [pc, #124]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000540:	f001 fd80 	bl	8002044 <HAL_DMA_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 800054a:	f7ff ff65 	bl	8000418 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a1a      	ldr	r2, [pc, #104]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000552:	64da      	str	r2, [r3, #76]	; 0x4c
 8000554:	4a19      	ldr	r2, [pc, #100]	; (80005bc <HAL_SPI_MspInit+0x134>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 800055c:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <HAL_SPI_MspInit+0x140>)
 800055e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 8000562:	2210      	movs	r2, #16
 8000564:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 800057a:	2200      	movs	r2, #0
 800057c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 8000586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800058a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 800058e:	f001 fd59 	bl	8002044 <HAL_DMA_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8000598:	f7ff ff3e 	bl	8000418 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 80005a0:	649a      	str	r2, [r3, #72]	; 0x48
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_SPI_MspInit+0x13c>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40003800 	.word	0x40003800
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	200000d4 	.word	0x200000d4
 80005c0:	40020044 	.word	0x40020044
 80005c4:	20000118 	.word	0x20000118
 80005c8:	40020058 	.word	0x40020058

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <HAL_UART_MspInit+0x70>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d123      	bne.n	8000634 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <HAL_UART_MspInit+0x74>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a13      	ldr	r2, [pc, #76]	; (8000640 <HAL_UART_MspInit+0x74>)
 80005f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f6:	61d3      	str	r3, [r2, #28]
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_UART_MspInit+0x74>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_UART_MspInit+0x74>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <HAL_UART_MspInit+0x74>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_UART_MspInit+0x74>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061c:	230c      	movs	r3, #12
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <HAL_UART_MspInit+0x78>)
 8000630:	f001 fd62 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40004400 	.word	0x40004400
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068e:	f001 fb8b 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800069a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800069e:	f001 fec7 	bl	8002430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
	...

080006b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006da:	f7ff ffe4 	bl	80006a6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006de:	f002 fc43 	bl	8002f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fd33 	bl	800014c <main>
  bx lr
 80006e6:	4770      	bx	lr
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006f0:	08008838 	.word	0x08008838
  ldr r2, =_sbss
 80006f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006f8:	200002cc 	.word	0x200002cc

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>

080006fe <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f001 f956 	bl	80019b4 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8000708:	2011      	movs	r0, #17
 800070a:	f001 f9fd 	bl	8001b08 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}

08000712 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 8000716:	2010      	movs	r0, #16
 8000718:	f001 f9f6 	bl	8001b08 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 800071c:	2000      	movs	r0, #0
 800071e:	f001 f949 	bl	80019b4 <LCD_IO_Bl_OnOff>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 800072a:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 800073a:	23f0      	movs	r3, #240	; 0xf0
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 800074e:	1d39      	adds	r1, r7, #4
 8000750:	2301      	movs	r3, #1
 8000752:	2203      	movs	r2, #3
 8000754:	20d3      	movs	r0, #211	; 0xd3
 8000756:	f001 fa95 	bl	8001c84 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a05      	ldr	r2, [pc, #20]	; (8000774 <ili9341_ReadID+0x30>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d102      	bne.n	8000768 <ili9341_ReadID+0x24>
    return 0x9341;
 8000762:	f249 3341 	movw	r3, #37697	; 0x9341
 8000766:	e000      	b.n	800076a <ili9341_ReadID+0x26>
  else
    return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	00419300 	.word	0x00419300

08000778 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <ili9341_Init+0x150>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	2b00      	cmp	r3, #0
 8000788:	d115      	bne.n	80007b6 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <ili9341_Init+0x150>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <ili9341_Init+0x150>)
 8000796:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8000798:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <ili9341_Init+0x150>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <ili9341_Init+0x30>
      LCD_IO_Init();
 80007a4:	f001 f91c 	bl	80019e0 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80007a8:	4b47      	ldr	r3, [pc, #284]	; (80008c8 <ili9341_Init+0x150>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <ili9341_Init+0x150>)
 80007b4:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f001 f8f0 	bl	800199c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80007bc:	2001      	movs	r0, #1
 80007be:	f001 f9a3 	bl	8001b08 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80007c2:	200a      	movs	r0, #10
 80007c4:	f001 f8ea 	bl	800199c <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80007c8:	2203      	movs	r2, #3
 80007ca:	4940      	ldr	r1, [pc, #256]	; (80008cc <ili9341_Init+0x154>)
 80007cc:	20ef      	movs	r0, #239	; 0xef
 80007ce:	f001 fa15 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80007d2:	2203      	movs	r2, #3
 80007d4:	493e      	ldr	r1, [pc, #248]	; (80008d0 <ili9341_Init+0x158>)
 80007d6:	20cf      	movs	r0, #207	; 0xcf
 80007d8:	f001 fa10 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80007dc:	2204      	movs	r2, #4
 80007de:	493d      	ldr	r1, [pc, #244]	; (80008d4 <ili9341_Init+0x15c>)
 80007e0:	20ed      	movs	r0, #237	; 0xed
 80007e2:	f001 fa0b 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80007e6:	2203      	movs	r2, #3
 80007e8:	493b      	ldr	r1, [pc, #236]	; (80008d8 <ili9341_Init+0x160>)
 80007ea:	20e8      	movs	r0, #232	; 0xe8
 80007ec:	f001 fa06 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80007f0:	2205      	movs	r2, #5
 80007f2:	493a      	ldr	r1, [pc, #232]	; (80008dc <ili9341_Init+0x164>)
 80007f4:	20cb      	movs	r0, #203	; 0xcb
 80007f6:	f001 fa01 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	4938      	ldr	r1, [pc, #224]	; (80008e0 <ili9341_Init+0x168>)
 80007fe:	20f7      	movs	r0, #247	; 0xf7
 8000800:	f001 f9fc 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000804:	2202      	movs	r2, #2
 8000806:	4937      	ldr	r1, [pc, #220]	; (80008e4 <ili9341_Init+0x16c>)
 8000808:	20ea      	movs	r0, #234	; 0xea
 800080a:	f001 f9f7 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800080e:	2201      	movs	r2, #1
 8000810:	4935      	ldr	r1, [pc, #212]	; (80008e8 <ili9341_Init+0x170>)
 8000812:	20c0      	movs	r0, #192	; 0xc0
 8000814:	f001 f9f2 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000818:	2201      	movs	r2, #1
 800081a:	4934      	ldr	r1, [pc, #208]	; (80008ec <ili9341_Init+0x174>)
 800081c:	20c1      	movs	r0, #193	; 0xc1
 800081e:	f001 f9ed 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8000822:	2202      	movs	r2, #2
 8000824:	4932      	ldr	r1, [pc, #200]	; (80008f0 <ili9341_Init+0x178>)
 8000826:	20c5      	movs	r0, #197	; 0xc5
 8000828:	f001 f9e8 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 800082c:	2201      	movs	r2, #1
 800082e:	4931      	ldr	r1, [pc, #196]	; (80008f4 <ili9341_Init+0x17c>)
 8000830:	20c7      	movs	r0, #199	; 0xc7
 8000832:	f001 f9e3 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000836:	2201      	movs	r2, #1
 8000838:	492f      	ldr	r1, [pc, #188]	; (80008f8 <ili9341_Init+0x180>)
 800083a:	2037      	movs	r0, #55	; 0x37
 800083c:	f001 f9de 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8000840:	2201      	movs	r2, #1
 8000842:	492e      	ldr	r1, [pc, #184]	; (80008fc <ili9341_Init+0x184>)
 8000844:	203a      	movs	r0, #58	; 0x3a
 8000846:	f001 f9d9 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 800084a:	2202      	movs	r2, #2
 800084c:	492c      	ldr	r1, [pc, #176]	; (8000900 <ili9341_Init+0x188>)
 800084e:	20b1      	movs	r0, #177	; 0xb1
 8000850:	f001 f9d4 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8000854:	2203      	movs	r2, #3
 8000856:	492b      	ldr	r1, [pc, #172]	; (8000904 <ili9341_Init+0x18c>)
 8000858:	20b6      	movs	r0, #182	; 0xb6
 800085a:	f001 f9cf 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800085e:	2201      	movs	r2, #1
 8000860:	4925      	ldr	r1, [pc, #148]	; (80008f8 <ili9341_Init+0x180>)
 8000862:	20f2      	movs	r0, #242	; 0xf2
 8000864:	f001 f9ca 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8000868:	2201      	movs	r2, #1
 800086a:	4927      	ldr	r1, [pc, #156]	; (8000908 <ili9341_Init+0x190>)
 800086c:	2026      	movs	r0, #38	; 0x26
 800086e:	f001 f9c5 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8000872:	220f      	movs	r2, #15
 8000874:	4925      	ldr	r1, [pc, #148]	; (800090c <ili9341_Init+0x194>)
 8000876:	20e0      	movs	r0, #224	; 0xe0
 8000878:	f001 f9c0 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 800087c:	220f      	movs	r2, #15
 800087e:	4924      	ldr	r1, [pc, #144]	; (8000910 <ili9341_Init+0x198>)
 8000880:	20e1      	movs	r0, #225	; 0xe1
 8000882:	f001 f9bb 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8000886:	2036      	movs	r0, #54	; 0x36
 8000888:	f001 f93e 	bl	8001b08 <LCD_IO_WriteCmd8>
 800088c:	20e8      	movs	r0, #232	; 0xe8
 800088e:	f001 f957 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8000892:	2011      	movs	r0, #17
 8000894:	f001 f938 	bl	8001b08 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000898:	200a      	movs	r0, #10
 800089a:	f001 f87f 	bl	800199c <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 800089e:	2300      	movs	r3, #0
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	23f0      	movs	r3, #240	; 0xf0
 80008a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008a8:	2100      	movs	r1, #0
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fa2c 	bl	8000d08 <ili9341_FillRect>
  LCD_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f001 f873 	bl	800199c <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80008b6:	2029      	movs	r0, #41	; 0x29
 80008b8:	f001 f926 	bl	8001b08 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80008bc:	200a      	movs	r0, #10
 80008be:	f001 f86d 	bl	800199c <LCD_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001a0 	.word	0x200001a0
 80008cc:	08002fd8 	.word	0x08002fd8
 80008d0:	08002fdc 	.word	0x08002fdc
 80008d4:	08002fe0 	.word	0x08002fe0
 80008d8:	08002fe8 	.word	0x08002fe8
 80008dc:	08002fec 	.word	0x08002fec
 80008e0:	08002ff4 	.word	0x08002ff4
 80008e4:	08002ff8 	.word	0x08002ff8
 80008e8:	08002ffc 	.word	0x08002ffc
 80008ec:	08003000 	.word	0x08003000
 80008f0:	08003004 	.word	0x08003004
 80008f4:	08003008 	.word	0x08003008
 80008f8:	0800300c 	.word	0x0800300c
 80008fc:	08003010 	.word	0x08003010
 8000900:	08003014 	.word	0x08003014
 8000904:	08003018 	.word	0x08003018
 8000908:	0800301c 	.word	0x0800301c
 800090c:	08003020 	.word	0x08003020
 8000910:	08003030 	.word	0x08003030

08000914 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	80fb      	strh	r3, [r7, #6]
 8000920:	4613      	mov	r3, r2
 8000922:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000924:	202a      	movs	r0, #42	; 0x2a
 8000926:	f001 f8ef 	bl	8001b08 <LCD_IO_WriteCmd8>
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	b29b      	uxth	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f904 	bl	8001b40 <LCD_IO_WriteData8>
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f8ff 	bl	8001b40 <LCD_IO_WriteData8>
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f8f8 	bl	8001b40 <LCD_IO_WriteData8>
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f8f3 	bl	8001b40 <LCD_IO_WriteData8>
 800095a:	202b      	movs	r0, #43	; 0x2b
 800095c:	f001 f8d4 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f8e9 	bl	8001b40 <LCD_IO_WriteData8>
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f8e4 	bl	8001b40 <LCD_IO_WriteData8>
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f001 f8dd 	bl	8001b40 <LCD_IO_WriteData8>
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f8d8 	bl	8001b40 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	460b      	mov	r3, r1
 80009a4:	80bb      	strh	r3, [r7, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80009aa:	202a      	movs	r0, #42	; 0x2a
 80009ac:	f001 f8ac 	bl	8001b08 <LCD_IO_WriteCmd8>
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 f8c1 	bl	8001b40 <LCD_IO_WriteData8>
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f8bc 	bl	8001b40 <LCD_IO_WriteData8>
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f8b5 	bl	8001b40 <LCD_IO_WriteData8>
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f8b0 	bl	8001b40 <LCD_IO_WriteData8>
 80009e0:	202b      	movs	r0, #43	; 0x2b
 80009e2:	f001 f891 	bl	8001b08 <LCD_IO_WriteCmd8>
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f8a6 	bl	8001b40 <LCD_IO_WriteData8>
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 f8a1 	bl	8001b40 <LCD_IO_WriteData8>
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 f89a 	bl	8001b40 <LCD_IO_WriteData8>
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 f895 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000a16:	202c      	movs	r0, #44	; 0x2c
 8000a18:	f001 f876 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f8aa 	bl	8001b78 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	460a      	mov	r2, r1
 8000a36:	80fb      	strh	r3, [r7, #6]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4925      	ldr	r1, [pc, #148]	; (8000ad4 <ili9341_ReadPixel+0xa8>)
 8000a40:	203a      	movs	r0, #58	; 0x3a
 8000a42:	f001 f8db 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000a46:	202a      	movs	r0, #42	; 0x2a
 8000a48:	f001 f85e 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 f873 	bl	8001b40 <LCD_IO_WriteData8>
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f86e 	bl	8001b40 <LCD_IO_WriteData8>
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	0a1b      	lsrs	r3, r3, #8
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 f867 	bl	8001b40 <LCD_IO_WriteData8>
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 f862 	bl	8001b40 <LCD_IO_WriteData8>
 8000a7c:	202b      	movs	r0, #43	; 0x2b
 8000a7e:	f001 f843 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000a82:	88bb      	ldrh	r3, [r7, #4]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f858 	bl	8001b40 <LCD_IO_WriteData8>
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f853 	bl	8001b40 <LCD_IO_WriteData8>
 8000a9a:	88bb      	ldrh	r3, [r7, #4]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f84c 	bl	8001b40 <LCD_IO_WriteData8>
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 f847 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 8000ab2:	f107 010e 	add.w	r1, r7, #14
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	202e      	movs	r0, #46	; 0x2e
 8000abc:	f001 f908 	bl	8001cd0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4905      	ldr	r1, [pc, #20]	; (8000ad8 <ili9341_ReadPixel+0xac>)
 8000ac4:	203a      	movs	r0, #58	; 0x3a
 8000ac6:	f001 f899 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 8000aca:	89fb      	ldrh	r3, [r7, #14]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	08003040 	.word	0x08003040
 8000ad8:	08003010 	.word	0x08003010

08000adc <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4623      	mov	r3, r4
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
 8000af6:	4613      	mov	r3, r2
 8000af8:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000afa:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <ili9341_SetDisplayWindow+0xc8>)
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	8013      	strh	r3, [r2, #0]
 8000b00:	88ba      	ldrh	r2, [r7, #4]
 8000b02:	883b      	ldrh	r3, [r7, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <ili9341_SetDisplayWindow+0xcc>)
 8000b0e:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000b10:	202a      	movs	r0, #42	; 0x2a
 8000b12:	f000 fff9 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f80e 	bl	8001b40 <LCD_IO_WriteData8>
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 f809 	bl	8001b40 <LCD_IO_WriteData8>
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	4413      	add	r3, r2
 8000b34:	3b01      	subs	r3, #1
 8000b36:	121b      	asrs	r3, r3, #8
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f800 	bl	8001b40 <LCD_IO_WriteData8>
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fff5 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8000b56:	202b      	movs	r0, #43	; 0x2b
 8000b58:	f000 ffd6 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 ffeb 	bl	8001b40 <LCD_IO_WriteData8>
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ffe6 	bl	8001b40 <LCD_IO_WriteData8>
 8000b74:	88ba      	ldrh	r2, [r7, #4]
 8000b76:	883b      	ldrh	r3, [r7, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	121b      	asrs	r3, r3, #8
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 ffdd 	bl	8001b40 <LCD_IO_WriteData8>
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	883b      	ldrh	r3, [r7, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3b01      	subs	r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 ffd2 	bl	8001b40 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	200001a2 	.word	0x200001a2
 8000ba8:	200001a4 	.word	0x200001a4

08000bac <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4623      	mov	r3, r4
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80bb      	strh	r3, [r7, #4]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	807b      	strh	r3, [r7, #2]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8000bca:	202a      	movs	r0, #42	; 0x2a
 8000bcc:	f000 ff9c 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 ffb1 	bl	8001b40 <LCD_IO_WriteData8>
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 ffac 	bl	8001b40 <LCD_IO_WriteData8>
 8000be8:	88ba      	ldrh	r2, [r7, #4]
 8000bea:	883b      	ldrh	r3, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	121b      	asrs	r3, r3, #8
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 ffa3 	bl	8001b40 <LCD_IO_WriteData8>
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	883b      	ldrh	r3, [r7, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4413      	add	r3, r2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 ff98 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8000c10:	202b      	movs	r0, #43	; 0x2b
 8000c12:	f000 ff79 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 ff8e 	bl	8001b40 <LCD_IO_WriteData8>
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 ff89 	bl	8001b40 <LCD_IO_WriteData8>
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 ff82 	bl	8001b40 <LCD_IO_WriteData8>
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 ff7d 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8000c46:	883a      	ldrh	r2, [r7, #0]
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	202c      	movs	r0, #44	; 0x2c
 8000c4e:	f000 ffaf 	bl	8001bb0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}

08000c5a <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000c5a:	b590      	push	{r4, r7, lr}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4604      	mov	r4, r0
 8000c62:	4608      	mov	r0, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	4623      	mov	r3, r4
 8000c6a:	80fb      	strh	r3, [r7, #6]
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	80bb      	strh	r3, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8000c78:	202a      	movs	r0, #42	; 0x2a
 8000c7a:	f000 ff45 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ff5a 	bl	8001b40 <LCD_IO_WriteData8>
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 ff55 	bl	8001b40 <LCD_IO_WriteData8>
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 ff4e 	bl	8001b40 <LCD_IO_WriteData8>
 8000ca4:	88bb      	ldrh	r3, [r7, #4]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 ff49 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8000cae:	202b      	movs	r0, #43	; 0x2b
 8000cb0:	f000 ff2a 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	0a1b      	lsrs	r3, r3, #8
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 ff3f 	bl	8001b40 <LCD_IO_WriteData8>
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ff3a 	bl	8001b40 <LCD_IO_WriteData8>
 8000ccc:	887a      	ldrh	r2, [r7, #2]
 8000cce:	883b      	ldrh	r3, [r7, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	121b      	asrs	r3, r3, #8
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 ff31 	bl	8001b40 <LCD_IO_WriteData8>
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	883b      	ldrh	r3, [r7, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 ff26 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8000cf4:	883a      	ldrh	r2, [r7, #0]
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	202c      	movs	r0, #44	; 0x2c
 8000cfc:	f000 ff58 	bl	8001bb0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4623      	mov	r3, r4
 8000d18:	80fb      	strh	r3, [r7, #6]
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80bb      	strh	r3, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	807b      	strh	r3, [r7, #2]
 8000d22:	4613      	mov	r3, r2
 8000d24:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000d26:	202a      	movs	r0, #42	; 0x2a
 8000d28:	f000 feee 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 ff03 	bl	8001b40 <LCD_IO_WriteData8>
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fefe 	bl	8001b40 <LCD_IO_WriteData8>
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	121b      	asrs	r3, r3, #8
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fef5 	bl	8001b40 <LCD_IO_WriteData8>
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	3b01      	subs	r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 feea 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000d6c:	202b      	movs	r0, #43	; 0x2b
 8000d6e:	f000 fecb 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fee0 	bl	8001b40 <LCD_IO_WriteData8>
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fedb 	bl	8001b40 <LCD_IO_WriteData8>
 8000d8a:	88ba      	ldrh	r2, [r7, #4]
 8000d8c:	883b      	ldrh	r3, [r7, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	3b01      	subs	r3, #1
 8000d92:	121b      	asrs	r3, r3, #8
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fed2 	bl	8001b40 <LCD_IO_WriteData8>
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	883b      	ldrh	r3, [r7, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	3b01      	subs	r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fec7 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	883a      	ldrh	r2, [r7, #0]
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	8b3b      	ldrh	r3, [r7, #24]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	202c      	movs	r0, #44	; 0x2c
 8000dc2:	f000 fef5 	bl	8001bb0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd90      	pop	{r4, r7, pc}
	...

08000dd0 <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	603a      	str	r2, [r7, #0]
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000de6:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000dee:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	085b      	lsrs	r3, r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 8000e02:	2036      	movs	r0, #54	; 0x36
 8000e04:	f000 fe80 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000e08:	20a8      	movs	r0, #168	; 0xa8
 8000e0a:	f000 fe99 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 8000e0e:	202b      	movs	r0, #43	; 0x2b
 8000e10:	f000 fe7a 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <ili9341_DrawBitmap+0xb0>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8000e1c:	121b      	asrs	r3, r3, #8
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fe8d 	bl	8001b40 <LCD_IO_WriteData8>
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <ili9341_DrawBitmap+0xb0>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	f06f 0310 	mvn.w	r3, #16
 8000e30:	1a9b      	subs	r3, r3, r2
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fe83 	bl	8001b40 <LCD_IO_WriteData8>
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <ili9341_DrawBitmap+0xb4>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8000e42:	121b      	asrs	r3, r3, #8
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fe7a 	bl	8001b40 <LCD_IO_WriteData8>
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <ili9341_DrawBitmap+0xb4>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	f06f 0310 	mvn.w	r3, #16
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fe70 	bl	8001b40 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	202c      	movs	r0, #44	; 0x2c
 8000e66:	f000 fee9 	bl	8001c3c <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8000e6a:	2036      	movs	r0, #54	; 0x36
 8000e6c:	f000 fe4c 	bl	8001b08 <LCD_IO_WriteCmd8>
 8000e70:	20e8      	movs	r0, #232	; 0xe8
 8000e72:	f000 fe65 	bl	8001b40 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200001a4 	.word	0x200001a4
 8000e84:	200001a2 	.word	0x200001a2

08000e88 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000ea6:	883b      	ldrh	r3, [r7, #0]
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	88b9      	ldrh	r1, [r7, #4]
 8000eac:	88f8      	ldrh	r0, [r7, #6]
 8000eae:	f7ff fe15 	bl	8000adc <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	883a      	ldrh	r2, [r7, #0]
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	69b9      	ldr	r1, [r7, #24]
 8000ebe:	202c      	movs	r0, #44	; 0x2c
 8000ec0:	f000 febc 	bl	8001c3c <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}

08000ecc <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4623      	mov	r3, r4
 8000edc:	80fb      	strh	r3, [r7, #6]
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80bb      	strh	r3, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	807b      	strh	r3, [r7, #2]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000eea:	883b      	ldrh	r3, [r7, #0]
 8000eec:	887a      	ldrh	r2, [r7, #2]
 8000eee:	88b9      	ldrh	r1, [r7, #4]
 8000ef0:	88f8      	ldrh	r0, [r7, #6]
 8000ef2:	f7ff fdf3 	bl	8000adc <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	490b      	ldr	r1, [pc, #44]	; (8000f28 <ili9341_ReadRGBImage+0x5c>)
 8000efa:	203a      	movs	r0, #58	; 0x3a
 8000efc:	f000 fe7e 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	883a      	ldrh	r2, [r7, #0]
 8000f04:	fb02 f303 	mul.w	r3, r2, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	69b9      	ldr	r1, [r7, #24]
 8000f0e:	202e      	movs	r0, #46	; 0x2e
 8000f10:	f000 fede 	bl	8001cd0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000f14:	2201      	movs	r2, #1
 8000f16:	4905      	ldr	r1, [pc, #20]	; (8000f2c <ili9341_ReadRGBImage+0x60>)
 8000f18:	203a      	movs	r0, #58	; 0x3a
 8000f1a:	f000 fe6f 	bl	8001bfc <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08003040 	.word	0x08003040
 8000f2c:	08003010 	.word	0x08003010

08000f30 <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000f44:	88db      	ldrh	r3, [r3, #6]
 8000f46:	88ba      	ldrh	r2, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d104      	bne.n	8000f56 <ili9341_Scroll+0x26>
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000f4e:	885b      	ldrh	r3, [r3, #2]
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d013      	beq.n	8000f7e <ili9341_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8000f56:	4a23      	ldr	r2, [pc, #140]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8000f62:	88ba      	ldrh	r2, [r7, #4]
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	4413      	add	r3, r2
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000f72:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 8000f74:	2203      	movs	r2, #3
 8000f76:	491c      	ldr	r1, [pc, #112]	; (8000fe8 <ili9341_Scroll+0xb8>)
 8000f78:	2033      	movs	r0, #51	; 0x33
 8000f7a:	f000 fe5f 	bl	8001c3c <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8000f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000f84:	8892      	ldrh	r2, [r2, #4]
 8000f86:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f8a:	fb01 f202 	mul.w	r2, r1, r2
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da0a      	bge.n	8000fb0 <ili9341_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000f9c:	889a      	ldrh	r2, [r3, #4]
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000fa6:	885b      	ldrh	r3, [r3, #2]
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	80fb      	strh	r3, [r7, #6]
 8000fae:	e005      	b.n	8000fbc <ili9341_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000fb2:	885a      	ldrh	r2, [r3, #2]
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8000fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000fc2:	8812      	ldrh	r2, [r2, #0]
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d009      	beq.n	8000fdc <ili9341_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000fcc:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <ili9341_Scroll+0xb4>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2037      	movs	r0, #55	; 0x37
 8000fd8:	f000 fdea 	bl	8001bb0 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001a8 	.word	0x200001a8
 8000fe8:	200001aa 	.word	0x200001aa

08000fec <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <BSP_LCD_Init+0x3c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <BSP_LCD_Init+0x40>)
 8001000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001004:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <BSP_LCD_Init+0x40>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <BSP_LCD_Init+0x40>)
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <BSP_LCD_Init+0x44>)
 8001010:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8001012:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001016:	f000 f825 	bl	8001064 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000050 	.word	0x20000050
 800102c:	200001b0 	.word	0x200001b0
 8001030:	20000000 	.word	0x20000000

08001034 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <BSP_LCD_GetXSize+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	4798      	blx	r3
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000050 	.word	0x20000050

0800104c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <BSP_LCD_GetYSize+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	4798      	blx	r3
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000050 	.word	0x20000050

08001064 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <BSP_LCD_Clear+0x38>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001074:	f7ff ffde 	bl	8001034 <BSP_LCD_GetXSize>
 8001078:	4603      	mov	r3, r0
 800107a:	461d      	mov	r5, r3
 800107c:	f7ff ffe6 	bl	800104c <BSP_LCD_GetYSize>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	462a      	mov	r2, r5
 800108c:	2100      	movs	r1, #0
 800108e:	2000      	movs	r0, #0
 8001090:	47a0      	blx	r4
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bdb0      	pop	{r4, r5, r7, pc}
 800109a:	bf00      	nop
 800109c:	20000050 	.word	0x20000050

080010a0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	603a      	str	r2, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
 80010ac:	460b      	mov	r3, r1
 80010ae:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3312      	adds	r3, #18
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3313      	adds	r3, #19
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	441a      	add	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3314      	adds	r3, #20
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	441a      	add	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3315      	adds	r3, #21
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	061b      	lsls	r3, r3, #24
 80010dc:	4413      	add	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3316      	adds	r3, #22
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3317      	adds	r3, #23
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	441a      	add	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3318      	adds	r3, #24
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	441a      	add	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3319      	adds	r3, #25
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	061b      	lsls	r3, r3, #24
 8001104:	4413      	add	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b29b      	uxth	r3, r3
 8001110:	88b9      	ldrh	r1, [r7, #4]
 8001112:	88f8      	ldrh	r0, [r7, #6]
 8001114:	f000 f81e 	bl	8001154 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <BSP_LCD_DrawBitmap+0xb0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <BSP_LCD_DrawBitmap+0xb0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	88b9      	ldrh	r1, [r7, #4]
 800112a:	88f8      	ldrh	r0, [r7, #6]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001130:	f7ff ff80 	bl	8001034 <BSP_LCD_GetXSize>
 8001134:	4603      	mov	r3, r0
 8001136:	461c      	mov	r4, r3
 8001138:	f7ff ff88 	bl	800104c <BSP_LCD_GetYSize>
 800113c:	4603      	mov	r3, r0
 800113e:	4622      	mov	r2, r4
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f806 	bl	8001154 <SetDisplayWindow>
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	20000050 	.word	0x20000050

08001154 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SetDisplayWindow+0x40>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SetDisplayWindow+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	69dc      	ldr	r4, [r3, #28]
 8001182:	883b      	ldrh	r3, [r7, #0]
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	88b9      	ldrh	r1, [r7, #4]
 8001188:	88f8      	ldrh	r0, [r7, #6]
 800118a:	47a0      	blx	r4
  }  
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000050 	.word	0x20000050

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4906      	ldr	r1, [pc, #24]	; (80011cc <__NVIC_EnableIRQ+0x34>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_SCK);
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <LcdDirRead+0x70>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <LcdDirRead+0x70>)
 8001236:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800123a:	6013      	str	r3, [r2, #0]
  while(d--)
 800123c:	e008      	b.n	8001250 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <LcdDirRead+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8001244:	2000      	movs	r0, #0
 8001246:	f000 fb99 	bl	800197c <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <LcdDirRead+0x74>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
  while(d--)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f1      	bne.n	800123e <LcdDirRead+0x1a>
  }
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <LcdDirRead+0x70>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <LcdDirRead+0x70>)
 8001264:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8001268:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800126a:	e002      	b.n	8001272 <LcdDirRead+0x4e>
    d = SPIX->DR;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <LcdDirRead+0x78>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <LcdDirRead+0x7c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f8      	bne.n	800126c <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <LcdDirRead+0x78>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8001282:	4a06      	ldr	r2, [pc, #24]	; (800129c <LcdDirRead+0x78>)
 8001284:	f443 6383 	orr.w	r3, r3, #1048	; 0x418
 8001288:	6013      	str	r3, [r2, #0]
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40010c04 	.word	0x40010c04
 8001298:	422181b4 	.word	0x422181b4
 800129c:	40003800 	.word	0x40003800
 80012a0:	42070100 	.word	0x42070100

080012a4 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  volatile uint32_t d8 __attribute__((unused));
  SPIX->CR1 &= ~SPI_CR1_SPE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <LcdDirWrite+0x5c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <LcdDirWrite+0x5c>)
 80012b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012b4:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80012b6:	e002      	b.n	80012be <LcdDirWrite+0x1a>
    d8 = SPIX->DR;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <LcdDirWrite+0x5c>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <LcdDirWrite+0x60>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f8      	bne.n	80012b8 <LcdDirWrite+0x14>
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <LcdDirWrite+0x5c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <LcdDirWrite+0x5c>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 fb50 	bl	800197c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80012dc:	e002      	b.n	80012e4 <LcdDirWrite+0x40>
    d8 = SPIX->DR;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LcdDirWrite+0x5c>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <LcdDirWrite+0x60>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f8      	bne.n	80012de <LcdDirWrite+0x3a>
  SPIX->CR1 |= SPI_CR1_SPE;
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <LcdDirWrite+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <LcdDirWrite+0x5c>)
 80012f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40003800 	.word	0x40003800
 8001304:	42070100 	.word	0x42070100

08001308 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <LcdWrite8+0x2c>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8001318:	2002      	movs	r0, #2
 800131a:	f000 fb2f 	bl	800197c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800131e:	bf00      	nop
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <LcdWrite8+0x30>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1fb      	bne.n	8001320 <LcdWrite8+0x18>
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40003800 	.word	0x40003800
 8001338:	4207011c 	.word	0x4207011c

0800133c <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <LcdCmdWrite8+0x34>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <LcdCmdWrite8+0x38>)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8001352:	2002      	movs	r0, #2
 8001354:	f000 fb12 	bl	800197c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8001358:	bf00      	nop
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <LcdCmdWrite8+0x3c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1fb      	bne.n	800135a <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <LcdCmdWrite8+0x34>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	422181ac 	.word	0x422181ac
 8001374:	40003800 	.word	0x40003800
 8001378:	4207011c 	.word	0x4207011c

0800137c <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <LcdWrite16+0x2c>)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f000 faf5 	bl	800197c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8001392:	bf00      	nop
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <LcdWrite16+0x30>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1fb      	bne.n	8001394 <LcdWrite16+0x18>
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40003800 	.word	0x40003800
 80013ac:	4207011c 	.word	0x4207011c

080013b0 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 80013b4:	bf00      	nop
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <WaitForDmaEnd+0x18>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1fb      	bne.n	80013b6 <WaitForDmaEnd+0x6>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	200001bc 	.word	0x200001bc

080013cc <DMA1_Channel5_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <DMA1_Channel5_IRQHandler+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d023      	beq.n	8001424 <DMA1_Channel5_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <DMA1_Channel5_IRQHandler+0x64>)
 80013de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e2:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <DMA1_Channel5_IRQHandler+0x68>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 80013ea:	bf00      	nop
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <DMA1_Channel5_IRQHandler+0x68>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f9      	bne.n	80013ec <DMA1_Channel5_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <DMA1_Channel5_IRQHandler+0x6c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80013fe:	bf00      	nop
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <DMA1_Channel5_IRQHandler+0x70>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1fb      	bne.n	8001400 <DMA1_Channel5_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 fab7 	bl	800197c <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <DMA1_Channel5_IRQHandler+0x74>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d102      	bne.n	800141c <DMA1_Channel5_IRQHandler+0x50>
      LCD_CS_OFF;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <DMA1_Channel5_IRQHandler+0x78>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <DMA1_Channel5_IRQHandler+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8001422:	e003      	b.n	800142c <DMA1_Channel5_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <DMA1_Channel5_IRQHandler+0x64>)
 8001426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800142a:	605a      	str	r2, [r3, #4]
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020000 	.word	0x40020000
 8001434:	40020058 	.word	0x40020058
 8001438:	42070084 	.word	0x42070084
 800143c:	4207011c 	.word	0x4207011c
 8001440:	200001bc 	.word	0x200001bc
 8001444:	422181b0 	.word	0x422181b0

08001448 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <LCD_IO_WriteMultiData+0x74>)
 8001456:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800145a:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <LCD_IO_WriteMultiData+0x78>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <LCD_IO_WriteMultiData+0x78>)
 8001462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001466:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 800146e:	bf00      	nop
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <LCD_IO_WriteMultiData+0x80>)
 8001486:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <LCD_IO_WriteMultiData+0x84>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <LCD_IO_WriteMultiData+0x78>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <LCD_IO_WriteMultiData+0x78>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <LCD_IO_WriteMultiData+0x7c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40003800 	.word	0x40003800
 80014c4:	40020058 	.word	0x40020058
 80014c8:	4000380c 	.word	0x4000380c
 80014cc:	42070084 	.word	0x42070084

080014d0 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <LCD_IO_WriteMultiData8+0x26>
  {
    d8s = *pData;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <LCD_IO_WriteMultiData8+0x98>)
 80014e8:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <LCD_IO_WriteMultiData8+0x98>)
 80014ec:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 80014ee:	f241 0312 	movw	r3, #4114	; 0x1012
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e030      	b.n	8001558 <LCD_IO_WriteMultiData8+0x88>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 80014f6:	f241 0392 	movw	r3, #4242	; 0x1092
 80014fa:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 80014fc:	e02c      	b.n	8001558 <LCD_IO_WriteMultiData8+0x88>
  {
    if(Size <= DMA_MAXSIZE)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001504:	4293      	cmp	r3, r2
 8001506:	d80f      	bhi.n	8001528 <LCD_IO_WriteMultiData8+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <LCD_IO_WriteMultiData8+0x9c>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff ff98 	bl	8001448 <LCD_IO_WriteMultiData>
      Size = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01a      	beq.n	8001558 <LCD_IO_WriteMultiData8+0x88>
        WaitForDmaEnd();
 8001522:	f7ff ff45 	bl	80013b0 <WaitForDmaEnd>
 8001526:	e017      	b.n	8001558 <LCD_IO_WriteMultiData8+0x88>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <LCD_IO_WriteMultiData8+0x9c>)
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ff87 	bl	8001448 <LCD_IO_WriteMultiData>
      if(dinc)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <LCD_IO_WriteMultiData8+0x7a>
        pData+= DMA_MAXSIZE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001546:	33fe      	adds	r3, #254	; 0xfe
 8001548:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001550:	3bfe      	subs	r3, #254	; 0xfe
 8001552:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001554:	f7ff ff2c 	bl	80013b0 <WaitForDmaEnd>
  while(Size)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1cf      	bne.n	80014fe <LCD_IO_WriteMultiData8+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200001c0 	.word	0x200001c0
 800156c:	200001bc 	.word	0x200001bc

08001570 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <LCD_IO_WriteMultiData16+0xdc>)
 8001588:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <LCD_IO_WriteMultiData16+0xdc>)
 800158c:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 800158e:	f241 5312 	movw	r3, #5394	; 0x1512
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e051      	b.n	800163a <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8001596:	f241 5392 	movw	r3, #5522	; 0x1592
 800159a:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 800159c:	e04d      	b.n	800163a <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d80f      	bhi.n	80015c8 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <LCD_IO_WriteMultiData16+0xe0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff ff48 	bl	8001448 <LCD_IO_WriteMultiData>
      Size = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d03b      	beq.n	800163a <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 80015c2:	f7ff fef5 	bl	80013b0 <WaitForDmaEnd>
 80015c6:	e038      	b.n	800163a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <LCD_IO_WriteMultiData16+0xe4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d81b      	bhi.n	8001608 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <LCD_IO_WriteMultiData16+0xe0>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80015dc:	3bfe      	subs	r3, #254	; 0xfe
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4619      	mov	r1, r3
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff ff30 	bl	8001448 <LCD_IO_WriteMultiData>
      if(dinc)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <LCD_IO_WriteMultiData16+0xe8>)
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 80015fc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001600:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001602:	f7ff fed5 	bl	80013b0 <WaitForDmaEnd>
 8001606:	e018      	b.n	800163a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <LCD_IO_WriteMultiData16+0xe0>)
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff ff17 	bl	8001448 <LCD_IO_WriteMultiData>
      if(dinc)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8001626:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800162a:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001632:	3bfe      	subs	r3, #254	; 0xfe
 8001634:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001636:	f7ff febb 	bl	80013b0 <WaitForDmaEnd>
  while(Size)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ae      	bne.n	800159e <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200001c2 	.word	0x200001c2
 8001650:	200001bc 	.word	0x200001bc
 8001654:	0001fffb 	.word	0x0001fffb
 8001658:	7fff0002 	.word	0x7fff0002

0800165c <DMA1_Channel4_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_RX)(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <DMA1_Channel4_IRQHandler+0x98>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03a      	beq.n	80016e4 <DMA1_Channel4_IRQHandler+0x88>
  {
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <DMA1_Channel4_IRQHandler+0x98>)
 8001670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001674:	605a      	str	r2, [r3, #4]
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0; /* SPI DMA off  */
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <DMA1_Channel4_IRQHandler+0x9c>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800167c:	e002      	b.n	8001684 <DMA1_Channel4_IRQHandler+0x28>
      d8 = *(uint8_t *)&SPIX->DR;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <DMA1_Channel4_IRQHandler+0xa0>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <DMA1_Channel4_IRQHandler+0xa4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f8      	bne.n	800167e <DMA1_Channel4_IRQHandler+0x22>
    SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <DMA1_Channel4_IRQHandler+0xa8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001694:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001698:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <DMA1_Channel4_IRQHandler+0xa8>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	f043 0318 	orr.w	r3, r3, #24
 80016a2:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f000 f969 	bl	800197c <LCD_IO_Delay>
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80016aa:	e003      	b.n	80016b4 <DMA1_Channel4_IRQHandler+0x58>
      d8 = SPIX->DR;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <DMA1_Channel4_IRQHandler+0xa8>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	71fb      	strb	r3, [r7, #7]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <DMA1_Channel4_IRQHandler+0xa4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f7      	bne.n	80016ac <DMA1_Channel4_IRQHandler+0x50>
    SPIX->CR1 |= SPI_CR1_SPE;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <DMA1_Channel4_IRQHandler+0xa8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <DMA1_Channel4_IRQHandler+0xa8>)
 80016c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c6:	6013      	str	r3, [r2, #0]
    DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <DMA1_Channel4_IRQHandler+0xac>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80016ce:	bf00      	nop
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <DMA1_Channel4_IRQHandler+0xac>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f9      	bne.n	80016d0 <DMA1_Channel4_IRQHandler+0x74>

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <DMA1_Channel4_IRQHandler+0xb0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 80016e2:	e003      	b.n	80016ec <DMA1_Channel4_IRQHandler+0x90>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <DMA1_Channel4_IRQHandler+0x98>)
 80016e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ea:	605a      	str	r2, [r3, #4]
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020000 	.word	0x40020000
 80016f8:	42070080 	.word	0x42070080
 80016fc:	4000380c 	.word	0x4000380c
 8001700:	42070100 	.word	0x42070100
 8001704:	40003800 	.word	0x40003800
 8001708:	40020044 	.word	0x40020044
 800170c:	200001bc 	.word	0x200001bc

08001710 <LCD_IO_ReadMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <LCD_IO_ReadMultiData+0x5c>)
 800171e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001722:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800172a:	bf00      	nop
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f9      	bne.n	800172c <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <LCD_IO_ReadMultiData+0x64>)
 8001742:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;  /* DMA start */
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <LCD_IO_ReadMultiData+0x60>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1; /* SPI DMA on */
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <LCD_IO_ReadMultiData+0x68>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	40020000 	.word	0x40020000
 8001770:	40020044 	.word	0x40020044
 8001774:	4000380c 	.word	0x4000380c
 8001778:	42070080 	.word	0x42070080

0800177c <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8001786:	f241 0382 	movw	r3, #4226	; 0x1082
 800178a:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 800178c:	e024      	b.n	80017d8 <LCD_IO_ReadMultiData8+0x5c>
  {
    if(Size > DMA_MAXSIZE)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001794:	4293      	cmp	r3, r2
 8001796:	d913      	bls.n	80017c0 <LCD_IO_ReadMultiData8+0x44>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <LCD_IO_ReadMultiData8+0x74>)
 800179a:	2202      	movs	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ffb3 	bl	8001710 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80017b0:	3bfe      	subs	r3, #254	; 0xfe
 80017b2:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017ba:	33fe      	adds	r3, #254	; 0xfe
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e009      	b.n	80017d4 <LCD_IO_ReadMultiData8+0x58>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <LCD_IO_ReadMultiData8+0x74>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	6839      	ldr	r1, [r7, #0]
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa0 	bl	8001710 <LCD_IO_ReadMultiData>
      Size = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 80017d4:	f7ff fdec 	bl	80013b0 <WaitForDmaEnd>
  while(Size)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1d7      	bne.n	800178e <LCD_IO_ReadMultiData8+0x12>
  }
  LCD_CS_OFF;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <LCD_IO_ReadMultiData8+0x78>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 80017e4:	f7ff fd5e 	bl	80012a4 <LcdDirWrite>
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200001bc 	.word	0x200001bc
 80017f4:	422181b0 	.word	0x422181b0

080017f8 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 800180a:	4b54      	ldr	r3, [pc, #336]	; (800195c <LCD_IO_ReadMultiData16to24+0x164>)
 800180c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001810:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8001812:	4b53      	ldr	r3, [pc, #332]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001818:	bf00      	nop
 800181a:	4b51      	ldr	r3, [pc, #324]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8001826:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <LCD_IO_ReadMultiData16to24+0x16c>)
 800182a:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 800182e:	4a4e      	ldr	r2, [pc, #312]	; (8001968 <LCD_IO_ReadMultiData16to24+0x170>)
 8001830:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 8001834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001838:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 800183a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183e:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 8001842:	f44f 5285 	mov.w	r2, #4256	; 0x10a0
 8001846:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8001848:	4b45      	ldr	r3, [pc, #276]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a44      	ldr	r2, [pc, #272]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 1;
 8001854:	4b45      	ldr	r3, [pc, #276]	; (800196c <LCD_IO_ReadMultiData16to24+0x174>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
  while(Size)
 800185a:	e044      	b.n	80018e6 <LCD_IO_ReadMultiData16to24+0xee>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 800185c:	4b40      	ldr	r3, [pc, #256]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	429a      	cmp	r2, r3
 8001864:	d03f      	beq.n	80018e6 <LCD_IO_ReadMultiData16to24+0xee>
    {
      if(!--ntdr_follower)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3b01      	subs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <LCD_IO_ReadMultiData16to24+0x80>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8001872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001876:	60fb      	str	r3, [r7, #12]
      __NOP(); __NOP(); __NOP();        /* a small wait until the DMA transfer is definitely completed */
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	bf00      	nop
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	1c53      	adds	r3, r2, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	6139      	str	r1, [r7, #16]
 800188a:	4936      	ldr	r1, [pc, #216]	; (8001964 <LCD_IO_ReadMultiData16to24+0x16c>)
 800188c:	5c8a      	ldrb	r2, [r1, r2]
 800188e:	3318      	adds	r3, #24
 8001890:	443b      	add	r3, r7
 8001892:	f803 2c10 	strb.w	r2, [r3, #-16]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2bff      	cmp	r3, #255	; 0xff
 800189a:	d901      	bls.n	80018a0 <LCD_IO_ReadMultiData16to24+0xa8>
        dmadata_ri = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d11f      	bne.n	80018e6 <LCD_IO_ReadMultiData16to24+0xee>
      {
        rgb888cnt = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
        Size--;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 80018b0:	7a3b      	ldrb	r3, [r7, #8]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018ba:	f023 0307 	bic.w	r3, r3, #7
 80018be:	b21a      	sxth	r2, r3
 80018c0:	7a7b      	ldrb	r3, [r7, #9]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	7abb      	ldrb	r3, [r7, #10]
 80018d2:	08db      	lsrs	r3, r3, #3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b219      	sxth	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1c9a      	adds	r2, r3, #2
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	b28a      	uxth	r2, r1
 80018e4:	801a      	strh	r2, [r3, #0]
  while(Size)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1b7      	bne.n	800185c <LCD_IO_ReadMultiData16to24+0x64>
      }
    }
  }
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_RXDMAEN_Pos) = 0;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <LCD_IO_ReadMultiData16to24+0x174>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80018f2:	e003      	b.n	80018fc <LCD_IO_ReadMultiData16to24+0x104>
    d8 = SPIX->DR;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <LCD_IO_ReadMultiData16to24+0x178>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <LCD_IO_ReadMultiData16to24+0x17c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f7      	bne.n	80018f4 <LCD_IO_ReadMultiData16to24+0xfc>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <LCD_IO_ReadMultiData16to24+0x178>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800190c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <LCD_IO_ReadMultiData16to24+0x178>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 800191c:	2001      	movs	r0, #1
 800191e:	f000 f82d 	bl	800197c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001922:	e003      	b.n	800192c <LCD_IO_ReadMultiData16to24+0x134>
    d8 = SPIX->DR;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <LCD_IO_ReadMultiData16to24+0x178>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	72fb      	strb	r3, [r7, #11]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <LCD_IO_ReadMultiData16to24+0x17c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f7      	bne.n	8001924 <LCD_IO_ReadMultiData16to24+0x12c>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800193a:	bf00      	nop
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <LCD_IO_ReadMultiData16to24+0x168>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <LCD_IO_ReadMultiData16to24+0x144>
  LCD_CS_OFF;
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <LCD_IO_ReadMultiData16to24+0x180>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 800194e:	f7ff fca9 	bl	80012a4 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020000 	.word	0x40020000
 8001960:	40020044 	.word	0x40020044
 8001964:	200001c8 	.word	0x200001c8
 8001968:	4000380c 	.word	0x4000380c
 800196c:	42070080 	.word	0x42070080
 8001970:	40003800 	.word	0x40003800
 8001974:	42070100 	.word	0x42070100
 8001978:	422181b0 	.word	0x422181b0

0800197c <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  while(c--);
 8001984:	bf00      	nop
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1fa      	bne.n	8001986 <LCD_IO_Delay+0xa>
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fa1b 	bl	8001de0 <HAL_Delay>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <LCD_IO_Bl_OnOff+0x28>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80019ca:	e002      	b.n	80019d2 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <LCD_IO_Bl_OnOff+0x28>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	42220198 	.word	0x42220198

080019e0 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80019e4:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <LCD_IO_Init+0x104>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <LCD_IO_Init+0x104>)
 80019ea:	f043 0318 	orr.w	r3, r3, #24
 80019ee:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <LCD_IO_Init+0x104>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <LCD_IO_Init+0x104>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6153      	str	r3, [r2, #20]

  LCD_SPI_ALTERSET;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODE(MODE_FF_DIGITAL_INPUT, LCD_MISO);
 80019fc:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <LCD_IO_Init+0x108>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a04:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a0a:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <LCD_IO_Init+0x10c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a14:	4a35      	ldr	r2, [pc, #212]	; (8001aec <LCD_IO_Init+0x10c>)
 8001a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff ffc9 	bl	80019b4 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a30:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <LCD_IO_Init+0x110>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <LCD_IO_Init+0x114>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <LCD_IO_Init+0x118>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a4e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001a52:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001a5c:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a5e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001a62:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <LCD_IO_Init+0x11c>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <LCD_IO_Init+0x120>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a7a:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8001a7e:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <LCD_IO_Init+0x108>)
 8001a8a:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8001a8e:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <LCD_IO_Init+0x124>)
 8001a92:	f240 324f 	movw	r2, #847	; 0x34f
 8001a96:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <LCD_IO_Init+0x124>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <LCD_IO_Init+0x124>)
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f7ff ff79 	bl	800199c <LCD_Delay>
  LCD_RST_ON;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <LCD_IO_Init+0x110>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f7ff ff73 	bl	800199c <LCD_Delay>
  LCD_RST_OFF;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <LCD_IO_Init+0x110>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f7ff ff6d 	bl	800199c <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	200f      	movs	r0, #15
 8001ac6:	f7ff fb83 	bl	80011d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 8001aca:	200f      	movs	r0, #15
 8001acc:	f7ff fb64 	bl	8001198 <__NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_RX), LCD_DMA_IRQ_PR);
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	200e      	movs	r0, #14
 8001ad4:	f7ff fb7c 	bl	80011d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_RX));
 8001ad8:	200e      	movs	r0, #14
 8001ada:	f7ff fb5d 	bl	8001198 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010c04 	.word	0x40010c04
 8001aec:	40011000 	.word	0x40011000
 8001af0:	422181a8 	.word	0x422181a8
 8001af4:	422181ac 	.word	0x422181ac
 8001af8:	422181b0 	.word	0x422181b0
 8001afc:	422181b4 	.word	0x422181b4
 8001b00:	424203b8 	.word	0x424203b8
 8001b04:	40003800 	.word	0x40003800

08001b08 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8001b12:	f7ff fc4d 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode8();
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <LCD_IO_WriteCmd8+0x30>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <LCD_IO_WriteCmd8+0x34>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fc09 	bl	800133c <LcdCmdWrite8>
  LCD_CS_OFF;
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <LCD_IO_WriteCmd8+0x34>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	4207002c 	.word	0x4207002c
 8001b3c:	422181b0 	.word	0x422181b0

08001b40 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8001b4a:	f7ff fc31 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode8();
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <LCD_IO_WriteData8+0x30>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <LCD_IO_WriteData8+0x34>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fbd3 	bl	8001308 <LcdWrite8>
  LCD_CS_OFF;
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <LCD_IO_WriteData8+0x34>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	4207002c 	.word	0x4207002c
 8001b74:	422181b0 	.word	0x422181b0

08001b78 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
 8001b82:	f7ff fc15 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode16();
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <LCD_IO_WriteData16+0x30>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <LCD_IO_WriteData16+0x34>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fbf1 	bl	800137c <LcdWrite16>
  LCD_CS_OFF;
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <LCD_IO_WriteData16+0x34>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	4207002c 	.word	0x4207002c
 8001bac:	422181b0 	.word	0x422181b0

08001bb0 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	603a      	str	r2, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8001bc0:	f7ff fbf6 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode8();
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fbb2 	bl	800133c <LcdCmdWrite8>
  LcdSpiMode16();
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fcc3 	bl	8001570 <LCD_IO_WriteMultiData16>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	4207002c 	.word	0x4207002c
 8001bf8:	422181b0 	.word	0x422181b0

08001bfc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001c0a:	f7ff fbd1 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode8();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fb8d 	bl	800133c <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8001c22:	2201      	movs	r2, #1
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	68b8      	ldr	r0, [r7, #8]
 8001c28:	f7ff fc52 	bl	80014d0 <LCD_IO_WriteMultiData8>
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	4207002c 	.word	0x4207002c
 8001c38:	422181b0 	.word	0x422181b0

08001c3c <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001c4a:	f7ff fbb1 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode8();
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb6d 	bl	800133c <LcdCmdWrite8>
  LcdSpiMode16();
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	68b8      	ldr	r0, [r7, #8]
 8001c6e:	f7ff fc7f 	bl	8001570 <LCD_IO_WriteMultiData16>
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	4207002c 	.word	0x4207002c
 8001c80:	422181b0 	.word	0x422181b0

08001c84 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001c94:	f7ff fb8c 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode8();
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fb48 	bl	800133c <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f7ff fab6 	bl	8001224 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	68b8      	ldr	r0, [r7, #8]
 8001cbc:	f7ff fd5e 	bl	800177c <LCD_IO_ReadMultiData8>
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	4207002c 	.word	0x4207002c
 8001ccc:	422181b0 	.word	0x422181b0

08001cd0 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001ce0:	f7ff fb66 	bl	80013b0 <WaitForDmaEnd>
  LcdSpiMode8();
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fb22 	bl	800133c <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f7ff fa90 	bl	8001224 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	68b8      	ldr	r0, [r7, #8]
 8001d08:	f7ff fd76 	bl	80017f8 <LCD_IO_ReadMultiData16to24>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	4207002c 	.word	0x4207002c
 8001d18:	422181b0 	.word	0x422181b0

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f947 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7fe fb74 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f95f 	bl	800202a <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f927 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000058 	.word	0x20000058
 8001da4:	20000054 	.word	0x20000054

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000058 	.word	0x20000058
 8001dc8:	200002c8 	.word	0x200002c8

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	200002c8 	.word	0x200002c8

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffe0 	bl	8001dcc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000058 	.word	0x20000058

08001e28 <__NVIC_SetPriorityGrouping>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4906      	ldr	r1, [pc, #24]	; (8001ec0 <__NVIC_EnableIRQ+0x34>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff90 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff2d 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff42 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff90 	bl	8001f18 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5f 	bl	8001ec4 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff35 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e043      	b.n	80020e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_DMA_Init+0xa8>)
 8002062:	4413      	add	r3, r2
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <HAL_DMA_Init+0xac>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	009a      	lsls	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_DMA_Init+0xb0>)
 8002076:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800208e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002092:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	bffdfff8 	.word	0xbffdfff8
 80020f0:	cccccccd 	.word	0xcccccccd
 80020f4:	40020000 	.word	0x40020000

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b08b      	sub	sp, #44	; 0x2c
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e169      	b.n	80023e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800210c:	2201      	movs	r2, #1
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8158 	bne.w	80023da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a9a      	ldr	r2, [pc, #616]	; (8002398 <HAL_GPIO_Init+0x2a0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d05e      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002134:	4a98      	ldr	r2, [pc, #608]	; (8002398 <HAL_GPIO_Init+0x2a0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d875      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800213a:	4a98      	ldr	r2, [pc, #608]	; (800239c <HAL_GPIO_Init+0x2a4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d058      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002140:	4a96      	ldr	r2, [pc, #600]	; (800239c <HAL_GPIO_Init+0x2a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d86f      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002146:	4a96      	ldr	r2, [pc, #600]	; (80023a0 <HAL_GPIO_Init+0x2a8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d052      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 800214c:	4a94      	ldr	r2, [pc, #592]	; (80023a0 <HAL_GPIO_Init+0x2a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d869      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002152:	4a94      	ldr	r2, [pc, #592]	; (80023a4 <HAL_GPIO_Init+0x2ac>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04c      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002158:	4a92      	ldr	r2, [pc, #584]	; (80023a4 <HAL_GPIO_Init+0x2ac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d863      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800215e:	4a92      	ldr	r2, [pc, #584]	; (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d046      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002164:	4a90      	ldr	r2, [pc, #576]	; (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d85d      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800216a:	2b12      	cmp	r3, #18
 800216c:	d82a      	bhi.n	80021c4 <HAL_GPIO_Init+0xcc>
 800216e:	2b12      	cmp	r3, #18
 8002170:	d859      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_GPIO_Init+0x80>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	080021f3 	.word	0x080021f3
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080021df 	.word	0x080021df
 8002184:	08002221 	.word	0x08002221
 8002188:	08002227 	.word	0x08002227
 800218c:	08002227 	.word	0x08002227
 8002190:	08002227 	.word	0x08002227
 8002194:	08002227 	.word	0x08002227
 8002198:	08002227 	.word	0x08002227
 800219c:	08002227 	.word	0x08002227
 80021a0:	08002227 	.word	0x08002227
 80021a4:	08002227 	.word	0x08002227
 80021a8:	08002227 	.word	0x08002227
 80021ac:	08002227 	.word	0x08002227
 80021b0:	08002227 	.word	0x08002227
 80021b4:	08002227 	.word	0x08002227
 80021b8:	08002227 	.word	0x08002227
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021e9 	.word	0x080021e9
 80021c4:	4a79      	ldr	r2, [pc, #484]	; (80023ac <HAL_GPIO_Init+0x2b4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ca:	e02c      	b.n	8002226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e029      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	3304      	adds	r3, #4
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e024      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	3308      	adds	r3, #8
 80021e4:	623b      	str	r3, [r7, #32]
          break;
 80021e6:	e01f      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	330c      	adds	r3, #12
 80021ee:	623b      	str	r3, [r7, #32]
          break;
 80021f0:	e01a      	b.n	8002228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fa:	2304      	movs	r3, #4
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e013      	b.n	8002228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	611a      	str	r2, [r3, #16]
          break;
 8002212:	e009      	b.n	8002228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002214:	2308      	movs	r3, #8
 8002216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	615a      	str	r2, [r3, #20]
          break;
 800221e:	e003      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x130>
          break;
 8002226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2bff      	cmp	r3, #255	; 0xff
 800222c:	d801      	bhi.n	8002232 <HAL_GPIO_Init+0x13a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	e001      	b.n	8002236 <HAL_GPIO_Init+0x13e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d802      	bhi.n	8002244 <HAL_GPIO_Init+0x14c>
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x152>
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	3b08      	subs	r3, #8
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	210f      	movs	r1, #15
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80b1 	beq.w	80023da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002278:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a4c      	ldr	r2, [pc, #304]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002290:	4a48      	ldr	r2, [pc, #288]	; (80023b4 <HAL_GPIO_Init+0x2bc>)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <HAL_GPIO_Init+0x2c0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3f      	ldr	r2, [pc, #252]	; (80023bc <HAL_GPIO_Init+0x2c4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00d      	beq.n	80022e0 <HAL_GPIO_Init+0x1e8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3e      	ldr	r2, [pc, #248]	; (80023c0 <HAL_GPIO_Init+0x2c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <HAL_GPIO_Init+0x1e4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3d      	ldr	r2, [pc, #244]	; (80023c4 <HAL_GPIO_Init+0x2cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_GPIO_Init+0x1e0>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e006      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022d8:	2304      	movs	r3, #4
 80022da:	e004      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022dc:	2302      	movs	r3, #2
 80022de:	e002      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e4:	2300      	movs	r3, #0
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	f002 0203 	and.w	r2, r2, #3
 80022ec:	0092      	lsls	r2, r2, #2
 80022ee:	4093      	lsls	r3, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022f6:	492f      	ldr	r1, [pc, #188]	; (80023b4 <HAL_GPIO_Init+0x2bc>)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	492c      	ldr	r1, [pc, #176]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4928      	ldr	r1, [pc, #160]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	43db      	mvns	r3, r3
 800234e:	491e      	ldr	r1, [pc, #120]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002350:	4013      	ands	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4918      	ldr	r1, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4914      	ldr	r1, [pc, #80]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d021      	beq.n	80023cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e021      	b.n	80023da <HAL_GPIO_Init+0x2e2>
 8002396:	bf00      	nop
 8002398:	10320000 	.word	0x10320000
 800239c:	10310000 	.word	0x10310000
 80023a0:	10220000 	.word	0x10220000
 80023a4:	10210000 	.word	0x10210000
 80023a8:	10120000 	.word	0x10120000
 80023ac:	10110000 	.word	0x10110000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40010800 	.word	0x40010800
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40011400 	.word	0x40011400
 80023c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_GPIO_Init+0x304>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	4909      	ldr	r1, [pc, #36]	; (80023fc <HAL_GPIO_Init+0x304>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	3301      	adds	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f ae8e 	bne.w	800210c <HAL_GPIO_Init+0x14>
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	372c      	adds	r7, #44	; 0x2c
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f806 	bl	8002460 <HAL_GPIO_EXTI_Callback>
  }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e272      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8087 	beq.w	80025a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002494:	4b92      	ldr	r3, [pc, #584]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b04      	cmp	r3, #4
 800249e:	d00c      	beq.n	80024ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a0:	4b8f      	ldr	r3, [pc, #572]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d112      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5e>
 80024ac:	4b8c      	ldr	r3, [pc, #560]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d10b      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ba:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d06c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x12c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d168      	bne.n	80025a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e24c      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x76>
 80024dc:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7f      	ldr	r2, [pc, #508]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e02e      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b7b      	ldr	r3, [pc, #492]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7a      	ldr	r2, [pc, #488]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b78      	ldr	r3, [pc, #480]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a77      	ldr	r2, [pc, #476]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0xbc>
 8002516:	4b72      	ldr	r3, [pc, #456]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a71      	ldr	r2, [pc, #452]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 8002530:	4b6b      	ldr	r3, [pc, #428]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6a      	ldr	r2, [pc, #424]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a67      	ldr	r2, [pc, #412]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fc3c 	bl	8001dcc <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fc38 	bl	8001dcc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e200      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xe4>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fc28 	bl	8001dcc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fc24 	bl	8001dcc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1ec      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x10c>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ae:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ba:	4b49      	ldr	r3, [pc, #292]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x18c>
 80025c6:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x176>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1c0      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4939      	ldr	r1, [pc, #228]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCC_OscConfig+0x270>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fbdd 	bl	8001dcc <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff fbd9 	bl	8001dcc <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1a1      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4927      	ldr	r1, [pc, #156]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_RCC_OscConfig+0x270>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fbbc 	bl	8001dcc <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff fbb8 	bl	8001dcc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e180      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03a      	beq.n	80026f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d019      	beq.n	80026be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_RCC_OscConfig+0x274>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7ff fb9c 	bl	8001dcc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff fb98 	bl	8001dcc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e160      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f000 fad8 	bl	8002c6c <RCC_Delay>
 80026bc:	e01c      	b.n	80026f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_RCC_OscConfig+0x274>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7ff fb82 	bl	8001dcc <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7ff fb7e 	bl	8001dcc <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d908      	bls.n	80026ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e146      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	42420000 	.word	0x42420000
 80026e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b92      	ldr	r3, [pc, #584]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e9      	bne.n	80026cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a6 	beq.w	8002852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b8b      	ldr	r3, [pc, #556]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a87      	ldr	r2, [pc, #540]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b85      	ldr	r3, [pc, #532]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b82      	ldr	r3, [pc, #520]	; (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b7f      	ldr	r3, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7e      	ldr	r2, [pc, #504]	; (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7ff fb3f 	bl	8001dcc <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7ff fb3b 	bl	8001dcc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e103      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b75      	ldr	r3, [pc, #468]	; (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x312>
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	e02d      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x334>
 800278e:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a69      	ldr	r2, [pc, #420]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a66      	ldr	r2, [pc, #408]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	e01c      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x356>
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a60      	ldr	r2, [pc, #384]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	e00b      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 80027ca:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6213      	str	r3, [r2, #32]
 80027d6:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff faef 	bl	8001dcc <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7ff faeb 	bl	8001dcc <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0b1      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ee      	beq.n	80027f2 <HAL_RCC_OscConfig+0x37e>
 8002814:	e014      	b.n	8002840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7ff fad9 	bl	8001dcc <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7ff fad5 	bl	8001dcc <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e09b      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d061      	beq.n	800292c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d146      	bne.n	80028fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b33      	ldr	r3, [pc, #204]	; (8002940 <HAL_RCC_OscConfig+0x4cc>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7ff faa9 	bl	8001dcc <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7ff faa5 	bl	8001dcc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e06d      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a4:	d108      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4921      	ldr	r1, [pc, #132]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a19      	ldr	r1, [r3, #32]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	430b      	orrs	r3, r1
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff fa79 	bl	8001dcc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff fa75 	bl	8001dcc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e03d      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x46a>
 80028fc:	e035      	b.n	800296a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_OscConfig+0x4cc>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff fa62 	bl	8001dcc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff fa5e 	bl	8001dcc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e026      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x498>
 800292a:	e01e      	b.n	800296a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e019      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
 8002940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x500>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	429a      	cmp	r2, r3
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d001      	beq.n	800296a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0d0      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	4965      	ldr	r1, [pc, #404]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a58      	ldr	r2, [pc, #352]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d040      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e073      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06b      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a56:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f023 0203 	bic.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4936      	ldr	r1, [pc, #216]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a68:	f7ff f9b0 	bl	8001dcc <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7ff f9ac 	bl	8001dcc <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e053      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 020c 	and.w	r2, r3, #12
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1eb      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d210      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4922      	ldr	r1, [pc, #136]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	490a      	ldr	r1, [pc, #40]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	5ccb      	ldrb	r3, [r1, r3]
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1cc>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1d0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff f90e 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40022000 	.word	0x40022000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08008818 	.word	0x08008818
 8002b44:	20000008 	.word	0x20000008
 8002b48:	20000054 	.word	0x20000054

08002b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	b490      	push	{r4, r7}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b54:	1d3c      	adds	r4, r7, #4
 8002b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b5c:	f240 2301 	movw	r3, #513	; 0x201
 8002b60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x40>
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x46>
 8002b8a:	e02b      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b8e:	623b      	str	r3, [r7, #32]
      break;
 8002b90:	e02b      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	0c9b      	lsrs	r3, r3, #18
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3328      	adds	r3, #40	; 0x28
 8002b9c:	443b      	add	r3, r7
 8002b9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ba2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0c5b      	lsrs	r3, r3, #17
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	3328      	adds	r3, #40	; 0x28
 8002bba:	443b      	add	r3, r7
 8002bbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc6:	fb03 f202 	mul.w	r2, r3, r2
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e004      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	623b      	str	r3, [r7, #32]
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002be6:	623b      	str	r3, [r7, #32]
      break;
 8002be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bea:	6a3b      	ldr	r3, [r7, #32]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc90      	pop	{r4, r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	08003044 	.word	0x08003044
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	007a1200 	.word	0x007a1200
 8002c04:	003d0900 	.word	0x003d0900

08002c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c0c:	4b02      	ldr	r3, [pc, #8]	; (8002c18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000008 	.word	0x20000008

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c20:	f7ff fff2 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08008828 	.word	0x08008828

08002c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c48:	f7ff ffde 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0adb      	lsrs	r3, r3, #11
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08008828 	.word	0x08008828

08002c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <RCC_Delay+0x34>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <RCC_Delay+0x38>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	0a5b      	lsrs	r3, r3, #9
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c88:	bf00      	nop
  }
  while (Delay --);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1e5a      	subs	r2, r3, #1
 8002c8e:	60fa      	str	r2, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f9      	bne.n	8002c88 <RCC_Delay+0x1c>
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	10624dd3 	.word	0x10624dd3

08002ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e076      	b.n	8002da8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cca:	d009      	beq.n	8002ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
 8002cd2:	e005      	b.n	8002ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fbc4 	bl	8000488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	ea42 0103 	orr.w	r1, r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	0c1a      	lsrs	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f002 0204 	and.w	r2, r2, #4
 8002d86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e03f      	b.n	8002e42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fbf8 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f829 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e86:	f023 030c 	bic.w	r3, r3, #12
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <UART_SetConfig+0x114>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eb4:	f7ff fec6 	bl	8002c44 <HAL_RCC_GetPCLK2Freq>
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	e002      	b.n	8002ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7ff feae 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8002ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	009a      	lsls	r2, r3, #2
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	0119      	lsls	r1, r3, #4
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	009a      	lsls	r2, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <UART_SetConfig+0x118>)
 8002efa:	fba3 0302 	umull	r0, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2064      	movs	r0, #100	; 0x64
 8002f02:	fb00 f303 	mul.w	r3, r0, r3
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	3332      	adds	r3, #50	; 0x32
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <UART_SetConfig+0x118>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f18:	4419      	add	r1, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <UART_SetConfig+0x118>)
 8002f32:	fba3 0302 	umull	r0, r3, r3, r2
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2064      	movs	r0, #100	; 0x64
 8002f3a:	fb00 f303 	mul.w	r3, r0, r3
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	3332      	adds	r3, #50	; 0x32
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <UART_SetConfig+0x118>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	f003 020f 	and.w	r2, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	440a      	add	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40013800 	.word	0x40013800
 8002f64:	51eb851f 	.word	0x51eb851f

08002f68 <__libc_init_array>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	4d0c      	ldr	r5, [pc, #48]	; (8002fa0 <__libc_init_array+0x38>)
 8002f6e:	4c0d      	ldr	r4, [pc, #52]	; (8002fa4 <__libc_init_array+0x3c>)
 8002f70:	1b64      	subs	r4, r4, r5
 8002f72:	10a4      	asrs	r4, r4, #2
 8002f74:	42a6      	cmp	r6, r4
 8002f76:	d109      	bne.n	8002f8c <__libc_init_array+0x24>
 8002f78:	f000 f822 	bl	8002fc0 <_init>
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	4d0a      	ldr	r5, [pc, #40]	; (8002fa8 <__libc_init_array+0x40>)
 8002f80:	4c0a      	ldr	r4, [pc, #40]	; (8002fac <__libc_init_array+0x44>)
 8002f82:	1b64      	subs	r4, r4, r5
 8002f84:	10a4      	asrs	r4, r4, #2
 8002f86:	42a6      	cmp	r6, r4
 8002f88:	d105      	bne.n	8002f96 <__libc_init_array+0x2e>
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f90:	4798      	blx	r3
 8002f92:	3601      	adds	r6, #1
 8002f94:	e7ee      	b.n	8002f74 <__libc_init_array+0xc>
 8002f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9a:	4798      	blx	r3
 8002f9c:	3601      	adds	r6, #1
 8002f9e:	e7f2      	b.n	8002f86 <__libc_init_array+0x1e>
 8002fa0:	08008830 	.word	0x08008830
 8002fa4:	08008830 	.word	0x08008830
 8002fa8:	08008830 	.word	0x08008830
 8002fac:	08008834 	.word	0x08008834

08002fb0 <memset>:
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4402      	add	r2, r0
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d100      	bne.n	8002fba <memset+0xa>
 8002fb8:	4770      	bx	lr
 8002fba:	f803 1b01 	strb.w	r1, [r3], #1
 8002fbe:	e7f9      	b.n	8002fb4 <memset+0x4>

08002fc0 <_init>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr

08002fcc <_fini>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr
